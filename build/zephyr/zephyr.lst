
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	200038c0 	.word	0x200038c0
   4:	0000b97d 	.word	0x0000b97d

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	000119f1 	.word	0x000119f1
   c:	0000b9d1 	.word	0x0000b9d1
	(void)memset(res + 3, 0, 13);
  10:	0000b9d1 	.word	0x0000b9d1
  14:	0000b9d1 	.word	0x0000b9d1
  18:	0000b9d1 	.word	0x0000b9d1
	...
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
  2c:	0000b6e5 	.word	0x0000b6e5
  30:	0000b9d1 	.word	0x0000b9d1

	return 0;
}
  34:	00000000 	.word	0x00000000
  38:	0000b691 	.word	0x0000b691
  3c:	000119dd 	.word	0x000119dd

00000040 <_irq_vector_table>:
  40:	0000b93d 00011f85 0000b93d 0000b93d     =.......=...=...
  50:	0000b93d 0000b93d 0000b93d 0000b93d     =...=...=...=...
  60:	00011f4d 0000b93d 0000b93d 00011f6b     M...=...=...k...
  70:	0000b93d 0000b93d 0000b93d 0000b93d     =...=...=...=...
  80:	0000b93d 0000b93d 0000b93d 0000b93d     =...=...=...=...
  90:	0000b93d 0000b93d 0000b93d 0000b93d     =...=...=...=...
  a0:	0000b93d 0000b93d 0000b93d 0000b93d     =...=...=...=...
  b0:	0000b93d 0000b93d 0000b93d 0000b93d     =...=...=...=...
  c0:	0000b93d 0000b93d 0000b93d 0000b93d     =...=...=...=...
  d0:	0000b93d 0000b93d 0000b93d              =...=...=...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     160:	f080 8116 	bcs.w	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     18e:	f080 8101 	bcs.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2c6:	d271      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     31e:	d247      	bcs.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     34a:	d22d      	bcs.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     368:	d016      	beq.n	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     36a:	b15e      	cbz	r6, 384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d2:	4615      	mov	r5, r2
     3d4:	4a0a      	ldr	r2, [pc, #40]	; (400 <CONFIG_BT_RX_STACK_SIZE>)
     3d6:	461c      	mov	r4, r3
     3d8:	6856      	ldr	r6, [r2, #4]
     3da:	b12e      	cbz	r6, 3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     3dc:	b001      	add	sp, #4
     3de:	462a      	mov	r2, r5
     3e0:	46b4      	mov	ip, r6
     3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3e6:	4760      	bx	ip
     3e8:	2000      	movs	r0, #0
     3ea:	f88d 0000 	strb.w	r0, [sp]
     3ee:	4668      	mov	r0, sp
     3f0:	f006 ff3e 	bl	7270 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f4:	f89d 0000 	ldrb.w	r0, [sp]
     3f8:	1a28      	subs	r0, r5, r0
     3fa:	7020      	strb	r0, [r4, #0]
     3fc:	2000      	movs	r0, #0
     3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     400:	20000000 	.word	0x20000000

00000404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     404:	4801      	ldr	r0, [pc, #4]	; (40c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     406:	7800      	ldrb	r0, [r0, #0]
     408:	4770      	bx	lr
     40a:	0000      	.short	0x0000
     40c:	20000008 	.word	0x20000008

00000410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     410:	4905      	ldr	r1, [pc, #20]	; (428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     412:	780a      	ldrb	r2, [r1, #0]
     414:	4290      	cmp	r0, r2
     416:	d301      	bcc.n	41c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     418:	2000      	movs	r0, #0
     41a:	4770      	bx	lr
     41c:	6849      	ldr	r1, [r1, #4]
     41e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     422:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     426:	4770      	bx	lr
     428:	20000008 	.word	0x20000008
     42c:	b570      	push	{r4, r5, r6, lr}
     42e:	4605      	mov	r5, r0
     430:	2a20      	cmp	r2, #32
     432:	d027      	beq.n	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
     434:	4819      	ldr	r0, [pc, #100]	; (49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>)
     436:	4c1a      	ldr	r4, [pc, #104]	; (4a0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2c>)
     438:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     43c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     444:	2920      	cmp	r1, #32
     446:	d022      	beq.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     448:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     44c:	7840      	ldrb	r0, [r0, #1]
     44e:	784c      	ldrb	r4, [r1, #1]
     450:	7048      	strb	r0, [r1, #1]
     452:	4620      	mov	r0, r4
     454:	4601      	mov	r1, r0
     456:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     45a:	4291      	cmp	r1, r2
     45c:	7005      	strb	r5, [r0, #0]
     45e:	7840      	ldrb	r0, [r0, #1]
     460:	d1f8      	bne.n	454 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     462:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     466:	2a20      	cmp	r2, #32
     468:	bf1a      	itte	ne
     46a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     46e:	7054      	strbne	r4, [r2, #1]
     470:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     474:	2220      	movs	r2, #32
     476:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     47a:	f88c 2001 	strb.w	r2, [ip, #1]
     47e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     482:	bd70      	pop	{r4, r5, r6, pc}
     484:	f240 2191 	movw	r1, #657	; 0x291
     488:	2070      	movs	r0, #112	; 0x70
     48a:	f003 f87f 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     48e:	f893 4020 	ldrb.w	r4, [r3, #32]
     492:	7840      	ldrb	r0, [r0, #1]
     494:	f883 0020 	strb.w	r0, [r3, #32]
     498:	e7db      	b.n	452 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     49a:	0000      	.short	0x0000
     49c:	2000082c 	.word	0x2000082c
     4a0:	200008ac 	.word	0x200008ac
     4a4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a8:	460c      	mov	r4, r1
     4aa:	8949      	ldrh	r1, [r1, #10]
     4ac:	b087      	sub	sp, #28
     4ae:	f501 61e1 	add.w	r1, r1, #1800	; 0x708
     4b2:	4615      	mov	r5, r2
     4b4:	4281      	cmp	r1, r0
     4b6:	f200 80da 	bhi.w	66e <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     4ba:	aa05      	add	r2, sp, #20
     4bc:	a902      	add	r1, sp, #8
     4be:	f002 f857 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     4c2:	9802      	ldr	r0, [sp, #8]
     4c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     4c6:	4428      	add	r0, r5
     4c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4cc:	9004      	str	r0, [sp, #16]
     4ce:	48a9      	ldr	r0, [pc, #676]	; (774 <CONFIG_BT_HCI_TX_STACK_SIZE+0x174>)
     4d0:	4ea9      	ldr	r6, [pc, #676]	; (778 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>)
     4d2:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4d6:	9003      	str	r0, [sp, #12]
     4d8:	f890 5020 	ldrb.w	r5, [r0, #32]
     4dc:	2020      	movs	r0, #32
     4de:	46e9      	mov	r9, sp
     4e0:	f10d 0804 	add.w	r8, sp, #4
     4e4:	f88d 0000 	strb.w	r0, [sp]
     4e8:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     4ec:	2d20      	cmp	r5, #32
     4ee:	bf18      	it	ne
     4f0:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     4f4:	d026      	beq.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     4f6:	bf00      	nop
     4f8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     4fc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     500:	6821      	ldr	r1, [r4, #0]
     502:	68c2      	ldr	r2, [r0, #12]
     504:	1a89      	subs	r1, r1, r2
     506:	0209      	lsls	r1, r1, #8
     508:	17ca      	asrs	r2, r1, #31
     50a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     50e:	3008      	adds	r0, #8
     510:	1209      	asrs	r1, r1, #8
     512:	d417      	bmi.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     514:	8961      	ldrh	r1, [r4, #10]
     516:	b171      	cbz	r1, 536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     518:	8941      	ldrh	r1, [r0, #10]
     51a:	b961      	cbnz	r1, 536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     51c:	f000 fdb4 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     520:	f002 f80a 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     524:	6821      	ldr	r1, [r4, #0]
     526:	1a08      	subs	r0, r1, r0
     528:	0200      	lsls	r0, r0, #8
     52a:	17c1      	asrs	r1, r0, #31
     52c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     530:	1200      	asrs	r0, r0, #8
     532:	2833      	cmp	r0, #51	; 0x33
     534:	db06      	blt.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     536:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     53a:	f889 5000 	strb.w	r5, [r9]
     53e:	7845      	ldrb	r5, [r0, #1]
     540:	2d20      	cmp	r5, #32
     542:	d1d9      	bne.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     544:	f899 0000 	ldrb.w	r0, [r9]
     548:	f888 0000 	strb.w	r0, [r8]
     54c:	46a1      	mov	r9, r4
     54e:	2d20      	cmp	r5, #32
     550:	bf1c      	itt	ne
     552:	488a      	ldrne	r0, [pc, #552]	; (77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>)
     554:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     558:	f000 8108 	beq.w	76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     55c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     560:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     564:	f8d9 1004 	ldr.w	r1, [r9, #4]
     568:	f8da 2008 	ldr.w	r2, [sl, #8]
     56c:	4648      	mov	r0, r9
     56e:	1a51      	subs	r1, r2, r1
     570:	0209      	lsls	r1, r1, #8
     572:	17ca      	asrs	r2, r1, #31
     574:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     578:	f10a 0708 	add.w	r7, sl, #8
     57c:	1209      	asrs	r1, r1, #8
     57e:	d415      	bmi.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     580:	8979      	ldrh	r1, [r7, #10]
     582:	2900      	cmp	r1, #0
     584:	f000 80f2 	beq.w	76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     588:	8941      	ldrh	r1, [r0, #10]
     58a:	2900      	cmp	r1, #0
     58c:	f040 80ee 	bne.w	76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     590:	f000 fd7a 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     594:	f001 ffd0 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     598:	6839      	ldr	r1, [r7, #0]
     59a:	1a08      	subs	r0, r1, r0
     59c:	0200      	lsls	r0, r0, #8
     59e:	17c1      	asrs	r1, r0, #31
     5a0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5a4:	1200      	asrs	r0, r0, #8
     5a6:	2833      	cmp	r0, #51	; 0x33
     5a8:	f280 80e0 	bge.w	76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     5ac:	f888 5000 	strb.w	r5, [r8]
     5b0:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5b4:	f899 000c 	ldrb.w	r0, [r9, #12]
     5b8:	4281      	cmp	r1, r0
     5ba:	d906      	bls.n	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
     5bc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5c0:	7845      	ldrb	r5, [r0, #1]
     5c2:	2d20      	cmp	r5, #32
     5c4:	d1ca      	bne.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
     5c6:	f000 b8d1 	b.w	76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     5ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5d2:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5d6:	8a68      	ldrh	r0, [r5, #18]
     5d8:	68ef      	ldr	r7, [r5, #12]
     5da:	2800      	cmp	r0, #0
     5dc:	d13f      	bne.n	65e <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     5de:	8960      	ldrh	r0, [r4, #10]
     5e0:	b3e8      	cbz	r0, 65e <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     5e2:	68a8      	ldr	r0, [r5, #8]
     5e4:	f006 fe64 	bl	72b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     5e8:	8a69      	ldrh	r1, [r5, #18]
     5ea:	7c2a      	ldrb	r2, [r5, #16]
     5ec:	4411      	add	r1, r2
     5ee:	1c49      	adds	r1, r1, #1
     5f0:	4a63      	ldr	r2, [pc, #396]	; (780 <CONFIG_BT_HCI_TX_STACK_SIZE+0x180>)
     5f2:	1843      	adds	r3, r0, r1
     5f4:	4290      	cmp	r0, r2
     5f6:	d904      	bls.n	602 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     5f8:	f240 6116 	movw	r1, #1558	; 0x616
     5fc:	2070      	movs	r0, #112	; 0x70
     5fe:	f002 ffc5 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     602:	4860      	ldr	r0, [pc, #384]	; (784 <CONFIG_BT_HCI_TX_STACK_SIZE+0x184>)
     604:	4281      	cmp	r1, r0
     606:	dd04      	ble.n	612 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     608:	f240 6117 	movw	r1, #1559	; 0x617
     60c:	2070      	movs	r0, #112	; 0x70
     60e:	f002 ffbd 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     612:	485d      	ldr	r0, [pc, #372]	; (788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>)
     614:	4281      	cmp	r1, r0
     616:	da04      	bge.n	622 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     618:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     61c:	2070      	movs	r0, #112	; 0x70
     61e:	f002 ffb5 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     622:	485a      	ldr	r0, [pc, #360]	; (78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>)
     624:	4298      	cmp	r0, r3
     626:	bfdc      	itt	le
     628:	f503 03f7 	addle.w	r3, r3, #8093696	; 0x7b8000
     62c:	f1a3 53f8 	suble.w	r3, r3, #520093696	; 0x1f000000
     630:	dd05      	ble.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     632:	2b00      	cmp	r3, #0
     634:	bfbc      	itt	lt
     636:	f5a3 03f7 	sublt.w	r3, r3, #8093696	; 0x7b8000
     63a:	f103 53f8 	addlt.w	r3, r3, #520093696	; 0x1f000000
     63e:	4618      	mov	r0, r3
     640:	f001 ff7a 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     648:	1a39      	subs	r1, r7, r0
     64a:	0209      	lsls	r1, r1, #8
     64c:	17ca      	asrs	r2, r1, #31
     64e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     652:	1209      	asrs	r1, r1, #8
     654:	2933      	cmp	r1, #51	; 0x33
     656:	bfbc      	itt	lt
     658:	3033      	addlt	r0, #51	; 0x33
     65a:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     65e:	9804      	ldr	r0, [sp, #16]
     660:	1a38      	subs	r0, r7, r0
     662:	0200      	lsls	r0, r0, #8
     664:	17c1      	asrs	r1, r0, #31
     666:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     66a:	1200      	asrs	r0, r0, #8
     66c:	d403      	bmi.n	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     66e:	b00b      	add	sp, #44	; 0x2c
     670:	2000      	movs	r0, #0
     672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     676:	e9d4 1000 	ldrd	r1, r0, [r4]
     67a:	1a40      	subs	r0, r0, r1
     67c:	4438      	add	r0, r7
     67e:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     686:	e9c4 1000 	strd	r1, r0, [r4]
     68a:	9803      	ldr	r0, [sp, #12]
     68c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
     690:	466f      	mov	r7, sp
     692:	f890 5020 	ldrb.w	r5, [r0, #32]
     696:	2020      	movs	r0, #32
     698:	f10d 0a04 	add.w	sl, sp, #4
     69c:	f88d 0000 	strb.w	r0, [sp]
     6a0:	2d20      	cmp	r5, #32
     6a2:	bf1c      	itt	ne
     6a4:	4835      	ldrne	r0, [pc, #212]	; (77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>)
     6a6:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6aa:	d024      	beq.n	6f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf6>
     6ac:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6b0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6b4:	6822      	ldr	r2, [r4, #0]
     6b6:	68c1      	ldr	r1, [r0, #12]
     6b8:	1a51      	subs	r1, r2, r1
     6ba:	0209      	lsls	r1, r1, #8
     6bc:	17ca      	asrs	r2, r1, #31
     6be:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6c2:	3008      	adds	r0, #8
     6c4:	1209      	asrs	r1, r1, #8
     6c6:	d416      	bmi.n	6f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf6>
     6c8:	8961      	ldrh	r1, [r4, #10]
     6ca:	b171      	cbz	r1, 6ea <CONFIG_BT_HCI_TX_STACK_SIZE+0xea>
     6cc:	8941      	ldrh	r1, [r0, #10]
     6ce:	b961      	cbnz	r1, 6ea <CONFIG_BT_HCI_TX_STACK_SIZE+0xea>
     6d0:	f000 fcda 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     6d4:	f001 ff30 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6d8:	6821      	ldr	r1, [r4, #0]
     6da:	1a08      	subs	r0, r1, r0
     6dc:	0200      	lsls	r0, r0, #8
     6de:	17c1      	asrs	r1, r0, #31
     6e0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6e4:	1200      	asrs	r0, r0, #8
     6e6:	2833      	cmp	r0, #51	; 0x33
     6e8:	db05      	blt.n	6f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xf6>
     6ea:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     6ee:	703d      	strb	r5, [r7, #0]
     6f0:	7845      	ldrb	r5, [r0, #1]
     6f2:	2d20      	cmp	r5, #32
     6f4:	d1da      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6f6:	7838      	ldrb	r0, [r7, #0]
     6f8:	f88a 0000 	strb.w	r0, [sl]
     6fc:	4627      	mov	r7, r4
     6fe:	2d20      	cmp	r5, #32
     700:	bf1c      	itt	ne
     702:	481e      	ldrne	r0, [pc, #120]	; (77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>)
     704:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     708:	d030      	beq.n	76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     70a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     70e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     712:	6879      	ldr	r1, [r7, #4]
     714:	f8d9 2008 	ldr.w	r2, [r9, #8]
     718:	4638      	mov	r0, r7
     71a:	1a51      	subs	r1, r2, r1
     71c:	0209      	lsls	r1, r1, #8
     71e:	17ca      	asrs	r2, r1, #31
     720:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     724:	f109 0808 	add.w	r8, r9, #8
     728:	1209      	asrs	r1, r1, #8
     72a:	d412      	bmi.n	752 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     72c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     730:	b1e1      	cbz	r1, 76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     732:	8941      	ldrh	r1, [r0, #10]
     734:	b9d1      	cbnz	r1, 76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     736:	f000 fca7 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     73a:	f001 fefd 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     73e:	f8d8 1000 	ldr.w	r1, [r8]
     742:	1a08      	subs	r0, r1, r0
     744:	0200      	lsls	r0, r0, #8
     746:	17c1      	asrs	r1, r0, #31
     748:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     74c:	1200      	asrs	r0, r0, #8
     74e:	2833      	cmp	r0, #51	; 0x33
     750:	da0c      	bge.n	76c <CONFIG_BT_HCI_TX_STACK_SIZE+0x16c>
     752:	f88a 5000 	strb.w	r5, [sl]
     756:	f899 0014 	ldrb.w	r0, [r9, #20]
     75a:	7b39      	ldrb	r1, [r7, #12]
     75c:	4288      	cmp	r0, r1
     75e:	f67f af34 	bls.w	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
     762:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     766:	7845      	ldrb	r5, [r0, #1]
     768:	2d20      	cmp	r5, #32
     76a:	d1ce      	bne.n	70a <CONFIG_BT_HCI_TX_STACK_SIZE+0x10a>
     76c:	b00b      	add	sp, #44	; 0x2c
     76e:	2001      	movs	r0, #1
     770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     774:	200008ac 	.word	0x200008ac
     778:	2000052c 	.word	0x2000052c
     77c:	2000082c 	.word	0x2000082c
     780:	1e847fff 	.word	0x1e847fff
     784:	07a12000 	.word	0x07a12000
     788:	f85ee000 	.word	0xf85ee000
     78c:	1e848000 	.word	0x1e848000
     790:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     794:	4604      	mov	r4, r0
     796:	483c      	ldr	r0, [pc, #240]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     798:	460e      	mov	r6, r1
     79a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     79e:	4f3b      	ldr	r7, [pc, #236]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     7a0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7a4:	2020      	movs	r0, #32
     7a6:	4698      	mov	r8, r3
     7a8:	4692      	mov	sl, r2
     7aa:	7010      	strb	r0, [r2, #0]
     7ac:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7b0:	2d20      	cmp	r5, #32
     7b2:	bf18      	it	ne
     7b4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7b8:	d028      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     7ba:	bf00      	nop
     7bc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7c0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7c4:	f100 0108 	add.w	r1, r0, #8
     7c8:	68c0      	ldr	r0, [r0, #12]
     7ca:	6822      	ldr	r2, [r4, #0]
     7cc:	1a10      	subs	r0, r2, r0
     7ce:	0200      	lsls	r0, r0, #8
     7d0:	17c2      	asrs	r2, r0, #31
     7d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7d6:	1200      	asrs	r0, r0, #8
     7d8:	d418      	bmi.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     7da:	8960      	ldrh	r0, [r4, #10]
     7dc:	b178      	cbz	r0, 7fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x1fe>
     7de:	8948      	ldrh	r0, [r1, #10]
     7e0:	b968      	cbnz	r0, 7fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x1fe>
     7e2:	4608      	mov	r0, r1
     7e4:	f000 fc50 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     7e8:	f001 fea6 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7ec:	6821      	ldr	r1, [r4, #0]
     7ee:	1a08      	subs	r0, r1, r0
     7f0:	0200      	lsls	r0, r0, #8
     7f2:	17c1      	asrs	r1, r0, #31
     7f4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     7f8:	1200      	asrs	r0, r0, #8
     7fa:	2833      	cmp	r0, #51	; 0x33
     7fc:	db06      	blt.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     7fe:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     802:	f88a 5000 	strb.w	r5, [sl]
     806:	7845      	ldrb	r5, [r0, #1]
     808:	2d20      	cmp	r5, #32
     80a:	d1d7      	bne.n	7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>
     80c:	f89a 0000 	ldrb.w	r0, [sl]
     810:	f888 0000 	strb.w	r0, [r8]
     814:	2d20      	cmp	r5, #32
     816:	bf18      	it	ne
     818:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     81c:	d030      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     81e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     822:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     826:	6861      	ldr	r1, [r4, #4]
     828:	f8d9 2008 	ldr.w	r2, [r9, #8]
     82c:	4620      	mov	r0, r4
     82e:	1a51      	subs	r1, r2, r1
     830:	0209      	lsls	r1, r1, #8
     832:	17ca      	asrs	r2, r1, #31
     834:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     838:	f109 0608 	add.w	r6, r9, #8
     83c:	1209      	asrs	r1, r1, #8
     83e:	d410      	bmi.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
     840:	8971      	ldrh	r1, [r6, #10]
     842:	b1e9      	cbz	r1, 880 <CONFIG_ISR_STACK_SIZE+0x80>
     844:	8941      	ldrh	r1, [r0, #10]
     846:	b9d9      	cbnz	r1, 880 <CONFIG_ISR_STACK_SIZE+0x80>
     848:	f000 fc1e 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     84c:	f001 fe74 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     850:	6831      	ldr	r1, [r6, #0]
     852:	1a08      	subs	r0, r1, r0
     854:	0200      	lsls	r0, r0, #8
     856:	17c1      	asrs	r1, r0, #31
     858:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     85c:	1200      	asrs	r0, r0, #8
     85e:	2833      	cmp	r0, #51	; 0x33
     860:	da0e      	bge.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     862:	f888 5000 	strb.w	r5, [r8]
     866:	f899 0014 	ldrb.w	r0, [r9, #20]
     86a:	7b21      	ldrb	r1, [r4, #12]
     86c:	4288      	cmp	r0, r1
     86e:	d802      	bhi.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     870:	2000      	movs	r0, #0
     872:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     876:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     87a:	7845      	ldrb	r5, [r0, #1]
     87c:	2d20      	cmp	r5, #32
     87e:	d1ce      	bne.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
     880:	2001      	movs	r0, #1
     882:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     886:	0000      	.short	0x0000
     888:	200008ac 	.word	0x200008ac
     88c:	2000052c 	.word	0x2000052c
     890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     894:	f04f 0800 	mov.w	r8, #0
     898:	b098      	sub	sp, #96	; 0x60
     89a:	4616      	mov	r6, r2
     89c:	460d      	mov	r5, r1
     89e:	46c3      	mov	fp, r8
     8a0:	f002 f8c2 	bl	2a28 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8a4:	4604      	mov	r4, r0
     8a6:	2d01      	cmp	r5, #1
     8a8:	bf18      	it	ne
     8aa:	2d02      	cmpne	r5, #2
     8ac:	d005      	beq.n	8ba <CONFIG_ISR_STACK_SIZE+0xba>
     8ae:	f640 1193 	movw	r1, #2451	; 0x993
     8b2:	f04f 0070 	mov.w	r0, #112	; 0x70
     8b6:	f002 fe69 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8ba:	49fd      	ldr	r1, [pc, #1012]	; (cb0 <CONFIG_ISR_STACK_SIZE+0x4b0>)
     8bc:	2001      	movs	r0, #1
     8be:	6008      	str	r0, [r1, #0]
     8c0:	49fc      	ldr	r1, [pc, #1008]	; (cb4 <CONFIG_ISR_STACK_SIZE+0x4b4>)
     8c2:	6889      	ldr	r1, [r1, #8]
     8c4:	6008      	str	r0, [r1, #0]
     8c6:	2000      	movs	r0, #0
     8c8:	900c      	str	r0, [sp, #48]	; 0x30
     8ca:	1e40      	subs	r0, r0, #1
     8cc:	900e      	str	r0, [sp, #56]	; 0x38
     8ce:	49fa      	ldr	r1, [pc, #1000]	; (cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>)
     8d0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     8d4:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     8d8:	3308      	adds	r3, #8
     8da:	af0f      	add	r7, sp, #60	; 0x3c
     8dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     8de:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     8e2:	a80f      	add	r0, sp, #60	; 0x3c
     8e4:	f000 fbd0 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     8e8:	900d      	str	r0, [sp, #52]	; 0x34
     8ea:	48f3      	ldr	r0, [pc, #972]	; (cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>)
     8ec:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     8f0:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     8f4:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     8f8:	f1b9 0f00 	cmp.w	r9, #0
     8fc:	bf14      	ite	ne
     8fe:	f04f 0a01 	movne.w	sl, #1
     902:	f04f 0a00 	moveq.w	sl, #0
     906:	980f      	ldr	r0, [sp, #60]	; 0x3c
     908:	9014      	str	r0, [sp, #80]	; 0x50
     90a:	f1ba 0f00 	cmp.w	sl, #0
     90e:	d009      	beq.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
     910:	48ea      	ldr	r0, [pc, #936]	; (cbc <CONFIG_ISR_STACK_SIZE+0x4bc>)
     912:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     916:	b928      	cbnz	r0, 924 <CONFIG_ISR_STACK_SIZE+0x124>
     918:	f002 fdd4 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     91c:	2800      	cmp	r0, #0
     91e:	bf08      	it	eq
     920:	2701      	moveq	r7, #1
     922:	d000      	beq.n	926 <CONFIG_ISR_STACK_SIZE+0x126>
     924:	2700      	movs	r7, #0
     926:	48e6      	ldr	r0, [pc, #920]	; (cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>)
     928:	2200      	movs	r2, #0
     92a:	9215      	str	r2, [sp, #84]	; 0x54
     92c:	7800      	ldrb	r0, [r0, #0]
     92e:	4616      	mov	r6, r2
     930:	2801      	cmp	r0, #1
     932:	bf18      	it	ne
     934:	2803      	cmpne	r0, #3
     936:	d140      	bne.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     938:	48e1      	ldr	r0, [pc, #900]	; (cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>)
     93a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     93e:	eba8 0009 	sub.w	r0, r8, r9
     942:	9015      	str	r0, [sp, #84]	; 0x54
     944:	45c8      	cmp	r8, r9
     946:	d938      	bls.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     94a:	ea6f 0108 	mvn.w	r1, r8
     94e:	f8df e374 	ldr.w	lr, [pc, #884]	; cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>
     952:	1858      	adds	r0, r3, r1
     954:	f10d 0c0c 	add.w	ip, sp, #12
     958:	aa17      	add	r2, sp, #92	; 0x5c
     95a:	4573      	cmp	r3, lr
     95c:	d904      	bls.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
     95e:	f240 6116 	movw	r1, #1558	; 0x616
     962:	2070      	movs	r0, #112	; 0x70
     964:	f002 fe12 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     968:	4bd7      	ldr	r3, [pc, #860]	; (cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>)
     96a:	4299      	cmp	r1, r3
     96c:	dd04      	ble.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
     96e:	f240 6117 	movw	r1, #1559	; 0x617
     972:	2070      	movs	r0, #112	; 0x70
     974:	f002 fe0a 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     978:	4bd4      	ldr	r3, [pc, #848]	; (ccc <CONFIG_ISR_STACK_SIZE+0x4cc>)
     97a:	4299      	cmp	r1, r3
     97c:	da04      	bge.n	988 <CONFIG_ISR_STACK_SIZE+0x188>
     97e:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     982:	2070      	movs	r0, #112	; 0x70
     984:	f002 fe02 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     988:	49d1      	ldr	r1, [pc, #836]	; (cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>)
     98a:	4281      	cmp	r1, r0
     98c:	bfdc      	itt	le
     98e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     992:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     996:	dd05      	ble.n	9a4 <CONFIG_ISR_STACK_SIZE+0x1a4>
     998:	2800      	cmp	r0, #0
     99a:	bfbc      	itt	lt
     99c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9a0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9a4:	4661      	mov	r1, ip
     9a6:	f001 fde3 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9aa:	9803      	ldr	r0, [sp, #12]
     9ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9b2:	9003      	str	r0, [sp, #12]
     9b4:	1a08      	subs	r0, r1, r0
     9b6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9ba:	2f00      	cmp	r7, #0
     9bc:	bf18      	it	ne
     9be:	2632      	movne	r6, #50	; 0x32
     9c0:	d104      	bne.n	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
     9c2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9c6:	2800      	cmp	r0, #0
     9c8:	bf18      	it	ne
     9ca:	2602      	movne	r6, #2
     9cc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     9d0:	d008      	beq.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
     9d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
     9d4:	1b00      	subs	r0, r0, r4
     9d6:	0200      	lsls	r0, r0, #8
     9d8:	17c1      	asrs	r1, r0, #31
     9da:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     9de:	1200      	asrs	r0, r0, #8
     9e0:	2801      	cmp	r0, #1
     9e2:	da02      	bge.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
     9e4:	2104      	movs	r1, #4
     9e6:	9818      	ldr	r0, [sp, #96]	; 0x60
     9e8:	e00b      	b.n	a02 <CONFIG_ISR_STACK_SIZE+0x202>
     9ea:	b147      	cbz	r7, 9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
     9ec:	48b3      	ldr	r0, [pc, #716]	; (cbc <CONFIG_ISR_STACK_SIZE+0x4bc>)
     9ee:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     9f2:	b120      	cbz	r0, 9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
     9f4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9f8:	1c06      	adds	r6, r0, #0
     9fa:	bf18      	it	ne
     9fc:	2602      	movne	r6, #2
     9fe:	4620      	mov	r0, r4
     a00:	2101      	movs	r1, #1
     a02:	f1b9 0f00 	cmp.w	r9, #0
     a06:	d002      	beq.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a0a:	2b1e      	cmp	r3, #30
     a0c:	da02      	bge.n	a14 <CONFIG_ISR_STACK_SIZE+0x214>
     a0e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a12:	b113      	cbz	r3, a1a <CONFIG_ISR_STACK_SIZE+0x21a>
     a14:	f04f 0b01 	mov.w	fp, #1
     a18:	1e49      	subs	r1, r1, #1
     a1a:	198b      	adds	r3, r1, r6
     a1c:	49a8      	ldr	r1, [pc, #672]	; (cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>)
     a1e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a22:	7809      	ldrb	r1, [r1, #0]
     a24:	9115      	str	r1, [sp, #84]	; 0x54
     a26:	990f      	ldr	r1, [sp, #60]	; 0x3c
     a28:	1a89      	subs	r1, r1, r2
     a2a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     a2e:	ebac 0100 	sub.w	r1, ip, r0
     a32:	0209      	lsls	r1, r1, #8
     a34:	17ce      	asrs	r6, r1, #31
     a36:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     a3a:	1209      	asrs	r1, r1, #8
     a3c:	4299      	cmp	r1, r3
     a3e:	db18      	blt.n	a72 <CONFIG_ISR_STACK_SIZE+0x272>
     a40:	2a00      	cmp	r2, #0
     a42:	bf18      	it	ne
     a44:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a48:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a4a:	9705      	str	r7, [sp, #20]
     a4c:	2700      	movs	r7, #0
     a4e:	f001 fee5 	bl	281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a52:	1a30      	subs	r0, r6, r0
     a54:	0200      	lsls	r0, r0, #8
     a56:	17c1      	asrs	r1, r0, #31
     a58:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a5c:	1200      	asrs	r0, r0, #8
     a5e:	283e      	cmp	r0, #62	; 0x3e
     a60:	da3f      	bge.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
     a62:	2d01      	cmp	r5, #1
     a64:	d020      	beq.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
     a66:	1e70      	subs	r0, r6, #1
     a68:	9905      	ldr	r1, [sp, #20]
     a6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a6e:	b319      	cbz	r1, ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
     a70:	e02d      	b.n	ace <CONFIG_ISR_STACK_SIZE+0x2ce>
     a72:	b182      	cbz	r2, a96 <CONFIG_ISR_STACK_SIZE+0x296>
     a74:	f1be 0f00 	cmp.w	lr, #0
     a78:	bf04      	itt	eq
     a7a:	9915      	ldreq	r1, [sp, #84]	; 0x54
     a7c:	2903      	cmpeq	r1, #3
     a7e:	d00a      	beq.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
     a80:	b927      	cbnz	r7, a8c <CONFIG_ISR_STACK_SIZE+0x28c>
     a82:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     a86:	2900      	cmp	r1, #0
     a88:	bf18      	it	ne
     a8a:	1e9b      	subne	r3, r3, #2
     a8c:	2200      	movs	r2, #0
     a8e:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     a92:	4690      	mov	r8, r2
     a94:	e7c7      	b.n	a26 <CONFIG_ISR_STACK_SIZE+0x226>
     a96:	bb07      	cbnz	r7, ada <CONFIG_ISR_STACK_SIZE+0x2da>
     a98:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     a9c:	b1e9      	cbz	r1, ada <CONFIG_ISR_STACK_SIZE+0x2da>
     a9e:	2100      	movs	r1, #0
     aa0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     aa4:	1e9b      	subs	r3, r3, #2
     aa6:	e7be      	b.n	a26 <CONFIG_ISR_STACK_SIZE+0x226>
     aa8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     aac:	d120      	bne.n	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
     aae:	f640 110c 	movw	r1, #2316	; 0x90c
     ab2:	2070      	movs	r0, #112	; 0x70
     ab4:	f002 fd6a 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ab8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     abc:	d007      	beq.n	ace <CONFIG_ISR_STACK_SIZE+0x2ce>
     abe:	1a21      	subs	r1, r4, r0
     ac0:	0209      	lsls	r1, r1, #8
     ac2:	17ca      	asrs	r2, r1, #31
     ac4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     ac8:	1209      	asrs	r1, r1, #8
     aca:	2904      	cmp	r1, #4
     acc:	dd03      	ble.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
     ace:	4604      	mov	r4, r0
     ad0:	f001 feaa 	bl	2828 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     ad4:	e00c      	b.n	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
     ad6:	2900      	cmp	r1, #0
     ad8:	dd0a      	ble.n	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
     ada:	b01b      	add	sp, #108	; 0x6c
     adc:	2000      	movs	r0, #0
     ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ae2:	1e70      	subs	r0, r6, #1
     ae4:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     ae8:	4620      	mov	r0, r4
     aea:	f001 fe9d 	bl	2828 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     aee:	4657      	mov	r7, sl
     af0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af4:	d028      	beq.n	b48 <CONFIG_ISR_STACK_SIZE+0x348>
     af6:	980f      	ldr	r0, [sp, #60]	; 0x3c
     af8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     afc:	1b00      	subs	r0, r0, r4
     afe:	f08b 0301 	eor.w	r3, fp, #1
     b02:	4a74      	ldr	r2, [pc, #464]	; (cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>)
     b04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b08:	ebac 0c04 	sub.w	ip, ip, r4
     b0c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     b10:	4283      	cmp	r3, r0
     b12:	bf98      	it	ls
     b14:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b18:	d2df      	bcs.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
     b1a:	4562      	cmp	r2, ip
     b1c:	d3dd      	bcc.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
     b1e:	4620      	mov	r0, r4
     b20:	f006 fbc6 	bl	72b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b24:	4967      	ldr	r1, [pc, #412]	; (cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>)
     b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b28:	1c4b      	adds	r3, r1, #1
     b2a:	1a16      	subs	r6, r2, r0
     b2c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b30:	bf24      	itt	cs
     b32:	eba0 0c02 	subcs.w	ip, r0, r2
     b36:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b3a:	d310      	bcc.n	b5e <CONFIG_ISR_STACK_SIZE+0x35e>
     b3c:	42b1      	cmp	r1, r6
     b3e:	d208      	bcs.n	b52 <CONFIG_ISR_STACK_SIZE+0x352>
     b40:	1a08      	subs	r0, r1, r0
     b42:	4410      	add	r0, r2
     b44:	1c46      	adds	r6, r0, #1
     b46:	e00a      	b.n	b5e <CONFIG_ISR_STACK_SIZE+0x35e>
     b48:	f640 212b 	movw	r1, #2603	; 0xa2b
     b4c:	2070      	movs	r0, #112	; 0x70
     b4e:	f002 fd1d 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b52:	4561      	cmp	r1, ip
     b54:	d22c      	bcs.n	bb0 <CONFIG_ISR_STACK_SIZE+0x3b0>
     b56:	1a89      	subs	r1, r1, r2
     b58:	4408      	add	r0, r1
     b5a:	1c40      	adds	r0, r0, #1
     b5c:	4246      	negs	r6, r0
     b5e:	4857      	ldr	r0, [pc, #348]	; (cbc <CONFIG_ISR_STACK_SIZE+0x4bc>)
     b60:	7f80      	ldrb	r0, [r0, #30]
     b62:	b350      	cbz	r0, bba <CONFIG_ISR_STACK_SIZE+0x3ba>
     b64:	4628      	mov	r0, r5
     b66:	4645      	mov	r5, r8
     b68:	f04f 0b00 	mov.w	fp, #0
     b6c:	46d8      	mov	r8, fp
     b6e:	2801      	cmp	r0, #1
     b70:	d005      	beq.n	b7e <CONFIG_ISR_STACK_SIZE+0x37e>
     b72:	2002      	movs	r0, #2
     b74:	f002 f8a0 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b78:	2001      	movs	r0, #1
     b7a:	f002 f89d 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b7e:	45a9      	cmp	r9, r5
     b80:	d22c      	bcs.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
     b82:	eba6 0105 	sub.w	r1, r6, r5
     b86:	f04f 0301 	mov.w	r3, #1
     b8a:	f04f 0203 	mov.w	r2, #3
     b8e:	f04f 0002 	mov.w	r0, #2
     b92:	f001 ffc9 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     b96:	2800      	cmp	r0, #0
     b98:	bf08      	it	eq
     b9a:	f04f 0801 	moveq.w	r8, #1
     b9e:	f1b9 0f00 	cmp.w	r9, #0
     ba2:	d035      	beq.n	c10 <CONFIG_ISR_STACK_SIZE+0x410>
     ba4:	2301      	movs	r3, #1
     ba6:	eba6 0109 	sub.w	r1, r6, r9
     baa:	2203      	movs	r2, #3
     bac:	4618      	mov	r0, r3
     bae:	e023      	b.n	bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
     bb0:	f640 310b 	movw	r1, #2827	; 0xb0b
     bb4:	2070      	movs	r0, #112	; 0x70
     bb6:	f002 fce9 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bba:	45c1      	cmp	r9, r8
     bbc:	bf34      	ite	cc
     bbe:	4640      	movcc	r0, r8
     bc0:	4648      	movcs	r0, r9
     bc2:	f1bb 0f00 	cmp.w	fp, #0
     bc6:	bf14      	ite	ne
     bc8:	2100      	movne	r1, #0
     bca:	211e      	moveq	r1, #30
     bcc:	4408      	add	r0, r1
     bce:	42b0      	cmp	r0, r6
     bd0:	dbc8      	blt.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
     bd2:	f640 213e 	movw	r1, #2622	; 0xa3e
     bd6:	2070      	movs	r0, #112	; 0x70
     bd8:	f002 fcd8 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bdc:	d910      	bls.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
     bde:	2301      	movs	r3, #1
     be0:	eba6 0109 	sub.w	r1, r6, r9
     be4:	2203      	movs	r2, #3
     be6:	4618      	mov	r0, r3
     be8:	f001 ff9e 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bec:	b328      	cbz	r0, c3a <CONFIG_ISR_STACK_SIZE+0x43a>
     bee:	b17d      	cbz	r5, c10 <CONFIG_ISR_STACK_SIZE+0x410>
     bf0:	1b71      	subs	r1, r6, r5
     bf2:	2301      	movs	r3, #1
     bf4:	2203      	movs	r2, #3
     bf6:	2002      	movs	r0, #2
     bf8:	f001 ff96 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bfc:	b1e8      	cbz	r0, c3a <CONFIG_ISR_STACK_SIZE+0x43a>
     bfe:	e007      	b.n	c10 <CONFIG_ISR_STACK_SIZE+0x410>
     c00:	ea55 0009 	orrs.w	r0, r5, r9
     c04:	d004      	beq.n	c10 <CONFIG_ISR_STACK_SIZE+0x410>
     c06:	f640 1176 	movw	r1, #2422	; 0x976
     c0a:	2070      	movs	r0, #112	; 0x70
     c0c:	f002 fcbe 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c10:	2301      	movs	r3, #1
     c12:	2203      	movs	r2, #3
     c14:	4631      	mov	r1, r6
     c16:	2000      	movs	r0, #0
     c18:	f001 ff86 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c1c:	b168      	cbz	r0, c3a <CONFIG_ISR_STACK_SIZE+0x43a>
     c1e:	2501      	movs	r5, #1
     c20:	f1b8 0f00 	cmp.w	r8, #0
     c24:	d003      	beq.n	c2e <CONFIG_ISR_STACK_SIZE+0x42e>
     c26:	9814      	ldr	r0, [sp, #80]	; 0x50
     c28:	900f      	str	r0, [sp, #60]	; 0x3c
     c2a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c2e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
     c32:	f1ba 0f00 	cmp.w	sl, #0
     c36:	d10e      	bne.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
     c38:	e009      	b.n	c4e <CONFIG_ISR_STACK_SIZE+0x44e>
     c3a:	2002      	movs	r0, #2
     c3c:	f002 f83c 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c40:	2001      	movs	r0, #1
     c42:	f002 f839 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c46:	b01b      	add	sp, #108	; 0x6c
     c48:	2000      	movs	r0, #0
     c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c4e:	481b      	ldr	r0, [pc, #108]	; (cbc <CONFIG_ISR_STACK_SIZE+0x4bc>)
     c50:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c54:	b100      	cbz	r0, c58 <CONFIG_ISR_STACK_SIZE+0x458>
     c56:	b34f      	cbz	r7, cac <CONFIG_ISR_STACK_SIZE+0x4ac>
     c58:	f8df a060 	ldr.w	sl, [pc, #96]	; cbc <CONFIG_ISR_STACK_SIZE+0x4bc>
     c5c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c60:	b118      	cbz	r0, c6a <CONFIG_ISR_STACK_SIZE+0x46a>
     c62:	f002 faf7 	bl	3254 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c66:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c6a:	b307      	cbz	r7, cae <CONFIG_ISR_STACK_SIZE+0x4ae>
     c6c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c70:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c78:	f8c8 0000 	str.w	r0, [r8]
     c7c:	2300      	movs	r3, #0
     c7e:	2203      	movs	r2, #3
     c80:	2005      	movs	r0, #5
     c82:	f001 ff51 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c86:	b368      	cbz	r0, ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
     c88:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     c8c:	2005      	movs	r0, #5
     c8e:	f002 f8d9 	bl	2e44 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     c92:	4912      	ldr	r1, [pc, #72]	; (cdc <CONFIG_ISR_STACK_SIZE+0x4dc>)
     c94:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     c98:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     c9c:	4910      	ldr	r1, [pc, #64]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     c9e:	12e0      	asrs	r0, r4, #11
     ca0:	6008      	str	r0, [r1, #0]
     ca2:	4c06      	ldr	r4, [pc, #24]	; (cbc <CONFIG_ISR_STACK_SIZE+0x4bc>)
     ca4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ca8:	b3f0      	cbz	r0, d28 <CONFIG_ISR_STACK_SIZE+0x528>
     caa:	e05b      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     cac:	e01b      	b.n	ce6 <CONFIG_ISR_STACK_SIZE+0x4e6>
     cae:	e01f      	b.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     cb0:	40000508 	.word	0x40000508
     cb4:	20000010 	.word	0x20000010
     cb8:	2000052c 	.word	0x2000052c
     cbc:	200008ac 	.word	0x200008ac
     cc0:	20000012 	.word	0x20000012
     cc4:	1e847fff 	.word	0x1e847fff
     cc8:	07a12000 	.word	0x07a12000
     ccc:	f85ee000 	.word	0xf85ee000
     cd0:	1e848000 	.word	0x1e848000
     cd4:	003fffff 	.word	0x003fffff
     cd8:	4001f508 	.word	0x4001f508
     cdc:	4001f098 	.word	0x4001f098
     ce0:	4001f504 	.word	0x4001f504
     ce4:	e035      	b.n	d52 <CONFIG_ISR_STACK_SIZE+0x552>
     ce6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; da0 <CONFIG_ISR_STACK_SIZE+0x5a0>
     cea:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     cee:	b358      	cbz	r0, d48 <CONFIG_ISR_STACK_SIZE+0x548>
     cf0:	4c2b      	ldr	r4, [pc, #172]	; (da0 <CONFIG_ISR_STACK_SIZE+0x5a0>)
     cf2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     cf6:	b150      	cbz	r0, d0e <CONFIG_ISR_STACK_SIZE+0x50e>
     cf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     cfc:	f8c8 0000 	str.w	r0, [r8]
     d00:	2005      	movs	r0, #5
     d02:	f001 ffd9 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d06:	f002 fb0d 	bl	3324 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d0a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d0e:	ac0c      	add	r4, sp, #48	; 0x30
     d10:	4824      	ldr	r0, [pc, #144]	; (da4 <CONFIG_ISR_STACK_SIZE+0x5a4>)
     d12:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d16:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d1a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d1e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d22:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d26:	e000      	b.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     d28:	e018      	b.n	d5c <CONFIG_ISR_STACK_SIZE+0x55c>
     d2a:	ac10      	add	r4, sp, #64	; 0x40
     d2c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d30:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     d34:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     d38:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     d3c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     d40:	b01b      	add	sp, #108	; 0x6c
     d42:	2001      	movs	r0, #1
     d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d48:	f002 faa0 	bl	328c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d4c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d50:	e78b      	b.n	c6a <CONFIG_ISR_STACK_SIZE+0x46a>
     d52:	f240 3151 	movw	r1, #849	; 0x351
     d56:	2070      	movs	r0, #112	; 0x70
     d58:	f002 fc18 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d5c:	f002 fad4 	bl	3308 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d60:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d64:	eba6 0009 	sub.w	r0, r6, r9
     d68:	f1a0 0119 	sub.w	r1, r0, #25
     d6c:	2900      	cmp	r1, #0
     d6e:	dc04      	bgt.n	d7a <CONFIG_ISR_STACK_SIZE+0x57a>
     d70:	f640 2168 	movw	r1, #2664	; 0xa68
     d74:	2070      	movs	r0, #112	; 0x70
     d76:	f002 fc09 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d7a:	2203      	movs	r2, #3
     d7c:	2301      	movs	r3, #1
     d7e:	4610      	mov	r0, r2
     d80:	f001 fed2 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d84:	b138      	cbz	r0, d96 <CONFIG_ISR_STACK_SIZE+0x596>
     d86:	4808      	ldr	r0, [pc, #32]	; (da8 <CONFIG_ISR_STACK_SIZE+0x5a8>)
     d88:	6880      	ldr	r0, [r0, #8]
     d8a:	f8c0 b000 	str.w	fp, [r0]
     d8e:	4807      	ldr	r0, [pc, #28]	; (dac <CONFIG_ISR_STACK_SIZE+0x5ac>)
     d90:	f8c0 b000 	str.w	fp, [r0]
     d94:	e7bb      	b.n	d0e <CONFIG_ISR_STACK_SIZE+0x50e>
     d96:	f640 2173 	movw	r1, #2675	; 0xa73
     d9a:	2070      	movs	r0, #112	; 0x70
     d9c:	f002 fbf6 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     da0:	200008ac 	.word	0x200008ac
     da4:	2000052c 	.word	0x2000052c
     da8:	20000010 	.word	0x20000010
     dac:	40000508 	.word	0x40000508
     db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     db4:	4606      	mov	r6, r0
     db6:	b083      	sub	sp, #12
     db8:	7808      	ldrb	r0, [r1, #0]
     dba:	7390      	strb	r0, [r2, #14]
     dbc:	7acf      	ldrb	r7, [r1, #11]
     dbe:	7357      	strb	r7, [r2, #13]
     dc0:	7a88      	ldrb	r0, [r1, #10]
     dc2:	7310      	strb	r0, [r2, #12]
     dc4:	8908      	ldrh	r0, [r1, #8]
     dc6:	4614      	mov	r4, r2
     dc8:	8150      	strh	r0, [r2, #10]
     dca:	460d      	mov	r5, r1
     dcc:	780a      	ldrb	r2, [r1, #0]
     dce:	495f      	ldr	r1, [pc, #380]	; (f4c <CONFIG_ISR_STACK_SIZE+0x74c>)
     dd0:	4699      	mov	r9, r3
     dd2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     dd6:	424b      	negs	r3, r1
     dd8:	f1ac 0801 	sub.w	r8, ip, #1
     ddc:	b15a      	cbz	r2, df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
     dde:	43c0      	mvns	r0, r0
     de0:	f8d5 8004 	ldr.w	r8, [r5, #4]
     de4:	f104 0208 	add.w	r2, r4, #8
     de8:	4288      	cmp	r0, r1
     dea:	dd3d      	ble.n	e68 <CONFIG_ISR_STACK_SIZE+0x668>
     dec:	f240 6117 	movw	r1, #1559	; 0x617
     df0:	2070      	movs	r0, #112	; 0x70
     df2:	f002 fbcb 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     df6:	68ee      	ldr	r6, [r5, #12]
     df8:	686d      	ldr	r5, [r5, #4]
     dfa:	ea6f 0900 	mvn.w	r9, r0
     dfe:	f104 0208 	add.w	r2, r4, #8
     e02:	eb06 0009 	add.w	r0, r6, r9
     e06:	4546      	cmp	r6, r8
     e08:	d904      	bls.n	e14 <CONFIG_ISR_STACK_SIZE+0x614>
     e0a:	f240 6116 	movw	r1, #1558	; 0x616
     e0e:	2070      	movs	r0, #112	; 0x70
     e10:	f002 fbbc 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e14:	4589      	cmp	r9, r1
     e16:	dce9      	bgt.n	dec <CONFIG_ISR_STACK_SIZE+0x5ec>
     e18:	4599      	cmp	r9, r3
     e1a:	db28      	blt.n	e6e <CONFIG_ISR_STACK_SIZE+0x66e>
     e1c:	4584      	cmp	ip, r0
     e1e:	bfdc      	itt	le
     e20:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e24:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e28:	dd05      	ble.n	e36 <CONFIG_ISR_STACK_SIZE+0x636>
     e2a:	2800      	cmp	r0, #0
     e2c:	bfbc      	itt	lt
     e2e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e32:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e36:	4621      	mov	r1, r4
     e38:	f001 fb9a 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e3c:	6820      	ldr	r0, [r4, #0]
     e3e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e42:	1970      	adds	r0, r6, r5
     e44:	1c40      	adds	r0, r0, #1
     e46:	6021      	str	r1, [r4, #0]
     e48:	2f00      	cmp	r7, #0
     e4a:	bf08      	it	eq
     e4c:	307a      	addeq	r0, #122	; 0x7a
     e4e:	d003      	beq.n	e58 <CONFIG_ISR_STACK_SIZE+0x658>
     e50:	2f01      	cmp	r7, #1
     e52:	bf08      	it	eq
     e54:	3044      	addeq	r0, #68	; 0x44
     e56:	d12d      	bne.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     e58:	f001 fb6e 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e60:	6060      	str	r0, [r4, #4]
     e62:	b003      	add	sp, #12
     e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e68:	4601      	mov	r1, r0
     e6a:	4298      	cmp	r0, r3
     e6c:	da04      	bge.n	e78 <CONFIG_ISR_STACK_SIZE+0x678>
     e6e:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     e72:	2070      	movs	r0, #112	; 0x70
     e74:	f002 fb8a 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e78:	4584      	cmp	ip, r0
     e7a:	bfdc      	itt	le
     e7c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     e80:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     e84:	dd05      	ble.n	e92 <CONFIG_ISR_STACK_SIZE+0x692>
     e86:	2800      	cmp	r0, #0
     e88:	bfbc      	itt	lt
     e8a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     e8e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     e92:	4621      	mov	r1, r4
     e94:	f001 fb6c 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e98:	6820      	ldr	r0, [r4, #0]
     e9a:	2f00      	cmp	r7, #0
     e9c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ea0:	f108 0001 	add.w	r0, r8, #1
     ea4:	6021      	str	r1, [r4, #0]
     ea6:	bf08      	it	eq
     ea8:	307a      	addeq	r0, #122	; 0x7a
     eaa:	d008      	beq.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     eac:	2f01      	cmp	r7, #1
     eae:	bf08      	it	eq
     eb0:	3044      	addeq	r0, #68	; 0x44
     eb2:	d004      	beq.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     eb4:	f240 61be 	movw	r1, #1726	; 0x6be
     eb8:	2070      	movs	r0, #112	; 0x70
     eba:	f002 fb67 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ebe:	f001 fb3b 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ec2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ec6:	6061      	str	r1, [r4, #4]
     ec8:	8960      	ldrh	r0, [r4, #10]
     eca:	aa01      	add	r2, sp, #4
     ecc:	4669      	mov	r1, sp
     ece:	f001 fb4f 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ed2:	481f      	ldr	r0, [pc, #124]	; (f50 <CONFIG_ISR_STACK_SIZE+0x750>)
     ed4:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     ed8:	2920      	cmp	r1, #32
     eda:	d023      	beq.n	f24 <CONFIG_ISR_STACK_SIZE+0x724>
     edc:	6900      	ldr	r0, [r0, #16]
     ede:	1d40      	adds	r0, r0, #5
     ee0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ee4:	e9d4 2100 	ldrd	r2, r1, [r4]
     ee8:	1a89      	subs	r1, r1, r2
     eea:	6020      	str	r0, [r4, #0]
     eec:	4408      	add	r0, r1
     eee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ef2:	6060      	str	r0, [r4, #4]
     ef4:	464b      	mov	r3, r9
     ef6:	4632      	mov	r2, r6
     ef8:	4621      	mov	r1, r4
     efa:	68e8      	ldr	r0, [r5, #12]
     efc:	f7ff fad2 	bl	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     f00:	2800      	cmp	r0, #0
     f02:	bf1c      	itt	ne
     f04:	b003      	addne	sp, #12
     f06:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f0a:	e9d4 1000 	ldrd	r1, r0, [r4]
     f0e:	1a40      	subs	r0, r0, r1
     f10:	4430      	add	r0, r6
     f12:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f1a:	e9c4 1000 	strd	r1, r0, [r4]
     f1e:	b003      	add	sp, #12
     f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f24:	8960      	ldrh	r0, [r4, #10]
     f26:	f106 0709 	add.w	r7, r6, #9
     f2a:	b120      	cbz	r0, f36 <CONFIG_ISR_STACK_SIZE+0x736>
     f2c:	f002 faca 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f30:	2800      	cmp	r0, #0
     f32:	bf08      	it	eq
     f34:	3732      	addeq	r7, #50	; 0x32
     f36:	4807      	ldr	r0, [pc, #28]	; (f54 <CONFIG_ISR_STACK_SIZE+0x754>)
     f38:	7841      	ldrb	r1, [r0, #1]
     f3a:	9800      	ldr	r0, [sp, #0]
     f3c:	4281      	cmp	r1, r0
     f3e:	bf84      	itt	hi
     f40:	1a08      	subhi	r0, r1, r0
     f42:	4407      	addhi	r7, r0
     f44:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f48:	e7cc      	b.n	ee4 <CONFIG_ISR_STACK_SIZE+0x6e4>
     f4a:	0000      	.short	0x0000
     f4c:	07a12000 	.word	0x07a12000
     f50:	200008ac 	.word	0x200008ac
     f54:	20000012 	.word	0x20000012
     f58:	b510      	push	{r4, lr}
     f5a:	4c15      	ldr	r4, [pc, #84]	; (fb0 <CONFIG_ISR_STACK_SIZE+0x7b0>)
     f5c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f60:	2820      	cmp	r0, #32
     f62:	bf18      	it	ne
     f64:	bd10      	popne	{r4, pc}
     f66:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f6a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f6e:	f890 1020 	ldrb.w	r1, [r0, #32]
     f72:	2920      	cmp	r1, #32
     f74:	d017      	beq.n	fa6 <CONFIG_ISR_STACK_SIZE+0x7a6>
     f76:	f8df c03c 	ldr.w	ip, [pc, #60]	; fb4 <CONFIG_ISR_STACK_SIZE+0x7b4>
     f7a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     f7e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     f82:	785b      	ldrb	r3, [r3, #1]
     f84:	f880 3020 	strb.w	r3, [r0, #32]
     f88:	2301      	movs	r3, #1
     f8a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     f8e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     f92:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     f96:	2002      	movs	r0, #2
     f98:	f000 f8b0 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
     f9c:	2000      	movs	r0, #0
     f9e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fa2:	77a0      	strb	r0, [r4, #30]
     fa4:	bd10      	pop	{r4, pc}
     fa6:	f240 319e 	movw	r1, #926	; 0x39e
     faa:	2070      	movs	r0, #112	; 0x70
     fac:	f002 faee 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fb0:	200008ac 	.word	0x200008ac
     fb4:	2000082c 	.word	0x2000082c
     fb8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fbc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
     fc0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fc4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fc8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     fcc:	2c20      	cmp	r4, #32
     fce:	bf08      	it	eq
     fd0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fd4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     fd8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     fdc:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
     fe0:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
     fe4:	2607      	movs	r6, #7
     fe6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     fea:	2801      	cmp	r0, #1
     fec:	d00e      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     fee:	2804      	cmp	r0, #4
     ff0:	bf08      	it	eq
     ff2:	2602      	moveq	r6, #2
     ff4:	d00a      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     ff6:	2805      	cmp	r0, #5
     ff8:	bf0c      	ite	eq
     ffa:	2603      	moveq	r6, #3
     ffc:	2806      	cmpne	r0, #6
     ffe:	d005      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    1000:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1004:	f04f 0070 	mov.w	r0, #112	; 0x70
    1008:	f002 fac0 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    100c:	f1bb 0f00 	cmp.w	fp, #0
    1010:	bf18      	it	ne
    1012:	f3af 8000 	nopne.w
    1016:	f3ef 8010 	mrs	r0, PRIMASK
    101a:	b672      	cpsid	i
    101c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1020:	784a      	ldrb	r2, [r1, #1]
    1022:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1026:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    102a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    102e:	42a2      	cmp	r2, r4
    1030:	bf04      	itt	eq
    1032:	2220      	moveq	r2, #32
    1034:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1038:	b1b8      	cbz	r0, 106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    103a:	462a      	mov	r2, r5
    103c:	4621      	mov	r1, r4
    103e:	2001      	movs	r0, #1
    1040:	f000 f85c 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1044:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1048:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    104c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1050:	6840      	ldr	r0, [r0, #4]
    1052:	4631      	mov	r1, r6
    1054:	4790      	blx	r2
    1056:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    105a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    105e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1062:	2c20      	cmp	r4, #32
    1064:	d1bc      	bne.n	fe0 <CONFIG_ISR_STACK_SIZE+0x7e0>
    1066:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    106a:	4806      	ldr	r0, [pc, #24]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
    106c:	2800      	cmp	r0, #0
    106e:	bf18      	it	ne
    1070:	f3af 8000 	nopne.w
    1074:	b662      	cpsie	i
    1076:	e7e0      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    1078:	200008ac 	.word	0x200008ac
    107c:	00000000 	.word	0x00000000
    1080:	2000082c 	.word	0x2000082c
    1084:	00000000 	.word	0x00000000
    1088:	b510      	push	{r4, lr}
    108a:	4604      	mov	r4, r0
    108c:	6800      	ldr	r0, [r0, #0]
    108e:	f006 f90f 	bl	72b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1092:	4602      	mov	r2, r0
    1094:	8960      	ldrh	r0, [r4, #10]
    1096:	7a21      	ldrb	r1, [r4, #8]
    1098:	4b14      	ldr	r3, [pc, #80]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    109a:	4408      	add	r0, r1
    109c:	1c41      	adds	r1, r0, #1
    109e:	1850      	adds	r0, r2, r1
    10a0:	429a      	cmp	r2, r3
    10a2:	d904      	bls.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    10a4:	f240 6116 	movw	r1, #1558	; 0x616
    10a8:	2070      	movs	r0, #112	; 0x70
    10aa:	f002 fa6f 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ae:	4a10      	ldr	r2, [pc, #64]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    10b0:	4291      	cmp	r1, r2
    10b2:	dd04      	ble.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    10b4:	f240 6117 	movw	r1, #1559	; 0x617
    10b8:	2070      	movs	r0, #112	; 0x70
    10ba:	f002 fa67 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10be:	4a0d      	ldr	r2, [pc, #52]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    10c0:	4291      	cmp	r1, r2
    10c2:	da04      	bge.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    10c4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    10c8:	2070      	movs	r0, #112	; 0x70
    10ca:	f002 fa5f 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ce:	490a      	ldr	r1, [pc, #40]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    10d0:	4281      	cmp	r1, r0
    10d2:	bfde      	ittt	le
    10d4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10d8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    10dc:	bd10      	pople	{r4, pc}
    10de:	2800      	cmp	r0, #0
    10e0:	bfbc      	itt	lt
    10e2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    10e6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    10ea:	bd10      	pop	{r4, pc}
    10ec:	1e847fff 	.word	0x1e847fff
    10f0:	07a12000 	.word	0x07a12000
    10f4:	f85ee000 	.word	0xf85ee000
    10f8:	1e848000 	.word	0x1e848000
    10fc:	f8df c054 	ldr.w	ip, [pc, #84]	; 1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1100:	b510      	push	{r4, lr}
    1102:	2300      	movs	r3, #0
    1104:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1108:	2807      	cmp	r0, #7
    110a:	d21e      	bcs.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    110c:	e8df f000 	tbb	[pc, r0]
    1110:	05050505 	.word	0x05050505
    1114:	00040404 	.word	0x00040404
    1118:	2301      	movs	r3, #1
    111a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    111e:	2b00      	cmp	r3, #0
    1120:	bf08      	it	eq
    1122:	bd10      	popeq	{r4, pc}
    1124:	480c      	ldr	r0, [pc, #48]	; (1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>)
    1126:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    112a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    112e:	2820      	cmp	r0, #32
    1130:	bf0e      	itee	eq
    1132:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1136:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    113a:	7041      	strbne	r1, [r0, #1]
    113c:	2020      	movs	r0, #32
    113e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1142:	7058      	strb	r0, [r3, #1]
    1144:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1148:	bd10      	pop	{r4, pc}
    114a:	f240 2167 	movw	r1, #615	; 0x267
    114e:	2070      	movs	r0, #112	; 0x70
    1150:	f002 fa1c 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1154:	2000082c 	.word	0x2000082c
    1158:	200008ac 	.word	0x200008ac
    115c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1160:	b083      	sub	sp, #12
    1162:	485c      	ldr	r0, [pc, #368]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1164:	9904      	ldr	r1, [sp, #16]
    1166:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    116a:	9001      	str	r0, [sp, #4]
    116c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1170:	9803      	ldr	r0, [sp, #12]
    1172:	4625      	mov	r5, r4
    1174:	2801      	cmp	r0, #1
    1176:	bf18      	it	ne
    1178:	2802      	cmpne	r0, #2
    117a:	d005      	beq.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    117c:	f640 21af 	movw	r1, #2735	; 0xaaf
    1180:	f04f 0070 	mov.w	r0, #112	; 0x70
    1184:	f002 fa02 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1188:	2700      	movs	r7, #0
    118a:	2d20      	cmp	r5, #32
    118c:	d04a      	beq.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    118e:	4851      	ldr	r0, [pc, #324]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1190:	9100      	str	r1, [sp, #0]
    1192:	2600      	movs	r6, #0
    1194:	7f80      	ldrb	r0, [r0, #30]
    1196:	2800      	cmp	r0, #0
    1198:	bf08      	it	eq
    119a:	2602      	moveq	r6, #2
    119c:	f001 fb3e 	bl	281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11a0:	f8df a138 	ldr.w	sl, [pc, #312]	; 12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>
    11a4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11a8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11ac:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    11b0:	688a      	ldr	r2, [r1, #8]
    11b2:	68c9      	ldr	r1, [r1, #12]
    11b4:	1a12      	subs	r2, r2, r0
    11b6:	1a09      	subs	r1, r1, r0
    11b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11bc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11c0:	4296      	cmp	r6, r2
    11c2:	bf98      	it	ls
    11c4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11c8:	d201      	bcs.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    11ca:	4589      	cmp	r9, r1
    11cc:	d228      	bcs.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    11ce:	4a44      	ldr	r2, [pc, #272]	; (12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    11d0:	9900      	ldr	r1, [sp, #0]
    11d2:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11d6:	4622      	mov	r2, r4
    11d8:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    11dc:	784c      	ldrb	r4, [r1, #1]
    11de:	2c20      	cmp	r4, #32
    11e0:	d016      	beq.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    11e2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11e6:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    11ea:	f8dc 8008 	ldr.w	r8, [ip, #8]
    11ee:	f8dc c00c 	ldr.w	ip, [ip, #12]
    11f2:	eba8 0800 	sub.w	r8, r8, r0
    11f6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    11fa:	ebac 0100 	sub.w	r1, ip, r0
    11fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1202:	4546      	cmp	r6, r8
    1204:	bf98      	it	ls
    1206:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    120a:	d2e4      	bcs.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    120c:	4589      	cmp	r9, r1
    120e:	d3e2      	bcc.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
    1210:	2a20      	cmp	r2, #32
    1212:	d005      	beq.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1214:	2120      	movs	r1, #32
    1216:	2004      	movs	r0, #4
    1218:	9b00      	ldr	r3, [sp, #0]
    121a:	f7ff f907 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    121e:	4604      	mov	r4, r0
    1220:	42ac      	cmp	r4, r5
    1222:	d115      	bne.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    1224:	482f      	ldr	r0, [pc, #188]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
    1226:	2800      	cmp	r0, #0
    1228:	bf18      	it	ne
    122a:	f3af 8000 	nopne.w
    122e:	f001 faf5 	bl	281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1232:	4c28      	ldr	r4, [pc, #160]	; (12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>)
    1234:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1238:	2920      	cmp	r1, #32
    123a:	d00d      	beq.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    123c:	68e1      	ldr	r1, [r4, #12]
    123e:	1c82      	adds	r2, r0, #2
    1240:	1a51      	subs	r1, r2, r1
    1242:	0209      	lsls	r1, r1, #8
    1244:	17ca      	asrs	r2, r1, #31
    1246:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    124a:	1209      	asrs	r1, r1, #8
    124c:	2900      	cmp	r1, #0
    124e:	dd03      	ble.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    1250:	b005      	add	sp, #20
    1252:	2000      	movs	r0, #0
    1254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1258:	2d20      	cmp	r5, #32
    125a:	d00d      	beq.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
    125c:	462a      	mov	r2, r5
    125e:	9903      	ldr	r1, [sp, #12]
    1260:	f7ff fb16 	bl	890 <CONFIG_ISR_STACK_SIZE+0x90>
    1264:	b358      	cbz	r0, 12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    1266:	9801      	ldr	r0, [sp, #4]
    1268:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    126c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1270:	b005      	add	sp, #20
    1272:	2001      	movs	r0, #1
    1274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1278:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    127c:	b118      	cbz	r0, 1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
    127e:	f001 ffe9 	bl	3254 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1282:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1286:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    128a:	b150      	cbz	r0, 12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    128c:	4916      	ldr	r1, [pc, #88]	; (12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    128e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1292:	6008      	str	r0, [r1, #0]
    1294:	2005      	movs	r0, #5
    1296:	f001 fd0f 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    129a:	f002 f843 	bl	3324 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    129e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12a2:	2004      	movs	r0, #4
    12a4:	f001 fd08 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a8:	f001 fd6e 	bl	2d88 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12ac:	2020      	movs	r0, #32
    12ae:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12b2:	480e      	ldr	r0, [pc, #56]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    12b4:	6880      	ldr	r0, [r0, #8]
    12b6:	6007      	str	r7, [r0, #0]
    12b8:	480d      	ldr	r0, [pc, #52]	; (12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    12ba:	6007      	str	r7, [r0, #0]
    12bc:	e7d8      	b.n	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    12be:	462a      	mov	r2, r5
    12c0:	2120      	movs	r1, #32
    12c2:	2004      	movs	r0, #4
    12c4:	9b04      	ldr	r3, [sp, #16]
    12c6:	f7ff f8b1 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12ca:	b005      	add	sp, #20
    12cc:	2000      	movs	r0, #0
    12ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d2:	0000      	.short	0x0000
    12d4:	200008ac 	.word	0x200008ac
    12d8:	003fffff 	.word	0x003fffff
    12dc:	2000052c 	.word	0x2000052c
    12e0:	2000082c 	.word	0x2000082c
    12e4:	00000000 	.word	0x00000000
    12e8:	4001f508 	.word	0x4001f508
    12ec:	20000010 	.word	0x20000010
    12f0:	40000508 	.word	0x40000508

000012f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    12f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12f8:	4e5b      	ldr	r6, [pc, #364]	; (1468 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    12fa:	4681      	mov	r9, r0
    12fc:	b085      	sub	sp, #20
    12fe:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1302:	468a      	mov	sl, r1
    1304:	2820      	cmp	r0, #32
    1306:	d04d      	beq.n	13a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    1308:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    130c:	f106 040c 	add.w	r4, r6, #12
    1310:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1314:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1318:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    131c:	2020      	movs	r0, #32
    131e:	f88d 0000 	strb.w	r0, [sp]
    1322:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1326:	aa03      	add	r2, sp, #12
    1328:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    132c:	a901      	add	r1, sp, #4
    132e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1332:	6930      	ldr	r0, [r6, #16]
    1334:	9002      	str	r0, [sp, #8]
    1336:	6830      	ldr	r0, [r6, #0]
    1338:	4448      	add	r0, r9
    133a:	f001 f919 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    133e:	68f8      	ldr	r0, [r7, #12]
    1340:	9901      	ldr	r1, [sp, #4]
    1342:	4a4a      	ldr	r2, [pc, #296]	; (146c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1344:	4408      	add	r0, r1
    1346:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    134a:	4291      	cmp	r1, r2
    134c:	d82f      	bhi.n	13ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    134e:	68b9      	ldr	r1, [r7, #8]
    1350:	1a41      	subs	r1, r0, r1
    1352:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1356:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    135a:	d228      	bcs.n	13ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    135c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1360:	6060      	str	r0, [r4, #4]
    1362:	4630      	mov	r0, r6
    1364:	f884 a00c 	strb.w	sl, [r4, #12]
    1368:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    136c:	46ea      	mov	sl, sp
    136e:	2d20      	cmp	r5, #32
    1370:	bf1c      	itt	ne
    1372:	493f      	ldrne	r1, [pc, #252]	; (1470 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1374:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1378:	d03c      	beq.n	13f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    137a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    137e:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1382:	6860      	ldr	r0, [r4, #4]
    1384:	68ba      	ldr	r2, [r7, #8]
    1386:	4621      	mov	r1, r4
    1388:	1a10      	subs	r0, r2, r0
    138a:	0200      	lsls	r0, r0, #8
    138c:	17c2      	asrs	r2, r0, #31
    138e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1392:	f107 0608 	add.w	r6, r7, #8
    1396:	1200      	asrs	r0, r0, #8
    1398:	d41b      	bmi.n	13d2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    139a:	8970      	ldrh	r0, [r6, #10]
    139c:	b350      	cbz	r0, 13f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    139e:	8948      	ldrh	r0, [r1, #10]
    13a0:	b148      	cbz	r0, 13b6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    13a2:	e027      	b.n	13f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    13a4:	f640 3173 	movw	r1, #2931	; 0xb73
    13a8:	2070      	movs	r0, #112	; 0x70
    13aa:	f002 f8ef 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ae:	b005      	add	sp, #20
    13b0:	2001      	movs	r0, #1
    13b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13b6:	4620      	mov	r0, r4
    13b8:	f7ff fe66 	bl	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    13bc:	f001 f8bc 	bl	2538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    13c0:	6831      	ldr	r1, [r6, #0]
    13c2:	1a08      	subs	r0, r1, r0
    13c4:	0200      	lsls	r0, r0, #8
    13c6:	17c1      	asrs	r1, r0, #31
    13c8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    13cc:	1200      	asrs	r0, r0, #8
    13ce:	2833      	cmp	r0, #51	; 0x33
    13d0:	da10      	bge.n	13f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    13d2:	f88a 5000 	strb.w	r5, [sl]
    13d6:	7d39      	ldrb	r1, [r7, #20]
    13d8:	7b20      	ldrb	r0, [r4, #12]
    13da:	4281      	cmp	r1, r0
    13dc:	d805      	bhi.n	13ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    13de:	9802      	ldr	r0, [sp, #8]
    13e0:	6060      	str	r0, [r4, #4]
    13e2:	b005      	add	sp, #20
    13e4:	2002      	movs	r0, #2
    13e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13ea:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    13ee:	7845      	ldrb	r5, [r0, #1]
    13f0:	2d20      	cmp	r5, #32
    13f2:	d1c2      	bne.n	137a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    13f4:	2005      	movs	r0, #5
    13f6:	f001 fc5f 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13fa:	4c1b      	ldr	r4, [pc, #108]	; (1468 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    13fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1400:	60a0      	str	r0, [r4, #8]
    1402:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1406:	f89d 2000 	ldrb.w	r2, [sp]
    140a:	2120      	movs	r1, #32
    140c:	2a20      	cmp	r2, #32
    140e:	bf13      	iteet	ne
    1410:	2005      	movne	r0, #5
    1412:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1416:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    141a:	f7ff f807 	blne	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    141e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1422:	4913      	ldr	r1, [pc, #76]	; (1470 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1424:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1428:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    142c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1430:	7048      	strb	r0, [r1, #1]
    1432:	6820      	ldr	r0, [r4, #0]
    1434:	4448      	add	r0, r9
    1436:	6020      	str	r0, [r4, #0]
    1438:	2001      	movs	r0, #1
    143a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    143e:	7e60      	ldrb	r0, [r4, #25]
    1440:	2801      	cmp	r0, #1
    1442:	d105      	bne.n	1450 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1444:	6920      	ldr	r0, [r4, #16]
    1446:	1e40      	subs	r0, r0, #1
    1448:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    144c:	f001 fa86 	bl	295c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1450:	f89d 0000 	ldrb.w	r0, [sp]
    1454:	2820      	cmp	r0, #32
    1456:	d003      	beq.n	1460 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1458:	4806      	ldr	r0, [pc, #24]	; (1474 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    145a:	7840      	ldrb	r0, [r0, #1]
    145c:	f002 f966 	bl	372c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1460:	b005      	add	sp, #20
    1462:	2000      	movs	r0, #0
    1464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1468:	200008ac 	.word	0x200008ac
    146c:	07a11f9c 	.word	0x07a11f9c
    1470:	2000082c 	.word	0x2000082c
    1474:	20000010 	.word	0x20000010

00001478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1478:	4602      	mov	r2, r0
    147a:	4b14      	ldr	r3, [pc, #80]	; (14cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    147c:	b510      	push	{r4, lr}
    147e:	4408      	add	r0, r1
    1480:	429a      	cmp	r2, r3
    1482:	d904      	bls.n	148e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1484:	f240 6116 	movw	r1, #1558	; 0x616
    1488:	2070      	movs	r0, #112	; 0x70
    148a:	f002 f87f 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    148e:	4a10      	ldr	r2, [pc, #64]	; (14d0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1490:	4291      	cmp	r1, r2
    1492:	dd04      	ble.n	149e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1494:	f240 6117 	movw	r1, #1559	; 0x617
    1498:	2070      	movs	r0, #112	; 0x70
    149a:	f002 f877 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    149e:	4a0d      	ldr	r2, [pc, #52]	; (14d4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    14a0:	4291      	cmp	r1, r2
    14a2:	da04      	bge.n	14ae <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    14a4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    14a8:	2070      	movs	r0, #112	; 0x70
    14aa:	f002 f86f 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14ae:	490a      	ldr	r1, [pc, #40]	; (14d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    14b0:	4281      	cmp	r1, r0
    14b2:	bfde      	ittt	le
    14b4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    14b8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    14bc:	bd10      	pople	{r4, pc}
    14be:	2800      	cmp	r0, #0
    14c0:	bfbc      	itt	lt
    14c2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    14c6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    14ca:	bd10      	pop	{r4, pc}
    14cc:	1e847fff 	.word	0x1e847fff
    14d0:	07a12000 	.word	0x07a12000
    14d4:	f85ee000 	.word	0xf85ee000
    14d8:	1e848000 	.word	0x1e848000

000014dc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    14dc:	4a10      	ldr	r2, [pc, #64]	; (1520 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    14de:	1a0b      	subs	r3, r1, r0
    14e0:	f102 0c01 	add.w	ip, r2, #1
    14e4:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    14e8:	bf3c      	itt	cc
    14ea:	4618      	movcc	r0, r3
    14ec:	4770      	bxcc	lr
    14ee:	b510      	push	{r4, lr}
    14f0:	1a44      	subs	r4, r0, r1
    14f2:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    14f6:	bf3c      	itt	cc
    14f8:	4618      	movcc	r0, r3
    14fa:	bd10      	popcc	{r4, pc}
    14fc:	429a      	cmp	r2, r3
    14fe:	d203      	bcs.n	1508 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1500:	1a10      	subs	r0, r2, r0
    1502:	4408      	add	r0, r1
    1504:	1c40      	adds	r0, r0, #1
    1506:	bd10      	pop	{r4, pc}
    1508:	42a2      	cmp	r2, r4
    150a:	d204      	bcs.n	1516 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    150c:	1a51      	subs	r1, r2, r1
    150e:	4408      	add	r0, r1
    1510:	1c40      	adds	r0, r0, #1
    1512:	4240      	negs	r0, r0
    1514:	bd10      	pop	{r4, pc}
    1516:	f640 310b 	movw	r1, #2827	; 0xb0b
    151a:	2070      	movs	r0, #112	; 0x70
    151c:	f002 f836 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1520:	1e847fff 	.word	0x1e847fff

00001524 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1524:	490e      	ldr	r1, [pc, #56]	; (1560 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1526:	b510      	push	{r4, lr}
    1528:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    152c:	2820      	cmp	r0, #32
    152e:	d012      	beq.n	1556 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1530:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1534:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1538:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    153c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1540:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1544:	6840      	ldr	r0, [r0, #4]
    1546:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    154a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    154e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1552:	2104      	movs	r1, #4
    1554:	4710      	bx	r2
    1556:	f640 01bb 	movw	r1, #2235	; 0x8bb
    155a:	2070      	movs	r0, #112	; 0x70
    155c:	f002 f816 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1560:	200008ac 	.word	0x200008ac

00001564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1564:	b570      	push	{r4, r5, r6, lr}
    1566:	4d6a      	ldr	r5, [pc, #424]	; (1710 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ac>)
    1568:	496a      	ldr	r1, [pc, #424]	; (1714 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    156a:	2601      	movs	r6, #1
    156c:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1570:	2808      	cmp	r0, #8
    1572:	d27d      	bcs.n	1670 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1574:	e8df f000 	tbb	[pc, r0]
    1578:	a9976104 	.word	0xa9976104
    157c:	b3ae43c6 	.word	0xb3ae43c6
    1580:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1584:	b918      	cbnz	r0, 158e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1586:	f001 fe81 	bl	328c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    158a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    158e:	8ae0      	ldrh	r0, [r4, #22]
    1590:	b110      	cbz	r0, 1598 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1592:	f001 ff97 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1596:	b188      	cbz	r0, 15bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1598:	f7ff fcde 	bl	f58 <CONFIG_ISR_STACK_SIZE+0x758>
    159c:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    15a0:	68a1      	ldr	r1, [r4, #8]
    15a2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    15a6:	d005      	beq.n	15b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    15a8:	2301      	movs	r3, #1
    15aa:	2203      	movs	r2, #3
    15ac:	2005      	movs	r0, #5
    15ae:	f001 fabb 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    15b2:	b140      	cbz	r0, 15c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    15b4:	7e60      	ldrb	r0, [r4, #25]
    15b6:	2801      	cmp	r0, #1
    15b8:	d110      	bne.n	15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    15ba:	e009      	b.n	15d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    15bc:	f640 016f 	movw	r1, #2159	; 0x86f
    15c0:	2070      	movs	r0, #112	; 0x70
    15c2:	f001 ffe3 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15c6:	f640 0174 	movw	r1, #2164	; 0x874
    15ca:	2070      	movs	r0, #112	; 0x70
    15cc:	f001 ffde 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d0:	6920      	ldr	r0, [r4, #16]
    15d2:	1e40      	subs	r0, r0, #1
    15d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15d8:	f001 f9c0 	bl	295c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    15dc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    15e0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    15e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15e8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    15ec:	6840      	ldr	r0, [r0, #4]
    15ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    15f2:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    15f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15fa:	2101      	movs	r1, #1
    15fc:	4710      	bx	r2
    15fe:	f7ff fcab 	bl	f58 <CONFIG_ISR_STACK_SIZE+0x758>
    1602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1606:	60a0      	str	r0, [r4, #8]
    1608:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    160c:	b180      	cbz	r0, 1630 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xcc>
    160e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1612:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1616:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    161a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    161e:	6840      	ldr	r0, [r0, #4]
    1620:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1624:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    162c:	2106      	movs	r1, #6
    162e:	4710      	bx	r2
    1630:	f640 0185 	movw	r1, #2181	; 0x885
    1634:	2070      	movs	r0, #112	; 0x70
    1636:	f001 ffa9 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    163a:	f7ff fc8d 	bl	f58 <CONFIG_ISR_STACK_SIZE+0x758>
    163e:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1642:	f001 ff3f 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1646:	b118      	cbz	r0, 1650 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xec>
    1648:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    164c:	b128      	cbz	r0, 165a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf6>
    164e:	e008      	b.n	1662 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    1650:	f640 0195 	movw	r1, #2197	; 0x895
    1654:	2070      	movs	r0, #112	; 0x70
    1656:	f001 ff99 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    165a:	f001 fe17 	bl	328c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    165e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1662:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1666:	b168      	cbz	r0, 1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
    1668:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    166c:	492a      	ldr	r1, [pc, #168]	; (1718 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    166e:	e000      	b.n	1672 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1670:	e048      	b.n	1704 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>
    1672:	6008      	str	r0, [r1, #0]
    1674:	2005      	movs	r0, #5
    1676:	f001 fb1f 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    167a:	f001 fe53 	bl	3324 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    167e:	2000      	movs	r0, #0
    1680:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1684:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1688:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    168c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1690:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1694:	6840      	ldr	r0, [r0, #4]
    1696:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    169a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    169e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16a2:	2100      	movs	r1, #0
    16a4:	4710      	bx	r2
    16a6:	f001 fbb9 	bl	2e1c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    16aa:	8ae0      	ldrh	r0, [r4, #22]
    16ac:	b110      	cbz	r0, 16b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x150>
    16ae:	f001 ff09 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16b2:	b128      	cbz	r0, 16c0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    16b4:	4819      	ldr	r0, [pc, #100]	; (171c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    16b6:	7800      	ldrb	r0, [r0, #0]
    16b8:	2803      	cmp	r0, #3
    16ba:	bf08      	it	eq
    16bc:	7766      	strbeq	r6, [r4, #29]
    16be:	bd70      	pop	{r4, r5, r6, pc}
    16c0:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    16c4:	2070      	movs	r0, #112	; 0x70
    16c6:	f001 ff61 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16ca:	4815      	ldr	r0, [pc, #84]	; (1720 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    16cc:	6006      	str	r6, [r0, #0]
    16ce:	6888      	ldr	r0, [r1, #8]
    16d0:	6006      	str	r6, [r0, #0]
    16d2:	bd70      	pop	{r4, r5, r6, pc}
    16d4:	7808      	ldrb	r0, [r1, #0]
    16d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16da:	f002 b827 	b.w	372c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    16de:	f7ff fc3b 	bl	f58 <CONFIG_ISR_STACK_SIZE+0x758>
    16e2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16e6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16ee:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    16f2:	6840      	ldr	r0, [r0, #4]
    16f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16f8:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    16fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1700:	2105      	movs	r1, #5
    1702:	4710      	bx	r2
    1704:	f640 01b3 	movw	r1, #2227	; 0x8b3
    1708:	2070      	movs	r0, #112	; 0x70
    170a:	f001 ff3f 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170e:	0000      	.short	0x0000
    1710:	2000052c 	.word	0x2000052c
    1714:	20000010 	.word	0x20000010
    1718:	4001f508 	.word	0x4001f508
    171c:	20000012 	.word	0x20000012
    1720:	40000508 	.word	0x40000508

00001724 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1724:	4803      	ldr	r0, [pc, #12]	; (1734 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1726:	b510      	push	{r4, lr}
    1728:	7840      	ldrb	r0, [r0, #1]
    172a:	f005 fdc1 	bl	72b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    172e:	b280      	uxth	r0, r0
    1730:	bd10      	pop	{r4, pc}
    1732:	0000      	.short	0x0000
    1734:	20000012 	.word	0x20000012

00001738 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1738:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    173c:	4682      	mov	sl, r0
    173e:	48d1      	ldr	r0, [pc, #836]	; (1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>)
    1740:	b08b      	sub	sp, #44	; 0x2c
    1742:	6800      	ldr	r0, [r0, #0]
    1744:	4dd0      	ldr	r5, [pc, #832]	; (1a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>)
    1746:	05c0      	lsls	r0, r0, #23
    1748:	0dc0      	lsrs	r0, r0, #23
    174a:	d00e      	beq.n	176a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    174c:	3810      	subs	r0, #16
    174e:	b240      	sxtb	r0, r0
    1750:	2800      	cmp	r0, #0
    1752:	bfb8      	it	lt
    1754:	f000 000f 	andlt.w	r0, r0, #15
    1758:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    175c:	bfac      	ite	ge
    175e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1762:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1766:	0940      	lsrs	r0, r0, #5
    1768:	d00d      	beq.n	1786 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    176a:	980c      	ldr	r0, [sp, #48]	; 0x30
    176c:	f04f 0b00 	mov.w	fp, #0
    1770:	7800      	ldrb	r0, [r0, #0]
    1772:	2800      	cmp	r0, #0
    1774:	bf18      	it	ne
    1776:	2801      	cmpne	r0, #1
    1778:	d018      	beq.n	17ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    177a:	f240 715c 	movw	r1, #1884	; 0x75c
    177e:	f04f 0070 	mov.w	r0, #112	; 0x70
    1782:	f001 ff03 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1786:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    178a:	f04f 0b01 	mov.w	fp, #1
    178e:	2820      	cmp	r0, #32
    1790:	d007      	beq.n	17a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1792:	980c      	ldr	r0, [sp, #48]	; 0x30
    1794:	7800      	ldrb	r0, [r0, #0]
    1796:	b148      	cbz	r0, 17ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1798:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    179c:	2070      	movs	r0, #112	; 0x70
    179e:	f001 fef5 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17a2:	f240 7155 	movw	r1, #1877	; 0x755
    17a6:	2070      	movs	r0, #112	; 0x70
    17a8:	f001 fef0 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17ac:	4cb7      	ldr	r4, [pc, #732]	; (1a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>)
    17ae:	b124      	cbz	r4, 17ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    17b0:	2100      	movs	r1, #0
    17b2:	f240 705f 	movw	r0, #1887	; 0x75f
    17b6:	f3af 8000 	nop.w
    17ba:	49b5      	ldr	r1, [pc, #724]	; (1a90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>)
    17bc:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    17c0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    17c4:	f04f 0801 	mov.w	r8, #1
    17c8:	9000      	str	r0, [sp, #0]
    17ca:	b124      	cbz	r4, 17d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    17cc:	2100      	movs	r1, #0
    17ce:	f240 7067 	movw	r0, #1895	; 0x767
    17d2:	f3af 8000 	nop.w
    17d6:	f1b8 0f00 	cmp.w	r8, #0
    17da:	d009      	beq.n	17f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    17dc:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    17e0:	f04f 0900 	mov.w	r9, #0
    17e4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    17e8:	f1bb 0f00 	cmp.w	fp, #0
    17ec:	d007      	beq.n	17fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    17ee:	e02e      	b.n	184e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    17f0:	48a8      	ldr	r0, [pc, #672]	; (1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    17f2:	2800      	cmp	r0, #0
    17f4:	bf18      	it	ne
    17f6:	f3af 8000 	nopne.w
    17fa:	b662      	cpsie	i
    17fc:	e7ee      	b.n	17dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    17fe:	4637      	mov	r7, r6
    1800:	2001      	movs	r0, #1
    1802:	ea20 0607 	bic.w	r6, r0, r7
    1806:	48a4      	ldr	r0, [pc, #656]	; (1a98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    1808:	2240      	movs	r2, #64	; 0x40
    180a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    180e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1812:	f005 febb 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1816:	b124      	cbz	r4, 1822 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1818:	2100      	movs	r1, #0
    181a:	f240 50da 	movw	r0, #1498	; 0x5da
    181e:	f3af 8000 	nop.w
    1822:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1826:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    182a:	6a09      	ldr	r1, [r1, #32]
    182c:	6201      	str	r1, [r0, #32]
    182e:	b124      	cbz	r4, 183a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1830:	2100      	movs	r1, #0
    1832:	f240 50de 	movw	r0, #1502	; 0x5de
    1836:	f3af 8000 	nop.w
    183a:	b124      	cbz	r4, 1846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    183c:	2100      	movs	r1, #0
    183e:	f240 7071 	movw	r0, #1905	; 0x771
    1842:	f3af 8000 	nop.w
    1846:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    184a:	2800      	cmp	r0, #0
    184c:	d1bd      	bne.n	17ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    184e:	b124      	cbz	r4, 185a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1850:	2100      	movs	r1, #0
    1852:	f240 707b 	movw	r0, #1915	; 0x77b
    1856:	f3af 8000 	nop.w
    185a:	f000 ffdf 	bl	281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    185e:	4680      	mov	r8, r0
    1860:	4633      	mov	r3, r6
    1862:	aa06      	add	r2, sp, #24
    1864:	990c      	ldr	r1, [sp, #48]	; 0x30
    1866:	f7ff faa3 	bl	db0 <CONFIG_ISR_STACK_SIZE+0x5b0>
    186a:	b124      	cbz	r4, 1876 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    186c:	2100      	movs	r1, #0
    186e:	f240 7082 	movw	r0, #1922	; 0x782
    1872:	f3af 8000 	nop.w
    1876:	4988      	ldr	r1, [pc, #544]	; (1a98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    1878:	a806      	add	r0, sp, #24
    187a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    187e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1882:	2901      	cmp	r1, #1
    1884:	bf18      	it	ne
    1886:	2902      	cmpne	r1, #2
    1888:	d13e      	bne.n	1908 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    188a:	9906      	ldr	r1, [sp, #24]
    188c:	9b07      	ldr	r3, [sp, #28]
    188e:	eba1 0108 	sub.w	r1, r1, r8
    1892:	4a82      	ldr	r2, [pc, #520]	; (1a9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>)
    1894:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1898:	eba3 0308 	sub.w	r3, r3, r8
    189c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    18a0:	2902      	cmp	r1, #2
    18a2:	d36a      	bcc.n	197a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18a4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    18a8:	d267      	bcs.n	197a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18aa:	429a      	cmp	r2, r3
    18ac:	d365      	bcc.n	197a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18ae:	f04f 0901 	mov.w	r9, #1
    18b2:	ab01      	add	r3, sp, #4
    18b4:	aa05      	add	r2, sp, #20
    18b6:	4631      	mov	r1, r6
    18b8:	f7fe ff6a 	bl	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
    18bc:	2800      	cmp	r0, #0
    18be:	d064      	beq.n	198a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x252>
    18c0:	f89d 1014 	ldrb.w	r1, [sp, #20]
    18c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    18c8:	4633      	mov	r3, r6
    18ca:	428a      	cmp	r2, r1
    18cc:	d061      	beq.n	1992 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x25a>
    18ce:	2005      	movs	r0, #5
    18d0:	f7fe fdac 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    18d4:	ea4f 0100 	mov.w	r1, r0
    18d8:	eb07 004a 	add.w	r0, r7, sl, lsl #1
    18dc:	7041      	strb	r1, [r0, #1]
    18de:	f89d 0014 	ldrb.w	r0, [sp, #20]
    18e2:	2820      	cmp	r0, #32
    18e4:	bf03      	ittte	eq
    18e6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    18ea:	f880 a020 	strbeq.w	sl, [r0, #32]
    18ee:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    18f2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    18f6:	bf18      	it	ne
    18f8:	f880 a001 	strbne.w	sl, [r0, #1]
    18fc:	4632      	mov	r2, r6
    18fe:	4651      	mov	r1, sl
    1900:	f05f 0003 	movs.w	r0, #3
    1904:	f7ff fbfa 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1908:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    190c:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1910:	b124      	cbz	r4, 191c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e4>
    1912:	2100      	movs	r1, #0
    1914:	f240 7089 	movw	r0, #1929	; 0x789
    1918:	f3af 8000 	nop.w
    191c:	4860      	ldr	r0, [pc, #384]	; (1aa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>)
    191e:	2800      	cmp	r0, #0
    1920:	bf18      	it	ne
    1922:	f3af 8000 	nopne.w
    1926:	f3ef 8810 	mrs	r8, PRIMASK
    192a:	b672      	cpsid	i
    192c:	b124      	cbz	r4, 1938 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x200>
    192e:	2100      	movs	r1, #0
    1930:	f240 708f 	movw	r0, #1935	; 0x78f
    1934:	f3af 8000 	nop.w
    1938:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    193c:	2800      	cmp	r0, #0
    193e:	f47f af44 	bne.w	17ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1942:	b124      	cbz	r4, 194e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x216>
    1944:	2100      	movs	r1, #0
    1946:	f240 7097 	movw	r0, #1943	; 0x797
    194a:	f3af 8000 	nop.w
    194e:	f10d 0e18 	add.w	lr, sp, #24
    1952:	9800      	ldr	r0, [sp, #0]
    1954:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1958:	f100 0008 	add.w	r0, r0, #8
    195c:	f1b9 0f00 	cmp.w	r9, #0
    1960:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1964:	d042      	beq.n	19ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    1966:	b124      	cbz	r4, 1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x23a>
    1968:	2100      	movs	r1, #0
    196a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    196e:	f3af 8000 	nop.w
    1972:	f1bb 0f00 	cmp.w	fp, #0
    1976:	d12b      	bne.n	19d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1978:	e015      	b.n	19a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
    197a:	4632      	mov	r2, r6
    197c:	4651      	mov	r1, sl
    197e:	2004      	movs	r0, #4
    1980:	f7ff fbbc 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1984:	f04f 0901 	mov.w	r9, #1
    1988:	e7be      	b.n	1908 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    198a:	4632      	mov	r2, r6
    198c:	4651      	mov	r1, sl
    198e:	2004      	movs	r0, #4
    1990:	e7b8      	b.n	1904 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1cc>
    1992:	2920      	cmp	r1, #32
    1994:	bf19      	ittee	ne
    1996:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    199a:	7841      	ldrbne	r1, [r0, #1]
    199c:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    19a0:	f890 1020 	ldrbeq.w	r1, [r0, #32]
    19a4:	e798      	b.n	18d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a0>
    19a6:	b19f      	cbz	r7, 19d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19a8:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    19ac:	2820      	cmp	r0, #32
    19ae:	d10f      	bne.n	19d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19b0:	b124      	cbz	r4, 19bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    19b2:	2100      	movs	r1, #0
    19b4:	f240 70a9 	movw	r0, #1961	; 0x7a9
    19b8:	f3af 8000 	nop.w
    19bc:	4631      	mov	r1, r6
    19be:	2002      	movs	r0, #2
    19c0:	f7ff fbcc 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    19c4:	b920      	cbnz	r0, 19d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19c6:	980c      	ldr	r0, [sp, #48]	; 0x30
    19c8:	7800      	ldrb	r0, [r0, #0]
    19ca:	b3e8      	cbz	r0, 1a48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x310>
    19cc:	2801      	cmp	r0, #1
    19ce:	d049      	beq.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    19d0:	b124      	cbz	r4, 19dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a4>
    19d2:	2100      	movs	r1, #0
    19d4:	f240 70c6 	movw	r0, #1990	; 0x7c6
    19d8:	f3af 8000 	nop.w
    19dc:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    19e0:	2001      	movs	r0, #1
    19e2:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    19e6:	bf00      	nop
    19e8:	f04f 0901 	mov.w	r9, #1
    19ec:	b124      	cbz	r4, 19f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    19ee:	2100      	movs	r1, #0
    19f0:	f240 70cf 	movw	r0, #1999	; 0x7cf
    19f4:	f3af 8000 	nop.w
    19f8:	f1b8 0f00 	cmp.w	r8, #0
    19fc:	d03b      	beq.n	1a76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    19fe:	b124      	cbz	r4, 1a0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1a00:	2100      	movs	r1, #0
    1a02:	f240 70d3 	movw	r0, #2003	; 0x7d3
    1a06:	f3af 8000 	nop.w
    1a0a:	f1b9 0f00 	cmp.w	r9, #0
    1a0e:	d011      	beq.n	1a34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1a10:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1a14:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1a18:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1a1c:	2820      	cmp	r0, #32
    1a1e:	d009      	beq.n	1a34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1a20:	b124      	cbz	r4, 1a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    1a22:	2100      	movs	r1, #0
    1a24:	f240 70da 	movw	r0, #2010	; 0x7da
    1a28:	f3af 8000 	nop.w
    1a2c:	481d      	ldr	r0, [pc, #116]	; (1aa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>)
    1a2e:	7840      	ldrb	r0, [r0, #1]
    1a30:	f001 fe7c 	bl	372c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1a34:	b124      	cbz	r4, 1a40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
    1a36:	2100      	movs	r1, #0
    1a38:	f240 70df 	movw	r0, #2015	; 0x7df
    1a3c:	f3af 8000 	nop.w
    1a40:	b00d      	add	sp, #52	; 0x34
    1a42:	4648      	mov	r0, r9
    1a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a48:	e7ff      	b.n	1a4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1a4a:	b124      	cbz	r4, 1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31e>
    1a4c:	2100      	movs	r1, #0
    1a4e:	f240 70b1 	movw	r0, #1969	; 0x7b1
    1a52:	f3af 8000 	nop.w
    1a56:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1a5a:	4651      	mov	r1, sl
    1a5c:	2004      	movs	r0, #4
    1a5e:	f7ff fb4d 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1a62:	e7c1      	b.n	19e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b0>
    1a64:	2c00      	cmp	r4, #0
    1a66:	f43f aeb0 	beq.w	17ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a6a:	2100      	movs	r1, #0
    1a6c:	f240 70bc 	movw	r0, #1980	; 0x7bc
    1a70:	f3af 8000 	nop.w
    1a74:	e6a9      	b.n	17ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a76:	4807      	ldr	r0, [pc, #28]	; (1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    1a78:	2800      	cmp	r0, #0
    1a7a:	bf18      	it	ne
    1a7c:	f3af 8000 	nopne.w
    1a80:	b662      	cpsie	i
    1a82:	e7bc      	b.n	19fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    1a84:	e000ed04 	.word	0xe000ed04
    1a88:	200008ac 	.word	0x200008ac
    1a8c:	00000000 	.word	0x00000000
    1a90:	2000052c 	.word	0x2000052c
    1a94:	00000000 	.word	0x00000000
    1a98:	2000082c 	.word	0x2000082c
    1a9c:	003fffff 	.word	0x003fffff
    1aa0:	00000000 	.word	0x00000000
    1aa4:	20000010 	.word	0x20000010

00001aa8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1aa8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1aac:	48a3      	ldr	r0, [pc, #652]	; (1d3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>)
    1aae:	b086      	sub	sp, #24
    1ab0:	6800      	ldr	r0, [r0, #0]
    1ab2:	05c0      	lsls	r0, r0, #23
    1ab4:	0dc0      	lsrs	r0, r0, #23
    1ab6:	d011      	beq.n	1adc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1ab8:	3810      	subs	r0, #16
    1aba:	b240      	sxtb	r0, r0
    1abc:	2800      	cmp	r0, #0
    1abe:	bfb8      	it	lt
    1ac0:	f000 000f 	andlt.w	r0, r0, #15
    1ac4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1ac8:	bfac      	ite	ge
    1aca:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1ace:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1ad2:	0940      	lsrs	r0, r0, #5
    1ad4:	bf08      	it	eq
    1ad6:	f04f 0901 	moveq.w	r9, #1
    1ada:	d001      	beq.n	1ae0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1adc:	f04f 0900 	mov.w	r9, #0
    1ae0:	9806      	ldr	r0, [sp, #24]
    1ae2:	7800      	ldrb	r0, [r0, #0]
    1ae4:	2800      	cmp	r0, #0
    1ae6:	f04f 0000 	mov.w	r0, #0
    1aea:	bf1c      	itt	ne
    1aec:	b007      	addne	sp, #28
    1aee:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1af2:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1d40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x298>
    1af6:	4d93      	ldr	r5, [pc, #588]	; (1d44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    1af8:	4c93      	ldr	r4, [pc, #588]	; (1d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>)
    1afa:	f04f 0b00 	mov.w	fp, #0
    1afe:	9004      	str	r0, [sp, #16]
    1b00:	b125      	cbz	r5, 1b0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1b02:	2100      	movs	r1, #0
    1b04:	f240 6065 	movw	r0, #1637	; 0x665
    1b08:	f3af 8000 	nop.w
    1b0c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1b10:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1b14:	f04f 0800 	mov.w	r8, #0
    1b18:	b125      	cbz	r5, 1b24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1b1a:	2100      	movs	r1, #0
    1b1c:	f240 606a 	movw	r0, #1642	; 0x66a
    1b20:	f3af 8000 	nop.w
    1b24:	f1b9 0f00 	cmp.w	r9, #0
    1b28:	d11d      	bne.n	1b66 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1b2a:	4637      	mov	r7, r6
    1b2c:	2001      	movs	r0, #1
    1b2e:	ea20 0607 	bic.w	r6, r0, r7
    1b32:	4886      	ldr	r0, [pc, #536]	; (1d4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT>)
    1b34:	2240      	movs	r2, #64	; 0x40
    1b36:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1b3a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1b3e:	f005 fd25 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1b42:	b125      	cbz	r5, 1b4e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1b44:	2100      	movs	r1, #0
    1b46:	f240 50da 	movw	r0, #1498	; 0x5da
    1b4a:	f3af 8000 	nop.w
    1b4e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1b52:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1b56:	6a09      	ldr	r1, [r1, #32]
    1b58:	6201      	str	r1, [r0, #32]
    1b5a:	b125      	cbz	r5, 1b66 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1b5c:	2100      	movs	r1, #0
    1b5e:	f240 50de 	movw	r0, #1502	; 0x5de
    1b62:	f3af 8000 	nop.w
    1b66:	b125      	cbz	r5, 1b72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1b68:	2100      	movs	r1, #0
    1b6a:	f240 6072 	movw	r0, #1650	; 0x672
    1b6e:	f3af 8000 	nop.w
    1b72:	f000 fe53 	bl	281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1b76:	4607      	mov	r7, r0
    1b78:	4633      	mov	r3, r6
    1b7a:	466a      	mov	r2, sp
    1b7c:	9906      	ldr	r1, [sp, #24]
    1b7e:	f7ff f917 	bl	db0 <CONFIG_ISR_STACK_SIZE+0x5b0>
    1b82:	b125      	cbz	r5, 1b8e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1b84:	2100      	movs	r1, #0
    1b86:	f44f 60cf 	mov.w	r0, #1656	; 0x678
    1b8a:	f3af 8000 	nop.w
    1b8e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1b92:	2820      	cmp	r0, #32
    1b94:	d014      	beq.n	1bc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1b96:	6920      	ldr	r0, [r4, #16]
    1b98:	9900      	ldr	r1, [sp, #0]
    1b9a:	1a09      	subs	r1, r1, r0
    1b9c:	0209      	lsls	r1, r1, #8
    1b9e:	17ca      	asrs	r2, r1, #31
    1ba0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1ba4:	1209      	asrs	r1, r1, #8
    1ba6:	d50b      	bpl.n	1bc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1ba8:	e9dd 2100 	ldrd	r2, r1, [sp]
    1bac:	1a89      	subs	r1, r1, r2
    1bae:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1bb2:	4408      	add	r0, r1
    1bb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bb8:	e9cd 2000 	strd	r2, r0, [sp]
    1bbc:	f04f 0801 	mov.w	r8, #1
    1bc0:	b14d      	cbz	r5, 1bd6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1bc2:	2100      	movs	r1, #0
    1bc4:	f240 6082 	movw	r0, #1666	; 0x682
    1bc8:	f3af 8000 	nop.w
    1bcc:	2100      	movs	r1, #0
    1bce:	f44f 60d1 	mov.w	r0, #1672	; 0x688
    1bd2:	f3af 8000 	nop.w
    1bd6:	9800      	ldr	r0, [sp, #0]
    1bd8:	9901      	ldr	r1, [sp, #4]
    1bda:	1bc0      	subs	r0, r0, r7
    1bdc:	1bc9      	subs	r1, r1, r7
    1bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1be2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1be6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1bea:	d205      	bcs.n	1bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1bec:	458a      	cmp	sl, r1
    1bee:	d303      	bcc.n	1bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1bf0:	f1b9 0f00 	cmp.w	r9, #0
    1bf4:	d10c      	bne.n	1c10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1bf6:	e003      	b.n	1c00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1bf8:	f1b9 0f00 	cmp.w	r9, #0
    1bfc:	d038      	beq.n	1c70 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    1bfe:	e094      	b.n	1d2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    1c00:	4633      	mov	r3, r6
    1c02:	463a      	mov	r2, r7
    1c04:	4669      	mov	r1, sp
    1c06:	4852      	ldr	r0, [pc, #328]	; (1d50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>)
    1c08:	f7fe fc4c 	bl	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
    1c0c:	ea48 0800 	orr.w	r8, r8, r0
    1c10:	f1b8 0f00 	cmp.w	r8, #0
    1c14:	d022      	beq.n	1c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    1c16:	9800      	ldr	r0, [sp, #0]
    1c18:	f005 fb4a 	bl	72b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c1c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1c20:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1c24:	4b4b      	ldr	r3, [pc, #300]	; (1d54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>)
    1c26:	4411      	add	r1, r2
    1c28:	1c49      	adds	r1, r1, #1
    1c2a:	1842      	adds	r2, r0, r1
    1c2c:	4298      	cmp	r0, r3
    1c2e:	d841      	bhi.n	1cb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    1c30:	4847      	ldr	r0, [pc, #284]	; (1d50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>)
    1c32:	4281      	cmp	r1, r0
    1c34:	dc5a      	bgt.n	1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    1c36:	4240      	negs	r0, r0
    1c38:	4281      	cmp	r1, r0
    1c3a:	db5f      	blt.n	1cfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    1c3c:	1c58      	adds	r0, r3, #1
    1c3e:	4290      	cmp	r0, r2
    1c40:	bfdc      	itt	le
    1c42:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1c46:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1c4a:	dd05      	ble.n	1c58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    1c4c:	2a00      	cmp	r2, #0
    1c4e:	bfbc      	itt	lt
    1c50:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1c54:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1c58:	9806      	ldr	r0, [sp, #24]
    1c5a:	60c2      	str	r2, [r0, #12]
    1c5c:	2001      	movs	r0, #1
    1c5e:	9004      	str	r0, [sp, #16]
    1c60:	2d00      	cmp	r5, #0
    1c62:	d062      	beq.n	1d2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    1c64:	2100      	movs	r1, #0
    1c66:	f240 609b 	movw	r0, #1691	; 0x69b
    1c6a:	f3af 8000 	nop.w
    1c6e:	e05c      	b.n	1d2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    1c70:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1c74:	aa05      	add	r2, sp, #20
    1c76:	a904      	add	r1, sp, #16
    1c78:	f000 fc7a 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1c7c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1c80:	2820      	cmp	r0, #32
    1c82:	d01c      	beq.n	1cbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    1c84:	6920      	ldr	r0, [r4, #16]
    1c86:	1d40      	adds	r0, r0, #5
    1c88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c8c:	e9dd 2100 	ldrd	r2, r1, [sp]
    1c90:	1a89      	subs	r1, r1, r2
    1c92:	4401      	add	r1, r0
    1c94:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c98:	e9cd 0100 	strd	r0, r1, [sp]
    1c9c:	f005 fb08 	bl	72b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1ca0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1ca4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1ca8:	4b2a      	ldr	r3, [pc, #168]	; (1d54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>)
    1caa:	4411      	add	r1, r2
    1cac:	1c49      	adds	r1, r1, #1
    1cae:	1842      	adds	r2, r0, r1
    1cb0:	4298      	cmp	r0, r3
    1cb2:	d918      	bls.n	1ce6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    1cb4:	f240 6116 	movw	r1, #1558	; 0x616
    1cb8:	2070      	movs	r0, #112	; 0x70
    1cba:	f001 fc67 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cbe:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1cc2:	f107 0609 	add.w	r6, r7, #9
    1cc6:	b120      	cbz	r0, 1cd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    1cc8:	f001 fbfc 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ccc:	2800      	cmp	r0, #0
    1cce:	bf08      	it	eq
    1cd0:	3632      	addeq	r6, #50	; 0x32
    1cd2:	4821      	ldr	r0, [pc, #132]	; (1d58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1cd4:	7841      	ldrb	r1, [r0, #1]
    1cd6:	9804      	ldr	r0, [sp, #16]
    1cd8:	4281      	cmp	r1, r0
    1cda:	bf84      	itt	hi
    1cdc:	1a08      	subhi	r0, r1, r0
    1cde:	4406      	addhi	r6, r0
    1ce0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1ce4:	e7d2      	b.n	1c8c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    1ce6:	481a      	ldr	r0, [pc, #104]	; (1d50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>)
    1ce8:	4281      	cmp	r1, r0
    1cea:	dd04      	ble.n	1cf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    1cec:	f240 6117 	movw	r1, #1559	; 0x617
    1cf0:	2070      	movs	r0, #112	; 0x70
    1cf2:	f001 fc4b 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cf6:	4819      	ldr	r0, [pc, #100]	; (1d5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>)
    1cf8:	4281      	cmp	r1, r0
    1cfa:	da04      	bge.n	1d06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    1cfc:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1d00:	2070      	movs	r0, #112	; 0x70
    1d02:	f001 fc43 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d06:	4816      	ldr	r0, [pc, #88]	; (1d60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>)
    1d08:	4290      	cmp	r0, r2
    1d0a:	bfdc      	itt	le
    1d0c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d10:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d14:	dd05      	ble.n	1d22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    1d16:	2a00      	cmp	r2, #0
    1d18:	bfbc      	itt	lt
    1d1a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d1e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d22:	9806      	ldr	r0, [sp, #24]
    1d24:	60c2      	str	r2, [r0, #12]
    1d26:	2001      	movs	r0, #1
    1d28:	9004      	str	r0, [sp, #16]
    1d2a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1d2e:	2800      	cmp	r0, #0
    1d30:	f47f aee6 	bne.w	1b00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1d34:	9804      	ldr	r0, [sp, #16]
    1d36:	b007      	add	sp, #28
    1d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d3c:	e000ed04 	.word	0xe000ed04
    1d40:	003fffff 	.word	0x003fffff
    1d44:	00000000 	.word	0x00000000
    1d48:	200008ac 	.word	0x200008ac
    1d4c:	2000082c 	.word	0x2000082c
    1d50:	07a12000 	.word	0x07a12000
    1d54:	1e847fff 	.word	0x1e847fff
    1d58:	20000012 	.word	0x20000012
    1d5c:	f85ee000 	.word	0xf85ee000
    1d60:	1e848000 	.word	0x1e848000

00001d64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1d64:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d68:	4d80      	ldr	r5, [pc, #512]	; (1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    1d6a:	b08c      	sub	sp, #48	; 0x30
    1d6c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1d70:	2000      	movs	r0, #0
    1d72:	9009      	str	r0, [sp, #36]	; 0x24
    1d74:	2001      	movs	r0, #1
    1d76:	4c7e      	ldr	r4, [pc, #504]	; (1f70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    1d78:	f04f 0800 	mov.w	r8, #0
    1d7c:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1d80:	4683      	mov	fp, r0
    1d82:	9008      	str	r0, [sp, #32]
    1d84:	b124      	cbz	r4, 1d90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1d86:	2100      	movs	r1, #0
    1d88:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1d8c:	f3af 8000 	nop.w
    1d90:	9808      	ldr	r0, [sp, #32]
    1d92:	b390      	cbz	r0, 1dfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1d94:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1d98:	b124      	cbz	r4, 1da4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1d9a:	2100      	movs	r1, #0
    1d9c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    1da0:	f3af 8000 	nop.w
    1da4:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    1da8:	2240      	movs	r2, #64	; 0x40
    1daa:	ea2b 0609 	bic.w	r6, fp, r9
    1dae:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1db2:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1db6:	4682      	mov	sl, r0
    1db8:	f005 fbe8 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1dbc:	b124      	cbz	r4, 1dc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1dbe:	2100      	movs	r1, #0
    1dc0:	f240 50da 	movw	r0, #1498	; 0x5da
    1dc4:	f3af 8000 	nop.w
    1dc8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1dcc:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1dd0:	9000      	str	r0, [sp, #0]
    1dd2:	6a09      	ldr	r1, [r1, #32]
    1dd4:	6201      	str	r1, [r0, #32]
    1dd6:	b124      	cbz	r4, 1de2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1dd8:	2100      	movs	r1, #0
    1dda:	f240 50de 	movw	r0, #1502	; 0x5de
    1dde:	f3af 8000 	nop.w
    1de2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1de6:	b180      	cbz	r0, 1e0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1de8:	2c00      	cmp	r4, #0
    1dea:	bf1c      	itt	ne
    1dec:	2100      	movne	r1, #0
    1dee:	f240 70f9 	movwne	r0, #2041	; 0x7f9
    1df2:	d0c7      	beq.n	1d84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1df4:	f3af 8000 	nop.w
    1df8:	e7c4      	b.n	1d84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1dfa:	e7ff      	b.n	1dfc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1dfc:	485d      	ldr	r0, [pc, #372]	; (1f74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1dfe:	2800      	cmp	r0, #0
    1e00:	bf18      	it	ne
    1e02:	f3af 8000 	nopne.w
    1e06:	b662      	cpsie	i
    1e08:	e7c4      	b.n	1d94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1e0a:	b124      	cbz	r4, 1e16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1e0c:	2100      	movs	r1, #0
    1e0e:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1e12:	f3af 8000 	nop.w
    1e16:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e18:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1e1c:	2803      	cmp	r0, #3
    1e1e:	d178      	bne.n	1f12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1e20:	f8dd 9000 	ldr.w	r9, [sp]
    1e24:	f8cd 9018 	str.w	r9, [sp, #24]
    1e28:	990c      	ldr	r1, [sp, #48]	; 0x30
    1e2a:	f899 0020 	ldrb.w	r0, [r9, #32]
    1e2e:	4288      	cmp	r0, r1
    1e30:	bf14      	ite	ne
    1e32:	f04f 0a00 	movne.w	sl, #0
    1e36:	f04f 0a01 	moveq.w	sl, #1
    1e3a:	f109 0c20 	add.w	ip, r9, #32
    1e3e:	4686      	mov	lr, r0
    1e40:	2220      	movs	r2, #32
    1e42:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1e46:	e003      	b.n	1e50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1e48:	4602      	mov	r2, r0
    1e4a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1e4e:	7840      	ldrb	r0, [r0, #1]
    1e50:	4288      	cmp	r0, r1
    1e52:	d002      	beq.n	1e5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1e54:	2820      	cmp	r0, #32
    1e56:	d00a      	beq.n	1e6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1e58:	e7f6      	b.n	1e48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1e5a:	2820      	cmp	r0, #32
    1e5c:	d007      	beq.n	1e6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1e5e:	4586      	cmp	lr, r0
    1e60:	d107      	bne.n	1e72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1e62:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1e66:	7840      	ldrb	r0, [r0, #1]
    1e68:	f88c 0000 	strb.w	r0, [ip]
    1e6c:	e007      	b.n	1e7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1e6e:	4640      	mov	r0, r8
    1e70:	e00c      	b.n	1e8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    1e72:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1e76:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1e7a:	7840      	ldrb	r0, [r0, #1]
    1e7c:	7048      	strb	r0, [r1, #1]
    1e7e:	b124      	cbz	r4, 1e8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    1e80:	2100      	movs	r1, #0
    1e82:	f240 5044 	movw	r0, #1348	; 0x544
    1e86:	f3af 8000 	nop.w
    1e8a:	4658      	mov	r0, fp
    1e8c:	ea10 0f0a 	tst.w	r0, sl
    1e90:	bf18      	it	ne
    1e92:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    1e96:	b3e0      	cbz	r0, 1f12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1e98:	b124      	cbz	r4, 1ea4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    1e9a:	2100      	movs	r1, #0
    1e9c:	f640 0002 	movw	r0, #2050	; 0x802
    1ea0:	f3af 8000 	nop.w
    1ea4:	4632      	mov	r2, r6
    1ea6:	2001      	movs	r0, #1
    1ea8:	990c      	ldr	r1, [sp, #48]	; 0x30
    1eaa:	f7ff f927 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1eae:	9806      	ldr	r0, [sp, #24]
    1eb0:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    1eb4:	b124      	cbz	r4, 1ec0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    1eb6:	2100      	movs	r1, #0
    1eb8:	f640 000d 	movw	r0, #2061	; 0x80d
    1ebc:	f3af 8000 	nop.w
    1ec0:	482d      	ldr	r0, [pc, #180]	; (1f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    1ec2:	2800      	cmp	r0, #0
    1ec4:	bf18      	it	ne
    1ec6:	f3af 8000 	nopne.w
    1eca:	f3ef 8010 	mrs	r0, PRIMASK
    1ece:	b672      	cpsid	i
    1ed0:	9008      	str	r0, [sp, #32]
    1ed2:	b124      	cbz	r4, 1ede <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    1ed4:	2100      	movs	r1, #0
    1ed6:	f640 0012 	movw	r0, #2066	; 0x812
    1eda:	f3af 8000 	nop.w
    1ede:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1ee2:	b138      	cbz	r0, 1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    1ee4:	2c00      	cmp	r4, #0
    1ee6:	bf1c      	itt	ne
    1ee8:	2100      	movne	r1, #0
    1eea:	f640 0016 	movwne	r0, #2070	; 0x816
    1eee:	f43f af49 	beq.w	1d84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1ef2:	e77f      	b.n	1df4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    1ef4:	f1b9 0f00 	cmp.w	r9, #0
    1ef8:	d008      	beq.n	1f0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    1efa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1efe:	2820      	cmp	r0, #32
    1f00:	d104      	bne.n	1f0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    1f02:	4631      	mov	r1, r6
    1f04:	2002      	movs	r0, #2
    1f06:	f7ff f929 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    1f0a:	b1f8      	cbz	r0, 1f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    1f0c:	b134      	cbz	r4, 1f1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    1f0e:	2100      	movs	r1, #0
    1f10:	e000      	b.n	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    1f12:	e009      	b.n	1f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    1f14:	f640 002a 	movw	r0, #2090	; 0x82a
    1f18:	f3af 8000 	nop.w
    1f1c:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1f20:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    1f24:	2001      	movs	r0, #1
    1f26:	9009      	str	r0, [sp, #36]	; 0x24
    1f28:	b124      	cbz	r4, 1f34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    1f2a:	2100      	movs	r1, #0
    1f2c:	f640 0033 	movw	r0, #2099	; 0x833
    1f30:	f3af 8000 	nop.w
    1f34:	9808      	ldr	r0, [sp, #32]
    1f36:	b188      	cbz	r0, 1f5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    1f38:	b124      	cbz	r4, 1f44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    1f3a:	2100      	movs	r1, #0
    1f3c:	f640 0037 	movw	r0, #2103	; 0x837
    1f40:	f3af 8000 	nop.w
    1f44:	9809      	ldr	r0, [sp, #36]	; 0x24
    1f46:	b00d      	add	sp, #52	; 0x34
    1f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f4c:	2c00      	cmp	r4, #0
    1f4e:	d0f1      	beq.n	1f34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    1f50:	2100      	movs	r1, #0
    1f52:	f640 0025 	movw	r0, #2085	; 0x825
    1f56:	f3af 8000 	nop.w
    1f5a:	e7e6      	b.n	1f2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    1f5c:	4805      	ldr	r0, [pc, #20]	; (1f74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1f5e:	2800      	cmp	r0, #0
    1f60:	bf18      	it	ne
    1f62:	f3af 8000 	nopne.w
    1f66:	b662      	cpsie	i
    1f68:	e7e6      	b.n	1f38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    1f6a:	0000      	.short	0x0000
    1f6c:	200008ac 	.word	0x200008ac
	...

00001f7c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    1f7c:	b510      	push	{r4, lr}
    1f7e:	2820      	cmp	r0, #32
    1f80:	d211      	bcs.n	1fa6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1f82:	490e      	ldr	r1, [pc, #56]	; (1fbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    1f84:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    1f88:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    1f8c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    1f90:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    1f94:	b13b      	cbz	r3, 1fa6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1f96:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    1f9a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    1f9e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    1fa2:	2a01      	cmp	r2, #1
    1fa4:	d001      	beq.n	1faa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    1fa6:	2000      	movs	r0, #0
    1fa8:	bd10      	pop	{r4, pc}
    1faa:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    1fae:	4601      	mov	r1, r0
    1fb0:	2000      	movs	r0, #0
    1fb2:	f7ff f8a3 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1fb6:	2001      	movs	r0, #1
    1fb8:	bd10      	pop	{r4, pc}
    1fba:	0000      	.short	0x0000
    1fbc:	200008ac 	.word	0x200008ac

00001fc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    1fc0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1fc4:	4e7e      	ldr	r6, [pc, #504]	; (21c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    1fc6:	4680      	mov	r8, r0
    1fc8:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1fcc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    1fd0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    1fd4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    1fd8:	2800      	cmp	r0, #0
    1fda:	d065      	beq.n	20a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    1fdc:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    1fe0:	4d78      	ldr	r5, [pc, #480]	; (21c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    1fe2:	b125      	cbz	r5, 1fee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    1fe4:	2100      	movs	r1, #0
    1fe6:	f640 30b9 	movw	r0, #3001	; 0xbb9
    1fea:	f3af 8000 	nop.w
    1fee:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    1ff2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    1ff6:	2801      	cmp	r0, #1
    1ff8:	d018      	beq.n	202c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    1ffa:	b2c0      	uxtb	r0, r0
    1ffc:	2804      	cmp	r0, #4
    1ffe:	bf1c      	itt	ne
    2000:	2805      	cmpne	r0, #5
    2002:	2806      	cmpne	r0, #6
    2004:	d055      	beq.n	20b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2006:	b12d      	cbz	r5, 2014 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2008:	f04f 0100 	mov.w	r1, #0
    200c:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2010:	f3af 8000 	nop.w
    2014:	f001 fbe0 	bl	37d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2018:	b125      	cbz	r5, 2024 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    201a:	2100      	movs	r1, #0
    201c:	f640 30c9 	movw	r0, #3017	; 0xbc9
    2020:	f3af 8000 	nop.w
    2024:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2028:	2801      	cmp	r0, #1
    202a:	d1e6      	bne.n	1ffa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    202c:	2401      	movs	r4, #1
    202e:	b125      	cbz	r5, 203a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2030:	2100      	movs	r1, #0
    2032:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    2036:	f3af 8000 	nop.w
    203a:	b3a4      	cbz	r4, 20a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    203c:	2000      	movs	r0, #0
    203e:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2042:	b125      	cbz	r5, 204e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    2044:	2100      	movs	r1, #0
    2046:	f640 30d5 	movw	r0, #3029	; 0xbd5
    204a:	f3af 8000 	nop.w
    204e:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2052:	2001      	movs	r0, #1
    2054:	ea20 090b 	bic.w	r9, r0, fp
    2058:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    205c:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2060:	2240      	movs	r2, #64	; 0x40
    2062:	f005 fa93 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2066:	b125      	cbz	r5, 2072 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    2068:	2100      	movs	r1, #0
    206a:	f240 50da 	movw	r0, #1498	; 0x5da
    206e:	f3af 8000 	nop.w
    2072:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2076:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    207a:	6a00      	ldr	r0, [r0, #32]
    207c:	f8ca 0020 	str.w	r0, [sl, #32]
    2080:	b125      	cbz	r5, 208c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    2082:	2100      	movs	r1, #0
    2084:	f240 50de 	movw	r0, #1502	; 0x5de
    2088:	f3af 8000 	nop.w
    208c:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2090:	b1e0      	cbz	r0, 20cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    2092:	2d00      	cmp	r5, #0
    2094:	bf1c      	itt	ne
    2096:	2100      	movne	r1, #0
    2098:	f640 30db 	movwne	r0, #3035	; 0xbdb
    209c:	d0c7      	beq.n	202e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    209e:	bf00      	nop
    20a0:	f3af 8000 	nop.w
    20a4:	e7c3      	b.n	202e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    20a6:	e00a      	b.n	20be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    20a8:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    20ac:	2070      	movs	r0, #112	; 0x70
    20ae:	f001 fa6d 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20b2:	464a      	mov	r2, r9
    20b4:	4641      	mov	r1, r8
    20b6:	2001      	movs	r0, #1
    20b8:	f7ff f820 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    20bc:	e7ac      	b.n	2018 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    20be:	4842      	ldr	r0, [pc, #264]	; (21c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    20c0:	2800      	cmp	r0, #0
    20c2:	bf18      	it	ne
    20c4:	f3af 8000 	nopne.w
    20c8:	b662      	cpsie	i
    20ca:	e7b7      	b.n	203c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    20cc:	b125      	cbz	r5, 20d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    20ce:	2100      	movs	r1, #0
    20d0:	f640 30df 	movw	r0, #3039	; 0xbdf
    20d4:	f3af 8000 	nop.w
    20d8:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    20dc:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    20e0:	4640      	mov	r0, r8
    20e2:	461c      	mov	r4, r3
    20e4:	f04f 0b20 	mov.w	fp, #32
    20e8:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    20ec:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    20f0:	e004      	b.n	20fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    20f2:	46a3      	mov	fp, r4
    20f4:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    20f8:	f89c 4001 	ldrb.w	r4, [ip, #1]
    20fc:	4284      	cmp	r4, r0
    20fe:	d002      	beq.n	2106 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2100:	2c20      	cmp	r4, #32
    2102:	d02b      	beq.n	215c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2104:	e7f5      	b.n	20f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2106:	2c20      	cmp	r4, #32
    2108:	d028      	beq.n	215c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    210a:	42a3      	cmp	r3, r4
    210c:	d104      	bne.n	2118 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    210e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2112:	7840      	ldrb	r0, [r0, #1]
    2114:	7008      	strb	r0, [r1, #0]
    2116:	e005      	b.n	2124 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2118:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    211c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2120:	7840      	ldrb	r0, [r0, #1]
    2122:	7048      	strb	r0, [r1, #1]
    2124:	f1ba 0f00 	cmp.w	sl, #0
    2128:	d011      	beq.n	214e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    212a:	b125      	cbz	r5, 2136 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    212c:	2100      	movs	r1, #0
    212e:	f240 503c 	movw	r0, #1340	; 0x53c
    2132:	f3af 8000 	nop.w
    2136:	f89a 0000 	ldrb.w	r0, [sl]
    213a:	42a0      	cmp	r0, r4
    213c:	d107      	bne.n	214e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    213e:	b125      	cbz	r5, 214a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2140:	2100      	movs	r1, #0
    2142:	f240 503f 	movw	r0, #1343	; 0x53f
    2146:	f3af 8000 	nop.w
    214a:	f88a b000 	strb.w	fp, [sl]
    214e:	b15d      	cbz	r5, 2168 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    2150:	2100      	movs	r1, #0
    2152:	f240 5044 	movw	r0, #1348	; 0x544
    2156:	f3af 8000 	nop.w
    215a:	e000      	b.n	215e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    215c:	b125      	cbz	r5, 2168 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    215e:	2100      	movs	r1, #0
    2160:	f640 30e3 	movw	r0, #3043	; 0xbe3
    2164:	f3af 8000 	nop.w
    2168:	4818      	ldr	r0, [pc, #96]	; (21cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    216a:	2800      	cmp	r0, #0
    216c:	bf18      	it	ne
    216e:	f3af 8000 	nopne.w
    2172:	f3ef 8410 	mrs	r4, PRIMASK
    2176:	b672      	cpsid	i
    2178:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    217c:	b138      	cbz	r0, 218e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    217e:	2d00      	cmp	r5, #0
    2180:	bf1c      	itt	ne
    2182:	2100      	movne	r1, #0
    2184:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    2188:	f43f af51 	beq.w	202e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    218c:	e788      	b.n	20a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    218e:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2192:	2001      	movs	r0, #1
    2194:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2198:	b154      	cbz	r4, 21b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    219a:	2d00      	cmp	r5, #0
    219c:	bf08      	it	eq
    219e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    21a2:	2100      	movs	r1, #0
    21a4:	f640 30f6 	movw	r0, #3062	; 0xbf6
    21a8:	f3af 8000 	nop.w
    21ac:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    21b0:	4805      	ldr	r0, [pc, #20]	; (21c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    21b2:	2800      	cmp	r0, #0
    21b4:	bf18      	it	ne
    21b6:	f3af 8000 	nopne.w
    21ba:	b662      	cpsie	i
    21bc:	e7ed      	b.n	219a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    21be:	0000      	.short	0x0000
    21c0:	200008ac 	.word	0x200008ac
	...

000021d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    21d0:	b570      	push	{r4, r5, r6, lr}
    21d2:	460d      	mov	r5, r1
    21d4:	4606      	mov	r6, r0
    21d6:	f001 f963 	bl	34a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    21da:	480f      	ldr	r0, [pc, #60]	; (2218 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    21dc:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    21e0:	2400      	movs	r4, #0
    21e2:	3880      	subs	r0, #128	; 0x80
    21e4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    21e8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    21ec:	b129      	cbz	r1, 21fa <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    21ee:	1c61      	adds	r1, r4, #1
    21f0:	b2cc      	uxtb	r4, r1
    21f2:	2c20      	cmp	r4, #32
    21f4:	d3f8      	bcc.n	21e8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    21f6:	2020      	movs	r0, #32
    21f8:	bd70      	pop	{r4, r5, r6, pc}
    21fa:	4808      	ldr	r0, [pc, #32]	; (221c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    21fc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2200:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2204:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2208:	4621      	mov	r1, r4
    220a:	6045      	str	r5, [r0, #4]
    220c:	2001      	movs	r0, #1
    220e:	f7fe ff75 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    2212:	4620      	mov	r0, r4
    2214:	bd70      	pop	{r4, r5, r6, pc}
    2216:	0000      	.short	0x0000
    2218:	200008ac 	.word	0x200008ac
    221c:	2000052c 	.word	0x2000052c

00002220 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2224:	b083      	sub	sp, #12
    2226:	f000 faf9 	bl	281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    222a:	4605      	mov	r5, r0
    222c:	f000 fdac 	bl	2d88 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2230:	4c63      	ldr	r4, [pc, #396]	; (23c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    2232:	68a0      	ldr	r0, [r4, #8]
    2234:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2238:	bf1c      	itt	ne
    223a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    223e:	60a0      	strne	r0, [r4, #8]
    2240:	7fa0      	ldrb	r0, [r4, #30]
    2242:	f8df b180 	ldr.w	fp, [pc, #384]	; 23c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>
    2246:	b9a8      	cbnz	r0, 2274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2248:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    224c:	1a08      	subs	r0, r1, r0
    224e:	0200      	lsls	r0, r0, #8
    2250:	17c1      	asrs	r1, r0, #31
    2252:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2256:	1200      	asrs	r0, r0, #8
    2258:	f44f 710c 	mov.w	r1, #560	; 0x230
    225c:	f005 f855 	bl	730a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2260:	6921      	ldr	r1, [r4, #16]
    2262:	4408      	add	r0, r1
    2264:	1a28      	subs	r0, r5, r0
    2266:	0200      	lsls	r0, r0, #8
    2268:	17c1      	asrs	r1, r0, #31
    226a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    226e:	1200      	asrs	r0, r0, #8
    2270:	0fc0      	lsrs	r0, r0, #31
    2272:	d00b      	beq.n	228c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2274:	7e60      	ldrb	r0, [r4, #25]
    2276:	b1e8      	cbz	r0, 22b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    2278:	f000 fbdc 	bl	2a34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    227c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2280:	b1f0      	cbz	r0, 22c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    2282:	f240 4154 	movw	r1, #1108	; 0x454
    2286:	2070      	movs	r0, #112	; 0x70
    2288:	f001 f980 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    228c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2290:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2294:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2298:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    229c:	6840      	ldr	r0, [r0, #4]
    229e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    22a2:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    22a6:	2108      	movs	r1, #8
    22a8:	4790      	blx	r2
    22aa:	f240 4143 	movw	r1, #1091	; 0x443
    22ae:	2070      	movs	r0, #112	; 0x70
    22b0:	f001 f96c 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22b4:	1ce8      	adds	r0, r5, #3
    22b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22ba:	f000 fab5 	bl	2828 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    22be:	e7dd      	b.n	227c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    22c0:	f04f 0a01 	mov.w	sl, #1
    22c4:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    22c8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    22cc:	2820      	cmp	r0, #32
    22ce:	d024      	beq.n	231a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    22d0:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    22d4:	2020      	movs	r0, #32
    22d6:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    22da:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    22de:	2600      	movs	r6, #0
    22e0:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    22e4:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    22e8:	4837      	ldr	r0, [pc, #220]	; (23c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    22ea:	6026      	str	r6, [r4, #0]
    22ec:	7800      	ldrb	r0, [r0, #0]
    22ee:	2802      	cmp	r0, #2
    22f0:	bf16      	itet	ne
    22f2:	2803      	cmpne	r0, #3
    22f4:	2001      	moveq	r0, #1
    22f6:	2000      	movne	r0, #0
    22f8:	7720      	strb	r0, [r4, #28]
    22fa:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    22fe:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2302:	f899 0020 	ldrb.w	r0, [r9, #32]
    2306:	2820      	cmp	r0, #32
    2308:	d031      	beq.n	236e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    230a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    230e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2312:	7d81      	ldrb	r1, [r0, #22]
    2314:	2901      	cmp	r1, #1
    2316:	d005      	beq.n	2324 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2318:	e029      	b.n	236e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    231a:	f240 4157 	movw	r1, #1111	; 0x457
    231e:	2070      	movs	r0, #112	; 0x70
    2320:	f001 f934 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2324:	46ab      	mov	fp, r5
    2326:	f100 0508 	add.w	r5, r0, #8
    232a:	8a40      	ldrh	r0, [r0, #18]
    232c:	aa01      	add	r2, sp, #4
    232e:	4669      	mov	r1, sp
    2330:	f000 f91e 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2334:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2338:	2820      	cmp	r0, #32
    233a:	d004      	beq.n	2346 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
    233c:	6920      	ldr	r0, [r4, #16]
    233e:	1d40      	adds	r0, r0, #5
    2340:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2344:	e00b      	b.n	235e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13e>
    2346:	8968      	ldrh	r0, [r5, #10]
    2348:	f10b 0b09 	add.w	fp, fp, #9
    234c:	b128      	cbz	r0, 235a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
    234e:	f001 f8b9 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2352:	2800      	cmp	r0, #0
    2354:	bf08      	it	eq
    2356:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    235a:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    235e:	e9d5 2100 	ldrd	r2, r1, [r5]
    2362:	1a89      	subs	r1, r1, r2
    2364:	6028      	str	r0, [r5, #0]
    2366:	4408      	add	r0, r1
    2368:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    236c:	6068      	str	r0, [r5, #4]
    236e:	4639      	mov	r1, r7
    2370:	2001      	movs	r0, #1
    2372:	f7fe fef3 	bl	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
    2376:	2800      	cmp	r0, #0
    2378:	d0f9      	beq.n	236e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    237a:	4814      	ldr	r0, [pc, #80]	; (23cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    237c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2380:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2384:	2802      	cmp	r0, #2
    2386:	d104      	bne.n	2392 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x172>
    2388:	463a      	mov	r2, r7
    238a:	4641      	mov	r1, r8
    238c:	2006      	movs	r0, #6
    238e:	f7fe feb5 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    2392:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2396:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    239a:	2820      	cmp	r0, #32
    239c:	d003      	beq.n	23a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
    239e:	480c      	ldr	r0, [pc, #48]	; (23d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    23a0:	7840      	ldrb	r0, [r0, #1]
    23a2:	f001 f9c3 	bl	372c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    23a6:	7f20      	ldrb	r0, [r4, #28]
    23a8:	2800      	cmp	r0, #0
    23aa:	bf04      	itt	eq
    23ac:	b003      	addeq	sp, #12
    23ae:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b2:	f000 fd33 	bl	2e1c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    23b6:	7726      	strb	r6, [r4, #28]
    23b8:	7766      	strb	r6, [r4, #29]
    23ba:	b003      	add	sp, #12
    23bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23c0:	200008ac 	.word	0x200008ac
    23c4:	2000052c 	.word	0x2000052c
    23c8:	20000012 	.word	0x20000012
    23cc:	2000082c 	.word	0x2000082c
    23d0:	20000010 	.word	0x20000010

000023d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    23d4:	b510      	push	{r4, lr}
    23d6:	4c30      	ldr	r4, [pc, #192]	; (2498 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    23d8:	b082      	sub	sp, #8
    23da:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    23de:	2920      	cmp	r1, #32
    23e0:	d008      	beq.n	23f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    23e2:	68a1      	ldr	r1, [r4, #8]
    23e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    23e8:	d009      	beq.n	23fe <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    23ea:	f640 21e8 	movw	r1, #2792	; 0xae8
    23ee:	2070      	movs	r0, #112	; 0x70
    23f0:	f001 f8cc 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23f4:	f640 21e7 	movw	r1, #2791	; 0xae7
    23f8:	2070      	movs	r0, #112	; 0x70
    23fa:	f001 f8c7 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fe:	6862      	ldr	r2, [r4, #4]
    2400:	4601      	mov	r1, r0
    2402:	4b26      	ldr	r3, [pc, #152]	; (249c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>)
    2404:	1850      	adds	r0, r2, r1
    2406:	429a      	cmp	r2, r3
    2408:	d904      	bls.n	2414 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    240a:	f240 6116 	movw	r1, #1558	; 0x616
    240e:	2070      	movs	r0, #112	; 0x70
    2410:	f001 f8bc 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2414:	4a22      	ldr	r2, [pc, #136]	; (24a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2416:	4291      	cmp	r1, r2
    2418:	dd04      	ble.n	2424 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    241a:	f240 6117 	movw	r1, #1559	; 0x617
    241e:	2070      	movs	r0, #112	; 0x70
    2420:	f001 f8b4 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2424:	4a1f      	ldr	r2, [pc, #124]	; (24a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2426:	4291      	cmp	r1, r2
    2428:	da04      	bge.n	2434 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    242a:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    242e:	2070      	movs	r0, #112	; 0x70
    2430:	f001 f8ac 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2434:	491c      	ldr	r1, [pc, #112]	; (24a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2436:	4281      	cmp	r1, r0
    2438:	bfdc      	itt	le
    243a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    243e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2442:	dd05      	ble.n	2450 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2444:	2800      	cmp	r0, #0
    2446:	bfbc      	itt	lt
    2448:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    244c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2450:	aa01      	add	r2, sp, #4
    2452:	4669      	mov	r1, sp
    2454:	f000 f88c 	bl	2570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2458:	f89d 0004 	ldrb.w	r0, [sp, #4]
    245c:	280f      	cmp	r0, #15
    245e:	bf8c      	ite	hi
    2460:	2001      	movhi	r0, #1
    2462:	2000      	movls	r0, #0
    2464:	9900      	ldr	r1, [sp, #0]
    2466:	4408      	add	r0, r1
    2468:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    246c:	60a1      	str	r1, [r4, #8]
    246e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2472:	2800      	cmp	r0, #0
    2474:	bf04      	itt	eq
    2476:	b002      	addeq	sp, #8
    2478:	bd10      	popeq	{r4, pc}
    247a:	2301      	movs	r3, #1
    247c:	2203      	movs	r2, #3
    247e:	2005      	movs	r0, #5
    2480:	f000 fb52 	bl	2b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2484:	2800      	cmp	r0, #0
    2486:	bf1c      	itt	ne
    2488:	b002      	addne	sp, #8
    248a:	bd10      	popne	{r4, pc}
    248c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    2490:	2070      	movs	r0, #112	; 0x70
    2492:	f001 f87b 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2496:	0000      	.short	0x0000
    2498:	200008ac 	.word	0x200008ac
    249c:	1e847fff 	.word	0x1e847fff
    24a0:	07a12000 	.word	0x07a12000
    24a4:	f85ee000 	.word	0xf85ee000
    24a8:	1e848000 	.word	0x1e848000

000024ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    24ac:	b570      	push	{r4, r5, r6, lr}
    24ae:	4c1e      	ldr	r4, [pc, #120]	; (2528 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    24b0:	2120      	movs	r1, #32
    24b2:	f884 1020 	strb.w	r1, [r4, #32]
    24b6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    24ba:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    24be:	2000      	movs	r0, #0
    24c0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    24c4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    24c8:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    24cc:	1e42      	subs	r2, r0, #1
    24ce:	60a2      	str	r2, [r4, #8]
    24d0:	6020      	str	r0, [r4, #0]
    24d2:	77a0      	strb	r0, [r4, #30]
    24d4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    24d8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    24dc:	7720      	strb	r0, [r4, #28]
    24de:	7760      	strb	r0, [r4, #29]
    24e0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    24e4:	4911      	ldr	r1, [pc, #68]	; (252c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    24e6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    24ea:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    24ee:	7008      	strb	r0, [r1, #0]
    24f0:	7048      	strb	r0, [r1, #1]
    24f2:	8048      	strh	r0, [r1, #2]
    24f4:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    24f8:	2210      	movs	r2, #16
    24fa:	7088      	strb	r0, [r1, #2]
    24fc:	f801 0f04 	strb.w	r0, [r1, #4]!
    2500:	1e52      	subs	r2, r2, #1
    2502:	d1fa      	bne.n	24fa <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2504:	4d0a      	ldr	r5, [pc, #40]	; (2530 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2506:	2601      	movs	r6, #1
    2508:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    250c:	20ff      	movs	r0, #255	; 0xff
    250e:	7028      	strb	r0, [r5, #0]
    2510:	4808      	ldr	r0, [pc, #32]	; (2534 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2512:	f001 f8ed 	bl	36f0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2516:	7068      	strb	r0, [r5, #1]
    2518:	f001 f948 	bl	37ac <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    251c:	60a8      	str	r0, [r5, #8]
    251e:	f000 fcab 	bl	2e78 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2522:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2526:	bd70      	pop	{r4, r5, r6, pc}
    2528:	200008ac 	.word	0x200008ac
    252c:	20000012 	.word	0x20000012
    2530:	20000010 	.word	0x20000010
    2534:	00000fb9 	.word	0x00000fb9

00002538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2538:	0b41      	lsrs	r1, r0, #13
    253a:	f248 6237 	movw	r2, #34359	; 0x8637
    253e:	4351      	muls	r1, r2
    2540:	0c0a      	lsrs	r2, r1, #16
    2542:	4b09      	ldr	r3, [pc, #36]	; (2568 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2544:	0251      	lsls	r1, r2, #9
    2546:	fb02 0203 	mla	r2, r2, r3, r0
    254a:	4808      	ldr	r0, [pc, #32]	; (256c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    254c:	4350      	muls	r0, r2
    254e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2552:	306e      	adds	r0, #110	; 0x6e
    2554:	0d40      	lsrs	r0, r0, #21
    2556:	425b      	negs	r3, r3
    2558:	fb10 f303 	smulbb	r3, r0, r3
    255c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2560:	bf88      	it	hi
    2562:	1c49      	addhi	r1, r1, #1
    2564:	4408      	add	r0, r1
    2566:	4770      	bx	lr
    2568:	ffffc2f7 	.word	0xffffc2f7
    256c:	00010c6f 	.word	0x00010c6f

00002570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2570:	0b43      	lsrs	r3, r0, #13
    2572:	f248 6c37 	movw	ip, #34359	; 0x8637
    2576:	fb03 f30c 	mul.w	r3, r3, ip
    257a:	b430      	push	{r4, r5}
    257c:	0c1b      	lsrs	r3, r3, #16
    257e:	f8df c044 	ldr.w	ip, [pc, #68]	; 25c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2582:	025c      	lsls	r4, r3, #9
    2584:	fb03 030c 	mla	r3, r3, ip, r0
    2588:	480f      	ldr	r0, [pc, #60]	; (25c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    258a:	4358      	muls	r0, r3
    258c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2590:	eb04 000c 	add.w	r0, r4, ip
    2594:	f643 5409 	movw	r4, #15625	; 0x3d09
    2598:	fb1c f404 	smulbb	r4, ip, r4
    259c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    25a0:	f643 5508 	movw	r5, #15624	; 0x3d08
    25a4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    25a8:	442c      	add	r4, r5
    25aa:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    25ae:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    25b2:	bf84      	itt	hi
    25b4:	f04f 0c00 	movhi.w	ip, #0
    25b8:	1c40      	addhi	r0, r0, #1
    25ba:	6008      	str	r0, [r1, #0]
    25bc:	f882 c000 	strb.w	ip, [r2]
    25c0:	bc30      	pop	{r4, r5}
    25c2:	4770      	bx	lr
    25c4:	ffffc2f7 	.word	0xffffc2f7
    25c8:	00010c6f 	.word	0x00010c6f

000025cc <MPSL_IRQ_RTC0_Handler>:
    25cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25d0:	4c38      	ldr	r4, [pc, #224]	; (26b4 <MPSL_IRQ_RTC0_Handler+0xe8>)
    25d2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    25d6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 26b8 <MPSL_IRQ_RTC0_Handler+0xec>
    25da:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    25de:	f44f 6600 	mov.w	r6, #2048	; 0x800
    25e2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    25e6:	f04f 0500 	mov.w	r5, #0
    25ea:	bf1c      	itt	ne
    25ec:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    25f0:	2800      	cmpne	r0, #0
    25f2:	d017      	beq.n	2624 <MPSL_IRQ_RTC0_Handler+0x58>
    25f4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    25f8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    25fc:	482f      	ldr	r0, [pc, #188]	; (26bc <MPSL_IRQ_RTC0_Handler+0xf0>)
    25fe:	6800      	ldr	r0, [r0, #0]
    2600:	f8d8 1000 	ldr.w	r1, [r8]
    2604:	eba0 0001 	sub.w	r0, r0, r1
    2608:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    260c:	2802      	cmp	r0, #2
    260e:	d302      	bcc.n	2616 <MPSL_IRQ_RTC0_Handler+0x4a>
    2610:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2614:	d306      	bcc.n	2624 <MPSL_IRQ_RTC0_Handler+0x58>
    2616:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    261a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    261e:	2004      	movs	r0, #4
    2620:	f7fe ffa0 	bl	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2624:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2628:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    262c:	bf1c      	itt	ne
    262e:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2632:	2800      	cmpne	r0, #0
    2634:	d017      	beq.n	2666 <MPSL_IRQ_RTC0_Handler+0x9a>
    2636:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    263a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    263e:	4820      	ldr	r0, [pc, #128]	; (26c0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2640:	6800      	ldr	r0, [r0, #0]
    2642:	f8d8 1000 	ldr.w	r1, [r8]
    2646:	eba0 0001 	sub.w	r0, r0, r1
    264a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    264e:	2802      	cmp	r0, #2
    2650:	d302      	bcc.n	2658 <MPSL_IRQ_RTC0_Handler+0x8c>
    2652:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2656:	d306      	bcc.n	2666 <MPSL_IRQ_RTC0_Handler+0x9a>
    2658:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    265c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2660:	2005      	movs	r0, #5
    2662:	f7fe ff7f 	bl	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2666:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    266a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    266e:	bf1a      	itte	ne
    2670:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2674:	2800      	cmpne	r0, #0
    2676:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    267a:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    267e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2682:	4810      	ldr	r0, [pc, #64]	; (26c4 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2684:	6800      	ldr	r0, [r0, #0]
    2686:	f8d8 1000 	ldr.w	r1, [r8]
    268a:	eba0 0001 	sub.w	r0, r0, r1
    268e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2692:	2802      	cmp	r0, #2
    2694:	d304      	bcc.n	26a0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2696:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    269a:	bf38      	it	cc
    269c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    26a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    26a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    26ac:	2006      	movs	r0, #6
    26ae:	f7fe bf59 	b.w	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26b2:	0000      	.short	0x0000
    26b4:	4000b000 	.word	0x4000b000
    26b8:	4000b504 	.word	0x4000b504
    26bc:	4000b540 	.word	0x4000b540
    26c0:	4000b544 	.word	0x4000b544
    26c4:	4000b548 	.word	0x4000b548

000026c8 <MPSL_IRQ_TIMER0_Handler>:
    26c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26cc:	4d3a      	ldr	r5, [pc, #232]	; (27b8 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    26ce:	7828      	ldrb	r0, [r5, #0]
    26d0:	2804      	cmp	r0, #4
    26d2:	d06c      	beq.n	27ae <MPSL_IRQ_TIMER0_Handler+0xe6>
    26d4:	1ce8      	adds	r0, r5, #3
    26d6:	2201      	movs	r2, #1
    26d8:	7801      	ldrb	r1, [r0, #0]
    26da:	b159      	cbz	r1, 26f4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    26dc:	2901      	cmp	r1, #1
    26de:	bf08      	it	eq
    26e0:	706a      	strbeq	r2, [r5, #1]
    26e2:	d002      	beq.n	26ea <MPSL_IRQ_TIMER0_Handler+0x22>
    26e4:	7869      	ldrb	r1, [r5, #1]
    26e6:	2900      	cmp	r1, #0
    26e8:	d05c      	beq.n	27a4 <MPSL_IRQ_TIMER0_Handler+0xdc>
    26ea:	2102      	movs	r1, #2
    26ec:	7001      	strb	r1, [r0, #0]
    26ee:	7840      	ldrb	r0, [r0, #1]
    26f0:	f000 fae2 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    26f4:	4c31      	ldr	r4, [pc, #196]	; (27bc <MPSL_IRQ_TIMER0_Handler+0xf4>)
    26f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26fa:	f04f 0800 	mov.w	r8, #0
    26fe:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2702:	f44f 7680 	mov.w	r6, #256	; 0x100
    2706:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    270a:	bf1c      	itt	ne
    270c:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2710:	2800      	cmpne	r0, #0
    2712:	d008      	beq.n	2726 <MPSL_IRQ_TIMER0_Handler+0x5e>
    2714:	f04f 0003 	mov.w	r0, #3
    2718:	f000 face 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    271c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2720:	2003      	movs	r0, #3
    2722:	f7fe ff1f 	bl	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2726:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    272a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    272e:	bf1c      	itt	ne
    2730:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2734:	2800      	cmpne	r0, #0
    2736:	d008      	beq.n	274a <MPSL_IRQ_TIMER0_Handler+0x82>
    2738:	f04f 0002 	mov.w	r0, #2
    273c:	f000 fabc 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2740:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2744:	2002      	movs	r0, #2
    2746:	f7fe ff0d 	bl	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    274a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    274e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2752:	bf1c      	itt	ne
    2754:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2758:	2800      	cmpne	r0, #0
    275a:	d008      	beq.n	276e <MPSL_IRQ_TIMER0_Handler+0xa6>
    275c:	f04f 0001 	mov.w	r0, #1
    2760:	f000 faaa 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2764:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2768:	2001      	movs	r0, #1
    276a:	f7fe fefb 	bl	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    276e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2772:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2776:	bf1a      	itte	ne
    2778:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    277c:	2800      	cmpne	r0, #0
    277e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2782:	f04f 0000 	mov.w	r0, #0
    2786:	f000 fa97 	bl	2cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    278a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    278e:	2004      	movs	r0, #4
    2790:	7028      	strb	r0, [r5, #0]
    2792:	f8c5 8008 	str.w	r8, [r5, #8]
    2796:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    279a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    279e:	2000      	movs	r0, #0
    27a0:	f7fe bee0 	b.w	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27a4:	f240 3166 	movw	r1, #870	; 0x366
    27a8:	206c      	movs	r0, #108	; 0x6c
    27aa:	f000 feef 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27b2:	2007      	movs	r0, #7
    27b4:	f7fe bed6 	b.w	1564 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27b8:	2000001c 	.word	0x2000001c
    27bc:	40008000 	.word	0x40008000
    27c0:	2201      	movs	r2, #1
    27c2:	0213      	lsls	r3, r2, #8
    27c4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    27c8:	2000      	movs	r0, #0
    27ca:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    27ce:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    27d2:	f3bf 8f4f 	dsb	sy
    27d6:	f3bf 8f6f 	isb	sy
    27da:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    27de:	490c      	ldr	r1, [pc, #48]	; (2810 <MPSL_IRQ_TIMER0_Handler+0x148>)
    27e0:	604a      	str	r2, [r1, #4]
    27e2:	1e43      	subs	r3, r0, #1
    27e4:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    27e8:	4b0a      	ldr	r3, [pc, #40]	; (2814 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    27ea:	6018      	str	r0, [r3, #0]
    27ec:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    27f0:	1d1b      	adds	r3, r3, #4
    27f2:	6018      	str	r0, [r3, #0]
    27f4:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    27f8:	1d1b      	adds	r3, r3, #4
    27fa:	6018      	str	r0, [r3, #0]
    27fc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2800:	1d1b      	adds	r3, r3, #4
    2802:	6018      	str	r0, [r3, #0]
    2804:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2808:	610a      	str	r2, [r1, #16]
    280a:	4903      	ldr	r1, [pc, #12]	; (2818 <MPSL_IRQ_TIMER0_Handler+0x150>)
    280c:	7048      	strb	r0, [r1, #1]
    280e:	4770      	bx	lr
    2810:	40008000 	.word	0x40008000
    2814:	40008540 	.word	0x40008540
    2818:	2000001c 	.word	0x2000001c

0000281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    281c:	4801      	ldr	r0, [pc, #4]	; (2824 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    281e:	6800      	ldr	r0, [r0, #0]
    2820:	4770      	bx	lr
    2822:	0000      	.short	0x0000
    2824:	4000b504 	.word	0x4000b504

00002828 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2828:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    282c:	4e41      	ldr	r6, [pc, #260]	; (2934 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    282e:	4604      	mov	r4, r0
    2830:	1ef7      	subs	r7, r6, #3
    2832:	f896 c000 	ldrb.w	ip, [r6]
    2836:	68f8      	ldr	r0, [r7, #12]
    2838:	f1bc 0f01 	cmp.w	ip, #1
    283c:	bf04      	itt	eq
    283e:	42a0      	cmpeq	r0, r4
    2840:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2844:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2848:	4a3b      	ldr	r2, [pc, #236]	; (2938 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    284a:	6011      	str	r1, [r2, #0]
    284c:	493b      	ldr	r1, [pc, #236]	; (293c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    284e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2852:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2856:	4a3a      	ldr	r2, [pc, #232]	; (2940 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2858:	f04f 0500 	mov.w	r5, #0
    285c:	f1bc 0f00 	cmp.w	ip, #0
    2860:	d057      	beq.n	2912 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2862:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2866:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    286a:	6015      	str	r5, [r2, #0]
    286c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2870:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2874:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2878:	f04f 0801 	mov.w	r8, #1
    287c:	2a00      	cmp	r2, #0
    287e:	bf04      	itt	eq
    2880:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2884:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    288c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2890:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2894:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2898:	4a2a      	ldr	r2, [pc, #168]	; (2944 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    289a:	f8d2 a000 	ldr.w	sl, [r2]
    289e:	eba4 0a0a 	sub.w	sl, r4, sl
    28a2:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    28a6:	f1bb 0f02 	cmp.w	fp, #2
    28aa:	d33c      	bcc.n	2926 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    28ac:	f04f 0a02 	mov.w	sl, #2
    28b0:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    28b4:	d237      	bcs.n	2926 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    28b6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    28ba:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    28be:	f1bc 0f00 	cmp.w	ip, #0
    28c2:	d005      	beq.n	28d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    28c4:	6811      	ldr	r1, [r2, #0]
    28c6:	1a41      	subs	r1, r0, r1
    28c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    28cc:	2902      	cmp	r1, #2
    28ce:	d3f9      	bcc.n	28c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    28d0:	f8c7 8008 	str.w	r8, [r7, #8]
    28d4:	703d      	strb	r5, [r7, #0]
    28d6:	f7ff ff73 	bl	27c0 <MPSL_IRQ_TIMER0_Handler+0xf8>
    28da:	481b      	ldr	r0, [pc, #108]	; (2948 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    28dc:	6005      	str	r5, [r0, #0]
    28de:	1d00      	adds	r0, r0, #4
    28e0:	f8c0 a000 	str.w	sl, [r0]
    28e4:	4919      	ldr	r1, [pc, #100]	; (294c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    28e6:	2004      	movs	r0, #4
    28e8:	6008      	str	r0, [r1, #0]
    28ea:	4919      	ldr	r1, [pc, #100]	; (2950 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    28ec:	f8c1 800c 	str.w	r8, [r1, #12]
    28f0:	68ba      	ldr	r2, [r7, #8]
    28f2:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    28f6:	0181      	lsls	r1, r0, #6
    28f8:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    28fc:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2900:	4a14      	ldr	r2, [pc, #80]	; (2954 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2902:	0741      	lsls	r1, r0, #29
    2904:	6011      	str	r1, [r2, #0]
    2906:	60fc      	str	r4, [r7, #12]
    2908:	7070      	strb	r0, [r6, #1]
    290a:	f886 8000 	strb.w	r8, [r6]
    290e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2912:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2916:	4b10      	ldr	r3, [pc, #64]	; (2958 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2918:	601d      	str	r5, [r3, #0]
    291a:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    291e:	6015      	str	r5, [r2, #0]
    2920:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2924:	e7a4      	b.n	2870 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2926:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    292a:	f240 11ef 	movw	r1, #495	; 0x1ef
    292e:	206c      	movs	r0, #108	; 0x6c
    2930:	f000 fe2c 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2934:	2000001f 	.word	0x2000001f
    2938:	4001f508 	.word	0x4001f508
    293c:	4000b000 	.word	0x4000b000
    2940:	4000b544 	.word	0x4000b544
    2944:	4000b504 	.word	0x4000b504
    2948:	40008504 	.word	0x40008504
    294c:	40008510 	.word	0x40008510
    2950:	40008000 	.word	0x40008000
    2954:	4001f504 	.word	0x4001f504
    2958:	4000b540 	.word	0x4000b540

0000295c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2960:	4c2b      	ldr	r4, [pc, #172]	; (2a10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2962:	68e1      	ldr	r1, [r4, #12]
    2964:	4281      	cmp	r1, r0
    2966:	bf14      	ite	ne
    2968:	2201      	movne	r2, #1
    296a:	2200      	moveq	r2, #0
    296c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2a14 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2970:	f89c 7000 	ldrb.w	r7, [ip]
    2974:	2f02      	cmp	r7, #2
    2976:	d002      	beq.n	297e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2978:	2a00      	cmp	r2, #0
    297a:	d038      	beq.n	29ee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    297c:	e003      	b.n	2986 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    297e:	2a00      	cmp	r2, #0
    2980:	bf08      	it	eq
    2982:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2986:	7862      	ldrb	r2, [r4, #1]
    2988:	b382      	cbz	r2, 29ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    298a:	4b23      	ldr	r3, [pc, #140]	; (2a18 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    298c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2990:	601a      	str	r2, [r3, #0]
    2992:	4b22      	ldr	r3, [pc, #136]	; (2a1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2994:	1395      	asrs	r5, r2, #14
    2996:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    299a:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    299e:	2600      	movs	r6, #0
    29a0:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    29a4:	4a1e      	ldr	r2, [pc, #120]	; (2a20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    29a6:	f8d2 8000 	ldr.w	r8, [r2]
    29aa:	eba0 0808 	sub.w	r8, r0, r8
    29ae:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    29b2:	f1b8 0f02 	cmp.w	r8, #2
    29b6:	d324      	bcc.n	2a02 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    29b8:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    29bc:	d221      	bcs.n	2a02 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    29be:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29c2:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    29c6:	b12f      	cbz	r7, 29d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    29c8:	6813      	ldr	r3, [r2, #0]
    29ca:	1acb      	subs	r3, r1, r3
    29cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    29d0:	2b02      	cmp	r3, #2
    29d2:	d3f9      	bcc.n	29c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    29d4:	4b13      	ldr	r3, [pc, #76]	; (2a24 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    29d6:	2102      	movs	r1, #2
    29d8:	074a      	lsls	r2, r1, #29
    29da:	601a      	str	r2, [r3, #0]
    29dc:	60e0      	str	r0, [r4, #12]
    29de:	2004      	movs	r0, #4
    29e0:	f88c 0001 	strb.w	r0, [ip, #1]
    29e4:	f88c 1000 	strb.w	r1, [ip]
    29e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ec:	e004      	b.n	29f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    29ee:	f240 11fd 	movw	r1, #509	; 0x1fd
    29f2:	206c      	movs	r0, #108	; 0x6c
    29f4:	f000 fdca 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29f8:	f240 2101 	movw	r1, #513	; 0x201
    29fc:	206c      	movs	r0, #108	; 0x6c
    29fe:	f000 fdc5 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a02:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2a06:	f240 210d 	movw	r1, #525	; 0x20d
    2a0a:	206c      	movs	r0, #108	; 0x6c
    2a0c:	f000 fdbe 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a10:	2000001c 	.word	0x2000001c
    2a14:	2000001f 	.word	0x2000001f
    2a18:	4001f508 	.word	0x4001f508
    2a1c:	4000b000 	.word	0x4000b000
    2a20:	4000b504 	.word	0x4000b504
    2a24:	4001f504 	.word	0x4001f504

00002a28 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2a28:	4801      	ldr	r0, [pc, #4]	; (2a30 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2a2a:	68c0      	ldr	r0, [r0, #12]
    2a2c:	4770      	bx	lr
    2a2e:	0000      	.short	0x0000
    2a30:	2000001c 	.word	0x2000001c

00002a34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a38:	4833      	ldr	r0, [pc, #204]	; (2b08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2a3a:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2a3e:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2a42:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2b0c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2a46:	4a32      	ldr	r2, [pc, #200]	; (2b10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2a48:	2100      	movs	r1, #0
    2a4a:	f89c 3000 	ldrb.w	r3, [ip]
    2a4e:	b163      	cbz	r3, 2a6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2a50:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2a54:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2a58:	6011      	str	r1, [r2, #0]
    2a5a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2a5e:	bf00      	nop
    2a60:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2a64:	2201      	movs	r2, #1
    2a66:	b980      	cbnz	r0, 2a8a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2a68:	e009      	b.n	2a7e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2a6a:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2a6e:	4c29      	ldr	r4, [pc, #164]	; (2b14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2a70:	6021      	str	r1, [r4, #0]
    2a72:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2a76:	6011      	str	r1, [r2, #0]
    2a78:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2a7c:	e7f0      	b.n	2a60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2a7e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2a82:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2a86:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2a8a:	2b02      	cmp	r3, #2
    2a8c:	d004      	beq.n	2a98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2a8e:	f240 2119 	movw	r1, #537	; 0x219
    2a92:	206c      	movs	r0, #108	; 0x6c
    2a94:	f000 fd7a 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a98:	4e1f      	ldr	r6, [pc, #124]	; (2b18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2a9a:	6830      	ldr	r0, [r6, #0]
    2a9c:	4c1f      	ldr	r4, [pc, #124]	; (2b1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2a9e:	1cc0      	adds	r0, r0, #3
    2aa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2aa4:	68e3      	ldr	r3, [r4, #12]
    2aa6:	4d1e      	ldr	r5, [pc, #120]	; (2b20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2aa8:	4298      	cmp	r0, r3
    2aaa:	d00b      	beq.n	2ac4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2aac:	6837      	ldr	r7, [r6, #0]
    2aae:	1bdf      	subs	r7, r3, r7
    2ab0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2ab4:	2f04      	cmp	r7, #4
    2ab6:	d305      	bcc.n	2ac4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2ab8:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2abc:	d202      	bcs.n	2ac4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2abe:	f7ff feb3 	bl	2828 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2ac2:	e01b      	b.n	2afc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2ac4:	6830      	ldr	r0, [r6, #0]
    2ac6:	1a18      	subs	r0, r3, r0
    2ac8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2acc:	2802      	cmp	r0, #2
    2ace:	d313      	bcc.n	2af8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2ad0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2ad4:	d210      	bcs.n	2af8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2ad6:	4b13      	ldr	r3, [pc, #76]	; (2b24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2ad8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2adc:	6018      	str	r0, [r3, #0]
    2ade:	60a2      	str	r2, [r4, #8]
    2ae0:	7021      	strb	r1, [r4, #0]
    2ae2:	606a      	str	r2, [r5, #4]
    2ae4:	60ea      	str	r2, [r5, #12]
    2ae6:	0040      	lsls	r0, r0, #1
    2ae8:	1f19      	subs	r1, r3, #4
    2aea:	6008      	str	r0, [r1, #0]
    2aec:	2004      	movs	r0, #4
    2aee:	f88c 0001 	strb.w	r0, [ip, #1]
    2af2:	f88c 2000 	strb.w	r2, [ip]
    2af6:	e001      	b.n	2afc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2af8:	60a2      	str	r2, [r4, #8]
    2afa:	7021      	strb	r1, [r4, #0]
    2afc:	68a0      	ldr	r0, [r4, #8]
    2afe:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b06:	0000      	.short	0x0000
    2b08:	4000b000 	.word	0x4000b000
    2b0c:	2000001f 	.word	0x2000001f
    2b10:	4000b544 	.word	0x4000b544
    2b14:	4000b540 	.word	0x4000b540
    2b18:	4000b504 	.word	0x4000b504
    2b1c:	2000001c 	.word	0x2000001c
    2b20:	40008000 	.word	0x40008000
    2b24:	4001f508 	.word	0x4001f508

00002b28 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b2c:	f8df c174 	ldr.w	ip, [pc, #372]	; 2ca4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2b30:	2701      	movs	r7, #1
    2b32:	f04f 0800 	mov.w	r8, #0
    2b36:	f89c 5000 	ldrb.w	r5, [ip]
    2b3a:	f89c c001 	ldrb.w	ip, [ip, #1]
    2b3e:	2807      	cmp	r0, #7
    2b40:	d27e      	bcs.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2b42:	e8df f000 	tbb	[pc, r0]
    2b46:	0404      	.short	0x0404
    2b48:	6a6a0404 	.word	0x6a6a0404
    2b4c:	006a      	.short	0x006a
    2b4e:	4c56      	ldr	r4, [pc, #344]	; (2ca8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2b50:	68e6      	ldr	r6, [r4, #12]
    2b52:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2b56:	bf04      	itt	eq
    2b58:	7864      	ldrbeq	r4, [r4, #1]
    2b5a:	2c00      	cmpeq	r4, #0
    2b5c:	d002      	beq.n	2b64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2b5e:	2d02      	cmp	r5, #2
    2b60:	d005      	beq.n	2b6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2b62:	e03c      	b.n	2bde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2b64:	f44f 7113 	mov.w	r1, #588	; 0x24c
    2b68:	206c      	movs	r0, #108	; 0x6c
    2b6a:	f000 fd0f 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b6e:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2b72:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2b76:	f1ac 0404 	sub.w	r4, ip, #4
    2b7a:	0624      	lsls	r4, r4, #24
    2b7c:	0da4      	lsrs	r4, r4, #22
    2b7e:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2b82:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2b86:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2b8a:	2400      	movs	r4, #0
    2b8c:	2d01      	cmp	r5, #1
    2b8e:	d002      	beq.n	2b96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2b90:	2d02      	cmp	r5, #2
    2b92:	d011      	beq.n	2bb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2b94:	e020      	b.n	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2b96:	f1bc 0f04 	cmp.w	ip, #4
    2b9a:	d205      	bcs.n	2ba8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2b9c:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2ba0:	f1ba 0f00 	cmp.w	sl, #0
    2ba4:	d118      	bne.n	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2ba6:	e004      	b.n	2bb2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2ba8:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2bac:	f1ba 0f00 	cmp.w	sl, #0
    2bb0:	d112      	bne.n	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bb2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2bb6:	e00f      	b.n	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bb8:	f1bc 0f04 	cmp.w	ip, #4
    2bbc:	d205      	bcs.n	2bca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2bbe:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2bc2:	f1ba 0f00 	cmp.w	sl, #0
    2bc6:	d107      	bne.n	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bc8:	e004      	b.n	2bd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2bca:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2bce:	f1ba 0f00 	cmp.w	sl, #0
    2bd2:	d101      	bne.n	2bd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bd4:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2bd8:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2bdc:	d1d5      	bne.n	2b8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2bde:	4c33      	ldr	r4, [pc, #204]	; (2cac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2be0:	f100 0c10 	add.w	ip, r0, #16
    2be4:	fa07 fc0c 	lsl.w	ip, r7, ip
    2be8:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2bec:	0080      	lsls	r0, r0, #2
    2bee:	4420      	add	r0, r4
    2bf0:	b152      	cbz	r2, 2c08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2bf2:	6407      	str	r7, [r0, #64]	; 0x40
    2bf4:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2bf8:	1b8d      	subs	r5, r1, r6
    2bfa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2bfe:	42aa      	cmp	r2, r5
    2c00:	bf98      	it	ls
    2c02:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2c06:	d243      	bcs.n	2c90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2c08:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c0c:	2b01      	cmp	r3, #1
    2c0e:	bf08      	it	eq
    2c10:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2c14:	2001      	movs	r0, #1
    2c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c1a:	b135      	cbz	r5, 2c2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c1c:	4584      	cmp	ip, r0
    2c1e:	d104      	bne.n	2c2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c20:	f240 216f 	movw	r1, #623	; 0x26f
    2c24:	206c      	movs	r0, #108	; 0x6c
    2c26:	f000 fcb1 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c2a:	1f00      	subs	r0, r0, #4
    2c2c:	b2c0      	uxtb	r0, r0
    2c2e:	2b01      	cmp	r3, #1
    2c30:	bf0c      	ite	eq
    2c32:	2401      	moveq	r4, #1
    2c34:	2400      	movne	r4, #0
    2c36:	2803      	cmp	r0, #3
    2c38:	d306      	bcc.n	2c48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2c3a:	f240 1149 	movw	r1, #329	; 0x149
    2c3e:	e000      	b.n	2c42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2c40:	e02b      	b.n	2c9a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2c42:	206c      	movs	r0, #108	; 0x6c
    2c44:	f000 fca2 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c48:	f8df c064 	ldr.w	ip, [pc, #100]	; 2cb0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2c4c:	f100 0310 	add.w	r3, r0, #16
    2c50:	fa07 f303 	lsl.w	r3, r7, r3
    2c54:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2c58:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2c5c:	0080      	lsls	r0, r0, #2
    2c5e:	4460      	add	r0, ip
    2c60:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2c64:	b14a      	cbz	r2, 2c7a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2c66:	4d13      	ldr	r5, [pc, #76]	; (2cb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2c68:	682e      	ldr	r6, [r5, #0]
    2c6a:	1b8d      	subs	r5, r1, r6
    2c6c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2c70:	42aa      	cmp	r2, r5
    2c72:	bf98      	it	ls
    2c74:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2c78:	d20a      	bcs.n	2c90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2c7a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c7e:	2c00      	cmp	r4, #0
    2c80:	bf18      	it	ne
    2c82:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2c86:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2c8a:	2001      	movs	r0, #1
    2c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c90:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2c94:	2000      	movs	r0, #0
    2c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c9a:	f44f 711d 	mov.w	r1, #628	; 0x274
    2c9e:	206c      	movs	r0, #108	; 0x6c
    2ca0:	f000 fc74 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ca4:	2000001f 	.word	0x2000001f
    2ca8:	2000001c 	.word	0x2000001c
    2cac:	40008000 	.word	0x40008000
    2cb0:	4000b000 	.word	0x4000b000
    2cb4:	4000b504 	.word	0x4000b504

00002cb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cba:	2701      	movs	r7, #1
    2cbc:	2400      	movs	r4, #0
    2cbe:	2807      	cmp	r0, #7
    2cc0:	d24c      	bcs.n	2d5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2cc2:	e8df f000 	tbb	[pc, r0]
    2cc6:	0404      	.short	0x0404
    2cc8:	16160404 	.word	0x16160404
    2ccc:	0016      	.short	0x0016
    2cce:	4a26      	ldr	r2, [pc, #152]	; (2d68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2cd0:	f100 0110 	add.w	r1, r0, #16
    2cd4:	fa07 f101 	lsl.w	r1, r7, r1
    2cd8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2cdc:	0081      	lsls	r1, r0, #2
    2cde:	4411      	add	r1, r2
    2ce0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2ce4:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2ce8:	4920      	ldr	r1, [pc, #128]	; (2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2cea:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2cee:	9000      	str	r0, [sp, #0]
    2cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cf2:	4d1f      	ldr	r5, [pc, #124]	; (2d70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2cf4:	1f01      	subs	r1, r0, #4
    2cf6:	b2ce      	uxtb	r6, r1
    2cf8:	7829      	ldrb	r1, [r5, #0]
    2cfa:	b179      	cbz	r1, 2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2cfc:	786a      	ldrb	r2, [r5, #1]
    2cfe:	4282      	cmp	r2, r0
    2d00:	d10c      	bne.n	2d1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d02:	4a1c      	ldr	r2, [pc, #112]	; (2d74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2d04:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2d08:	6010      	str	r0, [r2, #0]
    2d0a:	2901      	cmp	r1, #1
    2d0c:	bf08      	it	eq
    2d0e:	f7ff fd57 	bleq	27c0 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2d12:	702c      	strb	r4, [r5, #0]
    2d14:	4918      	ldr	r1, [pc, #96]	; (2d78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2d16:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2d1a:	60c8      	str	r0, [r1, #12]
    2d1c:	f106 0010 	add.w	r0, r6, #16
    2d20:	fa07 f100 	lsl.w	r1, r7, r0
    2d24:	4815      	ldr	r0, [pc, #84]	; (2d7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2d26:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2d2a:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2d2e:	00b0      	lsls	r0, r6, #2
    2d30:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2d34:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2d38:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2d3c:	4a10      	ldr	r2, [pc, #64]	; (2d80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2d3e:	6812      	ldr	r2, [r2, #0]
    2d40:	1a89      	subs	r1, r1, r2
    2d42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d46:	2902      	cmp	r1, #2
    2d48:	bf24      	itt	cs
    2d4a:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2d4e:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2d52:	480c      	ldr	r0, [pc, #48]	; (2d84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2d54:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2d58:	9000      	str	r0, [sp, #0]
    2d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d5c:	f240 21ed 	movw	r1, #749	; 0x2ed
    2d60:	206c      	movs	r0, #108	; 0x6c
    2d62:	f000 fc13 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d66:	0000      	.short	0x0000
    2d68:	40008000 	.word	0x40008000
    2d6c:	40008140 	.word	0x40008140
    2d70:	2000001f 	.word	0x2000001f
    2d74:	4001f508 	.word	0x4001f508
    2d78:	2000001c 	.word	0x2000001c
    2d7c:	4000b000 	.word	0x4000b000
    2d80:	4000b504 	.word	0x4000b504
    2d84:	4000b140 	.word	0x4000b140

00002d88 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2d88:	491e      	ldr	r1, [pc, #120]	; (2e04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2d8a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2d8e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2d92:	481d      	ldr	r0, [pc, #116]	; (2e08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2d94:	4a1d      	ldr	r2, [pc, #116]	; (2e0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2d96:	f890 c000 	ldrb.w	ip, [r0]
    2d9a:	2000      	movs	r0, #0
    2d9c:	f1bc 0f00 	cmp.w	ip, #0
    2da0:	d00a      	beq.n	2db8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2da2:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2da6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2daa:	6010      	str	r0, [r2, #0]
    2dac:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2db0:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2db4:	b981      	cbnz	r1, 2dd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2db6:	e009      	b.n	2dcc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2db8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2dbc:	4b14      	ldr	r3, [pc, #80]	; (2e10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2dbe:	6018      	str	r0, [r3, #0]
    2dc0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2dc4:	6010      	str	r0, [r2, #0]
    2dc6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2dca:	e7f1      	b.n	2db0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2dcc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2dd4:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2dd8:	490e      	ldr	r1, [pc, #56]	; (2e14 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2dde:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2de2:	4a0d      	ldr	r2, [pc, #52]	; (2e18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2de4:	6010      	str	r0, [r2, #0]
    2de6:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2dea:	1d12      	adds	r2, r2, #4
    2dec:	6010      	str	r0, [r2, #0]
    2dee:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2df2:	1d12      	adds	r2, r2, #4
    2df4:	6010      	str	r0, [r2, #0]
    2df6:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2dfa:	1d12      	adds	r2, r2, #4
    2dfc:	6010      	str	r0, [r2, #0]
    2dfe:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2e02:	4770      	bx	lr
    2e04:	4000b000 	.word	0x4000b000
    2e08:	2000001f 	.word	0x2000001f
    2e0c:	4000b544 	.word	0x4000b544
    2e10:	4000b540 	.word	0x4000b540
    2e14:	40008000 	.word	0x40008000
    2e18:	40008540 	.word	0x40008540

00002e1c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2e1c:	4808      	ldr	r0, [pc, #32]	; (2e40 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2e1e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2e22:	2800      	cmp	r0, #0
    2e24:	bfb8      	it	lt
    2e26:	4770      	bxlt	lr
    2e28:	f000 011f 	and.w	r1, r0, #31
    2e2c:	2201      	movs	r2, #1
    2e2e:	fa02 f101 	lsl.w	r1, r2, r1
    2e32:	0940      	lsrs	r0, r0, #5
    2e34:	0080      	lsls	r0, r0, #2
    2e36:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2e3a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2e3e:	4770      	bx	lr
    2e40:	2000001c 	.word	0x2000001c

00002e44 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2e44:	b510      	push	{r4, lr}
    2e46:	2807      	cmp	r0, #7
    2e48:	d20d      	bcs.n	2e66 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2e4a:	e8df f000 	tbb	[pc, r0]
    2e4e:	0404      	.short	0x0404
    2e50:	06060404 	.word	0x06060404
    2e54:	0006      	.short	0x0006
    2e56:	4906      	ldr	r1, [pc, #24]	; (2e70 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2e58:	e002      	b.n	2e60 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2e5a:	1f00      	subs	r0, r0, #4
    2e5c:	4905      	ldr	r1, [pc, #20]	; (2e74 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2e5e:	b2c0      	uxtb	r0, r0
    2e60:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2e64:	bd10      	pop	{r4, pc}
    2e66:	f44f 7126 	mov.w	r1, #664	; 0x298
    2e6a:	206c      	movs	r0, #108	; 0x6c
    2e6c:	f000 fb8e 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e70:	40008140 	.word	0x40008140
    2e74:	4000b140 	.word	0x4000b140

00002e78 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2e78:	b570      	push	{r4, r5, r6, lr}
    2e7a:	4819      	ldr	r0, [pc, #100]	; (2ee0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2e7c:	2400      	movs	r4, #0
    2e7e:	2104      	movs	r1, #4
    2e80:	7004      	strb	r4, [r0, #0]
    2e82:	1ec0      	subs	r0, r0, #3
    2e84:	7001      	strb	r1, [r0, #0]
    2e86:	0589      	lsls	r1, r1, #22
    2e88:	60c1      	str	r1, [r0, #12]
    2e8a:	f7ff fc99 	bl	27c0 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2e8e:	2501      	movs	r5, #1
    2e90:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2e94:	02eb      	lsls	r3, r5, #11
    2e96:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2e9a:	f3bf 8f4f 	dsb	sy
    2e9e:	f3bf 8f6f 	isb	sy
    2ea2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2ea6:	4a0f      	ldr	r2, [pc, #60]	; (2ee4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2ea8:	6055      	str	r5, [r2, #4]
    2eaa:	6095      	str	r5, [r2, #8]
    2eac:	480e      	ldr	r0, [pc, #56]	; (2ee8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2eae:	6801      	ldr	r1, [r0, #0]
    2eb0:	2900      	cmp	r1, #0
    2eb2:	d1fc      	bne.n	2eae <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2eb4:	1e48      	subs	r0, r1, #1
    2eb6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2eba:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2ebe:	480b      	ldr	r0, [pc, #44]	; (2eec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2ec0:	6004      	str	r4, [r0, #0]
    2ec2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2ec6:	1d00      	adds	r0, r0, #4
    2ec8:	6004      	str	r4, [r0, #0]
    2eca:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2ece:	1d00      	adds	r0, r0, #4
    2ed0:	6004      	str	r4, [r0, #0]
    2ed2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2ed6:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2eda:	6015      	str	r5, [r2, #0]
    2edc:	bd70      	pop	{r4, r5, r6, pc}
    2ede:	0000      	.short	0x0000
    2ee0:	2000001f 	.word	0x2000001f
    2ee4:	4000b000 	.word	0x4000b000
    2ee8:	4000b504 	.word	0x4000b504
    2eec:	4000b540 	.word	0x4000b540

00002ef0 <MPSL_IRQ_CLOCK_Handler>:
    2ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ef4:	4c16      	ldr	r4, [pc, #88]	; (2f50 <MPSL_IRQ_CLOCK_Handler+0x60>)
    2ef6:	7a60      	ldrb	r0, [r4, #9]
    2ef8:	2800      	cmp	r0, #0
    2efa:	d027      	beq.n	2f4c <MPSL_IRQ_CLOCK_Handler+0x5c>
    2efc:	f44f 7180 	mov.w	r1, #256	; 0x100
    2f00:	058d      	lsls	r5, r1, #22
    2f02:	4628      	mov	r0, r5
    2f04:	f004 fa25 	bl	7352 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2f08:	4680      	mov	r8, r0
    2f0a:	f44f 7182 	mov.w	r1, #260	; 0x104
    2f0e:	4628      	mov	r0, r5
    2f10:	f004 fa1f 	bl	7352 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2f14:	2600      	movs	r6, #0
    2f16:	4607      	mov	r7, r0
    2f18:	f1b8 0f00 	cmp.w	r8, #0
    2f1c:	d009      	beq.n	2f32 <MPSL_IRQ_CLOCK_Handler+0x42>
    2f1e:	2001      	movs	r0, #1
    2f20:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f24:	7920      	ldrb	r0, [r4, #4]
    2f26:	b120      	cbz	r0, 2f32 <MPSL_IRQ_CLOCK_Handler+0x42>
    2f28:	7126      	strb	r6, [r4, #4]
    2f2a:	69e0      	ldr	r0, [r4, #28]
    2f2c:	b108      	cbz	r0, 2f32 <MPSL_IRQ_CLOCK_Handler+0x42>
    2f2e:	4780      	blx	r0
    2f30:	61e6      	str	r6, [r4, #28]
    2f32:	b137      	cbz	r7, 2f42 <MPSL_IRQ_CLOCK_Handler+0x52>
    2f34:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2f38:	2002      	movs	r0, #2
    2f3a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f3e:	f000 fa6d 	bl	341c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    2f42:	4640      	mov	r0, r8
    2f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2f48:	f000 b85a 	b.w	3000 <MPSL_IRQ_CLOCK_Handler+0x110>
    2f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f50:	2000002c 	.word	0x2000002c
    2f54:	b510      	push	{r4, lr}
    2f56:	f004 faa6 	bl	74a6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    2f5a:	b930      	cbnz	r0, 2f6a <MPSL_IRQ_CLOCK_Handler+0x7a>
    2f5c:	f004 fac4 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    2f60:	b918      	cbnz	r0, 2f6a <MPSL_IRQ_CLOCK_Handler+0x7a>
    2f62:	f004 faf7 	bl	7554 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    2f66:	2800      	cmp	r0, #0
    2f68:	d002      	beq.n	2f70 <MPSL_IRQ_CLOCK_Handler+0x80>
    2f6a:	4902      	ldr	r1, [pc, #8]	; (2f74 <MPSL_IRQ_CLOCK_Handler+0x84>)
    2f6c:	2002      	movs	r0, #2
    2f6e:	6008      	str	r0, [r1, #0]
    2f70:	bd10      	pop	{r4, pc}
    2f72:	0000      	.short	0x0000
    2f74:	40000c34 	.word	0x40000c34
    2f78:	b570      	push	{r4, r5, r6, lr}
    2f7a:	f000 f987 	bl	328c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2f7e:	f000 faa1 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2f82:	4c09      	ldr	r4, [pc, #36]	; (2fa8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    2f84:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2f88:	b130      	cbz	r0, 2f98 <MPSL_IRQ_CLOCK_Handler+0xa8>
    2f8a:	f7ff ffe3 	bl	2f54 <MPSL_IRQ_CLOCK_Handler+0x64>
    2f8e:	2001      	movs	r0, #1
    2f90:	6128      	str	r0, [r5, #16]
    2f92:	2004      	movs	r0, #4
    2f94:	72a0      	strb	r0, [r4, #10]
    2f96:	e004      	b.n	2fa2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    2f98:	2003      	movs	r0, #3
    2f9a:	72a0      	strb	r0, [r4, #10]
    2f9c:	2001      	movs	r0, #1
    2f9e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    2fa2:	2000      	movs	r0, #0
    2fa4:	71e0      	strb	r0, [r4, #7]
    2fa6:	bd70      	pop	{r4, r5, r6, pc}
    2fa8:	2000002c 	.word	0x2000002c
    2fac:	b570      	push	{r4, r5, r6, lr}
    2fae:	4c13      	ldr	r4, [pc, #76]	; (2ffc <MPSL_IRQ_CLOCK_Handler+0x10c>)
    2fb0:	79a0      	ldrb	r0, [r4, #6]
    2fb2:	b1f0      	cbz	r0, 2ff2 <MPSL_IRQ_CLOCK_Handler+0x102>
    2fb4:	2801      	cmp	r0, #1
    2fb6:	d003      	beq.n	2fc0 <MPSL_IRQ_CLOCK_Handler+0xd0>
    2fb8:	79e1      	ldrb	r1, [r4, #7]
    2fba:	1e40      	subs	r0, r0, #1
    2fbc:	4281      	cmp	r1, r0
    2fbe:	da18      	bge.n	2ff2 <MPSL_IRQ_CLOCK_Handler+0x102>
    2fc0:	f000 fa80 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2fc4:	4605      	mov	r5, r0
    2fc6:	f000 fb51 	bl	366c <mpsl_temperature_get>
    2fca:	79a1      	ldrb	r1, [r4, #6]
    2fcc:	2901      	cmp	r1, #1
    2fce:	d902      	bls.n	2fd6 <MPSL_IRQ_CLOCK_Handler+0xe6>
    2fd0:	79e1      	ldrb	r1, [r4, #7]
    2fd2:	1c49      	adds	r1, r1, #1
    2fd4:	71e1      	strb	r1, [r4, #7]
    2fd6:	b10d      	cbz	r5, 2fdc <MPSL_IRQ_CLOCK_Handler+0xec>
    2fd8:	6961      	ldr	r1, [r4, #20]
    2fda:	e000      	b.n	2fde <MPSL_IRQ_CLOCK_Handler+0xee>
    2fdc:	6921      	ldr	r1, [r4, #16]
    2fde:	1a41      	subs	r1, r0, r1
    2fe0:	2902      	cmp	r1, #2
    2fe2:	da02      	bge.n	2fea <MPSL_IRQ_CLOCK_Handler+0xfa>
    2fe4:	f111 0f02 	cmn.w	r1, #2
    2fe8:	dc07      	bgt.n	2ffa <MPSL_IRQ_CLOCK_Handler+0x10a>
    2fea:	b10d      	cbz	r5, 2ff0 <MPSL_IRQ_CLOCK_Handler+0x100>
    2fec:	6160      	str	r0, [r4, #20]
    2fee:	e000      	b.n	2ff2 <MPSL_IRQ_CLOCK_Handler+0x102>
    2ff0:	6120      	str	r0, [r4, #16]
    2ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ff6:	f7ff bfbf 	b.w	2f78 <MPSL_IRQ_CLOCK_Handler+0x88>
    2ffa:	bd70      	pop	{r4, r5, r6, pc}
    2ffc:	2000002c 	.word	0x2000002c
    3000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3004:	4606      	mov	r6, r0
    3006:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    300a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    300e:	4628      	mov	r0, r5
    3010:	f004 f99f 	bl	7352 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3014:	4680      	mov	r8, r0
    3016:	f44f 7188 	mov.w	r1, #272	; 0x110
    301a:	4628      	mov	r0, r5
    301c:	f004 f999 	bl	7352 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3020:	4c27      	ldr	r4, [pc, #156]	; (30c0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3022:	4682      	mov	sl, r0
    3024:	7827      	ldrb	r7, [r4, #0]
    3026:	f104 0008 	add.w	r0, r4, #8
    302a:	f004 fa06 	bl	743a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    302e:	b110      	cbz	r0, 3036 <MPSL_IRQ_CLOCK_Handler+0x146>
    3030:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3034:	e016      	b.n	3064 <MPSL_IRQ_CLOCK_Handler+0x174>
    3036:	f04f 0901 	mov.w	r9, #1
    303a:	b146      	cbz	r6, 304e <MPSL_IRQ_CLOCK_Handler+0x15e>
    303c:	7aa0      	ldrb	r0, [r4, #10]
    303e:	2803      	cmp	r0, #3
    3040:	d105      	bne.n	304e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3042:	2004      	movs	r0, #4
    3044:	72a0      	strb	r0, [r4, #10]
    3046:	f7ff ff85 	bl	2f54 <MPSL_IRQ_CLOCK_Handler+0x64>
    304a:	f8c5 9010 	str.w	r9, [r5, #16]
    304e:	2600      	movs	r6, #0
    3050:	f1b8 0f00 	cmp.w	r8, #0
    3054:	d018      	beq.n	3088 <MPSL_IRQ_CLOCK_Handler+0x198>
    3056:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    305a:	7aa0      	ldrb	r0, [r4, #10]
    305c:	2804      	cmp	r0, #4
    305e:	d004      	beq.n	306a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3060:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3064:	206d      	movs	r0, #109	; 0x6d
    3066:	f000 fa91 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    306a:	f004 fa1c 	bl	74a6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    306e:	b928      	cbnz	r0, 307c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3070:	f004 fa3a 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3074:	b910      	cbnz	r0, 307c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3076:	f004 fa6d 	bl	7554 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    307a:	b108      	cbz	r0, 3080 <MPSL_IRQ_CLOCK_Handler+0x190>
    307c:	4811      	ldr	r0, [pc, #68]	; (30c4 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    307e:	6006      	str	r6, [r0, #0]
    3080:	2002      	movs	r0, #2
    3082:	72a0      	strb	r0, [r4, #10]
    3084:	f000 f8e6 	bl	3254 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3088:	f1ba 0f00 	cmp.w	sl, #0
    308c:	d008      	beq.n	30a0 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    308e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3092:	7aa0      	ldrb	r0, [r4, #10]
    3094:	2802      	cmp	r0, #2
    3096:	d101      	bne.n	309c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3098:	f7ff ff88 	bl	2fac <MPSL_IRQ_CLOCK_Handler+0xbc>
    309c:	f8c5 9014 	str.w	r9, [r5, #20]
    30a0:	b13f      	cbz	r7, 30b2 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    30a2:	7026      	strb	r6, [r4, #0]
    30a4:	7aa0      	ldrb	r0, [r4, #10]
    30a6:	2802      	cmp	r0, #2
    30a8:	d101      	bne.n	30ae <MPSL_IRQ_CLOCK_Handler+0x1be>
    30aa:	f7ff ff65 	bl	2f78 <MPSL_IRQ_CLOCK_Handler+0x88>
    30ae:	f000 f8d1 	bl	3254 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    30b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30b6:	4802      	ldr	r0, [pc, #8]	; (30c0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    30b8:	3008      	adds	r0, #8
    30ba:	f004 b9d5 	b.w	7468 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    30be:	0000      	.short	0x0000
    30c0:	2000002c 	.word	0x2000002c
    30c4:	40000c34 	.word	0x40000c34
    30c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30cc:	4c5c      	ldr	r4, [pc, #368]	; (3240 <MPSL_IRQ_CLOCK_Handler+0x350>)
    30ce:	f04f 0800 	mov.w	r8, #0
    30d2:	4606      	mov	r6, r0
    30d4:	f8c4 8018 	str.w	r8, [r4, #24]
    30d8:	7843      	ldrb	r3, [r0, #1]
    30da:	7882      	ldrb	r2, [r0, #2]
    30dc:	7800      	ldrb	r0, [r0, #0]
    30de:	72e0      	strb	r0, [r4, #11]
    30e0:	7163      	strb	r3, [r4, #5]
    30e2:	2701      	movs	r7, #1
    30e4:	71a2      	strb	r2, [r4, #6]
    30e6:	07bd      	lsls	r5, r7, #30
    30e8:	f884 8007 	strb.w	r8, [r4, #7]
    30ec:	2805      	cmp	r0, #5
    30ee:	d224      	bcs.n	313a <MPSL_IRQ_CLOCK_Handler+0x24a>
    30f0:	e8df f000 	tbb	[pc, r0]
    30f4:	1f05030f 	.word	0x1f05030f
    30f8:	0021      	.short	0x0021
    30fa:	61a7      	str	r7, [r4, #24]
    30fc:	e009      	b.n	3112 <MPSL_IRQ_CLOCK_Handler+0x222>
    30fe:	f000 f8c5 	bl	328c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3102:	2101      	movs	r1, #1
    3104:	4628      	mov	r0, r5
    3106:	f004 f929 	bl	735c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    310a:	2800      	cmp	r0, #0
    310c:	d0f9      	beq.n	3102 <MPSL_IRQ_CLOCK_Handler+0x212>
    310e:	2002      	movs	r0, #2
    3110:	61a0      	str	r0, [r4, #24]
    3112:	f004 f94f 	bl	73b4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3116:	b1b0      	cbz	r0, 3146 <MPSL_IRQ_CLOCK_Handler+0x256>
    3118:	f000 f9ee 	bl	34f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    311c:	7e21      	ldrb	r1, [r4, #24]
    311e:	f001 0103 	and.w	r1, r1, #3
    3122:	4288      	cmp	r0, r1
    3124:	d10f      	bne.n	3146 <MPSL_IRQ_CLOCK_Handler+0x256>
    3126:	79b0      	ldrb	r0, [r6, #6]
    3128:	b150      	cbz	r0, 3140 <MPSL_IRQ_CLOCK_Handler+0x250>
    312a:	2002      	movs	r0, #2
    312c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3130:	e06a      	b.n	3208 <MPSL_IRQ_CLOCK_Handler+0x318>
    3132:	4844      	ldr	r0, [pc, #272]	; (3244 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3134:	e7ec      	b.n	3110 <MPSL_IRQ_CLOCK_Handler+0x220>
    3136:	4844      	ldr	r0, [pc, #272]	; (3248 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3138:	e7ea      	b.n	3110 <MPSL_IRQ_CLOCK_Handler+0x220>
    313a:	f44f 714c 	mov.w	r1, #816	; 0x330
    313e:	e049      	b.n	31d4 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3140:	f000 f9ae 	bl	34a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3144:	e060      	b.n	3208 <MPSL_IRQ_CLOCK_Handler+0x318>
    3146:	60ef      	str	r7, [r5, #12]
    3148:	f44f 7a82 	mov.w	sl, #260	; 0x104
    314c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3150:	69a0      	ldr	r0, [r4, #24]
    3152:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3156:	f004 f992 	bl	747e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    315a:	b940      	cbnz	r0, 316e <MPSL_IRQ_CLOCK_Handler+0x27e>
    315c:	f004 f999 	bl	7492 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3160:	b928      	cbnz	r0, 316e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3162:	f004 f9ad 	bl	74c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3166:	b910      	cbnz	r0, 316e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3168:	f004 f9be 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    316c:	b138      	cbz	r0, 317e <MPSL_IRQ_CLOCK_Handler+0x28e>
    316e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3172:	4836      	ldr	r0, [pc, #216]	; (324c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3174:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3178:	f3c1 3142 	ubfx	r1, r1, #13, #3
    317c:	6001      	str	r1, [r0, #0]
    317e:	f004 f97e 	bl	747e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3182:	b940      	cbnz	r0, 3196 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3184:	f004 f985 	bl	7492 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3188:	b928      	cbnz	r0, 3196 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    318a:	f004 f999 	bl	74c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    318e:	b910      	cbnz	r0, 3196 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3190:	f004 f9aa 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3194:	b110      	cbz	r0, 319c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3196:	482d      	ldr	r0, [pc, #180]	; (324c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3198:	3010      	adds	r0, #16
    319a:	6007      	str	r7, [r0, #0]
    319c:	60af      	str	r7, [r5, #8]
    319e:	2002      	movs	r0, #2
    31a0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31a4:	79b0      	ldrb	r0, [r6, #6]
    31a6:	bb78      	cbnz	r0, 3208 <MPSL_IRQ_CLOCK_Handler+0x318>
    31a8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    31ac:	f010 0f02 	tst.w	r0, #2
    31b0:	d00e      	beq.n	31d0 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    31b2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3250 <MPSL_IRQ_CLOCK_Handler+0x360>
    31b6:	f8d9 1000 	ldr.w	r1, [r9]
    31ba:	43c9      	mvns	r1, r1
    31bc:	f341 1700 	sbfx	r7, r1, #4, #1
    31c0:	f8d9 1000 	ldr.w	r1, [r9]
    31c4:	f041 0110 	orr.w	r1, r1, #16
    31c8:	f8c9 1000 	str.w	r1, [r9]
    31cc:	1c7f      	adds	r7, r7, #1
    31ce:	e007      	b.n	31e0 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    31d0:	f240 21f1 	movw	r1, #753	; 0x2f1
    31d4:	206d      	movs	r0, #109	; 0x6d
    31d6:	f000 f9d9 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31da:	bf00      	nop
    31dc:	f000 fafc 	bl	37d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    31e0:	4651      	mov	r1, sl
    31e2:	4628      	mov	r0, r5
    31e4:	f004 f8b5 	bl	7352 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31e8:	2800      	cmp	r0, #0
    31ea:	d0f7      	beq.n	31dc <MPSL_IRQ_CLOCK_Handler+0x2ec>
    31ec:	f000 f958 	bl	34a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    31f0:	b92f      	cbnz	r7, 31fe <MPSL_IRQ_CLOCK_Handler+0x30e>
    31f2:	f8d9 1000 	ldr.w	r1, [r9]
    31f6:	f021 0110 	bic.w	r1, r1, #16
    31fa:	f8c9 1000 	str.w	r1, [r9]
    31fe:	2002      	movs	r0, #2
    3200:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3204:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3208:	79a0      	ldrb	r0, [r4, #6]
    320a:	b170      	cbz	r0, 322a <MPSL_IRQ_CLOCK_Handler+0x33a>
    320c:	7830      	ldrb	r0, [r6, #0]
    320e:	b960      	cbnz	r0, 322a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3210:	f000 f958 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3214:	4606      	mov	r6, r0
    3216:	f000 fa29 	bl	366c <mpsl_temperature_get>
    321a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    321e:	b116      	cbz	r6, 3226 <MPSL_IRQ_CLOCK_Handler+0x336>
    3220:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3224:	e001      	b.n	322a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3226:	e9c4 0204 	strd	r0, r2, [r4, #16]
    322a:	2101      	movs	r1, #1
    322c:	4628      	mov	r0, r5
    322e:	f004 f895 	bl	735c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3232:	b108      	cbz	r0, 3238 <MPSL_IRQ_CLOCK_Handler+0x348>
    3234:	f000 f940 	bl	34b8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3238:	f884 800a 	strb.w	r8, [r4, #10]
    323c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3240:	2000002c 	.word	0x2000002c
    3244:	00020001 	.word	0x00020001
    3248:	00030001 	.word	0x00030001
    324c:	4000053c 	.word	0x4000053c
    3250:	e000ed10 	.word	0xe000ed10

00003254 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3254:	b510      	push	{r4, lr}
    3256:	f3ef 8410 	mrs	r4, PRIMASK
    325a:	b672      	cpsid	i
    325c:	480a      	ldr	r0, [pc, #40]	; (3288 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    325e:	7841      	ldrb	r1, [r0, #1]
    3260:	b129      	cbz	r1, 326e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3262:	7841      	ldrb	r1, [r0, #1]
    3264:	1e49      	subs	r1, r1, #1
    3266:	7041      	strb	r1, [r0, #1]
    3268:	7841      	ldrb	r1, [r0, #1]
    326a:	b129      	cbz	r1, 3278 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    326c:	e008      	b.n	3280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    326e:	f240 110d 	movw	r1, #269	; 0x10d
    3272:	206d      	movs	r0, #109	; 0x6d
    3274:	f000 f98a 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3278:	7880      	ldrb	r0, [r0, #2]
    327a:	b908      	cbnz	r0, 3280 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    327c:	f000 f930 	bl	34e0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3280:	2c00      	cmp	r4, #0
    3282:	d100      	bne.n	3286 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3284:	b662      	cpsie	i
    3286:	bd10      	pop	{r4, pc}
    3288:	2000002c 	.word	0x2000002c

0000328c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    328c:	b510      	push	{r4, lr}
    328e:	f3ef 8410 	mrs	r4, PRIMASK
    3292:	b672      	cpsid	i
    3294:	4806      	ldr	r0, [pc, #24]	; (32b0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3296:	7841      	ldrb	r1, [r0, #1]
    3298:	1c49      	adds	r1, r1, #1
    329a:	7041      	strb	r1, [r0, #1]
    329c:	7840      	ldrb	r0, [r0, #1]
    329e:	2801      	cmp	r0, #1
    32a0:	d101      	bne.n	32a6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    32a2:	f004 f872 	bl	738a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    32a6:	2c00      	cmp	r4, #0
    32a8:	d100      	bne.n	32ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    32aa:	b662      	cpsie	i
    32ac:	bd10      	pop	{r4, pc}
    32ae:	0000      	.short	0x0000
    32b0:	2000002c 	.word	0x2000002c

000032b4 <mpsl_clock_hfclk_release>:
    32b4:	4805      	ldr	r0, [pc, #20]	; (32cc <mpsl_clock_hfclk_release+0x18>)
    32b6:	b510      	push	{r4, lr}
    32b8:	78c1      	ldrb	r1, [r0, #3]
    32ba:	b121      	cbz	r1, 32c6 <mpsl_clock_hfclk_release+0x12>
    32bc:	2100      	movs	r1, #0
    32be:	7101      	strb	r1, [r0, #4]
    32c0:	70c1      	strb	r1, [r0, #3]
    32c2:	f7ff ffc7 	bl	3254 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32c6:	2000      	movs	r0, #0
    32c8:	bd10      	pop	{r4, pc}
    32ca:	0000      	.short	0x0000
    32cc:	2000002c 	.word	0x2000002c

000032d0 <mpsl_clock_hfclk_request>:
    32d0:	b570      	push	{r4, r5, r6, lr}
    32d2:	4c0c      	ldr	r4, [pc, #48]	; (3304 <mpsl_clock_hfclk_request+0x34>)
    32d4:	78e1      	ldrb	r1, [r4, #3]
    32d6:	b961      	cbnz	r1, 32f2 <mpsl_clock_hfclk_request+0x22>
    32d8:	2501      	movs	r5, #1
    32da:	70e5      	strb	r5, [r4, #3]
    32dc:	61e0      	str	r0, [r4, #28]
    32de:	f7ff ffd5 	bl	328c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    32e2:	f000 f8ef 	bl	34c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32e6:	b130      	cbz	r0, 32f6 <mpsl_clock_hfclk_request+0x26>
    32e8:	69e0      	ldr	r0, [r4, #28]
    32ea:	b110      	cbz	r0, 32f2 <mpsl_clock_hfclk_request+0x22>
    32ec:	4780      	blx	r0
    32ee:	2000      	movs	r0, #0
    32f0:	61e0      	str	r0, [r4, #28]
    32f2:	2000      	movs	r0, #0
    32f4:	bd70      	pop	{r4, r5, r6, pc}
    32f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    32fa:	7125      	strb	r5, [r4, #4]
    32fc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3300:	e7f7      	b.n	32f2 <mpsl_clock_hfclk_request+0x22>
    3302:	0000      	.short	0x0000
    3304:	2000002c 	.word	0x2000002c

00003308 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3308:	f3ef 8010 	mrs	r0, PRIMASK
    330c:	b672      	cpsid	i
    330e:	4904      	ldr	r1, [pc, #16]	; (3320 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3310:	788a      	ldrb	r2, [r1, #2]
    3312:	1c52      	adds	r2, r2, #1
    3314:	708a      	strb	r2, [r1, #2]
    3316:	2800      	cmp	r0, #0
    3318:	d100      	bne.n	331c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    331a:	b662      	cpsie	i
    331c:	4770      	bx	lr
    331e:	0000      	.short	0x0000
    3320:	2000002c 	.word	0x2000002c

00003324 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3324:	b510      	push	{r4, lr}
    3326:	f3ef 8410 	mrs	r4, PRIMASK
    332a:	b672      	cpsid	i
    332c:	480a      	ldr	r0, [pc, #40]	; (3358 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    332e:	7881      	ldrb	r1, [r0, #2]
    3330:	b129      	cbz	r1, 333e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3332:	7881      	ldrb	r1, [r0, #2]
    3334:	1e49      	subs	r1, r1, #1
    3336:	7081      	strb	r1, [r0, #2]
    3338:	7841      	ldrb	r1, [r0, #1]
    333a:	b129      	cbz	r1, 3348 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    333c:	e008      	b.n	3350 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    333e:	f240 1125 	movw	r1, #293	; 0x125
    3342:	206d      	movs	r0, #109	; 0x6d
    3344:	f000 f922 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3348:	7880      	ldrb	r0, [r0, #2]
    334a:	b908      	cbnz	r0, 3350 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    334c:	f000 f8c8 	bl	34e0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3350:	2c00      	cmp	r4, #0
    3352:	d100      	bne.n	3356 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3354:	b662      	cpsie	i
    3356:	bd10      	pop	{r4, pc}
    3358:	2000002c 	.word	0x2000002c

0000335c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    335c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3360:	0004      	movs	r4, r0
    3362:	f06f 0015 	mvn.w	r0, #21
    3366:	d03c      	beq.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3368:	7821      	ldrb	r1, [r4, #0]
    336a:	2904      	cmp	r1, #4
    336c:	d839      	bhi.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    336e:	2900      	cmp	r1, #0
    3370:	7861      	ldrb	r1, [r4, #1]
    3372:	d038      	beq.n	33e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3374:	2900      	cmp	r1, #0
    3376:	d134      	bne.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3378:	78a1      	ldrb	r1, [r4, #2]
    337a:	2900      	cmp	r1, #0
    337c:	d131      	bne.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    337e:	2000      	movs	r0, #0
    3380:	f003 ffb2 	bl	72e8 <MPSL_IRQ_RADIO_Handler+0x1e>
    3384:	2000      	movs	r0, #0
    3386:	f003 ffa2 	bl	72ce <MPSL_IRQ_RADIO_Handler+0x4>
    338a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    338e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3392:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3396:	2600      	movs	r6, #0
    3398:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    339c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    33a0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    33a4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    33a8:	4f14      	ldr	r7, [pc, #80]	; (33fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    33aa:	707e      	strb	r6, [r7, #1]
    33ac:	88a0      	ldrh	r0, [r4, #4]
    33ae:	81b8      	strh	r0, [r7, #12]
    33b0:	f003 ffe2 	bl	7378 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    33b4:	2501      	movs	r5, #1
    33b6:	b108      	cbz	r0, 33bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    33b8:	70fd      	strb	r5, [r7, #3]
    33ba:	707d      	strb	r5, [r7, #1]
    33bc:	2101      	movs	r1, #1
    33be:	4640      	mov	r0, r8
    33c0:	f003 ffcc 	bl	735c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    33c4:	b108      	cbz	r0, 33ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    33c6:	f000 f877 	bl	34b8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    33ca:	4620      	mov	r0, r4
    33cc:	f7ff fe7c 	bl	30c8 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    33d0:	727d      	strb	r5, [r7, #9]
    33d2:	2000      	movs	r0, #0
    33d4:	f003 ff7b 	bl	72ce <MPSL_IRQ_RADIO_Handler+0x4>
    33d8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    33dc:	4630      	mov	r0, r6
    33de:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    33e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33e6:	2900      	cmp	r1, #0
    33e8:	d0fb      	beq.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    33ea:	2920      	cmp	r1, #32
    33ec:	d8f9      	bhi.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    33ee:	78a1      	ldrb	r1, [r4, #2]
    33f0:	2921      	cmp	r1, #33	; 0x21
    33f2:	d8f6      	bhi.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    33f4:	2901      	cmp	r1, #1
    33f6:	d1c2      	bne.n	337e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    33f8:	e7f3      	b.n	33e2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    33fa:	0000      	.short	0x0000
    33fc:	2000002c 	.word	0x2000002c

00003400 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3400:	4801      	ldr	r0, [pc, #4]	; (3408 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3402:	8980      	ldrh	r0, [r0, #12]
    3404:	4770      	bx	lr
    3406:	0000      	.short	0x0000
    3408:	2000002c 	.word	0x2000002c

0000340c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    340c:	4802      	ldr	r0, [pc, #8]	; (3418 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    340e:	7a80      	ldrb	r0, [r0, #10]
    3410:	2800      	cmp	r0, #0
    3412:	d000      	beq.n	3416 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3414:	2001      	movs	r0, #1
    3416:	4770      	bx	lr
    3418:	2000002c 	.word	0x2000002c

0000341c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    341e:	4d1f      	ldr	r5, [pc, #124]	; (349c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3420:	7ae8      	ldrb	r0, [r5, #11]
    3422:	2800      	cmp	r0, #0
    3424:	d10f      	bne.n	3446 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3426:	7e28      	ldrb	r0, [r5, #24]
    3428:	f000 0003 	and.w	r0, r0, #3
    342c:	f003 ffb2 	bl	7394 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3430:	2800      	cmp	r0, #0
    3432:	d008      	beq.n	3446 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3434:	f3ef 8110 	mrs	r1, PRIMASK
    3438:	b672      	cpsid	i
    343a:	f7ff ffe7 	bl	340c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    343e:	b118      	cbz	r0, 3448 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3440:	2900      	cmp	r1, #0
    3442:	d100      	bne.n	3446 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3444:	b662      	cpsie	i
    3446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3448:	2601      	movs	r6, #1
    344a:	72ae      	strb	r6, [r5, #10]
    344c:	b901      	cbnz	r1, 3450 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    344e:	b662      	cpsie	i
    3450:	2018      	movs	r0, #24
    3452:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3456:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    345a:	61a6      	str	r6, [r4, #24]
    345c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3460:	f8ad 0000 	strh.w	r0, [sp]
    3464:	f8bd 0000 	ldrh.w	r0, [sp]
    3468:	1e41      	subs	r1, r0, #1
    346a:	f8ad 1000 	strh.w	r1, [sp]
    346e:	d2f9      	bcs.n	3464 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3470:	2700      	movs	r7, #0
    3472:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3476:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    347a:	4808      	ldr	r0, [pc, #32]	; (349c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    347c:	3008      	adds	r0, #8
    347e:	f003 ffef 	bl	7460 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3482:	702f      	strb	r7, [r5, #0]
    3484:	f7ff fd78 	bl	2f78 <MPSL_IRQ_CLOCK_Handler+0x88>
    3488:	6166      	str	r6, [r4, #20]
    348a:	7968      	ldrb	r0, [r5, #5]
    348c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3490:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3494:	2018      	movs	r0, #24
    3496:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    349c:	2000002c 	.word	0x2000002c

000034a0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    34a0:	b510      	push	{r4, lr}
    34a2:	4c04      	ldr	r4, [pc, #16]	; (34b4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    34a4:	7e20      	ldrb	r0, [r4, #24]
    34a6:	f000 0003 	and.w	r0, r0, #3
    34aa:	f003 ff73 	bl	7394 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    34ae:	2800      	cmp	r0, #0
    34b0:	d0f8      	beq.n	34a4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    34b2:	bd10      	pop	{r4, pc}
    34b4:	2000002c 	.word	0x2000002c

000034b8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    34b8:	4901      	ldr	r1, [pc, #4]	; (34c0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    34ba:	2001      	movs	r0, #1
    34bc:	7008      	strb	r0, [r1, #0]
    34be:	4770      	bx	lr
    34c0:	2000015c 	.word	0x2000015c

000034c4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    34c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34c8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    34cc:	b918      	cbnz	r0, 34d6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    34ce:	4803      	ldr	r0, [pc, #12]	; (34dc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    34d0:	7800      	ldrb	r0, [r0, #0]
    34d2:	2800      	cmp	r0, #0
    34d4:	d000      	beq.n	34d8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    34d6:	2001      	movs	r0, #1
    34d8:	4770      	bx	lr
    34da:	0000      	.short	0x0000
    34dc:	2000015c 	.word	0x2000015c

000034e0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    34e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34e4:	2101      	movs	r1, #1
    34e6:	6041      	str	r1, [r0, #4]
    34e8:	2100      	movs	r1, #0
    34ea:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    34ee:	4801      	ldr	r0, [pc, #4]	; (34f4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    34f0:	7001      	strb	r1, [r0, #0]
    34f2:	4770      	bx	lr
    34f4:	2000015c 	.word	0x2000015c

000034f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    34f8:	4802      	ldr	r0, [pc, #8]	; (3504 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    34fa:	6800      	ldr	r0, [r0, #0]
    34fc:	f000 0003 	and.w	r0, r0, #3
    3500:	4770      	bx	lr
    3502:	0000      	.short	0x0000
    3504:	4000041c 	.word	0x4000041c
    3508:	b510      	push	{r4, lr}
    350a:	b131      	cbz	r1, 351a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    350c:	2901      	cmp	r1, #1
    350e:	d007      	beq.n	3520 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3510:	f44f 7142 	mov.w	r1, #776	; 0x308
    3514:	a005      	add	r0, pc, #20	; (adr r0, 352c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3516:	f000 f80f 	bl	3538 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    351a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    351e:	e001      	b.n	3524 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3520:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3524:	f000 0001 	and.w	r0, r0, #1
    3528:	bd10      	pop	{r4, pc}
    352a:	0000      	.short	0x0000
    352c:	5f66726e 	.word	0x5f66726e
    3530:	636f6c63 	.word	0x636f6c63
    3534:	00682e6b 	.word	0x00682e6b

00003538 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3538:	4a02      	ldr	r2, [pc, #8]	; (3544 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    353a:	6852      	ldr	r2, [r2, #4]
    353c:	b102      	cbz	r2, 3540 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    353e:	4710      	bx	r2
    3540:	e7fe      	b.n	3540 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3542:	0000      	.short	0x0000
    3544:	2000004c 	.word	0x2000004c
    3548:	4806      	ldr	r0, [pc, #24]	; (3564 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    354a:	b510      	push	{r4, lr}
    354c:	2100      	movs	r1, #0
    354e:	6001      	str	r1, [r0, #0]
    3550:	2101      	movs	r1, #1
    3552:	6001      	str	r1, [r0, #0]
    3554:	4608      	mov	r0, r1
    3556:	f003 ff44 	bl	73e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    355a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    355e:	2001      	movs	r0, #1
    3560:	f003 bf32 	b.w	73c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3564:	40001ffc 	.word	0x40001ffc
    3568:	4807      	ldr	r0, [pc, #28]	; (3588 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    356a:	b510      	push	{r4, lr}
    356c:	2101      	movs	r1, #1
    356e:	6041      	str	r1, [r0, #4]
    3570:	1e89      	subs	r1, r1, #2
    3572:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3576:	200c      	movs	r0, #12
    3578:	f003 ff33 	bl	73e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    357c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3580:	200c      	movs	r0, #12
    3582:	f003 bf21 	b.w	73c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3586:	0000      	.short	0x0000
    3588:	4000c000 	.word	0x4000c000

0000358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    358c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    358e:	4a10      	ldr	r2, [pc, #64]	; (35d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3590:	6855      	ldr	r5, [r2, #4]
    3592:	b1e5      	cbz	r5, 35ce <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3594:	2200      	movs	r2, #0
    3596:	4603      	mov	r3, r0
    3598:	466e      	mov	r6, sp
    359a:	240a      	movs	r4, #10
    359c:	e003      	b.n	35a6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    359e:	fbb0 f0f4 	udiv	r0, r0, r4
    35a2:	1c52      	adds	r2, r2, #1
    35a4:	b2d2      	uxtb	r2, r2
    35a6:	2800      	cmp	r0, #0
    35a8:	d1f9      	bne.n	359e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    35aa:	54b0      	strb	r0, [r6, r2]
    35ac:	e00a      	b.n	35c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    35ae:	bf00      	nop
    35b0:	fbb3 f0f4 	udiv	r0, r3, r4
    35b4:	fb04 3010 	mls	r0, r4, r0, r3
    35b8:	fbb3 f3f4 	udiv	r3, r3, r4
    35bc:	1e52      	subs	r2, r2, #1
    35be:	b2d2      	uxtb	r2, r2
    35c0:	3030      	adds	r0, #48	; 0x30
    35c2:	54b0      	strb	r0, [r6, r2]
    35c4:	2a00      	cmp	r2, #0
    35c6:	d1f3      	bne.n	35b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    35c8:	4630      	mov	r0, r6
    35ca:	47a8      	blx	r5
    35cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    35ce:	e7fe      	b.n	35ce <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    35d0:	2000004c 	.word	0x2000004c

000035d4 <mpsl_init>:
    35d4:	b570      	push	{r4, r5, r6, lr}
    35d6:	4c17      	ldr	r4, [pc, #92]	; (3634 <mpsl_init+0x60>)
    35d8:	4606      	mov	r6, r0
    35da:	460d      	mov	r5, r1
    35dc:	7860      	ldrb	r0, [r4, #1]
    35de:	b110      	cbz	r0, 35e6 <mpsl_init+0x12>
    35e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    35e4:	bd70      	pop	{r4, r5, r6, pc}
    35e6:	b906      	cbnz	r6, 35ea <mpsl_init+0x16>
    35e8:	4e13      	ldr	r6, [pc, #76]	; (3638 <mpsl_init+0x64>)
    35ea:	6062      	str	r2, [r4, #4]
    35ec:	7025      	strb	r5, [r4, #0]
    35ee:	f7ff ffab 	bl	3548 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    35f2:	f7ff ffb9 	bl	3568 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    35f6:	4630      	mov	r0, r6
    35f8:	f7ff feb0 	bl	335c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    35fc:	0006      	movs	r6, r0
    35fe:	d1f1      	bne.n	35e4 <mpsl_init+0x10>
    3600:	f7fe ff54 	bl	24ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3604:	f7ff ff0a 	bl	341c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3608:	f003 fe38 	bl	727c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    360c:	4628      	mov	r0, r5
    360e:	f003 fedb 	bl	73c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3612:	2001      	movs	r0, #1
    3614:	2d00      	cmp	r5, #0
    3616:	db09      	blt.n	362c <mpsl_init+0x58>
    3618:	f005 011f 	and.w	r1, r5, #31
    361c:	fa00 f101 	lsl.w	r1, r0, r1
    3620:	096a      	lsrs	r2, r5, #5
    3622:	0092      	lsls	r2, r2, #2
    3624:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3628:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    362c:	7060      	strb	r0, [r4, #1]
    362e:	4630      	mov	r0, r6
    3630:	bd70      	pop	{r4, r5, r6, pc}
    3632:	0000      	.short	0x0000
    3634:	2000004c 	.word	0x2000004c
    3638:	00007404 	.word	0x00007404

0000363c <mpsl_is_initialized>:
    363c:	4801      	ldr	r0, [pc, #4]	; (3644 <mpsl_is_initialized+0x8>)
    363e:	7840      	ldrb	r0, [r0, #1]
    3640:	4770      	bx	lr
    3642:	0000      	.short	0x0000
    3644:	2000004c 	.word	0x2000004c

00003648 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3648:	4807      	ldr	r0, [pc, #28]	; (3668 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    364a:	f990 0000 	ldrsb.w	r0, [r0]
    364e:	2800      	cmp	r0, #0
    3650:	db09      	blt.n	3666 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3652:	f000 021f 	and.w	r2, r0, #31
    3656:	2101      	movs	r1, #1
    3658:	4091      	lsls	r1, r2
    365a:	0940      	lsrs	r0, r0, #5
    365c:	0080      	lsls	r0, r0, #2
    365e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3662:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3666:	4770      	bx	lr
    3668:	2000004c 	.word	0x2000004c

0000366c <mpsl_temperature_get>:
    366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3670:	2601      	movs	r6, #1
    3672:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3676:	0331      	lsls	r1, r6, #12
    3678:	f04f 0800 	mov.w	r8, #0
    367c:	4640      	mov	r0, r8
    367e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3682:	f3bf 8f4f 	dsb	sy
    3686:	f3bf 8f6f 	isb	sy
    368a:	4c16      	ldr	r4, [pc, #88]	; (36e4 <mpsl_temperature_get+0x78>)
    368c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3690:	200c      	movs	r0, #12
    3692:	f003 fec5 	bl	7420 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3696:	4d14      	ldr	r5, [pc, #80]	; (36e8 <mpsl_temperature_get+0x7c>)
    3698:	6828      	ldr	r0, [r5, #0]
    369a:	43c0      	mvns	r0, r0
    369c:	f340 1700 	sbfx	r7, r0, #4, #1
    36a0:	6828      	ldr	r0, [r5, #0]
    36a2:	f040 0010 	orr.w	r0, r0, #16
    36a6:	6028      	str	r0, [r5, #0]
    36a8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    36ac:	6026      	str	r6, [r4, #0]
    36ae:	1c7f      	adds	r7, r7, #1
    36b0:	e002      	b.n	36b8 <mpsl_temperature_get+0x4c>
    36b2:	bf00      	nop
    36b4:	f000 f890 	bl	37d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    36b8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    36bc:	2800      	cmp	r0, #0
    36be:	d0f9      	beq.n	36b4 <mpsl_temperature_get+0x48>
    36c0:	b91f      	cbnz	r7, 36ca <mpsl_temperature_get+0x5e>
    36c2:	6828      	ldr	r0, [r5, #0]
    36c4:	f020 0010 	bic.w	r0, r0, #16
    36c8:	6028      	str	r0, [r5, #0]
    36ca:	4808      	ldr	r0, [pc, #32]	; (36ec <mpsl_temperature_get+0x80>)
    36cc:	6805      	ldr	r5, [r0, #0]
    36ce:	6066      	str	r6, [r4, #4]
    36d0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    36d4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    36d8:	200c      	movs	r0, #12
    36da:	f003 fea1 	bl	7420 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    36de:	4628      	mov	r0, r5
    36e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36e4:	4000c000 	.word	0x4000c000
    36e8:	e000ed10 	.word	0xe000ed10
    36ec:	4000c508 	.word	0x4000c508

000036f0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    36f0:	b510      	push	{r4, lr}
    36f2:	4602      	mov	r2, r0
    36f4:	2005      	movs	r0, #5
    36f6:	490c      	ldr	r1, [pc, #48]	; (3728 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    36f8:	e004      	b.n	3704 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    36fa:	bf00      	nop
    36fc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3700:	791b      	ldrb	r3, [r3, #4]
    3702:	b133      	cbz	r3, 3712 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3704:	1e40      	subs	r0, r0, #1
    3706:	b2c0      	uxtb	r0, r0
    3708:	d2f8      	bcs.n	36fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    370a:	214b      	movs	r1, #75	; 0x4b
    370c:	2069      	movs	r0, #105	; 0x69
    370e:	f7ff ff3d 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3712:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3716:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    371a:	2200      	movs	r2, #0
    371c:	714a      	strb	r2, [r1, #5]
    371e:	718a      	strb	r2, [r1, #6]
    3720:	2201      	movs	r2, #1
    3722:	710a      	strb	r2, [r1, #4]
    3724:	bd10      	pop	{r4, pc}
    3726:	0000      	.short	0x0000
    3728:	200008e0 	.word	0x200008e0

0000372c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    372c:	b510      	push	{r4, lr}
    372e:	2805      	cmp	r0, #5
    3730:	d301      	bcc.n	3736 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3732:	215a      	movs	r1, #90	; 0x5a
    3734:	e006      	b.n	3744 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3736:	490a      	ldr	r1, [pc, #40]	; (3760 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3738:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    373c:	7901      	ldrb	r1, [r0, #4]
    373e:	2901      	cmp	r1, #1
    3740:	d003      	beq.n	374a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3742:	215b      	movs	r1, #91	; 0x5b
    3744:	2069      	movs	r0, #105	; 0x69
    3746:	f7ff ff21 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    374a:	7941      	ldrb	r1, [r0, #5]
    374c:	7982      	ldrb	r2, [r0, #6]
    374e:	1c49      	adds	r1, r1, #1
    3750:	b2c9      	uxtb	r1, r1
    3752:	428a      	cmp	r2, r1
    3754:	d000      	beq.n	3758 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3756:	7141      	strb	r1, [r0, #5]
    3758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    375c:	f7ff bf74 	b.w	3648 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3760:	200008e0 	.word	0x200008e0

00003764 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3764:	b570      	push	{r4, r5, r6, lr}
    3766:	2505      	movs	r5, #5
    3768:	4e0e      	ldr	r6, [pc, #56]	; (37a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    376a:	4c0f      	ldr	r4, [pc, #60]	; (37a8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    376c:	e016      	b.n	379c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    376e:	7821      	ldrb	r1, [r4, #0]
    3770:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3774:	7902      	ldrb	r2, [r0, #4]
    3776:	2a01      	cmp	r2, #1
    3778:	d108      	bne.n	378c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    377a:	7942      	ldrb	r2, [r0, #5]
    377c:	7983      	ldrb	r3, [r0, #6]
    377e:	429a      	cmp	r2, r3
    3780:	d004      	beq.n	378c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3782:	7942      	ldrb	r2, [r0, #5]
    3784:	7182      	strb	r2, [r0, #6]
    3786:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    378a:	4780      	blx	r0
    378c:	7820      	ldrb	r0, [r4, #0]
    378e:	1c40      	adds	r0, r0, #1
    3790:	b2c0      	uxtb	r0, r0
    3792:	7020      	strb	r0, [r4, #0]
    3794:	2805      	cmp	r0, #5
    3796:	d301      	bcc.n	379c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3798:	2000      	movs	r0, #0
    379a:	7020      	strb	r0, [r4, #0]
    379c:	1e6d      	subs	r5, r5, #1
    379e:	b2ed      	uxtb	r5, r5
    37a0:	d2e5      	bcs.n	376e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    37a2:	bd70      	pop	{r4, r5, r6, pc}
    37a4:	200008e0 	.word	0x200008e0
    37a8:	2000015d 	.word	0x2000015d

000037ac <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    37ac:	b500      	push	{lr}
    37ae:	f003 fe66 	bl	747e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    37b2:	b940      	cbnz	r0, 37c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    37b4:	f003 fe6d 	bl	7492 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    37b8:	b928      	cbnz	r0, 37c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    37ba:	f003 fe81 	bl	74c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    37be:	b910      	cbnz	r0, 37c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    37c0:	f003 fe92 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    37c4:	b108      	cbz	r0, 37ca <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    37c6:	4802      	ldr	r0, [pc, #8]	; (37d0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    37c8:	bd00      	pop	{pc}
    37ca:	4802      	ldr	r0, [pc, #8]	; (37d4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    37cc:	bd00      	pop	{pc}
    37ce:	0000      	.short	0x0000
    37d0:	4000050c 	.word	0x4000050c
    37d4:	4001e700 	.word	0x4001e700

000037d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    37d8:	b510      	push	{r4, lr}
    37da:	f003 fe85 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    37de:	b330      	cbz	r0, 382e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    37e0:	f3ef 8010 	mrs	r0, PRIMASK
    37e4:	b1c8      	cbz	r0, 381a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    37e6:	2100      	movs	r1, #0
    37e8:	b672      	cpsid	i
    37ea:	4812      	ldr	r0, [pc, #72]	; (3834 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    37ec:	6802      	ldr	r2, [r0, #0]
    37ee:	6803      	ldr	r3, [r0, #0]
    37f0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    37f4:	f043 0310 	orr.w	r3, r3, #16
    37f8:	6003      	str	r3, [r0, #0]
    37fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    37fe:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3802:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3806:	431c      	orrs	r4, r3
    3808:	d000      	beq.n	380c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    380a:	bf40      	sev
    380c:	bf20      	wfe
    380e:	bf00      	nop
    3810:	bf00      	nop
    3812:	bf00      	nop
    3814:	bf00      	nop
    3816:	b112      	cbz	r2, 381e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3818:	e005      	b.n	3826 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    381a:	2101      	movs	r1, #1
    381c:	e7e4      	b.n	37e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    381e:	6802      	ldr	r2, [r0, #0]
    3820:	f022 0210 	bic.w	r2, r2, #16
    3824:	6002      	str	r2, [r0, #0]
    3826:	2900      	cmp	r1, #0
    3828:	d000      	beq.n	382c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    382a:	b662      	cpsie	i
    382c:	bd10      	pop	{r4, pc}
    382e:	bf20      	wfe
    3830:	bd10      	pop	{r4, pc}
    3832:	0000      	.short	0x0000
    3834:	e000ed10 	.word	0xe000ed10

00003838 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3838:	00007759 00007775 00007763 0000776f     Yw..uw..cw..ow..
    3848:	0000775d 00007757 00007755 0000777b     ]w..Ww..Uw..{w..
    3858:	00007769 0000774f 00007747 0000774b     iw..Ow..Gw..Kw..
    3868:	00007741                                Aw..

0000386c <mpsl_fem_disable>:
    386c:	4801      	ldr	r0, [pc, #4]	; (3874 <mpsl_fem_disable+0x8>)
    386e:	6800      	ldr	r0, [r0, #0]
    3870:	6800      	ldr	r0, [r0, #0]
    3872:	4700      	bx	r0
    3874:	20000054 	.word	0x20000054

00003878 <mpsl_fem_lna_configuration_clear>:
    3878:	4801      	ldr	r0, [pc, #4]	; (3880 <mpsl_fem_lna_configuration_clear+0x8>)
    387a:	6800      	ldr	r0, [r0, #0]
    387c:	6900      	ldr	r0, [r0, #16]
    387e:	4700      	bx	r0
    3880:	20000054 	.word	0x20000054

00003884 <mpsl_fem_lna_configuration_set>:
    3884:	4a01      	ldr	r2, [pc, #4]	; (388c <mpsl_fem_lna_configuration_set+0x8>)
    3886:	6812      	ldr	r2, [r2, #0]
    3888:	6892      	ldr	r2, [r2, #8]
    388a:	4710      	bx	r2
    388c:	20000054 	.word	0x20000054

00003890 <mpsl_fem_pa_configuration_clear>:
    3890:	4801      	ldr	r0, [pc, #4]	; (3898 <mpsl_fem_pa_configuration_clear+0x8>)
    3892:	6800      	ldr	r0, [r0, #0]
    3894:	68c0      	ldr	r0, [r0, #12]
    3896:	4700      	bx	r0
    3898:	20000054 	.word	0x20000054

0000389c <mpsl_fem_pa_configuration_set>:
    389c:	4a01      	ldr	r2, [pc, #4]	; (38a4 <mpsl_fem_pa_configuration_set+0x8>)
    389e:	6812      	ldr	r2, [r2, #0]
    38a0:	6852      	ldr	r2, [r2, #4]
    38a2:	4710      	bx	r2
    38a4:	20000054 	.word	0x20000054

000038a8 <mpsl_fem_pa_is_configured>:
    38a8:	4901      	ldr	r1, [pc, #4]	; (38b0 <mpsl_fem_pa_is_configured+0x8>)
    38aa:	6809      	ldr	r1, [r1, #0]
    38ac:	6a09      	ldr	r1, [r1, #32]
    38ae:	4708      	bx	r1
    38b0:	20000054 	.word	0x20000054

000038b4 <mpsl_fem_device_config_254_apply_get>:
    38b4:	4801      	ldr	r0, [pc, #4]	; (38bc <mpsl_fem_device_config_254_apply_get+0x8>)
    38b6:	7800      	ldrb	r0, [r0, #0]
    38b8:	4770      	bx	lr
    38ba:	0000      	.short	0x0000
    38bc:	2000015e 	.word	0x2000015e
    38c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    38c2:	4c17      	ldr	r4, [pc, #92]	; (3920 <mpsl_fem_device_config_254_apply_get+0x6c>)
    38c4:	79a0      	ldrb	r0, [r4, #6]
    38c6:	2802      	cmp	r0, #2
    38c8:	d200      	bcs.n	38cc <mpsl_fem_device_config_254_apply_get+0x18>
    38ca:	2002      	movs	r0, #2
    38cc:	f88d 0001 	strb.w	r0, [sp, #1]
    38d0:	7960      	ldrb	r0, [r4, #5]
    38d2:	2803      	cmp	r0, #3
    38d4:	d200      	bcs.n	38d8 <mpsl_fem_device_config_254_apply_get+0x24>
    38d6:	2003      	movs	r0, #3
    38d8:	f88d 0000 	strb.w	r0, [sp]
    38dc:	7920      	ldrb	r0, [r4, #4]
    38de:	f8ad 0004 	strh.w	r0, [sp, #4]
    38e2:	78e0      	ldrb	r0, [r4, #3]
    38e4:	f8ad 0002 	strh.w	r0, [sp, #2]
    38e8:	4668      	mov	r0, sp
    38ea:	f002 fadd 	bl	5ea8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    38ee:	b108      	cbz	r0, 38f4 <mpsl_fem_device_config_254_apply_get+0x40>
    38f0:	21ae      	movs	r1, #174	; 0xae
    38f2:	e010      	b.n	3916 <mpsl_fem_device_config_254_apply_get+0x62>
    38f4:	68a0      	ldr	r0, [r4, #8]
    38f6:	9002      	str	r0, [sp, #8]
    38f8:	a802      	add	r0, sp, #8
    38fa:	f002 faeb 	bl	5ed4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    38fe:	b108      	cbz	r0, 3904 <mpsl_fem_device_config_254_apply_get+0x50>
    3900:	21b2      	movs	r1, #178	; 0xb2
    3902:	e008      	b.n	3916 <mpsl_fem_device_config_254_apply_get+0x62>
    3904:	4807      	ldr	r0, [pc, #28]	; (3924 <mpsl_fem_device_config_254_apply_get+0x70>)
    3906:	6800      	ldr	r0, [r0, #0]
    3908:	9003      	str	r0, [sp, #12]
    390a:	a803      	add	r0, sp, #12
    390c:	f005 fc6e 	bl	91ec <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3910:	2800      	cmp	r0, #0
    3912:	d003      	beq.n	391c <mpsl_fem_device_config_254_apply_get+0x68>
    3914:	21b6      	movs	r1, #182	; 0xb6
    3916:	2003      	movs	r0, #3
    3918:	f000 f8ce 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    391c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    391e:	0000      	.short	0x0000
    3920:	20000064 	.word	0x20000064
    3924:	00003b40 	.word	0x00003b40

00003928 <sdc_build_revision_get>:
    3928:	b510      	push	{r4, lr}
    392a:	b128      	cbz	r0, 3938 <sdc_build_revision_get+0x10>
    392c:	2214      	movs	r2, #20
    392e:	4904      	ldr	r1, [pc, #16]	; (3940 <sdc_build_revision_get+0x18>)
    3930:	f003 fe2c 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3934:	2000      	movs	r0, #0
    3936:	bd10      	pop	{r4, pc}
    3938:	f06f 0015 	mvn.w	r0, #21
    393c:	bd10      	pop	{r4, pc}
    393e:	0000      	.short	0x0000
    3940:	00003b72 	.word	0x00003b72

00003944 <sdc_cfg_set>:
    3944:	b570      	push	{r4, r5, r6, lr}
    3946:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    394a:	bbb0      	cbnz	r0, 39ba <sdc_cfg_set+0x76>
    394c:	4c1d      	ldr	r4, [pc, #116]	; (39c4 <sdc_cfg_set+0x80>)
    394e:	78a0      	ldrb	r0, [r4, #2]
    3950:	b108      	cbz	r0, 3956 <sdc_cfg_set+0x12>
    3952:	11a8      	asrs	r0, r5, #6
    3954:	bd70      	pop	{r4, r5, r6, pc}
    3956:	b321      	cbz	r1, 39a2 <sdc_cfg_set+0x5e>
    3958:	f06f 0015 	mvn.w	r0, #21
    395c:	2a00      	cmp	r2, #0
    395e:	d0f9      	beq.n	3954 <sdc_cfg_set+0x10>
    3960:	2908      	cmp	r1, #8
    3962:	d22a      	bcs.n	39ba <sdc_cfg_set+0x76>
    3964:	e8df f001 	tbb	[pc, r1]
    3968:	0a070429 	.word	0x0a070429
    396c:	1e14110e 	.word	0x1e14110e
    3970:	7810      	ldrb	r0, [r2, #0]
    3972:	7320      	strb	r0, [r4, #12]
    3974:	e018      	b.n	39a8 <sdc_cfg_set+0x64>
    3976:	7810      	ldrb	r0, [r2, #0]
    3978:	7360      	strb	r0, [r4, #13]
    397a:	e015      	b.n	39a8 <sdc_cfg_set+0x64>
    397c:	6810      	ldr	r0, [r2, #0]
    397e:	f8c4 000f 	str.w	r0, [r4, #15]
    3982:	e011      	b.n	39a8 <sdc_cfg_set+0x64>
    3984:	6810      	ldr	r0, [r2, #0]
    3986:	6160      	str	r0, [r4, #20]
    3988:	e00e      	b.n	39a8 <sdc_cfg_set+0x64>
    398a:	7810      	ldrb	r0, [r2, #0]
    398c:	73a0      	strb	r0, [r4, #14]
    398e:	e00b      	b.n	39a8 <sdc_cfg_set+0x64>
    3990:	7921      	ldrb	r1, [r4, #4]
    3992:	b111      	cbz	r1, 399a <sdc_cfg_set+0x56>
    3994:	7811      	ldrb	r1, [r2, #0]
    3996:	2902      	cmp	r1, #2
    3998:	d3dc      	bcc.n	3954 <sdc_cfg_set+0x10>
    399a:	490a      	ldr	r1, [pc, #40]	; (39c4 <sdc_cfg_set+0x80>)
    399c:	7810      	ldrb	r0, [r2, #0]
    399e:	310c      	adds	r1, #12
    39a0:	7308      	strb	r0, [r1, #12]
    39a2:	e001      	b.n	39a8 <sdc_cfg_set+0x64>
    39a4:	8810      	ldrh	r0, [r2, #0]
    39a6:	8360      	strh	r0, [r4, #26]
    39a8:	4906      	ldr	r1, [pc, #24]	; (39c4 <sdc_cfg_set+0x80>)
    39aa:	2201      	movs	r2, #1
    39ac:	310c      	adds	r1, #12
    39ae:	2000      	movs	r0, #0
    39b0:	f003 fee5 	bl	777e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    39b4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    39b8:	db01      	blt.n	39be <sdc_cfg_set+0x7a>
    39ba:	4628      	mov	r0, r5
    39bc:	bd70      	pop	{r4, r5, r6, pc}
    39be:	2101      	movs	r1, #1
    39c0:	70e1      	strb	r1, [r4, #3]
    39c2:	bd70      	pop	{r4, r5, r6, pc}
    39c4:	20000058 	.word	0x20000058

000039c8 <sdc_enable>:
    39c8:	b538      	push	{r3, r4, r5, lr}
    39ca:	460d      	mov	r5, r1
    39cc:	0004      	movs	r4, r0
    39ce:	d020      	beq.n	3a12 <sdc_enable+0x4a>
    39d0:	b1fd      	cbz	r5, 3a12 <sdc_enable+0x4a>
    39d2:	f000 f903 	bl	3bdc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    39d6:	b1f8      	cbz	r0, 3a18 <sdc_enable+0x50>
    39d8:	4620      	mov	r0, r4
    39da:	f7ff fe89 	bl	36f0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    39de:	4c10      	ldr	r4, [pc, #64]	; (3a20 <sdc_enable+0x58>)
    39e0:	2200      	movs	r2, #0
    39e2:	f104 010c 	add.w	r1, r4, #12
    39e6:	7020      	strb	r0, [r4, #0]
    39e8:	4628      	mov	r0, r5
    39ea:	f003 fec8 	bl	777e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    39ee:	f005 fe32 	bl	9656 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    39f2:	2100      	movs	r1, #0
    39f4:	7820      	ldrb	r0, [r4, #0]
    39f6:	f002 fba5 	bl	6144 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    39fa:	7860      	ldrb	r0, [r4, #1]
    39fc:	f88d 0000 	strb.w	r0, [sp]
    3a00:	4668      	mov	r0, sp
    3a02:	f005 fbe7 	bl	91d4 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3a06:	f7ff ff5b 	bl	38c0 <mpsl_fem_device_config_254_apply_get+0xc>
    3a0a:	2001      	movs	r0, #1
    3a0c:	70a0      	strb	r0, [r4, #2]
    3a0e:	2000      	movs	r0, #0
    3a10:	bd38      	pop	{r3, r4, r5, pc}
    3a12:	f06f 0015 	mvn.w	r0, #21
    3a16:	bd38      	pop	{r3, r4, r5, pc}
    3a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a1c:	bd38      	pop	{r3, r4, r5, pc}
    3a1e:	0000      	.short	0x0000
    3a20:	20000058 	.word	0x20000058

00003a24 <sdc_init>:
    3a24:	b570      	push	{r4, r5, r6, lr}
    3a26:	0005      	movs	r5, r0
    3a28:	d00b      	beq.n	3a42 <sdc_init+0x1e>
    3a2a:	f7ff fe07 	bl	363c <mpsl_is_initialized>
    3a2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3a32:	b120      	cbz	r0, 3a3e <sdc_init+0x1a>
    3a34:	f7ff fce4 	bl	3400 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3a38:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3a3c:	d904      	bls.n	3a48 <sdc_init+0x24>
    3a3e:	4620      	mov	r0, r4
    3a40:	bd70      	pop	{r4, r5, r6, pc}
    3a42:	f06f 0015 	mvn.w	r0, #21
    3a46:	bd70      	pop	{r4, r5, r6, pc}
    3a48:	2200      	movs	r2, #0
    3a4a:	4b16      	ldr	r3, [pc, #88]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a4c:	4611      	mov	r1, r2
    3a4e:	bf00      	nop
    3a50:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3a54:	4284      	cmp	r4, r0
    3a56:	d303      	bcc.n	3a60 <sdc_init+0x3c>
    3a58:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3a5c:	7882      	ldrb	r2, [r0, #2]
    3a5e:	e003      	b.n	3a68 <sdc_init+0x44>
    3a60:	1c49      	adds	r1, r1, #1
    3a62:	b2c9      	uxtb	r1, r1
    3a64:	290c      	cmp	r1, #12
    3a66:	d3f3      	bcc.n	3a50 <sdc_init+0x2c>
    3a68:	4c0f      	ldr	r4, [pc, #60]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a6a:	4810      	ldr	r0, [pc, #64]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a6c:	7062      	strb	r2, [r4, #1]
    3a6e:	60a5      	str	r5, [r4, #8]
    3a70:	f000 f9c0 	bl	3df4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3a74:	2000      	movs	r0, #0
    3a76:	70a0      	strb	r0, [r4, #2]
    3a78:	70e0      	strb	r0, [r4, #3]
    3a7a:	7120      	strb	r0, [r4, #4]
    3a7c:	f3ef 8410 	mrs	r4, PRIMASK
    3a80:	b672      	cpsid	i
    3a82:	480b      	ldr	r0, [pc, #44]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a84:	f06f 010c 	mvn.w	r1, #12
    3a88:	f000 fd0a 	bl	44a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3a8c:	4809      	ldr	r0, [pc, #36]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a8e:	f000 fdcb 	bl	4628 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3a92:	b118      	cbz	r0, 3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a94:	21c4      	movs	r1, #196	; 0xc4
    3a96:	2003      	movs	r0, #3
    3a98:	f000 f80e 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a9c:	b904      	cbnz	r4, 3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a9e:	b662      	cpsie	i
    3aa0:	2000      	movs	r0, #0
    3aa2:	bd70      	pop	{r4, r5, r6, pc}
    3aa4:	00003b42 	.word	0x00003b42
    3aa8:	20000058 	.word	0x20000058
    3aac:	000038c1 	.word	0x000038c1
    3ab0:	4000c000 	.word	0x4000c000
    3ab4:	00003c09 	.word	0x00003c09

00003ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3ab8:	b50e      	push	{r1, r2, r3, lr}
    3aba:	b672      	cpsid	i
    3abc:	4a15      	ldr	r2, [pc, #84]	; (3b14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3abe:	6895      	ldr	r5, [r2, #8]
    3ac0:	b1d5      	cbz	r5, 3af8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3ac2:	2200      	movs	r2, #0
    3ac4:	4603      	mov	r3, r0
    3ac6:	466e      	mov	r6, sp
    3ac8:	240a      	movs	r4, #10
    3aca:	e003      	b.n	3ad4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3acc:	fbb0 f0f4 	udiv	r0, r0, r4
    3ad0:	1c52      	adds	r2, r2, #1
    3ad2:	b2d2      	uxtb	r2, r2
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d1f9      	bne.n	3acc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3ad8:	54b0      	strb	r0, [r6, r2]
    3ada:	e009      	b.n	3af0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3adc:	fbb3 f0f4 	udiv	r0, r3, r4
    3ae0:	fb04 3010 	mls	r0, r4, r0, r3
    3ae4:	fbb3 f3f4 	udiv	r3, r3, r4
    3ae8:	1e52      	subs	r2, r2, #1
    3aea:	b2d2      	uxtb	r2, r2
    3aec:	3030      	adds	r0, #48	; 0x30
    3aee:	54b0      	strb	r0, [r6, r2]
    3af0:	2a00      	cmp	r2, #0
    3af2:	d1f3      	bne.n	3adc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3af4:	4630      	mov	r0, r6
    3af6:	47a8      	blx	r5
    3af8:	f3bf 8f4f 	dsb	sy
    3afc:	4806      	ldr	r0, [pc, #24]	; (3b18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3afe:	6801      	ldr	r1, [r0, #0]
    3b00:	4a06      	ldr	r2, [pc, #24]	; (3b1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3b02:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3b06:	4311      	orrs	r1, r2
    3b08:	6001      	str	r1, [r0, #0]
    3b0a:	f3bf 8f4f 	dsb	sy
    3b0e:	bf00      	nop
    3b10:	e7fd      	b.n	3b0e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3b12:	0000      	.short	0x0000
    3b14:	20000058 	.word	0x20000058
    3b18:	e000ed0c 	.word	0xe000ed0c
    3b1c:	05fa0004 	.word	0x05fa0004

00003b20 <sdc_support_adv>:
    3b20:	4806      	ldr	r0, [pc, #24]	; (3b3c <sdc_support_adv+0x1c>)
    3b22:	b510      	push	{r4, lr}
    3b24:	78c1      	ldrb	r1, [r0, #3]
    3b26:	7880      	ldrb	r0, [r0, #2]
    3b28:	4301      	orrs	r1, r0
    3b2a:	d002      	beq.n	3b32 <sdc_support_adv+0x12>
    3b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b30:	bd10      	pop	{r4, pc}
    3b32:	f002 fb27 	bl	6184 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3b36:	2000      	movs	r0, #0
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	0000      	.short	0x0000
    3b3c:	20000058 	.word	0x20000058
    3b40:	00010001 	.word	0x00010001
    3b44:	0002000b 	.word	0x0002000b
    3b48:	0005000a 	.word	0x0005000a
    3b4c:	000a0009 	.word	0x000a0009
    3b50:	00140008 	.word	0x00140008
    3b54:	001e0007 	.word	0x001e0007
    3b58:	00320006 	.word	0x00320006
    3b5c:	004b0005 	.word	0x004b0005
    3b60:	00640004 	.word	0x00640004
    3b64:	00960003 	.word	0x00960003
    3b68:	00fa0002 	.word	0x00fa0002
    3b6c:	01f40001 	.word	0x01f40001
    3b70:	473f0000 	.word	0x473f0000
    3b74:	95818e70 	.word	0x95818e70
    3b78:	d39d864e 	.word	0xd39d864e
    3b7c:	f68895a2 	.word	0xf68895a2
    3b80:	537f0a30 	.word	0x537f0a30
    3b84:	0000fd49 	.word	0x0000fd49

00003b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3b88:	4a05      	ldr	r2, [pc, #20]	; (3ba0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3b8a:	b510      	push	{r4, lr}
    3b8c:	6852      	ldr	r2, [r2, #4]
    3b8e:	b112      	cbz	r2, 3b96 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b94:	4710      	bx	r2
    3b96:	2183      	movs	r1, #131	; 0x83
    3b98:	2004      	movs	r0, #4
    3b9a:	f7ff ff8d 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b9e:	0000      	.short	0x0000
    3ba0:	20000908 	.word	0x20000908

00003ba4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3ba4:	4a05      	ldr	r2, [pc, #20]	; (3bbc <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3ba6:	b510      	push	{r4, lr}
    3ba8:	6812      	ldr	r2, [r2, #0]
    3baa:	b112      	cbz	r2, 3bb2 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bb0:	4710      	bx	r2
    3bb2:	217d      	movs	r1, #125	; 0x7d
    3bb4:	2004      	movs	r0, #4
    3bb6:	f7ff ff7f 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bba:	0000      	.short	0x0000
    3bbc:	20000908 	.word	0x20000908

00003bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3bc0:	4a05      	ldr	r2, [pc, #20]	; (3bd8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3bc2:	b510      	push	{r4, lr}
    3bc4:	6892      	ldr	r2, [r2, #8]
    3bc6:	b112      	cbz	r2, 3bce <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bcc:	4710      	bx	r2
    3bce:	2189      	movs	r1, #137	; 0x89
    3bd0:	2004      	movs	r0, #4
    3bd2:	f7ff ff71 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bd6:	0000      	.short	0x0000
    3bd8:	20000908 	.word	0x20000908

00003bdc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3bdc:	4805      	ldr	r0, [pc, #20]	; (3bf4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3bde:	6801      	ldr	r1, [r0, #0]
    3be0:	b129      	cbz	r1, 3bee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3be2:	6841      	ldr	r1, [r0, #4]
    3be4:	b119      	cbz	r1, 3bee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3be6:	6880      	ldr	r0, [r0, #8]
    3be8:	b108      	cbz	r0, 3bee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3bea:	2001      	movs	r0, #1
    3bec:	4770      	bx	lr
    3bee:	2000      	movs	r0, #0
    3bf0:	4770      	bx	lr
    3bf2:	0000      	.short	0x0000
    3bf4:	20000908 	.word	0x20000908

00003bf8 <sdc_rand_source_register>:
    3bf8:	4902      	ldr	r1, [pc, #8]	; (3c04 <sdc_rand_source_register+0xc>)
    3bfa:	c80d      	ldmia	r0, {r0, r2, r3}
    3bfc:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3c00:	2000      	movs	r0, #0
    3c02:	4770      	bx	lr
    3c04:	20000908 	.word	0x20000908

00003c08 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c0a:	4c12      	ldr	r4, [pc, #72]	; (3c54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3c0c:	2600      	movs	r6, #0
    3c0e:	6825      	ldr	r5, [r4, #0]
    3c10:	e011      	b.n	3c36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c12:	9800      	ldr	r0, [sp, #0]
    3c14:	2802      	cmp	r0, #2
    3c16:	d002      	beq.n	3c1e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3c18:	2803      	cmp	r0, #3
    3c1a:	d10c      	bne.n	3c36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c1c:	e006      	b.n	3c2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3c1e:	6820      	ldr	r0, [r4, #0]
    3c20:	b110      	cbz	r0, 3c28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3c22:	2000      	movs	r0, #0
    3c24:	6026      	str	r6, [r4, #0]
    3c26:	e005      	b.n	3c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3c28:	2128      	movs	r1, #40	; 0x28
    3c2a:	e00c      	b.n	3c46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c2c:	6820      	ldr	r0, [r4, #0]
    3c2e:	b168      	cbz	r0, 3c4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3c30:	2001      	movs	r0, #1
    3c32:	6026      	str	r6, [r4, #0]
    3c34:	47a8      	blx	r5
    3c36:	4668      	mov	r0, sp
    3c38:	f000 fcc8 	bl	45cc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d0e8      	beq.n	3c12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3c40:	2805      	cmp	r0, #5
    3c42:	d005      	beq.n	3c50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3c44:	2135      	movs	r1, #53	; 0x35
    3c46:	2004      	movs	r0, #4
    3c48:	f7ff ff36 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c4c:	212d      	movs	r1, #45	; 0x2d
    3c4e:	e7fa      	b.n	3c46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c52:	0000      	.short	0x0000
    3c54:	20000074 	.word	0x20000074
    3c58:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3c5a:	4c21      	ldr	r4, [pc, #132]	; (3ce0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3c5c:	4605      	mov	r5, r0
    3c5e:	7820      	ldrb	r0, [r4, #0]
    3c60:	b140      	cbz	r0, 3c74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3c62:	78a2      	ldrb	r2, [r4, #2]
    3c64:	1c61      	adds	r1, r4, #1
    3c66:	4628      	mov	r0, r5
    3c68:	1c92      	adds	r2, r2, #2
    3c6a:	f003 fc8f 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c6e:	2000      	movs	r0, #0
    3c70:	7020      	strb	r0, [r4, #0]
    3c72:	e025      	b.n	3cc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3c74:	481a      	ldr	r0, [pc, #104]	; (3ce0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3c76:	3844      	subs	r0, #68	; 0x44
    3c78:	f002 f96c 	bl	5f54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d020      	beq.n	3cc2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3c80:	4c17      	ldr	r4, [pc, #92]	; (3ce0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3c82:	3c44      	subs	r4, #68	; 0x44
    3c84:	7820      	ldrb	r0, [r4, #0]
    3c86:	2811      	cmp	r0, #17
    3c88:	d104      	bne.n	3c94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8c>
    3c8a:	210a      	movs	r1, #10
    3c8c:	203e      	movs	r0, #62	; 0x3e
    3c8e:	f003 fddd 	bl	784c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3c92:	b118      	cbz	r0, 3c9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3c94:	7820      	ldrb	r0, [r4, #0]
    3c96:	2808      	cmp	r0, #8
    3c98:	d006      	beq.n	3ca8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa0>
    3c9a:	e00a      	b.n	3cb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xaa>
    3c9c:	4910      	ldr	r1, [pc, #64]	; (3ce0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3c9e:	4628      	mov	r0, r5
    3ca0:	3944      	subs	r1, #68	; 0x44
    3ca2:	f003 ff92 	bl	7bca <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3ca6:	e00b      	b.n	3cc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3ca8:	2105      	movs	r1, #5
    3caa:	203e      	movs	r0, #62	; 0x3e
    3cac:	f003 fdce 	bl	784c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3cb0:	b140      	cbz	r0, 3cc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3cb2:	490b      	ldr	r1, [pc, #44]	; (3ce0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3cb4:	4628      	mov	r0, r5
    3cb6:	3944      	subs	r1, #68	; 0x44
    3cb8:	f003 fddc 	bl	7874 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3cbc:	2800      	cmp	r0, #0
    3cbe:	d000      	beq.n	3cc2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3cc0:	2001      	movs	r0, #1
    3cc2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3cc4:	88a0      	ldrh	r0, [r4, #4]
    3cc6:	f8ad 0000 	strh.w	r0, [sp]
    3cca:	a901      	add	r1, sp, #4
    3ccc:	4668      	mov	r0, sp
    3cce:	f004 f873 	bl	7db8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d0f5      	beq.n	3cc2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3cd6:	2198      	movs	r1, #152	; 0x98
    3cd8:	2008      	movs	r0, #8
    3cda:	f7ff feed 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cde:	0000      	.short	0x0000
    3ce0:	200009e8 	.word	0x200009e8
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	780a      	ldrb	r2, [r1, #0]
    3ce8:	7082      	strb	r2, [r0, #2]
    3cea:	b33a      	cbz	r2, 3d3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3cec:	2a01      	cmp	r2, #1
    3cee:	d825      	bhi.n	3d3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3cf0:	2313      	movs	r3, #19
    3cf2:	7003      	strb	r3, [r0, #0]
    3cf4:	2300      	movs	r3, #0
    3cf6:	e00a      	b.n	3d0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3cf8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3cfc:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3d00:	78a6      	ldrb	r6, [r4, #2]
    3d02:	70ee      	strb	r6, [r5, #3]
    3d04:	8864      	ldrh	r4, [r4, #2]
    3d06:	0a24      	lsrs	r4, r4, #8
    3d08:	1c5b      	adds	r3, r3, #1
    3d0a:	712c      	strb	r4, [r5, #4]
    3d0c:	b2db      	uxtb	r3, r3
    3d0e:	4293      	cmp	r3, r2
    3d10:	d3f2      	bcc.n	3cf8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    3d12:	2300      	movs	r3, #0
    3d14:	e00b      	b.n	3d2e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    3d16:	bf00      	nop
    3d18:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3d1c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3d20:	792e      	ldrb	r6, [r5, #4]
    3d22:	7166      	strb	r6, [r4, #5]
    3d24:	88ad      	ldrh	r5, [r5, #4]
    3d26:	0a2d      	lsrs	r5, r5, #8
    3d28:	1c5b      	adds	r3, r3, #1
    3d2a:	71a5      	strb	r5, [r4, #6]
    3d2c:	b2db      	uxtb	r3, r3
    3d2e:	4293      	cmp	r3, r2
    3d30:	d3f2      	bcc.n	3d18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    3d32:	2101      	movs	r1, #1
    3d34:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3d38:	b2c0      	uxtb	r0, r0
    3d3a:	bd70      	pop	{r4, r5, r6, pc}
    3d3c:	2000      	movs	r0, #0
    3d3e:	bd70      	pop	{r4, r5, r6, pc}

00003d40 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3d40:	2101      	movs	r1, #1
    3d42:	4a0c      	ldr	r2, [pc, #48]	; (3d74 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3d44:	2840      	cmp	r0, #64	; 0x40
    3d46:	d20c      	bcs.n	3d62 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3d48:	2820      	cmp	r0, #32
    3d4a:	d803      	bhi.n	3d54 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3d4c:	1e40      	subs	r0, r0, #1
    3d4e:	4081      	lsls	r1, r0
    3d50:	6810      	ldr	r0, [r2, #0]
    3d52:	e002      	b.n	3d5a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3d54:	3821      	subs	r0, #33	; 0x21
    3d56:	4081      	lsls	r1, r0
    3d58:	6850      	ldr	r0, [r2, #4]
    3d5a:	4201      	tst	r1, r0
    3d5c:	d107      	bne.n	3d6e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3d5e:	2000      	movs	r0, #0
    3d60:	4770      	bx	lr
    3d62:	28ff      	cmp	r0, #255	; 0xff
    3d64:	d003      	beq.n	3d6e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3d66:	3840      	subs	r0, #64	; 0x40
    3d68:	4081      	lsls	r1, r0
    3d6a:	6890      	ldr	r0, [r2, #8]
    3d6c:	e7f5      	b.n	3d5a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3d6e:	2001      	movs	r0, #1
    3d70:	4770      	bx	lr
    3d72:	0000      	.short	0x0000
    3d74:	20000078 	.word	0x20000078

00003d78 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3d78:	2101      	movs	r1, #1
    3d7a:	1e40      	subs	r0, r0, #1
    3d7c:	4081      	lsls	r1, r0
    3d7e:	4804      	ldr	r0, [pc, #16]	; (3d90 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3d80:	68c0      	ldr	r0, [r0, #12]
    3d82:	4201      	tst	r1, r0
    3d84:	d001      	beq.n	3d8a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3d86:	2001      	movs	r0, #1
    3d88:	4770      	bx	lr
    3d8a:	2000      	movs	r0, #0
    3d8c:	4770      	bx	lr
    3d8e:	0000      	.short	0x0000
    3d90:	20000078 	.word	0x20000078

00003d94 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3d94:	4901      	ldr	r1, [pc, #4]	; (3d9c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3d96:	6800      	ldr	r0, [r0, #0]
    3d98:	60c8      	str	r0, [r1, #12]
    3d9a:	4770      	bx	lr
    3d9c:	20000078 	.word	0x20000078

00003da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3da0:	4904      	ldr	r1, [pc, #16]	; (3db4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3da2:	6802      	ldr	r2, [r0, #0]
    3da4:	6840      	ldr	r0, [r0, #4]
    3da6:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3daa:	600a      	str	r2, [r1, #0]
    3dac:	4a02      	ldr	r2, [pc, #8]	; (3db8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3dae:	4310      	orrs	r0, r2
    3db0:	6048      	str	r0, [r1, #4]
    3db2:	4770      	bx	lr
    3db4:	20000078 	.word	0x20000078
    3db8:	024007f8 	.word	0x024007f8

00003dbc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3dbc:	4805      	ldr	r0, [pc, #20]	; (3dd4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3dc2:	6001      	str	r1, [r0, #0]
    3dc4:	0cc9      	lsrs	r1, r1, #19
    3dc6:	6041      	str	r1, [r0, #4]
    3dc8:	2100      	movs	r1, #0
    3dca:	6081      	str	r1, [r0, #8]
    3dcc:	211f      	movs	r1, #31
    3dce:	60c1      	str	r1, [r0, #12]
    3dd0:	4770      	bx	lr
    3dd2:	0000      	.short	0x0000
    3dd4:	20000078 	.word	0x20000078

00003dd8 <sdc_hci_cmd_cb_reset>:
    3dd8:	b510      	push	{r4, lr}
    3dda:	f7ff ffef 	bl	3dbc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3dde:	f005 fa6a 	bl	92b6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3de2:	4604      	mov	r4, r0
    3de4:	4802      	ldr	r0, [pc, #8]	; (3df0 <sdc_hci_cmd_cb_reset+0x18>)
    3de6:	6800      	ldr	r0, [r0, #0]
    3de8:	b100      	cbz	r0, 3dec <sdc_hci_cmd_cb_reset+0x14>
    3dea:	4780      	blx	r0
    3dec:	4620      	mov	r0, r4
    3dee:	bd10      	pop	{r4, pc}
    3df0:	20000088 	.word	0x20000088

00003df4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3df4:	4901      	ldr	r1, [pc, #4]	; (3dfc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3df6:	6008      	str	r0, [r1, #0]
    3df8:	4770      	bx	lr
    3dfa:	0000      	.short	0x0000
    3dfc:	20000088 	.word	0x20000088

00003e00 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3e00:	2102      	movs	r1, #2
    3e02:	8001      	strh	r1, [r0, #0]
    3e04:	8041      	strh	r1, [r0, #2]
    3e06:	2100      	movs	r1, #0
    3e08:	7101      	strb	r1, [r0, #4]
    3e0a:	213f      	movs	r1, #63	; 0x3f
    3e0c:	7141      	strb	r1, [r0, #5]
    3e0e:	f247 0147 	movw	r1, #28743	; 0x7047
    3e12:	80c1      	strh	r1, [r0, #6]
    3e14:	4901      	ldr	r1, [pc, #4]	; (3e1c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3e16:	6081      	str	r1, [r0, #8]
    3e18:	2000      	movs	r0, #0
    3e1a:	4770      	bx	lr
    3e1c:	4e95818e 	.word	0x4e95818e

00003e20 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    3e20:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    3e22:	4604      	mov	r4, r0
    3e24:	4669      	mov	r1, sp
    3e26:	f004 f8ca 	bl	7fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    3e2a:	b170      	cbz	r0, 3e4a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    3e2c:	f240 2112 	movw	r1, #530	; 0x212
    3e30:	e008      	b.n	3e44 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    3e32:	bf00      	nop
    3e34:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    3e38:	4621      	mov	r1, r4
    3e3a:	f000 f8a9 	bl	3f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    3e3e:	b120      	cbz	r0, 3e4a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    3e40:	f240 2117 	movw	r1, #535	; 0x217
    3e44:	2017      	movs	r0, #23
    3e46:	f7ff fe37 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e4a:	4668      	mov	r0, sp
    3e4c:	f000 f850 	bl	3ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3e50:	2800      	cmp	r0, #0
    3e52:	d0ef      	beq.n	3e34 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    3e54:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00003e58 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3e58:	b510      	push	{r4, lr}
    3e5a:	2802      	cmp	r0, #2
    3e5c:	d304      	bcc.n	3e68 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3e5e:	f240 116b 	movw	r1, #363	; 0x16b
    3e62:	2017      	movs	r0, #23
    3e64:	f7ff fe28 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e68:	4901      	ldr	r1, [pc, #4]	; (3e70 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3e6a:	5c08      	ldrb	r0, [r1, r0]
    3e6c:	bd10      	pop	{r4, pc}
    3e6e:	0000      	.short	0x0000
    3e70:	20000914 	.word	0x20000914

00003e74 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e76:	4605      	mov	r5, r0
    3e78:	9000      	str	r0, [sp, #0]
    3e7a:	4291      	cmp	r1, r2
    3e7c:	d201      	bcs.n	3e82 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    3e7e:	4614      	mov	r4, r2
    3e80:	e000      	b.n	3e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    3e82:	460c      	mov	r4, r1
    3e84:	b155      	cbz	r5, 3e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    3e86:	2700      	movs	r7, #0
    3e88:	1ce8      	adds	r0, r5, #3
    3e8a:	f020 0003 	bic.w	r0, r0, #3
    3e8e:	42a8      	cmp	r0, r5
    3e90:	d006      	beq.n	3ea0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    3e92:	f240 113f 	movw	r1, #319	; 0x13f
    3e96:	2017      	movs	r0, #23
    3e98:	f7ff fe0e 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e9c:	2701      	movs	r7, #1
    3e9e:	e7f3      	b.n	3e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    3ea0:	4e12      	ldr	r6, [pc, #72]	; (3eec <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    3ea2:	4668      	mov	r0, sp
    3ea4:	7031      	strb	r1, [r6, #0]
    3ea6:	7072      	strb	r2, [r6, #1]
    3ea8:	4639      	mov	r1, r7
    3eaa:	f000 f8ed 	bl	4088 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    3eae:	2000      	movs	r0, #0
    3eb0:	4603      	mov	r3, r0
    3eb2:	9900      	ldr	r1, [sp, #0]
    3eb4:	1cc9      	adds	r1, r1, #3
    3eb6:	f021 0103 	bic.w	r1, r1, #3
    3eba:	9100      	str	r1, [sp, #0]
    3ebc:	b967      	cbnz	r7, 3ed8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    3ebe:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    3ec2:	60d1      	str	r1, [r2, #12]
    3ec4:	2100      	movs	r1, #0
    3ec6:	e005      	b.n	3ed4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    3ec8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    3ecc:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    3ed0:	1c49      	adds	r1, r1, #1
    3ed2:	b2c9      	uxtb	r1, r1
    3ed4:	42a1      	cmp	r1, r4
    3ed6:	d3f7      	bcc.n	3ec8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    3ed8:	9900      	ldr	r1, [sp, #0]
    3eda:	1c40      	adds	r0, r0, #1
    3edc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    3ee0:	b2c0      	uxtb	r0, r0
    3ee2:	9100      	str	r1, [sp, #0]
    3ee4:	2802      	cmp	r0, #2
    3ee6:	d3e4      	bcc.n	3eb2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    3ee8:	1b48      	subs	r0, r1, r5
    3eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3eec:	20000914 	.word	0x20000914

00003ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    3ef0:	b570      	push	{r4, r5, r6, lr}
    3ef2:	4604      	mov	r4, r0
    3ef4:	f004 f8cd 	bl	8092 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    3ef8:	b108      	cbz	r0, 3efe <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    3efa:	2010      	movs	r0, #16
    3efc:	bd70      	pop	{r4, r5, r6, pc}
    3efe:	7825      	ldrb	r5, [r4, #0]
    3f00:	f000 f8fe 	bl	4100 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    3f04:	4602      	mov	r2, r0
    3f06:	480c      	ldr	r0, [pc, #48]	; (3f38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    3f08:	8861      	ldrh	r1, [r4, #2]
    3f0a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3f0e:	e00e      	b.n	3f2e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    3f10:	68c3      	ldr	r3, [r0, #12]
    3f12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    3f16:	b143      	cbz	r3, 3f2a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    3f18:	1c4a      	adds	r2, r1, #1
    3f1a:	8062      	strh	r2, [r4, #2]
    3f1c:	80a1      	strh	r1, [r4, #4]
    3f1e:	68c0      	ldr	r0, [r0, #12]
    3f20:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3f24:	60a0      	str	r0, [r4, #8]
    3f26:	2000      	movs	r0, #0
    3f28:	bd70      	pop	{r4, r5, r6, pc}
    3f2a:	1c49      	adds	r1, r1, #1
    3f2c:	b289      	uxth	r1, r1
    3f2e:	4291      	cmp	r1, r2
    3f30:	d3ee      	bcc.n	3f10 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    3f32:	8061      	strh	r1, [r4, #2]
    3f34:	2005      	movs	r0, #5
    3f36:	bd70      	pop	{r4, r5, r6, pc}
    3f38:	20000914 	.word	0x20000914

00003f3c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    3f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f40:	b121      	cbz	r1, 3f4c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    3f42:	2901      	cmp	r1, #1
    3f44:	d002      	beq.n	3f4c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    3f46:	2000      	movs	r0, #0
    3f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f4c:	4c0f      	ldr	r4, [pc, #60]	; (3f8c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    3f4e:	2700      	movs	r7, #0
    3f50:	463b      	mov	r3, r7
    3f52:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3f56:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    3f5a:	f814 c001 	ldrb.w	ip, [r4, r1]
    3f5e:	e00a      	b.n	3f76 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    3f60:	19dc      	adds	r4, r3, r7
    3f62:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    3f66:	b2a4      	uxth	r4, r4
    3f68:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    3f6c:	f1be 0f00 	cmp.w	lr, #0
    3f70:	d004      	beq.n	3f7c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    3f72:	1c5b      	adds	r3, r3, #1
    3f74:	b29b      	uxth	r3, r3
    3f76:	459c      	cmp	ip, r3
    3f78:	d8f2      	bhi.n	3f60 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    3f7a:	4634      	mov	r4, r6
    3f7c:	8004      	strh	r4, [r0, #0]
    3f7e:	4620      	mov	r0, r4
    3f80:	42b4      	cmp	r4, r6
    3f82:	d0e0      	beq.n	3f46 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    3f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f88:	f000 b834 	b.w	3ff4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    3f8c:	20000914 	.word	0x20000914

00003f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    3f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f94:	4606      	mov	r6, r0
    3f96:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    3f9a:	460c      	mov	r4, r1
    3f9c:	f243 0702 	movw	r7, #12290	; 0x3002
    3fa0:	38ff      	subs	r0, #255	; 0xff
    3fa2:	d020      	beq.n	3fe6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    3fa4:	2c02      	cmp	r4, #2
    3fa6:	d302      	bcc.n	3fae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    3fa8:	2007      	movs	r0, #7
    3faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fae:	4630      	mov	r0, r6
    3fb0:	f000 f85a 	bl	4068 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    3fb4:	0005      	movs	r5, r0
    3fb6:	d016      	beq.n	3fe6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    3fb8:	480c      	ldr	r0, [pc, #48]	; (3fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    3fba:	4629      	mov	r1, r5
    3fbc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    3fc0:	4630      	mov	r0, r6
    3fc2:	4790      	blx	r2
    3fc4:	480a      	ldr	r0, [pc, #40]	; (3ff0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    3fc6:	2100      	movs	r1, #0
    3fc8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    3fcc:	68f8      	ldr	r0, [r7, #12]
    3fce:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    3fd2:	4620      	mov	r0, r4
    3fd4:	f000 f88a 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    3fd8:	4602      	mov	r2, r0
    3fda:	4629      	mov	r1, r5
    3fdc:	6878      	ldr	r0, [r7, #4]
    3fde:	f003 ffbb 	bl	7f58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    3fe2:	2000      	movs	r0, #0
    3fe4:	e7e1      	b.n	3faa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    3fe6:	4638      	mov	r0, r7
    3fe8:	e7df      	b.n	3faa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    3fea:	0000      	.short	0x0000
    3fec:	00004120 	.word	0x00004120
    3ff0:	20000914 	.word	0x20000914
    3ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ff8:	4690      	mov	r8, r2
    3ffa:	460d      	mov	r5, r1
    3ffc:	4607      	mov	r7, r0
    3ffe:	f003 ffef 	bl	7fe0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4002:	b148      	cbz	r0, 4018 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4004:	4816      	ldr	r0, [pc, #88]	; (4060 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4006:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    400a:	68f0      	ldr	r0, [r6, #12]
    400c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4010:	b128      	cbz	r0, 401e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4012:	f240 1109 	movw	r1, #265	; 0x109
    4016:	e015      	b.n	4044 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4018:	f44f 7184 	mov.w	r1, #264	; 0x108
    401c:	e012      	b.n	4044 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    401e:	6870      	ldr	r0, [r6, #4]
    4020:	2800      	cmp	r0, #0
    4022:	d01a      	beq.n	405a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4024:	4628      	mov	r0, r5
    4026:	f000 f861 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    402a:	4601      	mov	r1, r0
    402c:	6870      	ldr	r0, [r6, #4]
    402e:	f003 ff45 	bl	7ebc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4032:	0004      	movs	r4, r0
    4034:	d010      	beq.n	4058 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4036:	68f0      	ldr	r0, [r6, #12]
    4038:	2d02      	cmp	r5, #2
    403a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    403e:	d304      	bcc.n	404a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4040:	f44f 718a 	mov.w	r1, #276	; 0x114
    4044:	2017      	movs	r0, #23
    4046:	f7ff fd37 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    404a:	4806      	ldr	r0, [pc, #24]	; (4064 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    404c:	4642      	mov	r2, r8
    404e:	4621      	mov	r1, r4
    4050:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4054:	4638      	mov	r0, r7
    4056:	4798      	blx	r3
    4058:	4620      	mov	r0, r4
    405a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    405e:	0000      	.short	0x0000
    4060:	20000914 	.word	0x20000914
    4064:	00004118 	.word	0x00004118
    4068:	b570      	push	{r4, r5, r6, lr}
    406a:	460c      	mov	r4, r1
    406c:	4605      	mov	r5, r0
    406e:	f003 ffb7 	bl	7fe0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4072:	2800      	cmp	r0, #0
    4074:	d005      	beq.n	4082 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4076:	4803      	ldr	r0, [pc, #12]	; (4084 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4078:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    407c:	68c0      	ldr	r0, [r0, #12]
    407e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4082:	bd70      	pop	{r4, r5, r6, pc}
    4084:	20000914 	.word	0x20000914
    4088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    408c:	4e16      	ldr	r6, [pc, #88]	; (40e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    408e:	4688      	mov	r8, r1
    4090:	4605      	mov	r5, r0
    4092:	2400      	movs	r4, #0
    4094:	6828      	ldr	r0, [r5, #0]
    4096:	1cc0      	adds	r0, r0, #3
    4098:	f020 0003 	bic.w	r0, r0, #3
    409c:	6028      	str	r0, [r5, #0]
    409e:	4620      	mov	r0, r4
    40a0:	f000 f824 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    40a4:	5d31      	ldrb	r1, [r6, r4]
    40a6:	4348      	muls	r0, r1
    40a8:	f1b8 0f00 	cmp.w	r8, #0
    40ac:	d001      	beq.n	40b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    40ae:	2200      	movs	r2, #0
    40b0:	e000      	b.n	40b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    40b2:	682a      	ldr	r2, [r5, #0]
    40b4:	4601      	mov	r1, r0
    40b6:	9200      	str	r2, [sp, #0]
    40b8:	b132      	cbz	r2, 40c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    40ba:	2700      	movs	r7, #0
    40bc:	ea4f 000d 	mov.w	r0, sp
    40c0:	f003 ff29 	bl	7f16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    40c4:	b11f      	cbz	r7, 40ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    40c6:	e006      	b.n	40d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    40c8:	2701      	movs	r7, #1
    40ca:	2000      	movs	r0, #0
    40cc:	e7f8      	b.n	40c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    40ce:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    40d2:	9a00      	ldr	r2, [sp, #0]
    40d4:	604a      	str	r2, [r1, #4]
    40d6:	6829      	ldr	r1, [r5, #0]
    40d8:	1c64      	adds	r4, r4, #1
    40da:	4408      	add	r0, r1
    40dc:	b2e4      	uxtb	r4, r4
    40de:	6028      	str	r0, [r5, #0]
    40e0:	2c02      	cmp	r4, #2
    40e2:	d3d7      	bcc.n	4094 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    40e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40e8:	20000914 	.word	0x20000914
    40ec:	4903      	ldr	r1, [pc, #12]	; (40fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    40ee:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    40f2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    40f6:	1cc0      	adds	r0, r0, #3
    40f8:	4008      	ands	r0, r1
    40fa:	4770      	bx	lr
    40fc:	00004114 	.word	0x00004114
    4100:	4803      	ldr	r0, [pc, #12]	; (4110 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4102:	7801      	ldrb	r1, [r0, #0]
    4104:	7840      	ldrb	r0, [r0, #1]
    4106:	4281      	cmp	r1, r0
    4108:	d300      	bcc.n	410c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    410a:	4608      	mov	r0, r1
    410c:	4770      	bx	lr
    410e:	0000      	.short	0x0000
    4110:	20000914 	.word	0x20000914
    4114:	00e80210 	.word	0x00e80210
    4118:	00007ff5 	.word	0x00007ff5
    411c:	00007ff5 	.word	0x00007ff5
    4120:	00008c7b 	.word	0x00008c7b
    4124:	00008501 	.word	0x00008501

00004128 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4128:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    412c:	4c26      	ldr	r4, [pc, #152]	; (41c8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    412e:	4680      	mov	r8, r0
    4130:	b081      	sub	sp, #4
    4132:	6820      	ldr	r0, [r4, #0]
    4134:	469a      	mov	sl, r3
    4136:	4693      	mov	fp, r2
    4138:	b158      	cbz	r0, 4152 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    413a:	7a02      	ldrb	r2, [r0, #8]
    413c:	4542      	cmp	r2, r8
    413e:	d903      	bls.n	4148 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4140:	6841      	ldr	r1, [r0, #4]
    4142:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4146:	b140      	cbz	r0, 415a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4148:	f243 0002 	movw	r0, #12290	; 0x3002
    414c:	b005      	add	sp, #20
    414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4152:	21a5      	movs	r1, #165	; 0xa5
    4154:	2018      	movs	r0, #24
    4156:	f7ff fcaf 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    415a:	4619      	mov	r1, r3
    415c:	9802      	ldr	r0, [sp, #8]
    415e:	f003 ff61 	bl	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
    4162:	b286      	uxth	r6, r0
    4164:	4658      	mov	r0, fp
    4166:	990e      	ldr	r1, [sp, #56]	; 0x38
    4168:	f003 ff53 	bl	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    416c:	b285      	uxth	r5, r0
    416e:	1970      	adds	r0, r6, r5
    4170:	1d00      	adds	r0, r0, #4
    4172:	b287      	uxth	r7, r0
    4174:	6820      	ldr	r0, [r4, #0]
    4176:	46a1      	mov	r9, r4
    4178:	4639      	mov	r1, r7
    417a:	6800      	ldr	r0, [r0, #0]
    417c:	f003 fe9e 	bl	7ebc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4180:	0004      	movs	r4, r0
    4182:	d01f      	beq.n	41c4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4184:	8067      	strh	r7, [r4, #2]
    4186:	8025      	strh	r5, [r4, #0]
    4188:	4629      	mov	r1, r5
    418a:	1d20      	adds	r0, r4, #4
    418c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    418e:	4607      	mov	r7, r0
    4190:	465a      	mov	r2, fp
    4192:	2301      	movs	r3, #1
    4194:	9500      	str	r5, [sp, #0]
    4196:	f003 fe50 	bl	7e3a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    419a:	8820      	ldrh	r0, [r4, #0]
    419c:	4631      	mov	r1, r6
    419e:	4438      	add	r0, r7
    41a0:	2301      	movs	r3, #1
    41a2:	9a02      	ldr	r2, [sp, #8]
    41a4:	f8cd a000 	str.w	sl, [sp]
    41a8:	f003 fe47 	bl	7e3a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    41ac:	8820      	ldrh	r0, [r4, #0]
    41ae:	19c1      	adds	r1, r0, r7
    41b0:	4638      	mov	r0, r7
    41b2:	f003 fe73 	bl	7e9c <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    41b6:	f8d9 0000 	ldr.w	r0, [r9]
    41ba:	6841      	ldr	r1, [r0, #4]
    41bc:	2000      	movs	r0, #0
    41be:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    41c2:	e7c3      	b.n	414c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    41c4:	2004      	movs	r0, #4
    41c6:	e7c1      	b.n	414c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    41c8:	2000008c 	.word	0x2000008c

000041cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    41cc:	b570      	push	{r4, r5, r6, lr}
    41ce:	4c14      	ldr	r4, [pc, #80]	; (4220 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    41d0:	6823      	ldr	r3, [r4, #0]
    41d2:	b18b      	cbz	r3, 41f8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    41d4:	7a19      	ldrb	r1, [r3, #8]
    41d6:	4281      	cmp	r1, r0
    41d8:	d912      	bls.n	4200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    41da:	685a      	ldr	r2, [r3, #4]
    41dc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    41e0:	b171      	cbz	r1, 4200 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    41e2:	2500      	movs	r5, #0
    41e4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    41e8:	884a      	ldrh	r2, [r1, #2]
    41ea:	6818      	ldr	r0, [r3, #0]
    41ec:	f003 feb4 	bl	7f58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    41f0:	6821      	ldr	r1, [r4, #0]
    41f2:	2000      	movs	r0, #0
    41f4:	7a0a      	ldrb	r2, [r1, #8]
    41f6:	e00c      	b.n	4212 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    41f8:	21c8      	movs	r1, #200	; 0xc8
    41fa:	2018      	movs	r0, #24
    41fc:	f7ff fc5c 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4200:	f243 0002 	movw	r0, #12290	; 0x3002
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	684b      	ldr	r3, [r1, #4]
    4208:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    420c:	b933      	cbnz	r3, 421c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    420e:	1c40      	adds	r0, r0, #1
    4210:	b2c0      	uxtb	r0, r0
    4212:	4282      	cmp	r2, r0
    4214:	d8f7      	bhi.n	4206 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4216:	6808      	ldr	r0, [r1, #0]
    4218:	f003 fe93 	bl	7f42 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    421c:	2000      	movs	r0, #0
    421e:	bd70      	pop	{r4, r5, r6, pc}
    4220:	2000008c 	.word	0x2000008c

00004224 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4228:	460d      	mov	r5, r1
    422a:	0004      	movs	r4, r0
    422c:	4690      	mov	r8, r2
    422e:	f04f 0600 	mov.w	r6, #0
    4232:	d009      	beq.n	4248 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4234:	2700      	movs	r7, #0
    4236:	1ce0      	adds	r0, r4, #3
    4238:	f020 0003 	bic.w	r0, r0, #3
    423c:	42a0      	cmp	r0, r4
    423e:	d005      	beq.n	424c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4240:	2186      	movs	r1, #134	; 0x86
    4242:	2018      	movs	r0, #24
    4244:	f7ff fc38 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4248:	2701      	movs	r7, #1
    424a:	e7f4      	b.n	4236 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    424c:	b1cd      	cbz	r5, 4282 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    424e:	4611      	mov	r1, r2
    4250:	2000      	movs	r0, #0
    4252:	f003 fe60 	bl	7f16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4256:	300c      	adds	r0, #12
    4258:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    425c:	b98f      	cbnz	r7, 4282 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    425e:	4f0a      	ldr	r7, [pc, #40]	; (4288 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4260:	f104 000c 	add.w	r0, r4, #12
    4264:	00aa      	lsls	r2, r5, #2
    4266:	603c      	str	r4, [r7, #0]
    4268:	7225      	strb	r5, [r4, #8]
    426a:	6060      	str	r0, [r4, #4]
    426c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4270:	6020      	str	r0, [r4, #0]
    4272:	2100      	movs	r1, #0
    4274:	6860      	ldr	r0, [r4, #4]
    4276:	f003 fa03 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    427a:	4641      	mov	r1, r8
    427c:	6838      	ldr	r0, [r7, #0]
    427e:	f003 fe4a 	bl	7f16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4282:	4630      	mov	r0, r6
    4284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4288:	2000008c 	.word	0x2000008c

0000428c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    428c:	4909      	ldr	r1, [pc, #36]	; (42b4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    428e:	b510      	push	{r4, lr}
    4290:	4602      	mov	r2, r0
    4292:	6809      	ldr	r1, [r1, #0]
    4294:	2000      	movs	r0, #0
    4296:	b149      	cbz	r1, 42ac <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4298:	7a0b      	ldrb	r3, [r1, #8]
    429a:	4293      	cmp	r3, r2
    429c:	d905      	bls.n	42aa <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    429e:	6849      	ldr	r1, [r1, #4]
    42a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    42a4:	2900      	cmp	r1, #0
    42a6:	d000      	beq.n	42aa <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    42a8:	1d08      	adds	r0, r1, #4
    42aa:	bd10      	pop	{r4, pc}
    42ac:	21ee      	movs	r1, #238	; 0xee
    42ae:	2018      	movs	r0, #24
    42b0:	f7ff fc02 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42b4:	2000008c 	.word	0x2000008c

000042b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    42b8:	b570      	push	{r4, r5, r6, lr}
    42ba:	4606      	mov	r6, r0
    42bc:	4809      	ldr	r0, [pc, #36]	; (42e4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2c>)
    42be:	460d      	mov	r5, r1
    42c0:	8800      	ldrh	r0, [r0, #0]
    42c2:	b10a      	cbz	r2, 42c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x10>
    42c4:	0844      	lsrs	r4, r0, #1
    42c6:	e000      	b.n	42ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x12>
    42c8:	0884      	lsrs	r4, r0, #2
    42ca:	4621      	mov	r1, r4
    42cc:	6828      	ldr	r0, [r5, #0]
    42ce:	f003 fdf5 	bl	7ebc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42d2:	2100      	movs	r1, #0
    42d4:	792a      	ldrb	r2, [r5, #4]
    42d6:	f364 411f 	bfi	r1, r4, #16, #16
    42da:	1c52      	adds	r2, r2, #1
    42dc:	712a      	strb	r2, [r5, #4]
    42de:	e9c6 0100 	strd	r0, r1, [r6]
    42e2:	bd70      	pop	{r4, r5, r6, pc}
    42e4:	20000090 	.word	0x20000090

000042e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    42e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42ec:	4688      	mov	r8, r1
    42ee:	0005      	movs	r5, r0
    42f0:	d00a      	beq.n	4308 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x20>
    42f2:	2700      	movs	r7, #0
    42f4:	1ce9      	adds	r1, r5, #3
    42f6:	2000      	movs	r0, #0
    42f8:	f021 0103 	bic.w	r1, r1, #3
    42fc:	42a9      	cmp	r1, r5
    42fe:	d005      	beq.n	430c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4300:	212e      	movs	r1, #46	; 0x2e
    4302:	2009      	movs	r0, #9
    4304:	f7ff fbd8 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4308:	2701      	movs	r7, #1
    430a:	e7f3      	b.n	42f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    430c:	491d      	ldr	r1, [pc, #116]	; (4384 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    430e:	eb00 06c8 	add.w	r6, r0, r8, lsl #3
    4312:	b907      	cbnz	r7, 4316 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2e>
    4314:	604d      	str	r5, [r1, #4]
    4316:	2a1f      	cmp	r2, #31
    4318:	d804      	bhi.n	4324 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3c>
    431a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    431e:	ea00 0082 	and.w	r0, r0, r2, lsl #2
    4322:	e007      	b.n	4334 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4324:	207c      	movs	r0, #124	; 0x7c
    4326:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
    432a:	d201      	bcs.n	4330 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    432c:	0050      	lsls	r0, r2, #1
    432e:	e000      	b.n	4332 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    4330:	207c      	movs	r0, #124	; 0x7c
    4332:	b280      	uxth	r0, r0
    4334:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4338:	1cc0      	adds	r0, r0, #3
    433a:	4010      	ands	r0, r2
    433c:	2400      	movs	r4, #0
    433e:	8008      	strh	r0, [r1, #0]
    4340:	46a2      	mov	sl, r4
    4342:	4689      	mov	r9, r1
    4344:	e016      	b.n	4374 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    4346:	19a8      	adds	r0, r5, r6
    4348:	9000      	str	r0, [sp, #0]
    434a:	b10f      	cbz	r7, 4350 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    434c:	2000      	movs	r0, #0
    434e:	e000      	b.n	4352 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6a>
    4350:	4668      	mov	r0, sp
    4352:	f8b9 1000 	ldrh.w	r1, [r9]
    4356:	f003 fdde 	bl	7f16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    435a:	b947      	cbnz	r7, 436e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x86>
    435c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4360:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    4364:	f883 a004 	strb.w	sl, [r3, #4]
    4368:	9a00      	ldr	r2, [sp, #0]
    436a:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
    436e:	1c64      	adds	r4, r4, #1
    4370:	4406      	add	r6, r0
    4372:	b2e4      	uxtb	r4, r4
    4374:	4544      	cmp	r4, r8
    4376:	d3e6      	bcc.n	4346 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5e>
    4378:	1df6      	adds	r6, r6, #7
    437a:	f026 0007 	bic.w	r0, r6, #7
    437e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4382:	0000      	.short	0x0000
    4384:	20000090 	.word	0x20000090

00004388 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4388:	4906      	ldr	r1, [pc, #24]	; (43a4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x1c>)
    438a:	b510      	push	{r4, lr}
    438c:	684a      	ldr	r2, [r1, #4]
    438e:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
    4392:	2000      	movs	r0, #0
    4394:	7120      	strb	r0, [r4, #4]
    4396:	8809      	ldrh	r1, [r1, #0]
    4398:	4620      	mov	r0, r4
    439a:	f003 fdbc 	bl	7f16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    439e:	4620      	mov	r0, r4
    43a0:	bd10      	pop	{r4, pc}
    43a2:	0000      	.short	0x0000
    43a4:	20000090 	.word	0x20000090
    43a8:	4909      	ldr	r1, [pc, #36]	; (43d0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    43aa:	b510      	push	{r4, lr}
    43ac:	4807      	ldr	r0, [pc, #28]	; (43cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    43ae:	6008      	str	r0, [r1, #0]
    43b0:	4b08      	ldr	r3, [pc, #32]	; (43d4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x4c>)
    43b2:	2011      	movs	r0, #17
    43b4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    43b8:	2200      	movs	r2, #0
    43ba:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    43be:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    43c2:	1c40      	adds	r0, r0, #1
    43c4:	b2c0      	uxtb	r0, r0
    43c6:	2814      	cmp	r0, #20
    43c8:	d3f4      	bcc.n	43b4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2c>
    43ca:	bd10      	pop	{r4, pc}
    43cc:	fffe0000 	.word	0xfffe0000
    43d0:	4001f508 	.word	0x4001f508
    43d4:	4001f000 	.word	0x4001f000
    43d8:	b570      	push	{r4, r5, r6, lr}
    43da:	2420      	movs	r4, #32
    43dc:	2100      	movs	r1, #0
    43de:	2301      	movs	r3, #1
    43e0:	fa20 f201 	lsr.w	r2, r0, r1
    43e4:	07d2      	lsls	r2, r2, #31
    43e6:	d020      	beq.n	442a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    43e8:	b24a      	sxtb	r2, r1
    43ea:	2a00      	cmp	r2, #0
    43ec:	db10      	blt.n	4410 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x88>
    43ee:	bf00      	nop
    43f0:	ea4f 1652 	mov.w	r6, r2, lsr #5
    43f4:	ea4f 0686 	mov.w	r6, r6, lsl #2
    43f8:	f002 051f 	and.w	r5, r2, #31
    43fc:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4400:	fa03 f505 	lsl.w	r5, r3, r5
    4404:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4408:	f3bf 8f4f 	dsb	sy
    440c:	f3bf 8f6f 	isb	sy
    4410:	db0b      	blt.n	442a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    4412:	f002 051f 	and.w	r5, r2, #31
    4416:	ea4f 1252 	mov.w	r2, r2, lsr #5
    441a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    441e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4422:	fa03 f505 	lsl.w	r5, r3, r5
    4426:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    442a:	f101 0101 	add.w	r1, r1, #1
    442e:	42a1      	cmp	r1, r4
    4430:	d3d6      	bcc.n	43e0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x58>
    4432:	bd70      	pop	{r4, r5, r6, pc}
    4434:	b570      	push	{r4, r5, r6, lr}
    4436:	0042      	lsls	r2, r0, #1
    4438:	f04f 0100 	mov.w	r1, #0
    443c:	d501      	bpl.n	4442 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xba>
    443e:	4a14      	ldr	r2, [pc, #80]	; (4490 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x108>)
    4440:	6011      	str	r1, [r2, #0]
    4442:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4446:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    444a:	429a      	cmp	r2, r3
    444c:	d003      	beq.n	4456 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xce>
    444e:	2164      	movs	r1, #100	; 0x64
    4450:	201b      	movs	r0, #27
    4452:	f7ff fb31 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4456:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    445a:	d014      	beq.n	4486 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xfe>
    445c:	4a0d      	ldr	r2, [pc, #52]	; (4494 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x10c>)
    445e:	2001      	movs	r0, #1
    4460:	6050      	str	r0, [r2, #4]
    4462:	1e83      	subs	r3, r0, #2
    4464:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4468:	4a0b      	ldr	r2, [pc, #44]	; (4498 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x110>)
    446a:	6090      	str	r0, [r2, #8]
    446c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4470:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4474:	4c09      	ldr	r4, [pc, #36]	; (449c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x114>)
    4476:	6021      	str	r1, [r4, #0]
    4478:	1d25      	adds	r5, r4, #4
    447a:	6028      	str	r0, [r5, #0]
    447c:	6090      	str	r0, [r2, #8]
    447e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4482:	6021      	str	r1, [r4, #0]
    4484:	6028      	str	r0, [r5, #0]
    4486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    448a:	f7ff bf8d 	b.w	43a8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    448e:	0000      	.short	0x0000
    4490:	4001e504 	.word	0x4001e504
    4494:	4000e000 	.word	0x4000e000
    4498:	4000f000 	.word	0x4000f000
    449c:	4000f500 	.word	0x4000f500

000044a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    44a0:	b570      	push	{r4, r5, r6, lr}
    44a2:	4c0a      	ldr	r4, [pc, #40]	; (44cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    44a4:	460d      	mov	r5, r1
    44a6:	6020      	str	r0, [r4, #0]
    44a8:	f7ff ffc4 	bl	4434 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xac>
    44ac:	6820      	ldr	r0, [r4, #0]
    44ae:	f7ff ff93 	bl	43d8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x50>
    44b2:	f000 f877 	bl	45a4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    44b6:	f7ff ff77 	bl	43a8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    44ba:	f003 fddf 	bl	807c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    44be:	4628      	mov	r0, r5
    44c0:	f000 f8aa 	bl	4618 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    44c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    44c8:	f000 b8c2 	b.w	4650 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    44cc:	20000098 	.word	0x20000098

000044d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    44d0:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    44d4:	4e2f      	ldr	r6, [pc, #188]	; (4594 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    44d6:	4683      	mov	fp, r0
    44d8:	6830      	ldr	r0, [r6, #0]
    44da:	9001      	str	r0, [sp, #4]
    44dc:	2701      	movs	r7, #1
    44de:	482e      	ldr	r0, [pc, #184]	; (4598 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    44e0:	f002 ffab 	bl	743a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    44e4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4598 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    44e8:	b920      	cbnz	r0, 44f4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    44ea:	2700      	movs	r7, #0
    44ec:	f108 0001 	add.w	r0, r8, #1
    44f0:	f002 ffba 	bl	7468 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    44f4:	4c29      	ldr	r4, [pc, #164]	; (459c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    44f6:	2500      	movs	r5, #0
    44f8:	f04f 0903 	mov.w	r9, #3
    44fc:	2001      	movs	r0, #1
    44fe:	6060      	str	r0, [r4, #4]
    4500:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4504:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4508:	f8c6 b000 	str.w	fp, [r6]
    450c:	6020      	str	r0, [r4, #0]
    450e:	f8df a090 	ldr.w	sl, [pc, #144]	; 45a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4512:	e017      	b.n	4544 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4514:	f8da 0000 	ldr.w	r0, [sl]
    4518:	06c0      	lsls	r0, r0, #27
    451a:	d513      	bpl.n	4544 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    451c:	200e      	movs	r0, #14
    451e:	f003 fd9e 	bl	805e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    4522:	f3ef 8010 	mrs	r0, PRIMASK
    4526:	9000      	str	r0, [sp, #0]
    4528:	b672      	cpsid	i
    452a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    452e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4532:	b920      	cbnz	r0, 453e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4534:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4538:	b908      	cbnz	r0, 453e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    453a:	f7ff f94d 	bl	37d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    453e:	9800      	ldr	r0, [sp, #0]
    4540:	b900      	cbnz	r0, 4544 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4542:	b662      	cpsie	i
    4544:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4548:	b918      	cbnz	r0, 4552 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    454a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    454e:	2800      	cmp	r0, #0
    4550:	d0e0      	beq.n	4514 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4552:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4556:	2800      	cmp	r0, #0
    4558:	d1d0      	bne.n	44fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    455a:	b137      	cbz	r7, 456a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    455c:	9801      	ldr	r0, [sp, #4]
    455e:	6030      	str	r0, [r6, #0]
    4560:	f108 0001 	add.w	r0, r8, #1
    4564:	f002 ff69 	bl	743a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4568:	e011      	b.n	458e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    456a:	f108 0001 	add.w	r0, r8, #1
    456e:	f002 ff64 	bl	743a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4572:	2800      	cmp	r0, #0
    4574:	d1ba      	bne.n	44ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4576:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    457a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    457e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4582:	200e      	movs	r0, #14
    4584:	f003 fd6b 	bl	805e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    4588:	4803      	ldr	r0, [pc, #12]	; (4598 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    458a:	f002 ff6d 	bl	7468 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    458e:	2000      	movs	r0, #0
    4590:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4594:	4000e504 	.word	0x4000e504
    4598:	2000015f 	.word	0x2000015f
    459c:	4000e000 	.word	0x4000e000
    45a0:	e000ed10 	.word	0xe000ed10

000045a4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    45a4:	b510      	push	{r4, lr}
    45a6:	4808      	ldr	r0, [pc, #32]	; (45c8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    45a8:	f002 ff5a 	bl	7460 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    45ac:	b108      	cbz	r0, 45b2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    45ae:	2124      	movs	r1, #36	; 0x24
    45b0:	e006      	b.n	45c0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    45b2:	4805      	ldr	r0, [pc, #20]	; (45c8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    45b4:	1c40      	adds	r0, r0, #1
    45b6:	f002 ff53 	bl	7460 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    45ba:	2800      	cmp	r0, #0
    45bc:	d003      	beq.n	45c6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    45be:	2128      	movs	r1, #40	; 0x28
    45c0:	201d      	movs	r0, #29
    45c2:	f7ff fa79 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45c6:	bd10      	pop	{r4, pc}
    45c8:	2000015f 	.word	0x2000015f

000045cc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    45cc:	b570      	push	{r4, r5, r6, lr}
    45ce:	4911      	ldr	r1, [pc, #68]	; (4614 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    45d0:	680a      	ldr	r2, [r1, #0]
    45d2:	b1ea      	cbz	r2, 4610 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    45d4:	2300      	movs	r3, #0
    45d6:	461d      	mov	r5, r3
    45d8:	2401      	movs	r4, #1
    45da:	684a      	ldr	r2, [r1, #4]
    45dc:	1c52      	adds	r2, r2, #1
    45de:	604a      	str	r2, [r1, #4]
    45e0:	2a09      	cmp	r2, #9
    45e2:	d300      	bcc.n	45e6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    45e4:	604d      	str	r5, [r1, #4]
    45e6:	790e      	ldrb	r6, [r1, #4]
    45e8:	fa04 f206 	lsl.w	r2, r4, r6
    45ec:	680e      	ldr	r6, [r1, #0]
    45ee:	4216      	tst	r6, r2
    45f0:	d00b      	beq.n	460a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    45f2:	f3ef 8310 	mrs	r3, PRIMASK
    45f6:	b672      	cpsid	i
    45f8:	680c      	ldr	r4, [r1, #0]
    45fa:	4394      	bics	r4, r2
    45fc:	600c      	str	r4, [r1, #0]
    45fe:	b903      	cbnz	r3, 4602 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4600:	b662      	cpsie	i
    4602:	6849      	ldr	r1, [r1, #4]
    4604:	6001      	str	r1, [r0, #0]
    4606:	2000      	movs	r0, #0
    4608:	bd70      	pop	{r4, r5, r6, pc}
    460a:	1c5b      	adds	r3, r3, #1
    460c:	2b09      	cmp	r3, #9
    460e:	d3e4      	bcc.n	45da <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4610:	2005      	movs	r0, #5
    4612:	bd70      	pop	{r4, r5, r6, pc}
    4614:	2000009c 	.word	0x2000009c

00004618 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4618:	4802      	ldr	r0, [pc, #8]	; (4624 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    461a:	2100      	movs	r1, #0
    461c:	6001      	str	r1, [r0, #0]
    461e:	6041      	str	r1, [r0, #4]
    4620:	4770      	bx	lr
    4622:	0000      	.short	0x0000
    4624:	2000009c 	.word	0x2000009c

00004628 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4628:	b510      	push	{r4, lr}
    462a:	4c08      	ldr	r4, [pc, #32]	; (464c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    462c:	7861      	ldrb	r1, [r4, #1]
    462e:	b109      	cbz	r1, 4634 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4630:	200f      	movs	r0, #15
    4632:	bd10      	pop	{r4, pc}
    4634:	f7ff f85c 	bl	36f0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4638:	7020      	strb	r0, [r4, #0]
    463a:	28ff      	cmp	r0, #255	; 0xff
    463c:	d001      	beq.n	4642 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    463e:	2000      	movs	r0, #0
    4640:	bd10      	pop	{r4, pc}
    4642:	2176      	movs	r1, #118	; 0x76
    4644:	201f      	movs	r0, #31
    4646:	f7ff fa37 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    464a:	0000      	.short	0x0000
    464c:	200000a4 	.word	0x200000a4

00004650 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4650:	4901      	ldr	r1, [pc, #4]	; (4658 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4652:	2000      	movs	r0, #0
    4654:	7048      	strb	r0, [r1, #1]
    4656:	4770      	bx	lr
    4658:	200000a4 	.word	0x200000a4
    465c:	4905      	ldr	r1, [pc, #20]	; (4674 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    465e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4660:	4282      	cmp	r2, r0
    4662:	d105      	bne.n	4670 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    4664:	2000      	movs	r0, #0
    4666:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    466a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    466e:	8488      	strh	r0, [r1, #36]	; 0x24
    4670:	4770      	bx	lr
    4672:	0000      	.short	0x0000
    4674:	20000aea 	.word	0x20000aea

00004678 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4678:	4a0a      	ldr	r2, [pc, #40]	; (46a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    467a:	b110      	cbz	r0, 4682 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    467c:	2801      	cmp	r0, #1
    467e:	d007      	beq.n	4690 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4680:	e00e      	b.n	46a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4682:	7850      	ldrb	r0, [r2, #1]
    4684:	b160      	cbz	r0, 46a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4686:	f8d2 0002 	ldr.w	r0, [r2, #2]
    468a:	6008      	str	r0, [r1, #0]
    468c:	88d0      	ldrh	r0, [r2, #6]
    468e:	e004      	b.n	469a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4690:	7810      	ldrb	r0, [r2, #0]
    4692:	b128      	cbz	r0, 46a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4694:	6890      	ldr	r0, [r2, #8]
    4696:	6008      	str	r0, [r1, #0]
    4698:	8990      	ldrh	r0, [r2, #12]
    469a:	8088      	strh	r0, [r1, #4]
    469c:	2001      	movs	r0, #1
    469e:	4770      	bx	lr
    46a0:	2000      	movs	r0, #0
    46a2:	4770      	bx	lr
    46a4:	20000161 	.word	0x20000161

000046a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    46a8:	4a08      	ldr	r2, [pc, #32]	; (46cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    46aa:	2301      	movs	r3, #1
    46ac:	b138      	cbz	r0, 46be <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    46ae:	2801      	cmp	r0, #1
    46b0:	d104      	bne.n	46bc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    46b2:	7013      	strb	r3, [r2, #0]
    46b4:	6808      	ldr	r0, [r1, #0]
    46b6:	6090      	str	r0, [r2, #8]
    46b8:	8888      	ldrh	r0, [r1, #4]
    46ba:	8190      	strh	r0, [r2, #12]
    46bc:	4770      	bx	lr
    46be:	7053      	strb	r3, [r2, #1]
    46c0:	6808      	ldr	r0, [r1, #0]
    46c2:	f8c2 0002 	str.w	r0, [r2, #2]
    46c6:	8888      	ldrh	r0, [r1, #4]
    46c8:	80d0      	strh	r0, [r2, #6]
    46ca:	4770      	bx	lr
    46cc:	20000161 	.word	0x20000161

000046d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    46d0:	4906      	ldr	r1, [pc, #24]	; (46ec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    46d2:	b110      	cbz	r0, 46da <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    46d4:	2801      	cmp	r0, #1
    46d6:	d002      	beq.n	46de <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    46d8:	e005      	b.n	46e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    46da:	7848      	ldrb	r0, [r1, #1]
    46dc:	e000      	b.n	46e0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    46de:	7808      	ldrb	r0, [r1, #0]
    46e0:	b108      	cbz	r0, 46e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    46e2:	2001      	movs	r0, #1
    46e4:	4770      	bx	lr
    46e6:	2000      	movs	r0, #0
    46e8:	4770      	bx	lr
    46ea:	0000      	.short	0x0000
    46ec:	20000161 	.word	0x20000161

000046f0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    46f0:	4901      	ldr	r1, [pc, #4]	; (46f8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    46f2:	7448      	strb	r0, [r1, #17]
    46f4:	4770      	bx	lr
    46f6:	0000      	.short	0x0000
    46f8:	2000051a 	.word	0x2000051a

000046fc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    46fc:	4800      	ldr	r0, [pc, #0]	; (4700 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    46fe:	4770      	bx	lr
    4700:	20000ce3 	.word	0x20000ce3

00004704 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    4704:	4904      	ldr	r1, [pc, #16]	; (4718 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    4706:	788a      	ldrb	r2, [r1, #2]
    4708:	4282      	cmp	r2, r0
    470a:	d903      	bls.n	4714 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    470c:	4408      	add	r0, r1
    470e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    4712:	4770      	bx	lr
    4714:	2000      	movs	r0, #0
    4716:	4770      	bx	lr
    4718:	20000b10 	.word	0x20000b10

0000471c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    471c:	4904      	ldr	r1, [pc, #16]	; (4730 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    471e:	788a      	ldrb	r2, [r1, #2]
    4720:	4282      	cmp	r2, r0
    4722:	d903      	bls.n	472c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    4724:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    4728:	3083      	adds	r0, #131	; 0x83
    472a:	4770      	bx	lr
    472c:	2000      	movs	r0, #0
    472e:	4770      	bx	lr
    4730:	20000b10 	.word	0x20000b10

00004734 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    4734:	4a05      	ldr	r2, [pc, #20]	; (474c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    4736:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    473a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    473e:	6802      	ldr	r2, [r0, #0]
    4740:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    4744:	8880      	ldrh	r0, [r0, #4]
    4746:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    474a:	4770      	bx	lr
    474c:	20000b10 	.word	0x20000b10

00004750 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    4750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4754:	460e      	mov	r6, r1
    4756:	4607      	mov	r7, r0
    4758:	4615      	mov	r5, r2
    475a:	2106      	movs	r1, #6
    475c:	4630      	mov	r0, r6
    475e:	f003 fd7c 	bl	825a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    4762:	4c0d      	ldr	r4, [pc, #52]	; (4798 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    4764:	b160      	cbz	r0, 4780 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    4766:	2000      	movs	r0, #0
    4768:	e004      	b.n	4774 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    476a:	1821      	adds	r1, r4, r0
    476c:	1c40      	adds	r0, r0, #1
    476e:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    4772:	b2c0      	uxtb	r0, r0
    4774:	78a1      	ldrb	r1, [r4, #2]
    4776:	4281      	cmp	r1, r0
    4778:	d8f7      	bhi.n	476a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    477a:	2001      	movs	r0, #1
    477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4780:	4631      	mov	r1, r6
    4782:	4638      	mov	r0, r7
    4784:	f003 fcdf 	bl	8146 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    4788:	2808      	cmp	r0, #8
    478a:	d003      	beq.n	4794 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    478c:	4420      	add	r0, r4
    478e:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    4792:	e7f2      	b.n	477a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    4794:	2000      	movs	r0, #0
    4796:	e7f1      	b.n	477c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    4798:	20000b10 	.word	0x20000b10

0000479c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    479c:	4904      	ldr	r1, [pc, #16]	; (47b0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    479e:	788a      	ldrb	r2, [r1, #2]
    47a0:	4282      	cmp	r2, r0
    47a2:	d903      	bls.n	47ac <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    47a4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    47a8:	1cc0      	adds	r0, r0, #3
    47aa:	4770      	bx	lr
    47ac:	2000      	movs	r0, #0
    47ae:	4770      	bx	lr
    47b0:	20000b10 	.word	0x20000b10

000047b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    47b4:	b510      	push	{r4, lr}
    47b6:	f240 12d3 	movw	r2, #467	; 0x1d3
    47ba:	2100      	movs	r1, #0
    47bc:	4808      	ldr	r0, [pc, #32]	; (47e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    47be:	f002 ff5f 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    47c2:	2208      	movs	r2, #8
    47c4:	21ff      	movs	r1, #255	; 0xff
    47c6:	4807      	ldr	r0, [pc, #28]	; (47e4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    47c8:	f002 ff5a 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    47cc:	4805      	ldr	r0, [pc, #20]	; (47e4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    47ce:	2100      	movs	r1, #0
    47d0:	1f00      	subs	r0, r0, #4
    47d2:	7001      	strb	r1, [r0, #0]
    47d4:	7041      	strb	r1, [r0, #1]
    47d6:	f44f 7161 	mov.w	r1, #900	; 0x384
    47da:	8041      	strh	r1, [r0, #2]
    47dc:	bd10      	pop	{r4, pc}
    47de:	0000      	.short	0x0000
    47e0:	20000b10 	.word	0x20000b10
    47e4:	20000154 	.word	0x20000154

000047e8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    47e8:	4901      	ldr	r1, [pc, #4]	; (47f0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    47ea:	7008      	strb	r0, [r1, #0]
    47ec:	4770      	bx	lr
    47ee:	0000      	.short	0x0000
    47f0:	20000150 	.word	0x20000150

000047f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    47f4:	4801      	ldr	r0, [pc, #4]	; (47fc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    47f6:	7800      	ldrb	r0, [r0, #0]
    47f8:	4770      	bx	lr
    47fa:	0000      	.short	0x0000
    47fc:	20000150 	.word	0x20000150

00004800 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    4800:	4b0b      	ldr	r3, [pc, #44]	; (4830 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    4802:	b510      	push	{r4, lr}
    4804:	789c      	ldrb	r4, [r3, #2]
    4806:	4284      	cmp	r4, r0
    4808:	d90f      	bls.n	482a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    480a:	4418      	add	r0, r3
    480c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    4810:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4814:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    4818:	700b      	strb	r3, [r1, #0]
    481a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    481e:	6011      	str	r1, [r2, #0]
    4820:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    4824:	8090      	strh	r0, [r2, #4]
    4826:	2001      	movs	r0, #1
    4828:	bd10      	pop	{r4, pc}
    482a:	2000      	movs	r0, #0
    482c:	bd10      	pop	{r4, pc}
    482e:	0000      	.short	0x0000
    4830:	20000b10 	.word	0x20000b10

00004834 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    4834:	4907      	ldr	r1, [pc, #28]	; (4854 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    4836:	788a      	ldrb	r2, [r1, #2]
    4838:	4282      	cmp	r2, r0
    483a:	d909      	bls.n	4850 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    483c:	4408      	add	r0, r1
    483e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    4842:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4846:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    484a:	f000 0001 	and.w	r0, r0, #1
    484e:	4770      	bx	lr
    4850:	2000      	movs	r0, #0
    4852:	4770      	bx	lr
    4854:	20000b10 	.word	0x20000b10

00004858 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    4858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    485c:	4698      	mov	r8, r3
    485e:	4691      	mov	r9, r2
    4860:	460c      	mov	r4, r1
    4862:	4605      	mov	r5, r0
    4864:	f000 f938 	bl	4ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    4868:	4606      	mov	r6, r0
    486a:	2810      	cmp	r0, #16
    486c:	d006      	beq.n	487c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    486e:	f000 f903 	bl	4a78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    4872:	2810      	cmp	r0, #16
    4874:	d002      	beq.n	487c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    4876:	2012      	movs	r0, #18
    4878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    487c:	4f18      	ldr	r7, [pc, #96]	; (48e0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    487e:	78b8      	ldrb	r0, [r7, #2]
    4880:	2808      	cmp	r0, #8
    4882:	d22a      	bcs.n	48da <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    4884:	2e10      	cmp	r6, #16
    4886:	d105      	bne.n	4894 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    4888:	2200      	movs	r2, #0
    488a:	4621      	mov	r1, r4
    488c:	4628      	mov	r0, r5
    488e:	f000 f907 	bl	4aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    4892:	4606      	mov	r6, r0
    4894:	78bc      	ldrb	r4, [r7, #2]
    4896:	2210      	movs	r2, #16
    4898:	1c60      	adds	r0, r4, #1
    489a:	70b8      	strb	r0, [r7, #2]
    489c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    48a0:	1ce8      	adds	r0, r5, #3
    48a2:	4649      	mov	r1, r9
    48a4:	f003 fccc 	bl	8240 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    48a8:	f105 0083 	add.w	r0, r5, #131	; 0x83
    48ac:	2210      	movs	r2, #16
    48ae:	4641      	mov	r1, r8
    48b0:	f003 fcc6 	bl	8240 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    48b4:	2110      	movs	r1, #16
    48b6:	4640      	mov	r0, r8
    48b8:	f003 fccf 	bl	825a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    48bc:	443c      	add	r4, r7
    48be:	2110      	movs	r1, #16
    48c0:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    48c4:	4648      	mov	r0, r9
    48c6:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    48ca:	f003 fcc6 	bl	825a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    48ce:	77e0      	strb	r0, [r4, #31]
    48d0:	f804 6c29 	strb.w	r6, [r4, #-41]
    48d4:	2000      	movs	r0, #0
    48d6:	73e0      	strb	r0, [r4, #15]
    48d8:	e7ce      	b.n	4878 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    48da:	2007      	movs	r0, #7
    48dc:	e7cc      	b.n	4878 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    48de:	0000      	.short	0x0000
    48e0:	20000b10 	.word	0x20000b10

000048e4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    48e4:	4806      	ldr	r0, [pc, #24]	; (4900 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    48e6:	b510      	push	{r4, lr}
    48e8:	7880      	ldrb	r0, [r0, #2]
    48ea:	1e40      	subs	r0, r0, #1
    48ec:	b244      	sxtb	r4, r0
    48ee:	e004      	b.n	48fa <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    48f0:	b2e0      	uxtb	r0, r4
    48f2:	f000 f939 	bl	4b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    48f6:	1e64      	subs	r4, r4, #1
    48f8:	b264      	sxtb	r4, r4
    48fa:	2c00      	cmp	r4, #0
    48fc:	daf8      	bge.n	48f0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    48fe:	bd10      	pop	{r4, pc}
    4900:	20000b10 	.word	0x20000b10

00004904 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    4904:	4801      	ldr	r0, [pc, #4]	; (490c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    4906:	8840      	ldrh	r0, [r0, #2]
    4908:	4770      	bx	lr
    490a:	0000      	.short	0x0000
    490c:	20000150 	.word	0x20000150

00004910 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    4910:	b138      	cbz	r0, 4922 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    4912:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    4916:	4288      	cmp	r0, r1
    4918:	d803      	bhi.n	4922 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    491a:	4903      	ldr	r1, [pc, #12]	; (4928 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    491c:	8048      	strh	r0, [r1, #2]
    491e:	2001      	movs	r0, #1
    4920:	4770      	bx	lr
    4922:	2000      	movs	r0, #0
    4924:	4770      	bx	lr
    4926:	0000      	.short	0x0000
    4928:	20000150 	.word	0x20000150

0000492c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    492c:	4905      	ldr	r1, [pc, #20]	; (4944 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    492e:	788a      	ldrb	r2, [r1, #2]
    4930:	4282      	cmp	r2, r0
    4932:	d903      	bls.n	493c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    4934:	4408      	add	r0, r1
    4936:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    493a:	b108      	cbz	r0, 4940 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    493c:	2000      	movs	r0, #0
    493e:	4770      	bx	lr
    4940:	2001      	movs	r0, #1
    4942:	4770      	bx	lr
    4944:	20000b10 	.word	0x20000b10

00004948 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    4948:	b570      	push	{r4, r5, r6, lr}
    494a:	460d      	mov	r5, r1
    494c:	4606      	mov	r6, r0
    494e:	f000 f8c3 	bl	4ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    4952:	4c10      	ldr	r4, [pc, #64]	; (4994 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    4954:	2810      	cmp	r0, #16
    4956:	d007      	beq.n	4968 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    4958:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    495c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    4960:	07c9      	lsls	r1, r1, #31
    4962:	d001      	beq.n	4968 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    4964:	2001      	movs	r0, #1
    4966:	bd70      	pop	{r4, r5, r6, pc}
    4968:	7861      	ldrb	r1, [r4, #1]
    496a:	2908      	cmp	r1, #8
    496c:	d210      	bcs.n	4990 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    496e:	2810      	cmp	r0, #16
    4970:	d008      	beq.n	4984 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    4972:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    4976:	2101      	movs	r1, #1
    4978:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    497c:	7860      	ldrb	r0, [r4, #1]
    497e:	1c40      	adds	r0, r0, #1
    4980:	7060      	strb	r0, [r4, #1]
    4982:	e7ef      	b.n	4964 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    4984:	2201      	movs	r2, #1
    4986:	4629      	mov	r1, r5
    4988:	4630      	mov	r0, r6
    498a:	f000 f889 	bl	4aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    498e:	e7f5      	b.n	497c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    4990:	2000      	movs	r0, #0
    4992:	bd70      	pop	{r4, r5, r6, pc}
    4994:	20000b10 	.word	0x20000b10

00004998 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    4998:	b570      	push	{r4, r5, r6, lr}
    499a:	4d0b      	ldr	r5, [pc, #44]	; (49c8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    499c:	7828      	ldrb	r0, [r5, #0]
    499e:	1e40      	subs	r0, r0, #1
    49a0:	b244      	sxtb	r4, r0
    49a2:	e00a      	b.n	49ba <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    49a4:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    49a8:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    49ac:	07c0      	lsls	r0, r0, #31
    49ae:	d002      	beq.n	49b6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    49b0:	b2e0      	uxtb	r0, r4
    49b2:	f000 f921 	bl	4bf8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    49b6:	1e64      	subs	r4, r4, #1
    49b8:	b264      	sxtb	r4, r4
    49ba:	2c00      	cmp	r4, #0
    49bc:	daf2      	bge.n	49a4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    49be:	4903      	ldr	r1, [pc, #12]	; (49cc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    49c0:	2000      	movs	r0, #0
    49c2:	7048      	strb	r0, [r1, #1]
    49c4:	bd70      	pop	{r4, r5, r6, pc}
    49c6:	0000      	.short	0x0000
    49c8:	20000b10 	.word	0x20000b10
    49cc:	20000150 	.word	0x20000150

000049d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    49d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49d4:	2400      	movs	r4, #0
    49d6:	4625      	mov	r5, r4
    49d8:	4e18      	ldr	r6, [pc, #96]	; (4a3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    49da:	e029      	b.n	4a30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    49dc:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    49e0:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    49e4:	07c0      	lsls	r0, r0, #31
    49e6:	d021      	beq.n	4a2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    49e8:	4628      	mov	r0, r5
    49ea:	f000 f845 	bl	4a78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    49ee:	4603      	mov	r3, r0
    49f0:	f7ff fed4 	bl	479c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    49f4:	4601      	mov	r1, r0
    49f6:	2000      	movs	r0, #0
    49f8:	2b10      	cmp	r3, #16
    49fa:	d009      	beq.n	4a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    49fc:	18f2      	adds	r2, r6, r3
    49fe:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    4a02:	f1bc 0f01 	cmp.w	ip, #1
    4a06:	d002      	beq.n	4a0e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    4a08:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    4a0c:	b102      	cbz	r2, 4a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    4a0e:	2001      	movs	r0, #1
    4a10:	1e40      	subs	r0, r0, #1
    4a12:	4201      	tst	r1, r0
    4a14:	d10a      	bne.n	4a2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    4a16:	480a      	ldr	r0, [pc, #40]	; (4a40 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    4a18:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    4a1c:	5503      	strb	r3, [r0, r4]
    4a1e:	4620      	mov	r0, r4
    4a20:	1c64      	adds	r4, r4, #1
    4a22:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    4a26:	b2e4      	uxtb	r4, r4
    4a28:	f002 f978 	bl	6d1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    4a2c:	1c6d      	adds	r5, r5, #1
    4a2e:	b2ed      	uxtb	r5, r5
    4a30:	7830      	ldrb	r0, [r6, #0]
    4a32:	42a8      	cmp	r0, r5
    4a34:	d8d2      	bhi.n	49dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    4a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a3a:	0000      	.short	0x0000
    4a3c:	20000b10 	.word	0x20000b10
    4a40:	20000154 	.word	0x20000154
    4a44:	b570      	push	{r4, r5, r6, lr}
    4a46:	4b0a      	ldr	r3, [pc, #40]	; (4a70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    4a48:	781b      	ldrb	r3, [r3, #0]
    4a4a:	b173      	cbz	r3, 4a6a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    4a4c:	4b09      	ldr	r3, [pc, #36]	; (4a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    4a4e:	789c      	ldrb	r4, [r3, #2]
    4a50:	b15c      	cbz	r4, 4a6a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    4a52:	1845      	adds	r5, r0, r1
    4a54:	4621      	mov	r1, r4
    4a56:	b10a      	cbz	r2, 4a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    4a58:	1cd8      	adds	r0, r3, #3
    4a5a:	e001      	b.n	4a60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    4a5c:	4805      	ldr	r0, [pc, #20]	; (4a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    4a5e:	3083      	adds	r0, #131	; 0x83
    4a60:	462a      	mov	r2, r5
    4a62:	f001 fbd1 	bl	6208 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    4a66:	2001      	movs	r0, #1
    4a68:	bd70      	pop	{r4, r5, r6, pc}
    4a6a:	2000      	movs	r0, #0
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	0000      	.short	0x0000
    4a70:	20000150 	.word	0x20000150
    4a74:	20000b10 	.word	0x20000b10
    4a78:	4908      	ldr	r1, [pc, #32]	; (4a9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    4a7a:	b510      	push	{r4, lr}
    4a7c:	4603      	mov	r3, r0
    4a7e:	2000      	movs	r0, #0
    4a80:	788a      	ldrb	r2, [r1, #2]
    4a82:	e006      	b.n	4a92 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    4a84:	180c      	adds	r4, r1, r0
    4a86:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    4a8a:	429c      	cmp	r4, r3
    4a8c:	d004      	beq.n	4a98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    4a8e:	1c40      	adds	r0, r0, #1
    4a90:	b2c0      	uxtb	r0, r0
    4a92:	4282      	cmp	r2, r0
    4a94:	d8f6      	bhi.n	4a84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    4a96:	2010      	movs	r0, #16
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	0000      	.short	0x0000
    4a9c:	20000b10 	.word	0x20000b10
    4aa0:	b570      	push	{r4, r5, r6, lr}
    4aa2:	4b0c      	ldr	r3, [pc, #48]	; (4ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    4aa4:	4604      	mov	r4, r0
    4aa6:	7818      	ldrb	r0, [r3, #0]
    4aa8:	1c45      	adds	r5, r0, #1
    4aaa:	701d      	strb	r5, [r3, #0]
    4aac:	2810      	cmp	r0, #16
    4aae:	d303      	bcc.n	4ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    4ab0:	2146      	movs	r1, #70	; 0x46
    4ab2:	2028      	movs	r0, #40	; 0x28
    4ab4:	f7ff f800 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ab8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    4abc:	680d      	ldr	r5, [r1, #0]
    4abe:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    4ac2:	8889      	ldrh	r1, [r1, #4]
    4ac4:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    4ac8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    4acc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    4ad0:	bd70      	pop	{r4, r5, r6, pc}
    4ad2:	0000      	.short	0x0000
    4ad4:	20000b10 	.word	0x20000b10
    4ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4adc:	460f      	mov	r7, r1
    4ade:	4606      	mov	r6, r0
    4ae0:	2400      	movs	r4, #0
    4ae2:	4d0d      	ldr	r5, [pc, #52]	; (4b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    4ae4:	e00f      	b.n	4b06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    4ae6:	bf00      	nop
    4ae8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    4aec:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    4af0:	42b1      	cmp	r1, r6
    4af2:	d106      	bne.n	4b02 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    4af4:	2206      	movs	r2, #6
    4af6:	4639      	mov	r1, r7
    4af8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    4afc:	f002 fd34 	bl	7568 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    4b00:	b138      	cbz	r0, 4b12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    4b02:	1c64      	adds	r4, r4, #1
    4b04:	b2e4      	uxtb	r4, r4
    4b06:	7828      	ldrb	r0, [r5, #0]
    4b08:	42a0      	cmp	r0, r4
    4b0a:	d8ed      	bhi.n	4ae8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    4b0c:	2010      	movs	r0, #16
    4b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b12:	4620      	mov	r0, r4
    4b14:	e7fb      	b.n	4b0e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    4b16:	0000      	.short	0x0000
    4b18:	20000b10 	.word	0x20000b10
    4b1c:	b570      	push	{r4, r5, r6, lr}
    4b1e:	4605      	mov	r5, r0
    4b20:	f7ff ffaa 	bl	4a78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    4b24:	2810      	cmp	r0, #16
    4b26:	d11c      	bne.n	4b62 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    4b28:	4c0e      	ldr	r4, [pc, #56]	; (4b64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    4b2a:	7820      	ldrb	r0, [r4, #0]
    4b2c:	1e40      	subs	r0, r0, #1
    4b2e:	b2c0      	uxtb	r0, r0
    4b30:	7020      	strb	r0, [r4, #0]
    4b32:	42a8      	cmp	r0, r5
    4b34:	d015      	beq.n	4b62 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    4b36:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    4b3a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    4b3e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    4b42:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    4b46:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    4b4a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    4b4e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    4b52:	7820      	ldrb	r0, [r4, #0]
    4b54:	f7ff ff90 	bl	4a78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    4b58:	2810      	cmp	r0, #16
    4b5a:	d002      	beq.n	4b62 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    4b5c:	4420      	add	r0, r4
    4b5e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    4b62:	bd70      	pop	{r4, r5, r6, pc}
    4b64:	20000b10 	.word	0x20000b10
    4b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b6c:	4c21      	ldr	r4, [pc, #132]	; (4bf4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    4b6e:	4606      	mov	r6, r0
    4b70:	19a7      	adds	r7, r4, r6
    4b72:	78a0      	ldrb	r0, [r4, #2]
    4b74:	1e40      	subs	r0, r0, #1
    4b76:	b2c5      	uxtb	r5, r0
    4b78:	70a5      	strb	r5, [r4, #2]
    4b7a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    4b7e:	42ae      	cmp	r6, r5
    4b80:	d02a      	beq.n	4bd8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    4b82:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    4b86:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    4b8a:	f10a 0103 	add.w	r1, sl, #3
    4b8e:	f109 0003 	add.w	r0, r9, #3
    4b92:	2210      	movs	r2, #16
    4b94:	f002 fcfa 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4b98:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    4b9c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    4ba0:	2210      	movs	r2, #16
    4ba2:	f002 fcf3 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4ba6:	1960      	adds	r0, r4, r5
    4ba8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4bac:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    4bb0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    4bb4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    4bb8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    4bbc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    4bc0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    4bc4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    4bc8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    4bcc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    4bd0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    4bd4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    4bd8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    4bdc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    4be0:	07c0      	lsls	r0, r0, #31
    4be2:	d104      	bne.n	4bee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    4be4:	4640      	mov	r0, r8
    4be6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4bea:	f7ff bf97 	b.w	4b1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    4bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bf2:	0000      	.short	0x0000
    4bf4:	20000b10 	.word	0x20000b10
    4bf8:	4905      	ldr	r1, [pc, #20]	; (4c10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    4bfa:	784a      	ldrb	r2, [r1, #1]
    4bfc:	1e52      	subs	r2, r2, #1
    4bfe:	704a      	strb	r2, [r1, #1]
    4c00:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4c04:	2200      	movs	r2, #0
    4c06:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    4c0a:	f7ff bf87 	b.w	4b1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    4c0e:	0000      	.short	0x0000
    4c10:	20000b10 	.word	0x20000b10

00004c14 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    4c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c16:	f06f 021f 	mvn.w	r2, #31
    4c1a:	0c01      	lsrs	r1, r0, #16
    4c1c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    4c20:	251f      	movs	r5, #31
    4c22:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    4c26:	3854      	subs	r0, #84	; 0x54
    4c28:	d00d      	beq.n	4c46 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    4c2a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    4c2e:	3855      	subs	r0, #85	; 0x55
    4c30:	d009      	beq.n	4c46 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    4c32:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    4c36:	38aa      	subs	r0, #170	; 0xaa
    4c38:	d005      	beq.n	4c46 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    4c3a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    4c3e:	38aa      	subs	r0, #170	; 0xaa
    4c40:	d001      	beq.n	4c46 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    4c42:	2001      	movs	r0, #1
    4c44:	e000      	b.n	4c48 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    4c46:	2000      	movs	r0, #0
    4c48:	2200      	movs	r2, #0
    4c4a:	4613      	mov	r3, r2
    4c4c:	ea4f 0402 	mov.w	r4, r2
    4c50:	ea82 0701 	eor.w	r7, r2, r1
    4c54:	43ff      	mvns	r7, r7
    4c56:	431f      	orrs	r7, r3
    4c58:	1c7f      	adds	r7, r7, #1
    4c5a:	d00f      	beq.n	4c7c <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    4c5c:	f006 0701 	and.w	r7, r6, #1
    4c60:	0852      	lsrs	r2, r2, #1
    4c62:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    4c66:	f005 0701 	and.w	r7, r5, #1
    4c6a:	085b      	lsrs	r3, r3, #1
    4c6c:	0876      	lsrs	r6, r6, #1
    4c6e:	086d      	lsrs	r5, r5, #1
    4c70:	1c64      	adds	r4, r4, #1
    4c72:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    4c76:	2c16      	cmp	r4, #22
    4c78:	d3ea      	bcc.n	4c50 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    4c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c7c:	2000      	movs	r0, #0
    4c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004c80 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    4c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c84:	4604      	mov	r4, r0
    4c86:	f100 0568 	add.w	r5, r0, #104	; 0x68
    4c8a:	f04f 0901 	mov.w	r9, #1
    4c8e:	b171      	cbz	r1, 4cae <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    4c90:	f104 077e 	add.w	r7, r4, #126	; 0x7e
    4c94:	1e7e      	subs	r6, r7, #1
    4c96:	2901      	cmp	r1, #1
    4c98:	d021      	beq.n	4cde <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    4c9a:	2902      	cmp	r1, #2
    4c9c:	d046      	beq.n	4d2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    4c9e:	2903      	cmp	r1, #3
    4ca0:	d11b      	bne.n	4cda <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    4ca2:	4639      	mov	r1, r7
    4ca4:	4630      	mov	r0, r6
    4ca6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4caa:	f003 bae5 	b.w	8278 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    4cae:	f44f 7204 	mov.w	r2, #528	; 0x210
    4cb2:	2100      	movs	r1, #0
    4cb4:	f002 fce4 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4cb8:	f001 fa96 	bl	61e8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    4cbc:	f644 112b 	movw	r1, #18731	; 0x492b
    4cc0:	4008      	ands	r0, r1
    4cc2:	f885 9015 	strb.w	r9, [r5, #21]
    4cc6:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    4cca:	0a00      	lsrs	r0, r0, #8
    4ccc:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    4cd0:	20fe      	movs	r0, #254	; 0xfe
    4cd2:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    4cd6:	207f      	movs	r0, #127	; 0x7f
    4cd8:	7268      	strb	r0, [r5, #9]
    4cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cde:	f04f 0800 	mov.w	r8, #0
    4ce2:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
    4ce6:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    4cea:	6861      	ldr	r1, [r4, #4]
    4cec:	4814      	ldr	r0, [pc, #80]	; (4d40 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    4cee:	460a      	mov	r2, r1
    4cf0:	4408      	add	r0, r1
    4cf2:	fbb0 f0f1 	udiv	r0, r0, r1
    4cf6:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    4cfa:	f640 30b8 	movw	r0, #3000	; 0xbb8
    4cfe:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    4d02:	8963      	ldrh	r3, [r4, #10]
    4d04:	4628      	mov	r0, r5
    4d06:	f000 f81d 	bl	4d44 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    4d0a:	4639      	mov	r1, r7
    4d0c:	4630      	mov	r0, r6
    4d0e:	f003 fab3 	bl	8278 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    4d12:	f002 fc05 	bl	7520 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4d16:	b118      	cbz	r0, 4d20 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    4d18:	68e0      	ldr	r0, [r4, #12]
    4d1a:	f7ff ff7b 	bl	4c14 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    4d1e:	b110      	cbz	r0, 4d26 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    4d20:	f884 816c 	strb.w	r8, [r4, #364]	; 0x16c
    4d24:	e7d9      	b.n	4cda <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    4d26:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
    4d2a:	e7d6      	b.n	4cda <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    4d2c:	6841      	ldr	r1, [r0, #4]
    4d2e:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    4d32:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    4d36:	4628      	mov	r0, r5
    4d38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d3c:	f000 b802 	b.w	4d44 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    4d40:	01c9c37f 	.word	0x01c9c37f
    4d44:	b530      	push	{r4, r5, lr}
    4d46:	2400      	movs	r4, #0
    4d48:	8684      	strh	r4, [r0, #52]	; 0x34
    4d4a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    4d4c:	4d13      	ldr	r5, [pc, #76]	; (4d9c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    4d4e:	434c      	muls	r4, r1
    4d50:	fbb4 f4f2 	udiv	r4, r4, r2
    4d54:	8704      	strh	r4, [r0, #56]	; 0x38
    4d56:	f242 7410 	movw	r4, #10000	; 0x2710
    4d5a:	4363      	muls	r3, r4
    4d5c:	fbb3 f3f2 	udiv	r3, r3, r2
    4d60:	1c5b      	adds	r3, r3, #1
    4d62:	b29b      	uxth	r3, r3
    4d64:	fb03 f402 	mul.w	r4, r3, r2
    4d68:	86c3      	strh	r3, [r0, #54]	; 0x36
    4d6a:	42ac      	cmp	r4, r5
    4d6c:	d901      	bls.n	4d72 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    4d6e:	1e5b      	subs	r3, r3, #1
    4d70:	86c3      	strh	r3, [r0, #54]	; 0x36
    4d72:	4b0b      	ldr	r3, [pc, #44]	; (4da0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    4d74:	f240 2471 	movw	r4, #625	; 0x271
    4d78:	fbb3 f3f2 	udiv	r3, r3, r2
    4d7c:	1c5b      	adds	r3, r3, #1
    4d7e:	8783      	strh	r3, [r0, #60]	; 0x3c
    4d80:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    4d82:	4363      	muls	r3, r4
    4d84:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    4d88:	1e5b      	subs	r3, r3, #1
    4d8a:	fbb3 f3f2 	udiv	r3, r3, r2
    4d8e:	62c3      	str	r3, [r0, #44]	; 0x2c
    4d90:	6a83      	ldr	r3, [r0, #40]	; 0x28
    4d92:	434b      	muls	r3, r1
    4d94:	fbb3 f1f2 	udiv	r1, r3, r2
    4d98:	6281      	str	r1, [r0, #40]	; 0x28
    4d9a:	bd30      	pop	{r4, r5, pc}
    4d9c:	01e84800 	.word	0x01e84800
    4da0:	02625a00 	.word	0x02625a00

00004da4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    4da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4da8:	ea5f 0900 	movs.w	r9, r0
    4dac:	d006      	beq.n	4dbc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    4dae:	4d21      	ldr	r5, [pc, #132]	; (4e34 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    4db0:	f105 0010 	add.w	r0, r5, #16
    4db4:	7b69      	ldrb	r1, [r5, #13]
    4db6:	4682      	mov	sl, r0
    4db8:	b119      	cbz	r1, 4dc2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    4dba:	e00b      	b.n	4dd4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    4dbc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    4dc0:	e005      	b.n	4dce <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    4dc2:	2100      	movs	r1, #0
    4dc4:	f003 fb1f 	bl	8406 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x20>
    4dc8:	b120      	cbz	r0, 4dd4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    4dca:	f240 31d3 	movw	r1, #979	; 0x3d3
    4dce:	202b      	movs	r0, #43	; 0x2b
    4dd0:	f7fe fe72 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dd4:	8a2e      	ldrh	r6, [r5, #16]
    4dd6:	2000      	movs	r0, #0
    4dd8:	f7ff f83e 	bl	3e58 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    4ddc:	4f16      	ldr	r7, [pc, #88]	; (4e38 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    4dde:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4e3c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    4de2:	4604      	mov	r4, r0
    4de4:	6838      	ldr	r0, [r7, #0]
    4de6:	b158      	cbz	r0, 4e00 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    4de8:	8a28      	ldrh	r0, [r5, #16]
    4dea:	42a0      	cmp	r0, r4
    4dec:	d308      	bcc.n	4e00 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    4dee:	1b00      	subs	r0, r0, r4
    4df0:	b2c0      	uxtb	r0, r0
    4df2:	2101      	movs	r1, #1
    4df4:	f003 f8d9 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4df8:	b148      	cbz	r0, 4e0e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    4dfa:	4649      	mov	r1, r9
    4dfc:	683a      	ldr	r2, [r7, #0]
    4dfe:	e004      	b.n	4e0a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    4e00:	f8d8 2000 	ldr.w	r2, [r8]
    4e04:	b11a      	cbz	r2, 4e0e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    4e06:	8a28      	ldrh	r0, [r5, #16]
    4e08:	4649      	mov	r1, r9
    4e0a:	4790      	blx	r2
    4e0c:	b968      	cbnz	r0, 4e2a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    4e0e:	2100      	movs	r1, #0
    4e10:	4650      	mov	r0, sl
    4e12:	f003 faf8 	bl	8406 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x20>
    4e16:	b910      	cbnz	r0, 4e1e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    4e18:	8a28      	ldrh	r0, [r5, #16]
    4e1a:	42b0      	cmp	r0, r6
    4e1c:	d1e2      	bne.n	4de4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    4e1e:	4808      	ldr	r0, [pc, #32]	; (4e40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    4e20:	6801      	ldr	r1, [r0, #0]
    4e22:	b129      	cbz	r1, 4e30 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    4e24:	4648      	mov	r0, r9
    4e26:	4788      	blx	r1
    4e28:	b110      	cbz	r0, 4e30 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    4e2a:	2001      	movs	r0, #1
    4e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e30:	2000      	movs	r0, #0
    4e32:	e7fb      	b.n	4e2c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    4e34:	20000928 	.word	0x20000928
    4e38:	20000120 	.word	0x20000120
    4e3c:	20000124 	.word	0x20000124
    4e40:	20000128 	.word	0x20000128

00004e44 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    4e44:	b570      	push	{r4, r5, r6, lr}
    4e46:	0005      	movs	r5, r0
    4e48:	460c      	mov	r4, r1
    4e4a:	d02e      	beq.n	4eaa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    4e4c:	4818      	ldr	r0, [pc, #96]	; (4eb0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    4e4e:	6802      	ldr	r2, [r0, #0]
    4e50:	b35a      	cbz	r2, 4eaa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    4e52:	4628      	mov	r0, r5
    4e54:	4790      	blx	r2
    4e56:	b340      	cbz	r0, 4eaa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    4e58:	7820      	ldrb	r0, [r4, #0]
    4e5a:	2811      	cmp	r0, #17
    4e5c:	d002      	beq.n	4e64 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    4e5e:	2814      	cmp	r0, #20
    4e60:	d003      	beq.n	4e6a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    4e62:	e020      	b.n	4ea6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    4e64:	7920      	ldrb	r0, [r4, #4]
    4e66:	b1f0      	cbz	r0, 4ea6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    4e68:	e00a      	b.n	4e80 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    4e6a:	7920      	ldrb	r0, [r4, #4]
    4e6c:	b120      	cbz	r0, 4e78 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    4e6e:	4628      	mov	r0, r5
    4e70:	f003 fb9f 	bl	85b2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    4e74:	b120      	cbz	r0, 4e80 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    4e76:	e016      	b.n	4ea6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    4e78:	490e      	ldr	r1, [pc, #56]	; (4eb4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    4e7a:	2000      	movs	r0, #0
    4e7c:	7348      	strb	r0, [r1, #13]
    4e7e:	e012      	b.n	4ea6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    4e80:	88e4      	ldrh	r4, [r4, #6]
    4e82:	2100      	movs	r1, #0
    4e84:	4620      	mov	r0, r4
    4e86:	f003 f890 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4e8a:	b160      	cbz	r0, 4ea6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    4e8c:	8800      	ldrh	r0, [r0, #0]
    4e8e:	f003 f905 	bl	809c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    4e92:	2100      	movs	r1, #0
    4e94:	4620      	mov	r0, r4
    4e96:	f7ff f87b 	bl	3f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4e9a:	b120      	cbz	r0, 4ea6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    4e9c:	f44f 719a 	mov.w	r1, #308	; 0x134
    4ea0:	202b      	movs	r0, #43	; 0x2b
    4ea2:	f7fe fe09 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ea6:	2001      	movs	r0, #1
    4ea8:	bd70      	pop	{r4, r5, r6, pc}
    4eaa:	2000      	movs	r0, #0
    4eac:	bd70      	pop	{r4, r5, r6, pc}
    4eae:	0000      	.short	0x0000
    4eb0:	2000011c 	.word	0x2000011c
    4eb4:	20000928 	.word	0x20000928

00004eb8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	4604      	mov	r4, r0
    4ebc:	7c00      	ldrb	r0, [r0, #16]
    4ebe:	b300      	cbz	r0, 4f02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    4ec0:	2802      	cmp	r0, #2
    4ec2:	d01e      	beq.n	4f02 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    4ec4:	f05f 0001 	movs.w	r0, #1
    4ec8:	f104 0149 	add.w	r1, r4, #73	; 0x49
    4ecc:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    4ed0:	460d      	mov	r5, r1
    4ed2:	b1c0      	cbz	r0, 4f06 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    4ed4:	7de0      	ldrb	r0, [r4, #23]
    4ed6:	b1f0      	cbz	r0, 4f16 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    4ed8:	f8d4 0011 	ldr.w	r0, [r4, #17]
    4edc:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    4ee0:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    4ee4:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    4ee8:	7c20      	ldrb	r0, [r4, #16]
    4eea:	f003 fad0 	bl	848e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0xa8>
    4eee:	7620      	strb	r0, [r4, #24]
    4ef0:	2008      	movs	r0, #8
    4ef2:	7660      	strb	r0, [r4, #25]
    4ef4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    4ef8:	4629      	mov	r1, r5
    4efa:	f003 fab4 	bl	8466 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x80>
    4efe:	b9a8      	cbnz	r0, 4f2c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    4f00:	e00e      	b.n	4f20 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    4f02:	2000      	movs	r0, #0
    4f04:	e7e0      	b.n	4ec8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    4f06:	2000      	movs	r0, #0
    4f08:	f7ff fbb6 	bl	4678 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    4f0c:	2800      	cmp	r0, #0
    4f0e:	d1eb      	bne.n	4ee8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    4f10:	f240 417f 	movw	r1, #1151	; 0x47f
    4f14:	e001      	b.n	4f1a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    4f16:	f240 4183 	movw	r1, #1155	; 0x483
    4f1a:	202d      	movs	r0, #45	; 0x2d
    4f1c:	f7fe fdcc 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f20:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    4f24:	4629      	mov	r1, r5
    4f26:	f003 faa7 	bl	8478 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x92>
    4f2a:	b100      	cbz	r0, 4f2e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    4f2c:	2001      	movs	r0, #1
    4f2e:	76a0      	strb	r0, [r4, #26]
    4f30:	7e20      	ldrb	r0, [r4, #24]
    4f32:	b910      	cbnz	r0, 4f3a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    4f34:	78a0      	ldrb	r0, [r4, #2]
    4f36:	0740      	lsls	r0, r0, #29
    4f38:	d506      	bpl.n	4f48 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    4f3a:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    4f3e:	f104 0150 	add.w	r1, r4, #80	; 0x50
    4f42:	f003 f900 	bl	8146 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    4f46:	7660      	strb	r0, [r4, #25]
    4f48:	2500      	movs	r5, #0
    4f4a:	6425      	str	r5, [r4, #64]	; 0x40
    4f4c:	f002 f9a9 	bl	72a2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    4f50:	6460      	str	r0, [r4, #68]	; 0x44
    4f52:	2100      	movs	r1, #0
    4f54:	4620      	mov	r0, r4
    4f56:	f003 fbe8 	bl	872a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    4f5a:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    4f5e:	78a0      	ldrb	r0, [r4, #2]
    4f60:	0740      	lsls	r0, r0, #29
    4f62:	d508      	bpl.n	4f76 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    4f64:	7e20      	ldrb	r0, [r4, #24]
    4f66:	2800      	cmp	r0, #0
    4f68:	d005      	beq.n	4f76 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    4f6a:	4620      	mov	r0, r4
    4f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f70:	2100      	movs	r1, #0
    4f72:	f000 bd91 	b.w	5a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x598>
    4f76:	bd70      	pop	{r4, r5, r6, pc}

00004f78 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    4f78:	b508      	push	{r3, lr}
    4f7a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    4f7e:	f88d 2000 	strb.w	r2, [sp]
    4f82:	9a00      	ldr	r2, [sp, #0]
    4f84:	9200      	str	r2, [sp, #0]
    4f86:	f89d 3000 	ldrb.w	r3, [sp]
    4f8a:	2200      	movs	r2, #0
    4f8c:	b163      	cbz	r3, 4fa8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    4f8e:	704a      	strb	r2, [r1, #1]
    4f90:	2317      	movs	r3, #23
    4f92:	700b      	strb	r3, [r1, #0]
    4f94:	f850 3fa9 	ldr.w	r3, [r0, #169]!
    4f98:	604b      	str	r3, [r1, #4]
    4f9a:	6843      	ldr	r3, [r0, #4]
    4f9c:	608b      	str	r3, [r1, #8]
    4f9e:	7a03      	ldrb	r3, [r0, #8]
    4fa0:	730b      	strb	r3, [r1, #12]
    4fa2:	f800 2c01 	strb.w	r2, [r0, #-1]
    4fa6:	e03b      	b.n	5020 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    4fa8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    4fac:	f88d 3000 	strb.w	r3, [sp]
    4fb0:	9b00      	ldr	r3, [sp, #0]
    4fb2:	9300      	str	r3, [sp, #0]
    4fb4:	f89d 3000 	ldrb.w	r3, [sp]
    4fb8:	b143      	cbz	r3, 4fcc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    4fba:	704a      	strb	r2, [r1, #1]
    4fbc:	2305      	movs	r3, #5
    4fbe:	700b      	strb	r3, [r1, #0]
    4fc0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    4fc4:	604b      	str	r3, [r1, #4]
    4fc6:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    4fca:	e029      	b.n	5020 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    4fcc:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    4fd0:	f88d 3000 	strb.w	r3, [sp]
    4fd4:	9b00      	ldr	r3, [sp, #0]
    4fd6:	9300      	str	r3, [sp, #0]
    4fd8:	f89d 3000 	ldrb.w	r3, [sp]
    4fdc:	b11b      	cbz	r3, 4fe6 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    4fde:	bf00      	nop
    4fe0:	f003 fb7a 	bl	86d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    4fe4:	e01c      	b.n	5020 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    4fe6:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    4fea:	f88d 3000 	strb.w	r3, [sp]
    4fee:	9b00      	ldr	r3, [sp, #0]
    4ff0:	9300      	str	r3, [sp, #0]
    4ff2:	f89d 3000 	ldrb.w	r3, [sp]
    4ff6:	b1ab      	cbz	r3, 5024 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    4ff8:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    4ffc:	f88d 3000 	strb.w	r3, [sp]
    5000:	9b00      	ldr	r3, [sp, #0]
    5002:	9300      	str	r3, [sp, #0]
    5004:	f89d 3000 	ldrb.w	r3, [sp]
    5008:	2b00      	cmp	r3, #0
    500a:	d1e9      	bne.n	4fe0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    500c:	704a      	strb	r2, [r1, #1]
    500e:	2314      	movs	r3, #20
    5010:	700b      	strb	r3, [r1, #0]
    5012:	f850 3f9c 	ldr.w	r3, [r0, #156]!
    5016:	604b      	str	r3, [r1, #4]
    5018:	8883      	ldrh	r3, [r0, #4]
    501a:	810b      	strh	r3, [r1, #8]
    501c:	f800 2c02 	strb.w	r2, [r0, #-2]
    5020:	2001      	movs	r0, #1
    5022:	bd08      	pop	{r3, pc}
    5024:	2000      	movs	r0, #0
    5026:	bd08      	pop	{r3, pc}

00005028 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    5028:	b530      	push	{r4, r5, lr}
    502a:	460c      	mov	r4, r1
    502c:	b08d      	sub	sp, #52	; 0x34
    502e:	4605      	mov	r5, r0
    5030:	4601      	mov	r1, r0
    5032:	2220      	movs	r2, #32
    5034:	a802      	add	r0, sp, #8
    5036:	f002 faa9 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    503a:	a80a      	add	r0, sp, #40	; 0x28
    503c:	f003 fc22 	bl	8884 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    5040:	7aa0      	ldrb	r0, [r4, #10]
    5042:	f88d 0018 	strb.w	r0, [sp, #24]
    5046:	7820      	ldrb	r0, [r4, #0]
    5048:	f88d 0008 	strb.w	r0, [sp, #8]
    504c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    5050:	f8ad 0000 	strh.w	r0, [sp]
    5054:	f89d 0000 	ldrb.w	r0, [sp]
    5058:	f000 0101 	and.w	r1, r0, #1
    505c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    5060:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    5064:	f3c0 0280 	ubfx	r2, r0, #2, #1
    5068:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    506c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    5070:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    5074:	f3c0 1200 	ubfx	r2, r0, #4, #1
    5078:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    507c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    5080:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    5084:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5088:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    508c:	f8ad 000a 	strh.w	r0, [sp, #10]
    5090:	7d20      	ldrb	r0, [r4, #20]
    5092:	2801      	cmp	r0, #1
    5094:	d006      	beq.n	50a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    5096:	2802      	cmp	r0, #2
    5098:	d004      	beq.n	50a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    509a:	f240 2185 	movw	r1, #645	; 0x285
    509e:	2006      	movs	r0, #6
    50a0:	f7fe fd0a 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a4:	f88d 000c 	strb.w	r0, [sp, #12]
    50a8:	7a61      	ldrb	r1, [r4, #9]
    50aa:	a80a      	add	r0, sp, #40	; 0x28
    50ac:	f003 fbd1 	bl	8852 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    50b0:	7d20      	ldrb	r0, [r4, #20]
    50b2:	2101      	movs	r1, #1
    50b4:	2802      	cmp	r0, #2
    50b6:	d102      	bne.n	50be <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    50b8:	7d60      	ldrb	r0, [r4, #21]
    50ba:	1c40      	adds	r0, r0, #1
    50bc:	b2c1      	uxtb	r1, r0
    50be:	7ea0      	ldrb	r0, [r4, #26]
    50c0:	1c40      	adds	r0, r0, #1
    50c2:	b2c2      	uxtb	r2, r0
    50c4:	a80a      	add	r0, sp, #40	; 0x28
    50c6:	f003 fb8b 	bl	87e0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    50ca:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    50ce:	0700      	lsls	r0, r0, #28
    50d0:	d501      	bpl.n	50d6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    50d2:	2000      	movs	r0, #0
    50d4:	e020      	b.n	5118 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    50d6:	a80a      	add	r0, sp, #40	; 0x28
    50d8:	f003 fb94 	bl	8804 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    50dc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    50e0:	2228      	movs	r2, #40	; 0x28
    50e2:	f000 fd39 	bl	5b58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    50e6:	f240 2171 	movw	r1, #625	; 0x271
    50ea:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    50ee:	fbb0 f0f1 	udiv	r0, r0, r1
    50f2:	4348      	muls	r0, r1
    50f4:	f8d4 1002 	ldr.w	r1, [r4, #2]
    50f8:	f240 2371 	movw	r3, #625	; 0x271
    50fc:	0a0a      	lsrs	r2, r1, #8
    50fe:	f240 2171 	movw	r1, #625	; 0x271
    5102:	434a      	muls	r2, r1
    5104:	f8d4 1005 	ldr.w	r1, [r4, #5]
    5108:	0a09      	lsrs	r1, r1, #8
    510a:	4359      	muls	r1, r3
    510c:	4290      	cmp	r0, r2
    510e:	d801      	bhi.n	5114 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    5110:	9204      	str	r2, [sp, #16]
    5112:	e004      	b.n	511e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    5114:	4288      	cmp	r0, r1
    5116:	d801      	bhi.n	511c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    5118:	9004      	str	r0, [sp, #16]
    511a:	e000      	b.n	511e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    511c:	9104      	str	r1, [sp, #16]
    511e:	7ca0      	ldrb	r0, [r4, #18]
    5120:	f88d 0017 	strb.w	r0, [sp, #23]
    5124:	7e20      	ldrb	r0, [r4, #24]
    5126:	2801      	cmp	r0, #1
    5128:	d000      	beq.n	512c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    512a:	2000      	movs	r0, #0
    512c:	f88d 0014 	strb.w	r0, [sp, #20]
    5130:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    5134:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    5138:	2220      	movs	r2, #32
    513a:	a902      	add	r1, sp, #8
    513c:	4628      	mov	r0, r5
    513e:	f002 fa25 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5142:	980a      	ldr	r0, [sp, #40]	; 0x28
    5144:	6228      	str	r0, [r5, #32]
    5146:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    514a:	84a8      	strh	r0, [r5, #36]	; 0x24
    514c:	7ae0      	ldrb	r0, [r4, #11]
    514e:	b168      	cbz	r0, 516c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    5150:	2802      	cmp	r0, #2
    5152:	d00b      	beq.n	516c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    5154:	f05f 0001 	movs.w	r0, #1
    5158:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    515c:	68e0      	ldr	r0, [r4, #12]
    515e:	6528      	str	r0, [r5, #80]	; 0x50
    5160:	8a20      	ldrh	r0, [r4, #16]
    5162:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    5166:	b00d      	add	sp, #52	; 0x34
    5168:	2000      	movs	r0, #0
    516a:	bd30      	pop	{r4, r5, pc}
    516c:	2000      	movs	r0, #0
    516e:	e7f3      	b.n	5158 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

00005170 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    5170:	4a0a      	ldr	r2, [pc, #40]	; (519c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    5172:	b510      	push	{r4, lr}
    5174:	2100      	movs	r1, #0
    5176:	7011      	strb	r1, [r2, #0]
    5178:	4c09      	ldr	r4, [pc, #36]	; (51a0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    517a:	6060      	str	r0, [r4, #4]
    517c:	f000 f822 	bl	51c4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    5180:	b110      	cbz	r0, 5188 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    5182:	f44f 7148 	mov.w	r1, #800	; 0x320
    5186:	e004      	b.n	5192 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    5188:	68a0      	ldr	r0, [r4, #8]
    518a:	2800      	cmp	r0, #0
    518c:	d104      	bne.n	5198 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    518e:	f240 3123 	movw	r1, #803	; 0x323
    5192:	202d      	movs	r0, #45	; 0x2d
    5194:	f7fe fc90 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5198:	bd10      	pop	{r4, pc}
    519a:	0000      	.short	0x0000
    519c:	20000944 	.word	0x20000944
    51a0:	200000c0 	.word	0x200000c0

000051a4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    51a4:	4902      	ldr	r1, [pc, #8]	; (51b0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    51a6:	4801      	ldr	r0, [pc, #4]	; (51ac <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    51a8:	6088      	str	r0, [r1, #8]
    51aa:	4770      	bx	lr
    51ac:	00005b40 	.word	0x00005b40
    51b0:	200000c0 	.word	0x200000c0

000051b4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    51b4:	4902      	ldr	r1, [pc, #8]	; (51c0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    51b6:	6008      	str	r0, [r1, #0]
    51b8:	6889      	ldr	r1, [r1, #8]
    51ba:	6809      	ldr	r1, [r1, #0]
    51bc:	4708      	bx	r1
    51be:	0000      	.short	0x0000
    51c0:	200000c0 	.word	0x200000c0

000051c4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    51c4:	4808      	ldr	r0, [pc, #32]	; (51e8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    51c6:	b510      	push	{r4, lr}
    51c8:	7801      	ldrb	r1, [r0, #0]
    51ca:	b111      	cbz	r1, 51d2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    51cc:	240c      	movs	r4, #12
    51ce:	4620      	mov	r0, r4
    51d0:	bd10      	pop	{r4, pc}
    51d2:	2400      	movs	r4, #0
    51d4:	6004      	str	r4, [r0, #0]
    51d6:	6044      	str	r4, [r0, #4]
    51d8:	6084      	str	r4, [r0, #8]
    51da:	60c4      	str	r4, [r0, #12]
    51dc:	f001 f92e 	bl	643c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    51e0:	f001 f82a 	bl	6238 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    51e4:	e7f3      	b.n	51ce <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    51e6:	0000      	.short	0x0000
    51e8:	20000944 	.word	0x20000944

000051ec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    51ec:	4904      	ldr	r1, [pc, #16]	; (5200 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    51ee:	b510      	push	{r4, lr}
    51f0:	7809      	ldrb	r1, [r1, #0]
    51f2:	2901      	cmp	r1, #1
    51f4:	d101      	bne.n	51fa <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    51f6:	f000 fb6f 	bl	58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    51fa:	2000      	movs	r0, #0
    51fc:	bd10      	pop	{r4, pc}
    51fe:	0000      	.short	0x0000
    5200:	20000944 	.word	0x20000944
    5204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5208:	000f      	movs	r7, r1
    520a:	4604      	mov	r4, r0
    520c:	d023      	beq.n	5256 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x6a>
    520e:	f104 0020 	add.w	r0, r4, #32
    5212:	4605      	mov	r5, r0
    5214:	f003 fb1f 	bl	8856 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5218:	b9b0      	cbnz	r0, 5248 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x5c>
    521a:	78a0      	ldrb	r0, [r4, #2]
    521c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5220:	b350      	cbz	r0, 5278 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x8c>
    5222:	4628      	mov	r0, r5
    5224:	f003 faee 	bl	8804 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5228:	4606      	mov	r6, r0
    522a:	4628      	mov	r0, r5
    522c:	f003 fb13 	bl	8856 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5230:	1a30      	subs	r0, r6, r0
    5232:	b2c0      	uxtb	r0, r0
    5234:	f003 fb64 	bl	8900 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    5238:	4601      	mov	r1, r0
    523a:	4835      	ldr	r0, [pc, #212]	; (5310 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x124>)
    523c:	6842      	ldr	r2, [r0, #4]
    523e:	4411      	add	r1, r2
    5240:	6041      	str	r1, [r0, #4]
    5242:	4628      	mov	r0, r5
    5244:	f003 fb25 	bl	8892 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    5248:	4628      	mov	r0, r5
    524a:	f003 fae7 	bl	881c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    524e:	4601      	mov	r1, r0
    5250:	4620      	mov	r0, r4
    5252:	f003 faa6 	bl	87a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    5256:	4d2f      	ldr	r5, [pc, #188]	; (5314 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x128>)
    5258:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    525c:	2100      	movs	r1, #0
    525e:	6868      	ldr	r0, [r5, #4]
    5260:	8001      	strh	r1, [r0, #0]
    5262:	f003 fab4 	bl	87ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    5266:	8860      	ldrh	r0, [r4, #2]
    5268:	2813      	cmp	r0, #19
    526a:	d013      	beq.n	5294 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xa8>
    526c:	dc09      	bgt.n	5282 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x96>
    526e:	2810      	cmp	r0, #16
    5270:	d036      	beq.n	52e0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf4>
    5272:	2812      	cmp	r0, #18
    5274:	d109      	bne.n	528a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x9e>
    5276:	e031      	b.n	52dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf0>
    5278:	4620      	mov	r0, r4
    527a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    527e:	f000 bb2b 	b.w	58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    5282:	2815      	cmp	r0, #21
    5284:	d00f      	beq.n	52a6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    5286:	281d      	cmp	r0, #29
    5288:	d00d      	beq.n	52a6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    528a:	f240 6196 	movw	r1, #1686	; 0x696
    528e:	202d      	movs	r0, #45	; 0x2d
    5290:	f7fe fc12 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5294:	2100      	movs	r1, #0
    5296:	6868      	ldr	r0, [r5, #4]
    5298:	f003 f86e 	bl	8378 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    529c:	2101      	movs	r1, #1
    529e:	6868      	ldr	r0, [r5, #4]
    52a0:	f003 fa95 	bl	87ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    52a4:	e020      	b.n	52e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xfc>
    52a6:	2101      	movs	r1, #1
    52a8:	6868      	ldr	r0, [r5, #4]
    52aa:	f003 f865 	bl	8378 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    52ae:	2101      	movs	r1, #1
    52b0:	6868      	ldr	r0, [r5, #4]
    52b2:	f003 fa8c 	bl	87ce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    52b6:	b136      	cbz	r6, 52c6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xda>
    52b8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    52bc:	6868      	ldr	r0, [r5, #4]
    52be:	f003 f876 	bl	83ae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    52c2:	2101      	movs	r1, #1
    52c4:	e006      	b.n	52d4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe8>
    52c6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    52ca:	6868      	ldr	r0, [r5, #4]
    52cc:	f003 f86f 	bl	83ae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    52d0:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    52d4:	6868      	ldr	r0, [r5, #4]
    52d6:	f003 f870 	bl	83ba <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    52da:	e005      	b.n	52e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xfc>
    52dc:	2106      	movs	r1, #6
    52de:	e000      	b.n	52e2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf6>
    52e0:	2102      	movs	r1, #2
    52e2:	6868      	ldr	r0, [r5, #4]
    52e4:	f003 f848 	bl	8378 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    52e8:	4620      	mov	r0, r4
    52ea:	f000 fc03 	bl	5af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f4>
    52ee:	8860      	ldrh	r0, [r4, #2]
    52f0:	281d      	cmp	r0, #29
    52f2:	d006      	beq.n	5302 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x116>
    52f4:	2815      	cmp	r0, #21
    52f6:	d004      	beq.n	5302 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x116>
    52f8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    52fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    52fc:	6868      	ldr	r0, [r5, #4]
    52fe:	f003 f82b 	bl	8358 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    5302:	4639      	mov	r1, r7
    5304:	4620      	mov	r0, r4
    5306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    530a:	f000 b9e5 	b.w	56d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    530e:	0000      	.short	0x0000
    5310:	20000944 	.word	0x20000944
    5314:	200000c0 	.word	0x200000c0
    5318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    531c:	4d28      	ldr	r5, [pc, #160]	; (53c0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1d4>)
    531e:	4680      	mov	r8, r0
    5320:	7828      	ldrb	r0, [r5, #0]
    5322:	2802      	cmp	r0, #2
    5324:	d005      	beq.n	5332 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x146>
    5326:	7828      	ldrb	r0, [r5, #0]
    5328:	2803      	cmp	r0, #3
    532a:	d002      	beq.n	5332 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x146>
    532c:	f640 4191 	movw	r1, #3217	; 0xc91
    5330:	e01f      	b.n	5372 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x186>
    5332:	4c24      	ldr	r4, [pc, #144]	; (53c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1d8>)
    5334:	6820      	ldr	r0, [r4, #0]
    5336:	7b01      	ldrb	r1, [r0, #12]
    5338:	b109      	cbz	r1, 533e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x152>
    533a:	f003 fa3d 	bl	87b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    533e:	6860      	ldr	r0, [r4, #4]
    5340:	2700      	movs	r7, #0
    5342:	f1b8 0f00 	cmp.w	r8, #0
    5346:	7800      	ldrb	r0, [r0, #0]
    5348:	f000 060f 	and.w	r6, r0, #15
    534c:	d01f      	beq.n	538e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1a2>
    534e:	f001 fa3b 	bl	67c8 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    5352:	b1e0      	cbz	r0, 538e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1a2>
    5354:	4639      	mov	r1, r7
    5356:	6860      	ldr	r0, [r4, #4]
    5358:	f002 ffc4 	bl	82e4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    535c:	b1b8      	cbz	r0, 538e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1a2>
    535e:	782a      	ldrb	r2, [r5, #0]
    5360:	6820      	ldr	r0, [r4, #0]
    5362:	4631      	mov	r1, r6
    5364:	2a02      	cmp	r2, #2
    5366:	d007      	beq.n	5378 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18c>
    5368:	782a      	ldrb	r2, [r5, #0]
    536a:	2a03      	cmp	r2, #3
    536c:	d004      	beq.n	5378 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18c>
    536e:	f640 416a 	movw	r1, #3178	; 0xc6a
    5372:	202d      	movs	r0, #45	; 0x2d
    5374:	f7fe fba0 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5378:	68a2      	ldr	r2, [r4, #8]
    537a:	782b      	ldrb	r3, [r5, #0]
    537c:	6952      	ldr	r2, [r2, #20]
    537e:	f06f 0607 	mvn.w	r6, #7
    5382:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5386:	58d2      	ldr	r2, [r2, r3]
    5388:	4790      	blx	r2
    538a:	4606      	mov	r6, r0
    538c:	e000      	b.n	5390 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1a4>
    538e:	2601      	movs	r6, #1
    5390:	7ba8      	ldrb	r0, [r5, #14]
    5392:	b118      	cbz	r0, 539c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b0>
    5394:	f001 f852 	bl	643c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5398:	f000 ff4e 	bl	6238 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    539c:	2e00      	cmp	r6, #0
    539e:	d00d      	beq.n	53bc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1d0>
    53a0:	6820      	ldr	r0, [r4, #0]
    53a2:	f003 fac3 	bl	892c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    53a6:	b120      	cbz	r0, 53b2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c6>
    53a8:	68a0      	ldr	r0, [r4, #8]
    53aa:	6880      	ldr	r0, [r0, #8]
    53ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53b0:	4700      	bx	r0
    53b2:	6820      	ldr	r0, [r4, #0]
    53b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53b8:	f000 ba8e 	b.w	58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    53bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53c0:	20000944 	.word	0x20000944
    53c4:	200000c0 	.word	0x200000c0
    53c8:	b510      	push	{r4, lr}
    53ca:	2903      	cmp	r1, #3
    53cc:	d002      	beq.n	53d4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1e8>
    53ce:	2905      	cmp	r1, #5
    53d0:	d10a      	bne.n	53e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1fc>
    53d2:	e002      	b.n	53da <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1ee>
    53d4:	f000 fb26 	bl	5a24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x524>
    53d8:	e003      	b.n	53e2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1f6>
    53da:	4904      	ldr	r1, [pc, #16]	; (53ec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x200>)
    53dc:	6809      	ldr	r1, [r1, #0]
    53de:	b109      	cbz	r1, 53e4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1f8>
    53e0:	4788      	blx	r1
    53e2:	b108      	cbz	r0, 53e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1fc>
    53e4:	2000      	movs	r0, #0
    53e6:	bd10      	pop	{r4, pc}
    53e8:	2001      	movs	r0, #1
    53ea:	bd10      	pop	{r4, pc}
    53ec:	200000cc 	.word	0x200000cc
    53f0:	4a09      	ldr	r2, [pc, #36]	; (5418 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x22c>)
    53f2:	0003      	movs	r3, r0
    53f4:	6810      	ldr	r0, [r2, #0]
    53f6:	d001      	beq.n	53fc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x210>
    53f8:	f000 ba6e 	b.w	58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    53fc:	2900      	cmp	r1, #0
    53fe:	d009      	beq.n	5414 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x228>
    5400:	6891      	ldr	r1, [r2, #8]
    5402:	4a06      	ldr	r2, [pc, #24]	; (541c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x230>)
    5404:	6909      	ldr	r1, [r1, #16]
    5406:	7812      	ldrb	r2, [r2, #0]
    5408:	f06f 030f 	mvn.w	r3, #15
    540c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5410:	5889      	ldr	r1, [r1, r2]
    5412:	4708      	bx	r1
    5414:	4770      	bx	lr
    5416:	0000      	.short	0x0000
    5418:	200000c0 	.word	0x200000c0
    541c:	20000944 	.word	0x20000944
    5420:	b570      	push	{r4, r5, r6, lr}
    5422:	4604      	mov	r4, r0
    5424:	8840      	ldrh	r0, [r0, #2]
    5426:	2500      	movs	r5, #0
    5428:	2810      	cmp	r0, #16
    542a:	d014      	beq.n	5456 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x26a>
    542c:	4e14      	ldr	r6, [pc, #80]	; (5480 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x294>)
    542e:	7bb0      	ldrb	r0, [r6, #14]
    5430:	b120      	cbz	r0, 543c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x250>
    5432:	f000 ff21 	bl	6278 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    5436:	2040      	movs	r0, #64	; 0x40
    5438:	f001 f810 	bl	645c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    543c:	4811      	ldr	r0, [pc, #68]	; (5484 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x298>)
    543e:	6840      	ldr	r0, [r0, #4]
    5440:	f001 fa82 	bl	6948 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5444:	78a0      	ldrb	r0, [r4, #2]
    5446:	0740      	lsls	r0, r0, #29
    5448:	d413      	bmi.n	5472 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x286>
    544a:	7be0      	ldrb	r0, [r4, #15]
    544c:	2801      	cmp	r0, #1
    544e:	d008      	beq.n	5462 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x276>
    5450:	2803      	cmp	r0, #3
    5452:	d006      	beq.n	5462 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x276>
    5454:	e006      	b.n	5464 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x278>
    5456:	4620      	mov	r0, r4
    5458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    545c:	2101      	movs	r1, #1
    545e:	f7ff bed1 	b.w	5204 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    5462:	2510      	movs	r5, #16
    5464:	2100      	movs	r1, #0
    5466:	f045 020e 	orr.w	r2, r5, #14
    546a:	7923      	ldrb	r3, [r4, #4]
    546c:	4608      	mov	r0, r1
    546e:	f001 faf5 	bl	6a5c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5472:	2000      	movs	r0, #0
    5474:	f001 f91c 	bl	66b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5478:	2002      	movs	r0, #2
    547a:	7030      	strb	r0, [r6, #0]
    547c:	bd70      	pop	{r4, r5, r6, pc}
    547e:	0000      	.short	0x0000
    5480:	20000944 	.word	0x20000944
    5484:	200000c0 	.word	0x200000c0
    5488:	b510      	push	{r4, lr}
    548a:	4c12      	ldr	r4, [pc, #72]	; (54d4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2e8>)
    548c:	6820      	ldr	r0, [r4, #0]
    548e:	f000 f825 	bl	54dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f0>
    5492:	6820      	ldr	r0, [r4, #0]
    5494:	f003 fa4a 	bl	892c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    5498:	2800      	cmp	r0, #0
    549a:	6820      	ldr	r0, [r4, #0]
    549c:	d00b      	beq.n	54b6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2ca>
    549e:	490e      	ldr	r1, [pc, #56]	; (54d8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2ec>)
    54a0:	780a      	ldrb	r2, [r1, #0]
    54a2:	2a02      	cmp	r2, #2
    54a4:	d00b      	beq.n	54be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2d2>
    54a6:	780a      	ldrb	r2, [r1, #0]
    54a8:	2a03      	cmp	r2, #3
    54aa:	d008      	beq.n	54be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2d2>
    54ac:	f640 31a5 	movw	r1, #2981	; 0xba5
    54b0:	202d      	movs	r0, #45	; 0x2d
    54b2:	f7fe fb01 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54ba:	f000 ba0d 	b.w	58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    54be:	68a2      	ldr	r2, [r4, #8]
    54c0:	7809      	ldrb	r1, [r1, #0]
    54c2:	68d2      	ldr	r2, [r2, #12]
    54c4:	f06f 0307 	mvn.w	r3, #7
    54c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    54cc:	5851      	ldr	r1, [r2, r1]
    54ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54d2:	4708      	bx	r1
    54d4:	200000c0 	.word	0x200000c0
    54d8:	20000944 	.word	0x20000944
    54dc:	b510      	push	{r4, lr}
    54de:	7b01      	ldrb	r1, [r0, #12]
    54e0:	b109      	cbz	r1, 54e6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2fa>
    54e2:	f003 f969 	bl	87b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    54e6:	4805      	ldr	r0, [pc, #20]	; (54fc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x310>)
    54e8:	7b80      	ldrb	r0, [r0, #14]
    54ea:	2800      	cmp	r0, #0
    54ec:	d005      	beq.n	54fa <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x30e>
    54ee:	f000 ffa5 	bl	643c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    54f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54f6:	f000 be9f 	b.w	6238 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    54fa:	bd10      	pop	{r4, pc}
    54fc:	20000944 	.word	0x20000944

00005500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    5500:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5504:	4d5a      	ldr	r5, [pc, #360]	; (5670 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    5506:	4604      	mov	r4, r0
    5508:	7828      	ldrb	r0, [r5, #0]
    550a:	bbe8      	cbnz	r0, 5588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    550c:	7820      	ldrb	r0, [r4, #0]
    550e:	28ff      	cmp	r0, #255	; 0xff
    5510:	d049      	beq.n	55a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    5512:	f04f 0900 	mov.w	r9, #0
    5516:	f8a5 900c 	strh.w	r9, [r5, #12]
    551a:	f8c5 9004 	str.w	r9, [r5, #4]
    551e:	f885 9001 	strb.w	r9, [r5, #1]
    5522:	f885 9002 	strb.w	r9, [r5, #2]
    5526:	f884 9061 	strb.w	r9, [r4, #97]	; 0x61
    552a:	4648      	mov	r0, r9
    552c:	f001 f918 	bl	6760 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    5530:	4b50      	ldr	r3, [pc, #320]	; (5674 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    5532:	f8df a144 	ldr.w	sl, [pc, #324]	; 5678 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    5536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5538:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    553c:	f8da 0008 	ldr.w	r0, [sl, #8]
    5540:	6840      	ldr	r0, [r0, #4]
    5542:	9003      	str	r0, [sp, #12]
    5544:	4668      	mov	r0, sp
    5546:	f001 f8ab 	bl	66a0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    554a:	f001 f96f 	bl	682c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    554e:	f000 ff75 	bl	643c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5552:	f000 fe71 	bl	6238 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5556:	4847      	ldr	r0, [pc, #284]	; (5674 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    5558:	1f40      	subs	r0, r0, #5
    555a:	f001 fad1 	bl	6b00 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    555e:	4845      	ldr	r0, [pc, #276]	; (5674 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    5560:	3808      	subs	r0, #8
    5562:	f001 fad9 	bl	6b18 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5566:	f104 0020 	add.w	r0, r4, #32
    556a:	4606      	mov	r6, r0
    556c:	f003 f991 	bl	8892 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    5570:	4630      	mov	r0, r6
    5572:	f003 f953 	bl	881c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    5576:	4601      	mov	r1, r0
    5578:	4620      	mov	r0, r4
    557a:	f003 f912 	bl	87a2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    557e:	f994 000e 	ldrsb.w	r0, [r4, #14]
    5582:	f001 f9db 	bl	693c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5586:	e000      	b.n	558a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    5588:	e00d      	b.n	55a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    558a:	7921      	ldrb	r1, [r4, #4]
    558c:	2000      	movs	r0, #0
    558e:	f001 f813 	bl	65b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5592:	2601      	movs	r6, #1
    5594:	60a8      	str	r0, [r5, #8]
    5596:	b150      	cbz	r0, 55ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    5598:	210f      	movs	r1, #15
    559a:	2005      	movs	r0, #5
    559c:	f000 ff72 	bl	6484 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    55a0:	7ea0      	ldrb	r0, [r4, #26]
    55a2:	b958      	cbnz	r0, 55bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    55a4:	e005      	b.n	55b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb2>
    55a6:	200c      	movs	r0, #12
    55a8:	b004      	add	sp, #16
    55aa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    55ae:	702e      	strb	r6, [r5, #0]
    55b0:	e05b      	b.n	566a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16a>
    55b2:	7e20      	ldrb	r0, [r4, #24]
    55b4:	b910      	cbnz	r0, 55bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    55b6:	78a0      	ldrb	r0, [r4, #2]
    55b8:	0740      	lsls	r0, r0, #29
    55ba:	d52b      	bpl.n	5614 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    55bc:	f001 fe71 	bl	72a2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    55c0:	4683      	mov	fp, r0
    55c2:	4659      	mov	r1, fp
    55c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
    55c6:	f7fb ff89 	bl	14dc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    55ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 567c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    55ce:	4607      	mov	r7, r0
    55d0:	fb90 f1f8 	sdiv	r1, r0, r8
    55d4:	fb08 7011 	mls	r0, r8, r1, r7
    55d8:	4241      	negs	r1, r0
    55da:	4658      	mov	r0, fp
    55dc:	f7fb ff4c 	bl	1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    55e0:	6460      	str	r0, [r4, #68]	; 0x44
    55e2:	fb97 f0f8 	sdiv	r0, r7, r8
    55e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    55e8:	4408      	add	r0, r1
    55ea:	6420      	str	r0, [r4, #64]	; 0x40
    55ec:	f7ff f98a 	bl	4904 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    55f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    55f2:	4288      	cmp	r0, r1
    55f4:	d80e      	bhi.n	5614 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    55f6:	e9c4 9b10 	strd	r9, fp, [r4, #64]	; 0x40
    55fa:	2101      	movs	r1, #1
    55fc:	4620      	mov	r0, r4
    55fe:	f003 f894 	bl	872a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    5602:	78a0      	ldrb	r0, [r4, #2]
    5604:	0740      	lsls	r0, r0, #29
    5606:	d505      	bpl.n	5614 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    5608:	7e20      	ldrb	r0, [r4, #24]
    560a:	b118      	cbz	r0, 5614 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    560c:	2101      	movs	r1, #1
    560e:	4620      	mov	r0, r4
    5610:	f000 fa42 	bl	5a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x598>
    5614:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    5618:	f104 0049 	add.w	r0, r4, #73	; 0x49
    561c:	f001 fa64 	bl	6ae8 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    5620:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    5624:	2802      	cmp	r0, #2
    5626:	d10a      	bne.n	563e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    5628:	4622      	mov	r2, r4
    562a:	e9d2 3719 	ldrd	r3, r7, [r2, #100]	; 0x64
    562e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    5632:	e9c4 370c 	strd	r3, r7, [r4, #48]	; 0x30
    5636:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
    563a:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    563e:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    5642:	2802      	cmp	r0, #2
    5644:	d109      	bne.n	565a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    5646:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    564a:	e9d4 231b 	ldrd	r2, r3, [r4, #108]	; 0x6c
    564e:	e9c4 101b 	strd	r1, r0, [r4, #108]	; 0x6c
    5652:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    5656:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    565a:	f7ff f9b9 	bl	49d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    565e:	2103      	movs	r1, #3
    5660:	f8da 0004 	ldr.w	r0, [sl, #4]
    5664:	f002 fd62 	bl	812c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    5668:	73a8      	strb	r0, [r5, #14]
    566a:	2000      	movs	r0, #0
    566c:	e79c      	b.n	55a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa8>
    566e:	0000      	.short	0x0000
    5670:	20000944 	.word	0x20000944
    5674:	00005b20 	.word	0x00005b20
    5678:	200000c0 	.word	0x200000c0
    567c:	000f4240 	.word	0x000f4240
    5680:	b510      	push	{r4, lr}
    5682:	4604      	mov	r4, r0
    5684:	f7ff ff3c 	bl	5500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    5688:	2800      	cmp	r0, #0
    568a:	d108      	bne.n	569e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    568c:	4804      	ldr	r0, [pc, #16]	; (56a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    568e:	7800      	ldrb	r0, [r0, #0]
    5690:	2801      	cmp	r0, #1
    5692:	d003      	beq.n	569c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    5694:	2100      	movs	r1, #0
    5696:	4620      	mov	r0, r4
    5698:	f7ff fdb4 	bl	5204 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    569c:	2000      	movs	r0, #0
    569e:	bd10      	pop	{r4, pc}
    56a0:	20000944 	.word	0x20000944
    56a4:	480a      	ldr	r0, [pc, #40]	; (56d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    56a6:	b510      	push	{r4, lr}
    56a8:	490a      	ldr	r1, [pc, #40]	; (56d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    56aa:	6804      	ldr	r4, [r0, #0]
    56ac:	7808      	ldrb	r0, [r1, #0]
    56ae:	2800      	cmp	r0, #0
    56b0:	d00d      	beq.n	56ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    56b2:	7808      	ldrb	r0, [r1, #0]
    56b4:	2802      	cmp	r0, #2
    56b6:	d002      	beq.n	56be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    56b8:	7808      	ldrb	r0, [r1, #0]
    56ba:	2803      	cmp	r0, #3
    56bc:	d102      	bne.n	56c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    56be:	4620      	mov	r0, r4
    56c0:	f7ff ff0c 	bl	54dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f0>
    56c4:	4620      	mov	r0, r4
    56c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56ca:	f000 b905 	b.w	58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    56ce:	bd10      	pop	{r4, pc}
    56d0:	200000c0 	.word	0x200000c0
    56d4:	20000944 	.word	0x20000944
    56d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56dc:	4604      	mov	r4, r0
    56de:	4827      	ldr	r0, [pc, #156]	; (577c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    56e0:	460d      	mov	r5, r1
    56e2:	6840      	ldr	r0, [r0, #4]
    56e4:	f001 f930 	bl	6948 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    56e8:	4e25      	ldr	r6, [pc, #148]	; (5780 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    56ea:	2004      	movs	r0, #4
    56ec:	7030      	strb	r0, [r6, #0]
    56ee:	b325      	cbz	r5, 573a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    56f0:	8860      	ldrh	r0, [r4, #2]
    56f2:	2810      	cmp	r0, #16
    56f4:	d02a      	beq.n	574c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    56f6:	f104 0020 	add.w	r0, r4, #32
    56fa:	4680      	mov	r8, r0
    56fc:	68b5      	ldr	r5, [r6, #8]
    56fe:	f003 f881 	bl	8804 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5702:	4607      	mov	r7, r0
    5704:	4640      	mov	r0, r8
    5706:	f003 f8a6 	bl	8856 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    570a:	1a38      	subs	r0, r7, r0
    570c:	1e40      	subs	r0, r0, #1
    570e:	b2c0      	uxtb	r0, r0
    5710:	8861      	ldrh	r1, [r4, #2]
    5712:	2228      	movs	r2, #40	; 0x28
    5714:	f000 fa40 	bl	5b98 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    5718:	4405      	add	r5, r0
    571a:	78a0      	ldrb	r0, [r4, #2]
    571c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5720:	b130      	cbz	r0, 5730 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    5722:	6870      	ldr	r0, [r6, #4]
    5724:	4405      	add	r5, r0
    5726:	f003 f8ef 	bl	8908 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    572a:	4428      	add	r0, r5
    572c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    5730:	7922      	ldrb	r2, [r4, #4]
    5732:	4629      	mov	r1, r5
    5734:	2000      	movs	r0, #0
    5736:	f001 f915 	bl	6964 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    573a:	8860      	ldrh	r0, [r4, #2]
    573c:	2813      	cmp	r0, #19
    573e:	d013      	beq.n	5768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    5740:	dc09      	bgt.n	5756 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    5742:	2810      	cmp	r0, #16
    5744:	d018      	beq.n	5778 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    5746:	2812      	cmp	r0, #18
    5748:	d109      	bne.n	575e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    574a:	e00d      	b.n	5768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    574c:	7921      	ldrb	r1, [r4, #4]
    574e:	2000      	movs	r0, #0
    5750:	f000 fee6 	bl	6520 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    5754:	e7f1      	b.n	573a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    5756:	2815      	cmp	r0, #21
    5758:	d006      	beq.n	5768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    575a:	281d      	cmp	r0, #29
    575c:	d004      	beq.n	5768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    575e:	f640 511c 	movw	r1, #3356	; 0xd1c
    5762:	202d      	movs	r0, #45	; 0x2d
    5764:	f7fe f9a8 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5768:	7923      	ldrb	r3, [r4, #4]
    576a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    576e:	2201      	movs	r2, #1
    5770:	4611      	mov	r1, r2
    5772:	2000      	movs	r0, #0
    5774:	f001 b972 	b.w	6a5c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    577c:	200000c0 	.word	0x200000c0
    5780:	20000944 	.word	0x20000944
    5784:	b510      	push	{r4, lr}
    5786:	4604      	mov	r4, r0
    5788:	7800      	ldrb	r0, [r0, #0]
    578a:	460b      	mov	r3, r1
    578c:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    5790:	29ff      	cmp	r1, #255	; 0xff
    5792:	d010      	beq.n	57b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    5794:	f104 02ab 	add.w	r2, r4, #171	; 0xab
    5798:	1e51      	subs	r1, r2, #1
    579a:	4618      	mov	r0, r3
    579c:	f7ff f830 	bl	4800 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    57a0:	b130      	cbz	r0, 57b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    57a2:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    57a6:	f040 0002 	orr.w	r0, r0, #2
    57aa:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    57ae:	e011      	b.n	57d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    57b0:	f640 712c 	movw	r1, #3884	; 0xf2c
    57b4:	e01d      	b.n	57f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f2>
    57b6:	4810      	ldr	r0, [pc, #64]	; (57f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>)
    57b8:	6840      	ldr	r0, [r0, #4]
    57ba:	7801      	ldrb	r1, [r0, #0]
    57bc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    57c0:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    57c4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    57c8:	f8c4 10ab 	str.w	r1, [r4, #171]	; 0xab
    57cc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    57d0:	f8a4 00af 	strh.w	r0, [r4, #175]	; 0xaf
    57d4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    57d8:	287f      	cmp	r0, #127	; 0x7f
    57da:	d008      	beq.n	57ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    57dc:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
    57e0:	207f      	movs	r0, #127	; 0x7f
    57e2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    57e6:	3492      	adds	r4, #146	; 0x92
    57e8:	2001      	movs	r0, #1
    57ea:	75a0      	strb	r0, [r4, #22]
    57ec:	bd10      	pop	{r4, pc}
    57ee:	f640 51ce 	movw	r1, #3534	; 0xdce
    57f2:	202d      	movs	r0, #45	; 0x2d
    57f4:	f7fe f960 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57f8:	200000c0 	.word	0x200000c0
    57fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5800:	4604      	mov	r4, r0
    5802:	8840      	ldrh	r0, [r0, #2]
    5804:	4617      	mov	r7, r2
    5806:	4688      	mov	r8, r1
    5808:	2903      	cmp	r1, #3
    580a:	d006      	beq.n	581a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    580c:	f000 0501 	and.w	r5, r0, #1
    5810:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    5814:	b118      	cbz	r0, 581e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    5816:	2001      	movs	r0, #1
    5818:	e002      	b.n	5820 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    581a:	f3c0 0540 	ubfx	r5, r0, #1, #1
    581e:	2000      	movs	r0, #0
    5820:	4681      	mov	r9, r0
    5822:	f000 fe29 	bl	6478 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    5826:	4606      	mov	r6, r0
    5828:	f1b8 0f03 	cmp.w	r8, #3
    582c:	d025      	beq.n	587a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    582e:	2001      	movs	r0, #1
    5830:	4680      	mov	r8, r0
    5832:	ea35 0509 	bics.w	r5, r5, r9
    5836:	d046      	beq.n	58c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    5838:	4825      	ldr	r0, [pc, #148]	; (58d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    583a:	7b80      	ldrb	r0, [r0, #14]
    583c:	b138      	cbz	r0, 584e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    583e:	f002 fc78 	bl	8132 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    5842:	7038      	strb	r0, [r7, #0]
    5844:	28ff      	cmp	r0, #255	; 0xff
    5846:	d002      	beq.n	584e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    5848:	f7fe fff4 	bl	4834 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    584c:	4306      	orrs	r6, r0
    584e:	4d21      	ldr	r5, [pc, #132]	; (58d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    5850:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    5854:	6868      	ldr	r0, [r5, #4]
    5856:	7801      	ldrb	r1, [r0, #0]
    5858:	f3c1 1180 	ubfx	r1, r1, #6, #1
    585c:	4291      	cmp	r1, r2
    585e:	d106      	bne.n	586e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    5860:	2206      	movs	r2, #6
    5862:	f104 0150 	add.w	r1, r4, #80	; 0x50
    5866:	1cc0      	adds	r0, r0, #3
    5868:	f001 fe7e 	bl	7568 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    586c:	b138      	cbz	r0, 587e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    586e:	2000      	movs	r0, #0
    5870:	7839      	ldrb	r1, [r7, #0]
    5872:	29ff      	cmp	r1, #255	; 0xff
    5874:	d009      	beq.n	588a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38a>
    5876:	b9b8      	cbnz	r0, 58a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    5878:	e003      	b.n	5882 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    587a:	2002      	movs	r0, #2
    587c:	e7d8      	b.n	5830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    587e:	2001      	movs	r0, #1
    5880:	e7f6      	b.n	5870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    5882:	7e60      	ldrb	r0, [r4, #25]
    5884:	4288      	cmp	r0, r1
    5886:	d00f      	beq.n	58a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    5888:	e008      	b.n	589c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    588a:	b138      	cbz	r0, 589c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    588c:	6869      	ldr	r1, [r5, #4]
    588e:	f811 0b03 	ldrb.w	r0, [r1], #3
    5892:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5896:	f002 ff06 	bl	86a6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    589a:	b128      	cbz	r0, 58a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    589c:	2000      	movs	r0, #0
    589e:	78a1      	ldrb	r1, [r4, #2]
    58a0:	0749      	lsls	r1, r1, #29
    58a2:	d503      	bpl.n	58ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    58a4:	b990      	cbnz	r0, 58cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    58a6:	e00e      	b.n	58c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    58a8:	2001      	movs	r0, #1
    58aa:	e7f8      	b.n	589e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    58ac:	b976      	cbnz	r6, 58cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    58ae:	7be0      	ldrb	r0, [r4, #15]
    58b0:	b108      	cbz	r0, 58b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    58b2:	4540      	cmp	r0, r8
    58b4:	d107      	bne.n	58c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    58b6:	6869      	ldr	r1, [r5, #4]
    58b8:	f811 0b03 	ldrb.w	r0, [r1], #3
    58bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    58c0:	f002 fef1 	bl	86a6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    58c4:	b110      	cbz	r0, 58cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    58c6:	2000      	movs	r0, #0
    58c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58cc:	2001      	movs	r0, #1
    58ce:	e7fb      	b.n	58c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    58d0:	20000944 	.word	0x20000944
    58d4:	200000c0 	.word	0x200000c0
    58d8:	b570      	push	{r4, r5, r6, lr}
    58da:	4604      	mov	r4, r0
    58dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
    58de:	4d10      	ldr	r5, [pc, #64]	; (5920 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>)
    58e0:	1c40      	adds	r0, r0, #1
    58e2:	62a0      	str	r0, [r4, #40]	; 0x28
    58e4:	7ba8      	ldrb	r0, [r5, #14]
    58e6:	2600      	movs	r6, #0
    58e8:	b120      	cbz	r0, 58f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    58ea:	f000 fda7 	bl	643c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    58ee:	f000 fca3 	bl	6238 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    58f2:	73ae      	strb	r6, [r5, #14]
    58f4:	702e      	strb	r6, [r5, #0]
    58f6:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    58fa:	b108      	cbz	r0, 5900 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    58fc:	2101      	movs	r1, #1
    58fe:	e00a      	b.n	5916 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    5900:	7b60      	ldrb	r0, [r4, #13]
    5902:	b138      	cbz	r0, 5914 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    5904:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5906:	4288      	cmp	r0, r1
    5908:	d804      	bhi.n	5914 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    590a:	2101      	movs	r1, #1
    590c:	4620      	mov	r0, r4
    590e:	f003 f822 	bl	8956 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    5912:	bd70      	pop	{r4, r5, r6, pc}
    5914:	2100      	movs	r1, #0
    5916:	4620      	mov	r0, r4
    5918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    591c:	f003 b81b 	b.w	8956 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    5920:	20000944 	.word	0x20000944
    5924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5928:	4604      	mov	r4, r0
    592a:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    592e:	4690      	mov	r8, r2
    5930:	460d      	mov	r5, r1
    5932:	f88d 0000 	strb.w	r0, [sp]
    5936:	9800      	ldr	r0, [sp, #0]
    5938:	9000      	str	r0, [sp, #0]
    593a:	f89d 0000 	ldrb.w	r0, [sp]
    593e:	b110      	cbz	r0, 5946 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x446>
    5940:	f640 31d9 	movw	r1, #3033	; 0xbd9
    5944:	e058      	b.n	59f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    5946:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    594a:	8828      	ldrh	r0, [r5, #0]
    594c:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    5950:	2b00      	cmp	r3, #0
    5952:	d163      	bne.n	5a1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    5954:	6868      	ldr	r0, [r5, #4]
    5956:	f002 fc46 	bl	81e6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    595a:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    595e:	8928      	ldrh	r0, [r5, #8]
    5960:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    5964:	8968      	ldrh	r0, [r5, #10]
    5966:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    596a:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    596e:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    5972:	7e21      	ldrb	r1, [r4, #24]
    5974:	f104 0649 	add.w	r6, r4, #73	; 0x49
    5978:	2700      	movs	r7, #0
    597a:	f104 0980 	add.w	r9, r4, #128	; 0x80
    597e:	b129      	cbz	r1, 598c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>
    5980:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    5984:	4631      	mov	r1, r6
    5986:	f002 fd77 	bl	8478 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x92>
    598a:	b940      	cbnz	r0, 599e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    598c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    5990:	b170      	cbz	r0, 59b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    5992:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    5996:	4631      	mov	r1, r6
    5998:	f002 fd65 	bl	8466 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x80>
    599c:	b140      	cbz	r0, 59b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    599e:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    59a2:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
    59a6:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    59aa:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    59ae:	e003      	b.n	59b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
    59b0:	f8c4 7086 	str.w	r7, [r4, #134]	; 0x86
    59b4:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
    59b8:	4819      	ldr	r0, [pc, #100]	; (5a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>)
    59ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    59be:	6840      	ldr	r0, [r0, #4]
    59c0:	7801      	ldrb	r1, [r0, #0]
    59c2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    59c6:	f884 107f 	strb.w	r1, [r4, #127]	; 0x7f
    59ca:	f850 1f03 	ldr.w	r1, [r0, #3]!
    59ce:	d016      	beq.n	59fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    59d0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    59d4:	8880      	ldrh	r0, [r0, #4]
    59d6:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    59da:	464a      	mov	r2, r9
    59dc:	f104 017f 	add.w	r1, r4, #127	; 0x7f
    59e0:	4640      	mov	r0, r8
    59e2:	f7fe ff0d 	bl	4800 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    59e6:	b128      	cbz	r0, 59f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    59e8:	f814 0f7f 	ldrb.w	r0, [r4, #127]!
    59ec:	f040 0002 	orr.w	r0, r0, #2
    59f0:	7020      	strb	r0, [r4, #0]
    59f2:	e00c      	b.n	5a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    59f4:	f640 31fa 	movw	r1, #3066	; 0xbfa
    59f8:	202d      	movs	r0, #45	; 0x2d
    59fa:	f7fe f85d 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59fe:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    5a02:	8880      	ldrh	r0, [r0, #4]
    5a04:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    5a08:	f844 7f8c 	str.w	r7, [r4, #140]!
    5a0c:	80a7      	strh	r7, [r4, #4]
    5a0e:	8828      	ldrh	r0, [r5, #0]
    5a10:	f7fe fc3c 	bl	428c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5a14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a18:	f002 b9fd 	b.w	7e16 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    5a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a20:	200000c0 	.word	0x200000c0
    5a24:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5a26:	4604      	mov	r4, r0
    5a28:	20ff      	movs	r0, #255	; 0xff
    5a2a:	f88d 0000 	strb.w	r0, [sp]
    5a2e:	2501      	movs	r5, #1
    5a30:	466a      	mov	r2, sp
    5a32:	2103      	movs	r1, #3
    5a34:	4620      	mov	r0, r4
    5a36:	f7ff fee1 	bl	57fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    5a3a:	b328      	cbz	r0, 5a88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>
    5a3c:	7b20      	ldrb	r0, [r4, #12]
    5a3e:	b168      	cbz	r0, 5a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55c>
    5a40:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    5a44:	f88d 0004 	strb.w	r0, [sp, #4]
    5a48:	9801      	ldr	r0, [sp, #4]
    5a4a:	9001      	str	r0, [sp, #4]
    5a4c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5a50:	b920      	cbnz	r0, 5a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55c>
    5a52:	f89d 1000 	ldrb.w	r1, [sp]
    5a56:	4620      	mov	r0, r4
    5a58:	f7ff fe94 	bl	5784 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    5a5c:	4e0c      	ldr	r6, [pc, #48]	; (5a90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x590>)
    5a5e:	2100      	movs	r1, #0
    5a60:	6870      	ldr	r0, [r6, #4]
    5a62:	8001      	strh	r1, [r0, #0]
    5a64:	2104      	movs	r1, #4
    5a66:	f002 fc87 	bl	8378 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    5a6a:	4620      	mov	r0, r4
    5a6c:	f000 f842 	bl	5af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f4>
    5a70:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    5a72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    5a74:	6870      	ldr	r0, [r6, #4]
    5a76:	f002 fcb6 	bl	83e6 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    5a7a:	4906      	ldr	r1, [pc, #24]	; (5a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x594>)
    5a7c:	2005      	movs	r0, #5
    5a7e:	7008      	strb	r0, [r1, #0]
    5a80:	6870      	ldr	r0, [r6, #4]
    5a82:	f000 ff61 	bl	6948 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5a86:	e000      	b.n	5a8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58a>
    5a88:	2500      	movs	r5, #0
    5a8a:	4628      	mov	r0, r5
    5a8c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5a8e:	0000      	.short	0x0000
    5a90:	200000c0 	.word	0x200000c0
    5a94:	20000944 	.word	0x20000944
    5a98:	b570      	push	{r4, r5, r6, lr}
    5a9a:	4604      	mov	r4, r0
    5a9c:	460e      	mov	r6, r1
    5a9e:	7e40      	ldrb	r0, [r0, #25]
    5aa0:	f7fe fe7c 	bl	479c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5aa4:	0005      	movs	r5, r0
    5aa6:	d019      	beq.n	5adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    5aa8:	2110      	movs	r1, #16
    5aaa:	f002 fbd6 	bl	825a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5aae:	2800      	cmp	r0, #0
    5ab0:	d114      	bne.n	5adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    5ab2:	2001      	movs	r0, #1
    5ab4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    5ab8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    5abc:	4632      	mov	r2, r6
    5abe:	460c      	mov	r4, r1
    5ac0:	4628      	mov	r0, r5
    5ac2:	f002 fafe 	bl	80c2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5ac6:	4621      	mov	r1, r4
    5ac8:	4c05      	ldr	r4, [pc, #20]	; (5ae0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    5aca:	6860      	ldr	r0, [r4, #4]
    5acc:	f002 fc6f 	bl	83ae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    5ad0:	6860      	ldr	r0, [r4, #4]
    5ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ad6:	2101      	movs	r1, #1
    5ad8:	f002 bc6f 	b.w	83ba <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    5adc:	bd70      	pop	{r4, r5, r6, pc}
    5ade:	0000      	.short	0x0000
    5ae0:	200000c0 	.word	0x200000c0
    5ae4:	4802      	ldr	r0, [pc, #8]	; (5af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>)
    5ae6:	2101      	movs	r1, #1
    5ae8:	6800      	ldr	r0, [r0, #0]
    5aea:	f7ff bb8b 	b.w	5204 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    5aee:	0000      	.short	0x0000
    5af0:	200000c0 	.word	0x200000c0
    5af4:	b570      	push	{r4, r5, r6, lr}
    5af6:	4d07      	ldr	r5, [pc, #28]	; (5b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x614>)
    5af8:	4604      	mov	r4, r0
    5afa:	f100 0149 	add.w	r1, r0, #73	; 0x49
    5afe:	6868      	ldr	r0, [r5, #4]
    5b00:	f002 fc62 	bl	83c8 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    5b04:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    5b08:	6868      	ldr	r0, [r5, #4]
    5b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b0e:	f002 bc61 	b.w	83d4 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    5b12:	0000      	.short	0x0000
    5b14:	200000c0 	.word	0x200000c0
    5b18:	d6555555 	.word	0xd6555555
    5b1c:	008e89be 	.word	0x008e89be
    5b20:	00005489 	.word	0x00005489
    5b24:	00005319 	.word	0x00005319
    5b28:	000053f1 	.word	0x000053f1
    5b2c:	00000000 	.word	0x00000000
    5b30:	000053c9 	.word	0x000053c9
    5b34:	00005421 	.word	0x00005421
    5b38:	000086cd 	.word	0x000086cd
    5b3c:	000086d3 	.word	0x000086d3
    5b40:	00005681 	.word	0x00005681
    5b44:	000056a5 	.word	0x000056a5
    5b48:	00005ae5 	.word	0x00005ae5
    5b4c:	00005b3c 	.word	0x00005b3c
    5b50:	00005b34 	.word	0x00005b34
    5b54:	00005b30 	.word	0x00005b30

00005b58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    5b58:	b510      	push	{r4, lr}
    5b5a:	1e42      	subs	r2, r0, #1
    5b5c:	2a02      	cmp	r2, #2
    5b5e:	d901      	bls.n	5b64 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    5b60:	21ca      	movs	r1, #202	; 0xca
    5b62:	e009      	b.n	5b78 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    5b64:	1e40      	subs	r0, r0, #1
    5b66:	2910      	cmp	r1, #16
    5b68:	d009      	beq.n	5b7e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    5b6a:	2912      	cmp	r1, #18
    5b6c:	d00c      	beq.n	5b88 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    5b6e:	2913      	cmp	r1, #19
    5b70:	d00a      	beq.n	5b88 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    5b72:	2915      	cmp	r1, #21
    5b74:	d005      	beq.n	5b82 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    5b76:	21d8      	movs	r1, #216	; 0xd8
    5b78:	202f      	movs	r0, #47	; 0x2f
    5b7a:	f7fd ff9d 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b7e:	4905      	ldr	r1, [pc, #20]	; (5b94 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5b80:	e004      	b.n	5b8c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    5b82:	4904      	ldr	r1, [pc, #16]	; (5b94 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5b84:	1d89      	adds	r1, r1, #6
    5b86:	e001      	b.n	5b8c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    5b88:	4902      	ldr	r1, [pc, #8]	; (5b94 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5b8a:	1f89      	subs	r1, r1, #6
    5b8c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5b90:	bd10      	pop	{r4, pc}
    5b92:	0000      	.short	0x0000
    5b94:	00008920 	.word	0x00008920

00005b98 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    5b98:	1e42      	subs	r2, r0, #1
    5b9a:	b510      	push	{r4, lr}
    5b9c:	b2d2      	uxtb	r2, r2
    5b9e:	2a01      	cmp	r2, #1
    5ba0:	d903      	bls.n	5baa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    5ba2:	291d      	cmp	r1, #29
    5ba4:	d001      	beq.n	5baa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    5ba6:	21ee      	movs	r1, #238	; 0xee
    5ba8:	e00d      	b.n	5bc6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    5baa:	2913      	cmp	r1, #19
    5bac:	d013      	beq.n	5bd6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    5bae:	dc04      	bgt.n	5bba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    5bb0:	2910      	cmp	r1, #16
    5bb2:	d00b      	beq.n	5bcc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    5bb4:	2912      	cmp	r1, #18
    5bb6:	d104      	bne.n	5bc2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    5bb8:	e00d      	b.n	5bd6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    5bba:	2915      	cmp	r1, #21
    5bbc:	d008      	beq.n	5bd0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    5bbe:	291d      	cmp	r1, #29
    5bc0:	d00e      	beq.n	5be0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    5bc2:	f44f 7181 	mov.w	r1, #258	; 0x102
    5bc6:	202f      	movs	r0, #47	; 0x2f
    5bc8:	f7fd ff76 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bcc:	4807      	ldr	r0, [pc, #28]	; (5bec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5bce:	e004      	b.n	5bda <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    5bd0:	4806      	ldr	r0, [pc, #24]	; (5bec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5bd2:	3008      	adds	r0, #8
    5bd4:	e001      	b.n	5bda <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    5bd6:	4805      	ldr	r0, [pc, #20]	; (5bec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5bd8:	1d00      	adds	r0, r0, #4
    5bda:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    5bde:	bd10      	pop	{r4, pc}
    5be0:	f240 315a 	movw	r1, #858	; 0x35a
    5be4:	fb10 f001 	smulbb	r0, r0, r1
    5be8:	bd10      	pop	{r4, pc}
    5bea:	0000      	.short	0x0000
    5bec:	0000890e 	.word	0x0000890e

00005bf0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    5bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bf4:	4604      	mov	r4, r0
    5bf6:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    5bfa:	4615      	mov	r5, r2
    5bfc:	460f      	mov	r7, r1
    5bfe:	2800      	cmp	r0, #0
    5c00:	d15d      	bne.n	5cbe <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    5c02:	4621      	mov	r1, r4
    5c04:	4844      	ldr	r0, [pc, #272]	; (5d18 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    5c06:	f7fc fae3 	bl	21d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5c0a:	4606      	mov	r6, r0
    5c0c:	2820      	cmp	r0, #32
    5c0e:	d056      	beq.n	5cbe <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    5c10:	2234      	movs	r2, #52	; 0x34
    5c12:	2100      	movs	r1, #0
    5c14:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    5c18:	f001 fd32 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5c1c:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    5c20:	2601      	movs	r6, #1
    5c22:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    5c26:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    5c2a:	b15f      	cbz	r7, 5c44 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    5c2c:	2101      	movs	r1, #1
    5c2e:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    5c32:	f7fd ffc5 	bl	3bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    5c36:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    5c3a:	f000 0007 	and.w	r0, r0, #7
    5c3e:	1c40      	adds	r0, r0, #1
    5c40:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    5c44:	4620      	mov	r0, r4
    5c46:	f002 ff93 	bl	8b70 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x168>
    5c4a:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    5c4e:	2003      	movs	r0, #3
    5c50:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    5c54:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    5c58:	2700      	movs	r7, #0
    5c5a:	f804 7fcc 	strb.w	r7, [r4, #204]!
    5c5e:	f7fb fd61 	bl	1724 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    5c62:	8921      	ldrh	r1, [r4, #8]
    5c64:	3ccc      	subs	r4, #204	; 0xcc
    5c66:	4288      	cmp	r0, r1
    5c68:	d800      	bhi.n	5c6c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    5c6a:	4608      	mov	r0, r1
    5c6c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    5c70:	fa1f f880 	uxth.w	r8, r0
    5c74:	4620      	mov	r0, r4
    5c76:	f002 fc9c 	bl	85b2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5c7a:	b318      	cbz	r0, 5cc4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    5c7c:	4827      	ldr	r0, [pc, #156]	; (5d1c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    5c7e:	7800      	ldrb	r0, [r0, #0]
    5c80:	f000 f866 	bl	5d50 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0xc>
    5c84:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    5c88:	b281      	uxth	r1, r0
    5c8a:	4628      	mov	r0, r5
    5c8c:	f001 fb3d 	bl	730a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5c90:	4428      	add	r0, r5
    5c92:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    5c96:	34b8      	adds	r4, #184	; 0xb8
    5c98:	f001 fb03 	bl	72a2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    5c9c:	4641      	mov	r1, r8
    5c9e:	f7fb fbeb 	bl	1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    5ca2:	6220      	str	r0, [r4, #32]
    5ca4:	f804 7c03 	strb.w	r7, [r4, #-3]
    5ca8:	7126      	strb	r6, [r4, #4]
    5caa:	2001      	movs	r0, #1
    5cac:	f002 fe28 	bl	8900 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    5cb0:	f200 1007 	addw	r0, r0, #263	; 0x107
    5cb4:	1a28      	subs	r0, r5, r0
    5cb6:	62a7      	str	r7, [r4, #40]	; 0x28
    5cb8:	60a0      	str	r0, [r4, #8]
    5cba:	3cb8      	subs	r4, #184	; 0xb8
    5cbc:	e017      	b.n	5cee <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfe>
    5cbe:	200c      	movs	r0, #12
    5cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cc4:	4620      	mov	r0, r4
    5cc6:	f002 ff21 	bl	8b0c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x104>
    5cca:	f844 0fd0 	str.w	r0, [r4, #208]!
    5cce:	f804 6c1b 	strb.w	r6, [r4, #-27]
    5cd2:	f001 fae6 	bl	72a2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    5cd6:	4606      	mov	r6, r0
    5cd8:	2000      	movs	r0, #0
    5cda:	f002 ffad 	bl	8c38 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x230>
    5cde:	eb00 0108 	add.w	r1, r0, r8
    5ce2:	4630      	mov	r0, r6
    5ce4:	f7fb fbc8 	bl	1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    5ce8:	6125      	str	r5, [r4, #16]
    5cea:	60a0      	str	r0, [r4, #8]
    5cec:	3cd0      	subs	r4, #208	; 0xd0
    5cee:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    5cf2:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    5cf6:	f002 ff39 	bl	8b6c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x164>
    5cfa:	b138      	cbz	r0, 5d0c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11c>
    5cfc:	f8a4 70dc 	strh.w	r7, [r4, #220]	; 0xdc
    5d00:	2100      	movs	r1, #0
    5d02:	4620      	mov	r0, r4
    5d04:	f002 fcb5 	bl	8672 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    5d08:	2000      	movs	r0, #0
    5d0a:	e7d9      	b.n	5cc0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    5d0c:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    5d10:	2030      	movs	r0, #48	; 0x30
    5d12:	f7fd fed1 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d16:	0000      	.short	0x0000
    5d18:	00005dd5 	.word	0x00005dd5
    5d1c:	200000d0 	.word	0x200000d0

00005d20 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    5d20:	4804      	ldr	r0, [pc, #16]	; (5d34 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x14>)
    5d22:	2101      	movs	r1, #1
    5d24:	2200      	movs	r2, #0
    5d26:	7001      	strb	r1, [r0, #0]
    5d28:	7042      	strb	r2, [r0, #1]
    5d2a:	70c1      	strb	r1, [r0, #3]
    5d2c:	7082      	strb	r2, [r0, #2]
    5d2e:	f002 be54 	b.w	89da <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    5d32:	0000      	.short	0x0000
    5d34:	200000d0 	.word	0x200000d0

00005d38 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    5d38:	4901      	ldr	r1, [pc, #4]	; (5d40 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    5d3a:	7008      	strb	r0, [r1, #0]
    5d3c:	4770      	bx	lr
    5d3e:	0000      	.short	0x0000
    5d40:	200000d0 	.word	0x200000d0

00005d44 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    5d44:	4901      	ldr	r1, [pc, #4]	; (5d4c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    5d46:	7048      	strb	r0, [r1, #1]
    5d48:	4770      	bx	lr
    5d4a:	0000      	.short	0x0000
    5d4c:	200000d0 	.word	0x200000d0
    5d50:	b510      	push	{r4, lr}
    5d52:	280c      	cmp	r0, #12
    5d54:	d304      	bcc.n	5d60 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x1c>
    5d56:	f44f 7140 	mov.w	r1, #768	; 0x300
    5d5a:	2006      	movs	r0, #6
    5d5c:	f7fd feac 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d60:	4901      	ldr	r1, [pc, #4]	; (5d68 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x24>)
    5d62:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5d66:	bd10      	pop	{r4, pc}
    5d68:	00008c62 	.word	0x00008c62
    5d6c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    5d6e:	4c18      	ldr	r4, [pc, #96]	; (5dd0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8c>)
    5d70:	2001      	movs	r0, #1
    5d72:	70a0      	strb	r0, [r4, #2]
    5d74:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5d78:	e00b      	b.n	5d92 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x4e>
    5d7a:	2100      	movs	r1, #0
    5d7c:	f002 f915 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5d80:	0006      	movs	r6, r0
    5d82:	d010      	beq.n	5da6 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x62>
    5d84:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    5d88:	f7fc f91a 	bl	1fc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    5d8c:	4630      	mov	r0, r6
    5d8e:	f002 ff46 	bl	8c1e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x216>
    5d92:	4669      	mov	r1, sp
    5d94:	2000      	movs	r0, #0
    5d96:	f002 f912 	bl	7fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    5d9a:	b180      	cbz	r0, 5dbe <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x7a>
    5d9c:	f240 1111 	movw	r1, #273	; 0x111
    5da0:	2030      	movs	r0, #48	; 0x30
    5da2:	f7fd fe89 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5da6:	f240 1131 	movw	r1, #305	; 0x131
    5daa:	e7f9      	b.n	5da0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x5c>
    5dac:	9802      	ldr	r0, [sp, #8]
    5dae:	b130      	cbz	r0, 5dbe <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x7a>
    5db0:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    5db4:	b119      	cbz	r1, 5dbe <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x7a>
    5db6:	8800      	ldrh	r0, [r0, #0]
    5db8:	42a8      	cmp	r0, r5
    5dba:	d1de      	bne.n	5d7a <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x36>
    5dbc:	e004      	b.n	5dc8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x84>
    5dbe:	4668      	mov	r0, sp
    5dc0:	f7fe f896 	bl	3ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5dc4:	2800      	cmp	r0, #0
    5dc6:	d0f1      	beq.n	5dac <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x68>
    5dc8:	2000      	movs	r0, #0
    5dca:	70a0      	strb	r0, [r4, #2]
    5dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5dce:	0000      	.short	0x0000
    5dd0:	200000d0 	.word	0x200000d0
    5dd4:	b570      	push	{r4, r5, r6, lr}
    5dd6:	b140      	cbz	r0, 5dea <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0xa6>
    5dd8:	2909      	cmp	r1, #9
    5dda:	d24a      	bcs.n	5e72 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x12e>
    5ddc:	e8df f001 	tbb	[pc, r1]
    5de0:	3d3d1707 	.word	0x3d3d1707
    5de4:	412b4939 	.word	0x412b4939
    5de8:	0045      	.short	0x0045
    5dea:	21d5      	movs	r1, #213	; 0xd5
    5dec:	e03e      	b.n	5e6c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x128>
    5dee:	4922      	ldr	r1, [pc, #136]	; (5e78 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x134>)
    5df0:	4604      	mov	r4, r0
    5df2:	6188      	str	r0, [r1, #24]
    5df4:	f7ff f9de 	bl	51b4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    5df8:	b110      	cbz	r0, 5e00 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0xbc>
    5dfa:	f240 2187 	movw	r1, #647	; 0x287
    5dfe:	e035      	b.n	5e6c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x128>
    5e00:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    5e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e08:	38f6      	subs	r0, #246	; 0xf6
    5e0a:	f7fc bae3 	b.w	23d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5e0e:	4605      	mov	r5, r0
    5e10:	f002 fbcf 	bl	85b2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5e14:	b9a8      	cbnz	r0, 5e42 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0xfe>
    5e16:	4628      	mov	r0, r5
    5e18:	f002 fe78 	bl	8b0c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x104>
    5e1c:	4604      	mov	r4, r0
    5e1e:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    5e22:	42a0      	cmp	r0, r4
    5e24:	d20b      	bcs.n	5e3e <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0xfa>
    5e26:	1a20      	subs	r0, r4, r0
    5e28:	2104      	movs	r1, #4
    5e2a:	f7fb fa63 	bl	12f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5e2e:	b130      	cbz	r0, 5e3e <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0xfa>
    5e30:	4628      	mov	r0, r5
    5e32:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    5e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e3a:	f002 bb8b 	b.w	8554 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    5e3e:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    5e42:	4628      	mov	r0, r5
    5e44:	f7ff f9d2 	bl	51ec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    5e48:	2800      	cmp	r0, #0
    5e4a:	d014      	beq.n	5e76 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x132>
    5e4c:	f240 21bb 	movw	r1, #699	; 0x2bb
    5e50:	e00c      	b.n	5e6c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x128>
    5e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e56:	f000 be6d 	b.w	6b34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    5e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e5e:	f002 bdef 	b.w	8a40 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x38>
    5e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e66:	f002 be48 	b.w	8afa <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xf2>
    5e6a:	21f7      	movs	r1, #247	; 0xf7
    5e6c:	2030      	movs	r0, #48	; 0x30
    5e6e:	f7fd fe23 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e72:	21fb      	movs	r1, #251	; 0xfb
    5e74:	e7fa      	b.n	5e6c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x128>
    5e76:	bd70      	pop	{r4, r5, r6, pc}
    5e78:	200000d0 	.word	0x200000d0

00005e7c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    5e7c:	4901      	ldr	r1, [pc, #4]	; (5e84 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    5e7e:	7008      	strb	r0, [r1, #0]
    5e80:	4770      	bx	lr
    5e82:	0000      	.short	0x0000
    5e84:	2000016f 	.word	0x2000016f

00005e88 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    5e88:	4801      	ldr	r0, [pc, #4]	; (5e90 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    5e8a:	7800      	ldrb	r0, [r0, #0]
    5e8c:	f7fd bc4e 	b.w	372c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5e90:	2000016f 	.word	0x2000016f

00005e94 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    5e94:	4903      	ldr	r1, [pc, #12]	; (5ea4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    5e96:	888a      	ldrh	r2, [r1, #4]
    5e98:	8002      	strh	r2, [r0, #0]
    5e9a:	7889      	ldrb	r1, [r1, #2]
    5e9c:	7081      	strb	r1, [r0, #2]
    5e9e:	2000      	movs	r0, #0
    5ea0:	4770      	bx	lr
    5ea2:	0000      	.short	0x0000
    5ea4:	20000928 	.word	0x20000928

00005ea8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    5ea8:	7801      	ldrb	r1, [r0, #0]
    5eaa:	b179      	cbz	r1, 5ecc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    5eac:	7841      	ldrb	r1, [r0, #1]
    5eae:	b169      	cbz	r1, 5ecc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    5eb0:	8841      	ldrh	r1, [r0, #2]
    5eb2:	291b      	cmp	r1, #27
    5eb4:	d30a      	bcc.n	5ecc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    5eb6:	8881      	ldrh	r1, [r0, #4]
    5eb8:	291b      	cmp	r1, #27
    5eba:	d307      	bcc.n	5ecc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    5ebc:	4904      	ldr	r1, [pc, #16]	; (5ed0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    5ebe:	6802      	ldr	r2, [r0, #0]
    5ec0:	f8c1 2002 	str.w	r2, [r1, #2]
    5ec4:	8880      	ldrh	r0, [r0, #4]
    5ec6:	80c8      	strh	r0, [r1, #6]
    5ec8:	2000      	movs	r0, #0
    5eca:	4770      	bx	lr
    5ecc:	2012      	movs	r0, #18
    5ece:	4770      	bx	lr
    5ed0:	20000928 	.word	0x20000928

00005ed4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    5ed4:	6800      	ldr	r0, [r0, #0]
    5ed6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    5eda:	4288      	cmp	r0, r1
    5edc:	d303      	bcc.n	5ee6 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    5ede:	4903      	ldr	r1, [pc, #12]	; (5eec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    5ee0:	6088      	str	r0, [r1, #8]
    5ee2:	2000      	movs	r0, #0
    5ee4:	4770      	bx	lr
    5ee6:	2012      	movs	r0, #18
    5ee8:	4770      	bx	lr
    5eea:	0000      	.short	0x0000
    5eec:	20000928 	.word	0x20000928

00005ef0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    5ef0:	4a03      	ldr	r2, [pc, #12]	; (5f00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    5ef2:	e9d2 1200 	ldrd	r1, r2, [r2]
    5ef6:	6001      	str	r1, [r0, #0]
    5ef8:	6042      	str	r2, [r0, #4]
    5efa:	2000      	movs	r0, #0
    5efc:	4770      	bx	lr
    5efe:	0000      	.short	0x0000
    5f00:	00006124 	.word	0x00006124

00005f04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    5f04:	b510      	push	{r4, lr}
    5f06:	f002 f8db 	bl	80c0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    5f0a:	f7fe fc53 	bl	47b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    5f0e:	480f      	ldr	r0, [pc, #60]	; (5f4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>)
    5f10:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5f14:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    5f16:	81c1      	strh	r1, [r0, #14]
    5f18:	8201      	strh	r1, [r0, #16]
    5f1a:	2100      	movs	r1, #0
    5f1c:	75c1      	strb	r1, [r0, #23]
    5f1e:	8301      	strh	r1, [r0, #24]
    5f20:	8001      	strh	r1, [r0, #0]
    5f22:	221b      	movs	r2, #27
    5f24:	801a      	strh	r2, [r3, #0]
    5f26:	f44f 74a4 	mov.w	r4, #328	; 0x148
    5f2a:	805c      	strh	r4, [r3, #2]
    5f2c:	809a      	strh	r2, [r3, #4]
    5f2e:	80dc      	strh	r4, [r3, #6]
    5f30:	7481      	strb	r1, [r0, #18]
    5f32:	74c1      	strb	r1, [r0, #19]
    5f34:	2303      	movs	r3, #3
    5f36:	7083      	strb	r3, [r0, #2]
    5f38:	2302      	movs	r3, #2
    5f3a:	70c3      	strb	r3, [r0, #3]
    5f3c:	8082      	strh	r2, [r0, #4]
    5f3e:	80c2      	strh	r2, [r0, #6]
    5f40:	f640 62a6 	movw	r2, #3750	; 0xea6
    5f44:	6082      	str	r2, [r0, #8]
    5f46:	7581      	strb	r1, [r0, #22]
    5f48:	7301      	strb	r1, [r0, #12]
    5f4a:	bd10      	pop	{r4, pc}
    5f4c:	20000928 	.word	0x20000928
    5f50:	200000f4 	.word	0x200000f4

00005f54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5f54:	b510      	push	{r4, lr}
    5f56:	b158      	cbz	r0, 5f70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    5f58:	490a      	ldr	r1, [pc, #40]	; (5f84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    5f5a:	780a      	ldrb	r2, [r1, #0]
    5f5c:	b16a      	cbz	r2, 5f7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    5f5e:	2200      	movs	r2, #0
    5f60:	7042      	strb	r2, [r0, #1]
    5f62:	2303      	movs	r3, #3
    5f64:	7003      	strb	r3, [r0, #0]
    5f66:	2301      	movs	r3, #1
    5f68:	7103      	strb	r3, [r0, #4]
    5f6a:	700a      	strb	r2, [r1, #0]
    5f6c:	4618      	mov	r0, r3
    5f6e:	bd10      	pop	{r4, pc}
    5f70:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
    5f74:	2039      	movs	r0, #57	; 0x39
    5f76:	f7fd fd9f 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f7e:	f7fe bf11 	b.w	4da4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    5f82:	0000      	.short	0x0000
    5f84:	20000928 	.word	0x20000928

00005f88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    5f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f8c:	b088      	sub	sp, #32
    5f8e:	460c      	mov	r4, r1
    5f90:	4606      	mov	r6, r0
    5f92:	f002 fb1b 	bl	85cc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    5f96:	b198      	cbz	r0, 5fc0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    5f98:	4630      	mov	r0, r6
    5f9a:	f002 fb0a 	bl	85b2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5f9e:	b130      	cbz	r0, 5fae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    5fa0:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    5fa4:	2012      	movs	r0, #18
    5fa6:	2900      	cmp	r1, #0
    5fa8:	d00b      	beq.n	5fc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    5faa:	2980      	cmp	r1, #128	; 0x80
    5fac:	d809      	bhi.n	5fc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    5fae:	4630      	mov	r0, r6
    5fb0:	f002 faea 	bl	8588 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    5fb4:	b140      	cbz	r0, 5fc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    5fb6:	4630      	mov	r0, r6
    5fb8:	f002 fa71 	bl	849e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    5fbc:	b130      	cbz	r0, 5fcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    5fbe:	e009      	b.n	5fd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    5fc0:	2042      	movs	r0, #66	; 0x42
    5fc2:	b008      	add	sp, #32
    5fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fc8:	200c      	movs	r0, #12
    5fca:	e7fa      	b.n	5fc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    5fcc:	4630      	mov	r0, r6
    5fce:	f002 faea 	bl	85a6 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    5fd2:	b3a8      	cbz	r0, 6040 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    5fd4:	4630      	mov	r0, r6
    5fd6:	f002 fcfd 	bl	89d4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    5fda:	2800      	cmp	r0, #0
    5fdc:	d1f4      	bne.n	5fc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    5fde:	4630      	mov	r0, r6
    5fe0:	f002 fa78 	bl	84d4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    5fe4:	2800      	cmp	r0, #0
    5fe6:	d1ef      	bne.n	5fc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    5fe8:	4630      	mov	r0, r6
    5fea:	f7fe ff65 	bl	4eb8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    5fee:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    5ff2:	f242 7110 	movw	r1, #10000	; 0x2710
    5ff6:	fb00 f801 	mul.w	r8, r0, r1
    5ffa:	78e1      	ldrb	r1, [r4, #3]
    5ffc:	4630      	mov	r0, r6
    5ffe:	f002 faba 	bl	8576 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    6002:	4630      	mov	r0, r6
    6004:	f002 fad1 	bl	85aa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    6008:	b1e8      	cbz	r0, 6046 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    600a:	2200      	movs	r2, #0
    600c:	4611      	mov	r1, r2
    600e:	a801      	add	r0, sp, #4
    6010:	f7fd ff94 	bl	3f3c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    6014:	0004      	movs	r4, r0
    6016:	d06a      	beq.n	60ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    6018:	2100      	movs	r1, #0
    601a:	f7fe fe31 	bl	4c80 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    601e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6022:	8020      	strh	r0, [r4, #0]
    6024:	4621      	mov	r1, r4
    6026:	4630      	mov	r0, r6
    6028:	f002 fae3 	bl	85f2 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    602c:	f003 fa65 	bl	94fa <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x23a>
    6030:	4d3a      	ldr	r5, [pc, #232]	; (611c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    6032:	2800      	cmp	r0, #0
    6034:	f104 0024 	add.w	r0, r4, #36	; 0x24
    6038:	d00f      	beq.n	605a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    603a:	88aa      	ldrh	r2, [r5, #4]
    603c:	88e9      	ldrh	r1, [r5, #6]
    603e:	e00e      	b.n	605e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    6040:	e7ff      	b.n	6042 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    6042:	2012      	movs	r0, #18
    6044:	e7bd      	b.n	5fc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6046:	4642      	mov	r2, r8
    6048:	2100      	movs	r1, #0
    604a:	4630      	mov	r0, r6
    604c:	f7ff fdd0 	bl	5bf0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    6050:	2800      	cmp	r0, #0
    6052:	d0b6      	beq.n	5fc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6054:	f241 31fd 	movw	r1, #5117	; 0x13fd
    6058:	e053      	b.n	6102 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    605a:	221b      	movs	r2, #27
    605c:	4611      	mov	r1, r2
    605e:	84c2      	strh	r2, [r0, #38]	; 0x26
    6060:	8501      	strh	r1, [r0, #40]	; 0x28
    6062:	68a8      	ldr	r0, [r5, #8]
    6064:	6260      	str	r0, [r4, #36]	; 0x24
    6066:	f641 574c 	movw	r7, #7500	; 0x1d4c
    606a:	4630      	mov	r0, r6
    606c:	f002 faa5 	bl	85ba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    6070:	b910      	cbnz	r0, 6078 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    6072:	4630      	mov	r0, r6
    6074:	f002 fabb 	bl	85ee <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6078:	6067      	str	r7, [r4, #4]
    607a:	8821      	ldrh	r1, [r4, #0]
    607c:	f8ad 1008 	strh.w	r1, [sp, #8]
    6080:	7ca9      	ldrb	r1, [r5, #18]
    6082:	f88d 100a 	strb.w	r1, [sp, #10]
    6086:	7ce9      	ldrb	r1, [r5, #19]
    6088:	f88d 100b 	strb.w	r1, [sp, #11]
    608c:	8aa9      	ldrh	r1, [r5, #20]
    608e:	f8ad 100c 	strh.w	r1, [sp, #12]
    6092:	a905      	add	r1, sp, #20
    6094:	9100      	str	r1, [sp, #0]
    6096:	2001      	movs	r0, #1
    6098:	ab04      	add	r3, sp, #16
    609a:	aa02      	add	r2, sp, #8
    609c:	4621      	mov	r1, r4
    609e:	f003 f9ed 	bl	947c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1bc>
    60a2:	b140      	cbz	r0, 60b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    60a4:	2100      	movs	r1, #0
    60a6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    60aa:	f7fd ff71 	bl	3f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    60ae:	b1f0      	cbz	r0, 60ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    60b0:	f241 4148 	movw	r1, #5192	; 0x1448
    60b4:	e025      	b.n	6102 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    60b6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    60ba:	f88d 0018 	strb.w	r0, [sp, #24]
    60be:	f89d 0014 	ldrb.w	r0, [sp, #20]
    60c2:	f88d 0019 	strb.w	r0, [sp, #25]
    60c6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    60ca:	f8ad 001a 	strh.w	r0, [sp, #26]
    60ce:	a906      	add	r1, sp, #24
    60d0:	4620      	mov	r0, r4
    60d2:	f002 f88e 	bl	81f2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    60d6:	78e8      	ldrb	r0, [r5, #3]
    60d8:	9000      	str	r0, [sp, #0]
    60da:	78ab      	ldrb	r3, [r5, #2]
    60dc:	88ea      	ldrh	r2, [r5, #6]
    60de:	88a9      	ldrh	r1, [r5, #4]
    60e0:	8820      	ldrh	r0, [r4, #0]
    60e2:	f7fe f821 	bl	4128 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    60e6:	b120      	cbz	r0, 60f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    60e8:	f241 4153 	movw	r1, #5203	; 0x1453
    60ec:	e009      	b.n	6102 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    60ee:	2009      	movs	r0, #9
    60f0:	e767      	b.n	5fc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    60f2:	4642      	mov	r2, r8
    60f4:	4621      	mov	r1, r4
    60f6:	4630      	mov	r0, r6
    60f8:	f7ff fd7a 	bl	5bf0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    60fc:	b120      	cbz	r0, 6108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    60fe:	f241 4155 	movw	r1, #5205	; 0x1455
    6102:	2039      	movs	r0, #57	; 0x39
    6104:	f7fd fcd8 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6108:	4805      	ldr	r0, [pc, #20]	; (6120 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    610a:	6843      	ldr	r3, [r0, #4]
    610c:	b123      	cbz	r3, 6118 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    610e:	2200      	movs	r2, #0
    6110:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    6114:	4620      	mov	r0, r4
    6116:	4798      	blx	r3
    6118:	2000      	movs	r0, #0
    611a:	e752      	b.n	5fc2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    611c:	20000928 	.word	0x20000928
    6120:	200000ec 	.word	0x200000ec
    6124:	0b125b0b 	.word	0x0b125b0b
    6128:	125b0059 	.word	0x125b0059
    612c:	05060708 	.word	0x05060708
    6130:	00020304 	.word	0x00020304
    6134:	f0f4f8fc 	.word	0xf0f4f8fc
    6138:	0304d8ec 	.word	0x0304d8ec
    613c:	f4f8fc00 	.word	0xf4f8fc00
    6140:	00d8ecf0 	.word	0x00d8ecf0

00006144 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    6144:	b510      	push	{r4, lr}
    6146:	f7ff fe99 	bl	5e7c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    614a:	4804      	ldr	r0, [pc, #16]	; (615c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    614c:	6840      	ldr	r0, [r0, #4]
    614e:	f003 fa79 	bl	9644 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    6152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6156:	f003 b8b3 	b.w	92c0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    615a:	0000      	.short	0x0000
    615c:	200000fc 	.word	0x200000fc

00006160 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    6160:	b510      	push	{r4, lr}
    6162:	4c07      	ldr	r4, [pc, #28]	; (6180 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    6164:	68a0      	ldr	r0, [r4, #8]
    6166:	f003 fa6d 	bl	9644 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    616a:	68e0      	ldr	r0, [r4, #12]
    616c:	f003 fa6a 	bl	9644 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    6170:	f001 ffa6 	bl	80c0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    6174:	f7fe fb1e 	bl	47b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    6178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    617c:	f7ff bec2 	b.w	5f04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    6180:	200000fc 	.word	0x200000fc

00006184 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    6184:	b500      	push	{lr}
    6186:	4905      	ldr	r1, [pc, #20]	; (619c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    6188:	4805      	ldr	r0, [pc, #20]	; (61a0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    618a:	f003 fa3c 	bl	9606 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    618e:	4804      	ldr	r0, [pc, #16]	; (61a0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    6190:	4904      	ldr	r1, [pc, #16]	; (61a4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    6192:	1d00      	adds	r0, r0, #4
    6194:	f85d eb04 	ldr.w	lr, [sp], #4
    6198:	f003 ba35 	b.w	9606 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    619c:	2000010c 	.word	0x2000010c
    61a0:	20000100 	.word	0x20000100
    61a4:	20000114 	.word	0x20000114

000061a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    61a8:	4801      	ldr	r0, [pc, #4]	; (61b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    61aa:	7800      	ldrb	r0, [r0, #0]
    61ac:	4770      	bx	lr
    61ae:	0000      	.short	0x0000
    61b0:	200000fc 	.word	0x200000fc
    61b4:	b510      	push	{r4, lr}
    61b6:	f7fe fff5 	bl	51a4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    61ba:	f7ff fdb1 	bl	5d20 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    61be:	4805      	ldr	r0, [pc, #20]	; (61d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    61c0:	f7fe ffd6 	bl	5170 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    61c4:	4905      	ldr	r1, [pc, #20]	; (61dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    61c6:	4804      	ldr	r0, [pc, #16]	; (61d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    61c8:	6008      	str	r0, [r1, #0]
    61ca:	4906      	ldr	r1, [pc, #24]	; (61e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    61cc:	4804      	ldr	r0, [pc, #16]	; (61e0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    61ce:	6008      	str	r0, [r1, #0]
    61d0:	bd10      	pop	{r4, pc}
    61d2:	0000      	.short	0x0000
    61d4:	20000cf3 	.word	0x20000cf3
    61d8:	00004f79 	.word	0x00004f79
    61dc:	2000011c 	.word	0x2000011c
    61e0:	00004e45 	.word	0x00004e45
    61e4:	20000120 	.word	0x20000120

000061e8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    61e8:	4801      	ldr	r0, [pc, #4]	; (61f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    61ea:	6800      	ldr	r0, [r0, #0]
    61ec:	4770      	bx	lr
    61ee:	0000      	.short	0x0000
    61f0:	2000012c 	.word	0x2000012c

000061f4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    61f4:	4803      	ldr	r0, [pc, #12]	; (6204 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    61f6:	8800      	ldrh	r0, [r0, #0]
    61f8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    61fc:	0040      	lsls	r0, r0, #1
    61fe:	1c40      	adds	r0, r0, #1
    6200:	4770      	bx	lr
    6202:	0000      	.short	0x0000
    6204:	2000012c 	.word	0x2000012c

00006208 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    6208:	b570      	push	{r4, r5, r6, lr}
    620a:	4605      	mov	r5, r0
    620c:	4616      	mov	r6, r2
    620e:	460c      	mov	r4, r1
    6210:	2002      	movs	r0, #2
    6212:	f000 f8df 	bl	63d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    6216:	4906      	ldr	r1, [pc, #24]	; (6230 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    6218:	2001      	movs	r0, #1
    621a:	1ef6      	subs	r6, r6, #3
    621c:	7008      	strb	r0, [r1, #0]
    621e:	4805      	ldr	r0, [pc, #20]	; (6234 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    6220:	6006      	str	r6, [r0, #0]
    6222:	4804      	ldr	r0, [pc, #16]	; (6234 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    6224:	3808      	subs	r0, #8
    6226:	6005      	str	r5, [r0, #0]
    6228:	1f00      	subs	r0, r0, #4
    622a:	6004      	str	r4, [r0, #0]
    622c:	bd70      	pop	{r4, r5, r6, pc}
    622e:	0000      	.short	0x0000
    6230:	20000170 	.word	0x20000170
    6234:	4000f510 	.word	0x4000f510

00006238 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    6238:	b510      	push	{r4, lr}
    623a:	4c0c      	ldr	r4, [pc, #48]	; (626c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    623c:	7820      	ldrb	r0, [r4, #0]
    623e:	b180      	cbz	r0, 6262 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    6240:	490b      	ldr	r1, [pc, #44]	; (6270 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    6242:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6246:	6008      	str	r0, [r1, #0]
    6248:	f000 f86a 	bl	6320 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    624c:	2100      	movs	r1, #0
    624e:	b120      	cbz	r0, 625a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    6250:	2001      	movs	r0, #1
    6252:	7060      	strb	r0, [r4, #1]
    6254:	4807      	ldr	r0, [pc, #28]	; (6274 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    6256:	6800      	ldr	r0, [r0, #0]
    6258:	e001      	b.n	625e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    625a:	7061      	strb	r1, [r4, #1]
    625c:	2010      	movs	r0, #16
    625e:	70a0      	strb	r0, [r4, #2]
    6260:	7021      	strb	r1, [r4, #0]
    6262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6266:	2000      	movs	r0, #0
    6268:	f000 b8b4 	b.w	63d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    626c:	20000170 	.word	0x20000170
    6270:	4001f508 	.word	0x4001f508
    6274:	4000f400 	.word	0x4000f400

00006278 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    6278:	b510      	push	{r4, lr}
    627a:	2002      	movs	r0, #2
    627c:	f000 f8aa 	bl	63d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    6280:	4904      	ldr	r1, [pc, #16]	; (6294 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    6282:	2001      	movs	r0, #1
    6284:	7008      	strb	r0, [r1, #0]
    6286:	f000 f859 	bl	633c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    628a:	4903      	ldr	r1, [pc, #12]	; (6298 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    628c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6290:	6008      	str	r0, [r1, #0]
    6292:	bd10      	pop	{r4, pc}
    6294:	20000170 	.word	0x20000170
    6298:	4001f504 	.word	0x4001f504

0000629c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    629c:	4803      	ldr	r0, [pc, #12]	; (62ac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    629e:	2100      	movs	r1, #0
    62a0:	7001      	strb	r1, [r0, #0]
    62a2:	7041      	strb	r1, [r0, #1]
    62a4:	2110      	movs	r1, #16
    62a6:	7081      	strb	r1, [r0, #2]
    62a8:	4770      	bx	lr
    62aa:	0000      	.short	0x0000
    62ac:	20000170 	.word	0x20000170

000062b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    62b0:	4807      	ldr	r0, [pc, #28]	; (62d0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    62b2:	b510      	push	{r4, lr}
    62b4:	7801      	ldrb	r1, [r0, #0]
    62b6:	b141      	cbz	r1, 62ca <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    62b8:	f000 f832 	bl	6320 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    62bc:	b118      	cbz	r0, 62c6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    62be:	4805      	ldr	r0, [pc, #20]	; (62d4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    62c0:	6800      	ldr	r0, [r0, #0]
    62c2:	b2c0      	uxtb	r0, r0
    62c4:	bd10      	pop	{r4, pc}
    62c6:	2010      	movs	r0, #16
    62c8:	bd10      	pop	{r4, pc}
    62ca:	7880      	ldrb	r0, [r0, #2]
    62cc:	bd10      	pop	{r4, pc}
    62ce:	0000      	.short	0x0000
    62d0:	20000170 	.word	0x20000170
    62d4:	4000f400 	.word	0x4000f400

000062d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    62d8:	4808      	ldr	r0, [pc, #32]	; (62fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    62da:	b510      	push	{r4, lr}
    62dc:	7801      	ldrb	r1, [r0, #0]
    62de:	b159      	cbz	r1, 62f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    62e0:	4807      	ldr	r0, [pc, #28]	; (6300 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    62e2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    62e6:	b128      	cbz	r0, 62f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    62e8:	f000 f80c 	bl	6304 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    62ec:	2800      	cmp	r0, #0
    62ee:	d000      	beq.n	62f2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    62f0:	2001      	movs	r0, #1
    62f2:	bd10      	pop	{r4, pc}
    62f4:	2002      	movs	r0, #2
    62f6:	bd10      	pop	{r4, pc}
    62f8:	7840      	ldrb	r0, [r0, #1]
    62fa:	bd10      	pop	{r4, pc}
    62fc:	20000170 	.word	0x20000170
    6300:	4000f000 	.word	0x4000f000
    6304:	4805      	ldr	r0, [pc, #20]	; (631c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    6306:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    630a:	b111      	cbz	r1, 6312 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    630c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    6310:	b108      	cbz	r0, 6316 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    6312:	2000      	movs	r0, #0
    6314:	4770      	bx	lr
    6316:	2001      	movs	r0, #1
    6318:	4770      	bx	lr
    631a:	0000      	.short	0x0000
    631c:	4000f000 	.word	0x4000f000
    6320:	4805      	ldr	r0, [pc, #20]	; (6338 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    6322:	b510      	push	{r4, lr}
    6324:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    6328:	b120      	cbz	r0, 6334 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    632a:	f7ff ffeb 	bl	6304 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    632e:	b108      	cbz	r0, 6334 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    6330:	2001      	movs	r0, #1
    6332:	bd10      	pop	{r4, pc}
    6334:	2000      	movs	r0, #0
    6336:	bd10      	pop	{r4, pc}
    6338:	4000f000 	.word	0x4000f000
    633c:	4804      	ldr	r0, [pc, #16]	; (6350 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    633e:	2100      	movs	r1, #0
    6340:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6344:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6348:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    634c:	4770      	bx	lr
    634e:	0000      	.short	0x0000
    6350:	4000f000 	.word	0x4000f000

00006354 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    6354:	4a08      	ldr	r2, [pc, #32]	; (6378 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    6356:	b510      	push	{r4, lr}
    6358:	e9c2 0102 	strd	r0, r1, [r2, #8]
    635c:	4907      	ldr	r1, [pc, #28]	; (637c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    635e:	4610      	mov	r0, r2
    6360:	f7fd fa90 	bl	3884 <mpsl_fem_lna_configuration_set>
    6364:	2800      	cmp	r0, #0
    6366:	d005      	beq.n	6374 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    6368:	1c40      	adds	r0, r0, #1
    636a:	d003      	beq.n	6374 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    636c:	217d      	movs	r1, #125	; 0x7d
    636e:	2040      	movs	r0, #64	; 0x40
    6370:	f7fd fba2 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6374:	bd10      	pop	{r4, pc}
    6376:	0000      	.short	0x0000
    6378:	20000130 	.word	0x20000130
    637c:	000063ac 	.word	0x000063ac

00006380 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    6380:	4a08      	ldr	r2, [pc, #32]	; (63a4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    6382:	b510      	push	{r4, lr}
    6384:	e9c2 0102 	strd	r0, r1, [r2, #8]
    6388:	4907      	ldr	r1, [pc, #28]	; (63a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    638a:	4610      	mov	r0, r2
    638c:	f7fd fa86 	bl	389c <mpsl_fem_pa_configuration_set>
    6390:	2800      	cmp	r0, #0
    6392:	d005      	beq.n	63a0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    6394:	1c40      	adds	r0, r0, #1
    6396:	d003      	beq.n	63a0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    6398:	2172      	movs	r1, #114	; 0x72
    639a:	2040      	movs	r0, #64	; 0x40
    639c:	f7fd fb8c 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63a0:	bd10      	pop	{r4, pc}
    63a2:	0000      	.short	0x0000
    63a4:	20000130 	.word	0x20000130
    63a8:	000063ac 	.word	0x000063ac
    63ac:	00000001 	.word	0x00000001
    63b0:	40001110 	.word	0x40001110
	...

000063c4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    63c4:	4802      	ldr	r0, [pc, #8]	; (63d0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    63c6:	2100      	movs	r1, #0
    63c8:	7001      	strb	r1, [r0, #0]
    63ca:	7041      	strb	r1, [r0, #1]
    63cc:	4770      	bx	lr
    63ce:	0000      	.short	0x0000
    63d0:	20000173 	.word	0x20000173

000063d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    63d4:	b510      	push	{r4, lr}
    63d6:	4604      	mov	r4, r0
    63d8:	f000 f822 	bl	6420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    63dc:	2c00      	cmp	r4, #0
    63de:	d017      	beq.n	6410 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    63e0:	4a0c      	ldr	r2, [pc, #48]	; (6414 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    63e2:	480c      	ldr	r0, [pc, #48]	; (6414 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    63e4:	490c      	ldr	r1, [pc, #48]	; (6418 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    63e6:	3214      	adds	r2, #20
    63e8:	4b0c      	ldr	r3, [pc, #48]	; (641c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    63ea:	2c01      	cmp	r4, #1
    63ec:	d005      	beq.n	63fa <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    63ee:	2c02      	cmp	r4, #2
    63f0:	d008      	beq.n	6404 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    63f2:	217d      	movs	r1, #125	; 0x7d
    63f4:	203d      	movs	r0, #61	; 0x3d
    63f6:	f7fd fb5f 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63fa:	2402      	movs	r4, #2
    63fc:	6004      	str	r4, [r0, #0]
    63fe:	6011      	str	r1, [r2, #0]
    6400:	0620      	lsls	r0, r4, #24
    6402:	e004      	b.n	640e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    6404:	2403      	movs	r4, #3
    6406:	6004      	str	r4, [r0, #0]
    6408:	6011      	str	r1, [r2, #0]
    640a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    640e:	6018      	str	r0, [r3, #0]
    6410:	bd10      	pop	{r4, pc}
    6412:	0000      	.short	0x0000
    6414:	4000f500 	.word	0x4000f500
    6418:	20000df5 	.word	0x20000df5
    641c:	4001f504 	.word	0x4001f504
    6420:	4804      	ldr	r0, [pc, #16]	; (6434 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    6422:	2100      	movs	r1, #0
    6424:	6001      	str	r1, [r0, #0]
    6426:	6001      	str	r1, [r0, #0]
    6428:	4903      	ldr	r1, [pc, #12]	; (6438 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    642a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    642e:	6008      	str	r0, [r1, #0]
    6430:	4770      	bx	lr
    6432:	0000      	.short	0x0000
    6434:	4000f500 	.word	0x4000f500
    6438:	4001f508 	.word	0x4001f508

0000643c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    643c:	4805      	ldr	r0, [pc, #20]	; (6454 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    643e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    6442:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    6446:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    644a:	4903      	ldr	r1, [pc, #12]	; (6458 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    644c:	2000      	movs	r0, #0
    644e:	6008      	str	r0, [r1, #0]
    6450:	4770      	bx	lr
    6452:	0000      	.short	0x0000
    6454:	40001000 	.word	0x40001000
    6458:	40001560 	.word	0x40001560

0000645c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    645c:	4904      	ldr	r1, [pc, #16]	; (6470 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    645e:	6008      	str	r0, [r1, #0]
    6460:	4804      	ldr	r0, [pc, #16]	; (6474 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    6462:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    6466:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    646a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    646e:	4770      	bx	lr
    6470:	40001560 	.word	0x40001560
    6474:	40001000 	.word	0x40001000

00006478 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    6478:	4801      	ldr	r0, [pc, #4]	; (6480 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    647a:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    647e:	4770      	bx	lr
    6480:	20000964 	.word	0x20000964

00006484 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    6484:	4a01      	ldr	r2, [pc, #4]	; (648c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    6486:	7051      	strb	r1, [r2, #1]
    6488:	7010      	strb	r0, [r2, #0]
    648a:	4770      	bx	lr
    648c:	20000964 	.word	0x20000964

00006490 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    6490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6492:	4c1e      	ldr	r4, [pc, #120]	; (650c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    6494:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6498:	2710      	movs	r7, #16
    649a:	f3c0 1600 	ubfx	r6, r0, #4, #1
    649e:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    64a2:	2002      	movs	r0, #2
    64a4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    64a8:	4819      	ldr	r0, [pc, #100]	; (6510 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    64aa:	2500      	movs	r5, #0
    64ac:	491a      	ldr	r1, [pc, #104]	; (6518 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    64ae:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    64b2:	4818      	ldr	r0, [pc, #96]	; (6514 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    64b4:	6008      	str	r0, [r1, #0]
    64b6:	4819      	ldr	r0, [pc, #100]	; (651c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    64b8:	6800      	ldr	r0, [r0, #0]
    64ba:	b1b0      	cbz	r0, 64ea <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    64bc:	20ff      	movs	r0, #255	; 0xff
    64be:	f88d 0000 	strb.w	r0, [sp]
    64c2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    64c6:	2001      	movs	r0, #1
    64c8:	6120      	str	r0, [r4, #16]
    64ca:	e004      	b.n	64d6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    64cc:	f89d 0000 	ldrb.w	r0, [sp]
    64d0:	1e40      	subs	r0, r0, #1
    64d2:	f88d 0000 	strb.w	r0, [sp]
    64d6:	f89d 0000 	ldrb.w	r0, [sp]
    64da:	b118      	cbz	r0, 64e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    64dc:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    64e0:	2800      	cmp	r0, #0
    64e2:	d0f3      	beq.n	64cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    64e4:	f89d 0000 	ldrb.w	r0, [sp]
    64e8:	b150      	cbz	r0, 6500 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    64ea:	f000 fcad 	bl	6e48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    64ee:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    64f2:	f000 fe45 	bl	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    64f6:	2e00      	cmp	r6, #0
    64f8:	d001      	beq.n	64fe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    64fa:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    64fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6500:	f240 71c3 	movw	r1, #1987	; 0x7c3
    6504:	203e      	movs	r0, #62	; 0x3e
    6506:	f7fd fad7 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    650a:	0000      	.short	0x0000
    650c:	40001000 	.word	0x40001000
    6510:	20000964 	.word	0x20000964
    6514:	0c0e0000 	.word	0x0c0e0000
    6518:	4001f508 	.word	0x4001f508
    651c:	40001550 	.word	0x40001550

00006520 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    6520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6524:	4c1f      	ldr	r4, [pc, #124]	; (65a4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    6526:	4607      	mov	r7, r0
    6528:	4688      	mov	r8, r1
    652a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    652e:	07c1      	lsls	r1, r0, #31
    6530:	d018      	beq.n	6564 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    6532:	4a1d      	ldr	r2, [pc, #116]	; (65a8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    6534:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    6538:	6011      	str	r1, [r2, #0]
    653a:	4d1c      	ldr	r5, [pc, #112]	; (65ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    653c:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    6540:	f041 0101 	orr.w	r1, r1, #1
    6544:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    6548:	f040 0002 	orr.w	r0, r0, #2
    654c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    6550:	4640      	mov	r0, r8
    6552:	f000 fe7b 	bl	724c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    6556:	f000 fc25 	bl	6da4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    655a:	2601      	movs	r6, #1
    655c:	b13f      	cbz	r7, 656e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    655e:	2f01      	cmp	r7, #1
    6560:	d00e      	beq.n	6580 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    6562:	e016      	b.n	6592 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    6564:	f240 6155 	movw	r1, #1621	; 0x655
    6568:	203e      	movs	r0, #62	; 0x3e
    656a:	f7fd faa5 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    656e:	4640      	mov	r0, r8
    6570:	f000 fc38 	bl	6de4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    6574:	4640      	mov	r0, r8
    6576:	f000 fbf9 	bl	6d6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    657a:	72e6      	strb	r6, [r4, #11]
    657c:	602e      	str	r6, [r5, #0]
    657e:	e008      	b.n	6592 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    6580:	f000 fc58 	bl	6e34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    6584:	f000 fdc6 	bl	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    6588:	2002      	movs	r0, #2
    658a:	72e0      	strb	r0, [r4, #11]
    658c:	f000 fcce 	bl	6f2c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    6590:	606e      	str	r6, [r5, #4]
    6592:	4807      	ldr	r0, [pc, #28]	; (65b0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    6594:	64c6      	str	r6, [r0, #76]	; 0x4c
    6596:	4807      	ldr	r0, [pc, #28]	; (65b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    6598:	6801      	ldr	r1, [r0, #0]
    659a:	4638      	mov	r0, r7
    659c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    65a0:	f003 b8f8 	b.w	9794 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    65a4:	20000964 	.word	0x20000964
    65a8:	4001f504 	.word	0x4001f504
    65ac:	40001000 	.word	0x40001000
    65b0:	40008000 	.word	0x40008000
    65b4:	4000854c 	.word	0x4000854c

000065b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    65b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65bc:	4d35      	ldr	r5, [pc, #212]	; (6694 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    65be:	4606      	mov	r6, r0
    65c0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    65c4:	4689      	mov	r9, r1
    65c6:	6028      	str	r0, [r5, #0]
    65c8:	4c33      	ldr	r4, [pc, #204]	; (6698 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    65ca:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    65ce:	f040 0002 	orr.w	r0, r0, #2
    65d2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    65d6:	4608      	mov	r0, r1
    65d8:	f000 fe38 	bl	724c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    65dc:	f000 fbe2 	bl	6da4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    65e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 669c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    65e4:	2700      	movs	r7, #0
    65e6:	b116      	cbz	r6, 65ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    65e8:	2e01      	cmp	r6, #1
    65ea:	d027      	beq.n	663c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    65ec:	e03f      	b.n	666e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    65ee:	4648      	mov	r0, r9
    65f0:	f000 fbf8 	bl	6de4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    65f4:	7a60      	ldrb	r0, [r4, #9]
    65f6:	2801      	cmp	r0, #1
    65f8:	d105      	bne.n	6606 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    65fa:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    65fe:	f041 0108 	orr.w	r1, r1, #8
    6602:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    6606:	4648      	mov	r0, r9
    6608:	f000 fbb0 	bl	6d6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    660c:	2001      	movs	r0, #1
    660e:	72e0      	strb	r0, [r4, #11]
    6610:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6612:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    6616:	6320      	str	r0, [r4, #48]	; 0x30
    6618:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    661c:	6028      	str	r0, [r5, #0]
    661e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6622:	f1b9 0f02 	cmp.w	r9, #2
    6626:	d007      	beq.n	6638 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    6628:	f640 0034 	movw	r0, #2100	; 0x834
    662c:	f649 72ec 	movw	r2, #40940	; 0x9fec
    6630:	4410      	add	r0, r2
    6632:	fbb0 f7f1 	udiv	r7, r0, r1
    6636:	e01a      	b.n	666e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    6638:	4608      	mov	r0, r1
    663a:	e7f7      	b.n	662c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    663c:	f000 fbfa 	bl	6e34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    6640:	f000 fd68 	bl	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    6644:	7a60      	ldrb	r0, [r4, #9]
    6646:	2801      	cmp	r0, #1
    6648:	d105      	bne.n	6656 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    664a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    664e:	f041 0104 	orr.w	r1, r1, #4
    6652:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    6656:	2002      	movs	r0, #2
    6658:	72e0      	strb	r0, [r4, #11]
    665a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    665c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    6660:	6320      	str	r0, [r4, #48]	; 0x30
    6662:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    6666:	6028      	str	r0, [r5, #0]
    6668:	2729      	movs	r7, #41	; 0x29
    666a:	f000 fc5f 	bl	6f2c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    666e:	f000 fc49 	bl	6f04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    6672:	f000 fe13 	bl	729c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    6676:	6800      	ldr	r0, [r0, #0]
    6678:	2801      	cmp	r0, #1
    667a:	d006      	beq.n	668a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    667c:	2100      	movs	r1, #0
    667e:	4630      	mov	r0, r6
    6680:	f003 f888 	bl	9794 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    6684:	4638      	mov	r0, r7
    6686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    668a:	f7ff ff01 	bl	6490 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    668e:	2000      	movs	r0, #0
    6690:	e7f9      	b.n	6686 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    6692:	0000      	.short	0x0000
    6694:	4001f504 	.word	0x4001f504
    6698:	20000964 	.word	0x20000964
    669c:	40001000 	.word	0x40001000

000066a0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    66a0:	b510      	push	{r4, lr}
    66a2:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    66a4:	4901      	ldr	r1, [pc, #4]	; (66ac <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    66a6:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    66aa:	bd10      	pop	{r4, pc}
    66ac:	20000954 	.word	0x20000954

000066b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    66b0:	b570      	push	{r4, r5, r6, lr}
    66b2:	4c10      	ldr	r4, [pc, #64]	; (66f4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    66b4:	4606      	mov	r6, r0
    66b6:	2002      	movs	r0, #2
    66b8:	7420      	strb	r0, [r4, #16]
    66ba:	2596      	movs	r5, #150	; 0x96
    66bc:	f000 f856 	bl	676c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    66c0:	4602      	mov	r2, r0
    66c2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    66c6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    66ca:	2801      	cmp	r0, #1
    66cc:	d00d      	beq.n	66ea <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    66ce:	4628      	mov	r0, r5
    66d0:	f003 f878 	bl	97c4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    66d4:	4908      	ldr	r1, [pc, #32]	; (66f8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    66d6:	6160      	str	r0, [r4, #20]
    66d8:	2000      	movs	r0, #0
    66da:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    66de:	6961      	ldr	r1, [r4, #20]
    66e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    66e2:	4408      	add	r0, r1
    66e4:	4905      	ldr	r1, [pc, #20]	; (66fc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    66e6:	6008      	str	r0, [r1, #0]
    66e8:	bd70      	pop	{r4, r5, r6, pc}
    66ea:	4633      	mov	r3, r6
    66ec:	4628      	mov	r0, r5
    66ee:	f003 f885 	bl	97fc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    66f2:	e7ef      	b.n	66d4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    66f4:	20000964 	.word	0x20000964
    66f8:	40008000 	.word	0x40008000
    66fc:	40008544 	.word	0x40008544

00006700 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    6700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6704:	2240      	movs	r2, #64	; 0x40
    6706:	2100      	movs	r1, #0
    6708:	4813      	ldr	r0, [pc, #76]	; (6758 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    670a:	f000 ffb9 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    670e:	f000 fd37 	bl	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    6712:	f000 febe 	bl	7492 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    6716:	4d11      	ldr	r5, [pc, #68]	; (675c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    6718:	4e10      	ldr	r6, [pc, #64]	; (675c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    671a:	2400      	movs	r4, #0
    671c:	4f0f      	ldr	r7, [pc, #60]	; (675c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    671e:	3508      	adds	r5, #8
    6720:	3610      	adds	r6, #16
    6722:	b928      	cbnz	r0, 6730 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    6724:	f000 fecc 	bl	74c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    6728:	b910      	cbnz	r0, 6730 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    672a:	f000 fed3 	bl	74d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    672e:	b108      	cbz	r0, 6734 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    6730:	2224      	movs	r2, #36	; 0x24
    6732:	e006      	b.n	6742 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    6734:	f000 ff0e 	bl	7554 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    6738:	b910      	cbnz	r0, 6740 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    673a:	f000 ff01 	bl	7540 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    673e:	b140      	cbz	r0, 6752 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    6740:	2240      	movs	r2, #64	; 0x40
    6742:	21ff      	movs	r1, #255	; 0xff
    6744:	4638      	mov	r0, r7
    6746:	f000 ff9b 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    674a:	602c      	str	r4, [r5, #0]
    674c:	6034      	str	r4, [r6, #0]
    674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6752:	2238      	movs	r2, #56	; 0x38
    6754:	e7f5      	b.n	6742 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    6756:	0000      	.short	0x0000
    6758:	20000964 	.word	0x20000964
    675c:	40000e00 	.word	0x40000e00

00006760 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    6760:	4901      	ldr	r1, [pc, #4]	; (6768 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    6762:	7008      	strb	r0, [r1, #0]
    6764:	4770      	bx	lr
    6766:	0000      	.short	0x0000
    6768:	20000148 	.word	0x20000148

0000676c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    676c:	4814      	ldr	r0, [pc, #80]	; (67c0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    676e:	b510      	push	{r4, lr}
    6770:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    6774:	7ac0      	ldrb	r0, [r0, #11]
    6776:	b141      	cbz	r1, 678a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    6778:	2902      	cmp	r1, #2
    677a:	d00b      	beq.n	6794 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    677c:	2802      	cmp	r0, #2
    677e:	d009      	beq.n	6794 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    6780:	2901      	cmp	r1, #1
    6782:	d00b      	beq.n	679c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    6784:	2801      	cmp	r0, #1
    6786:	d009      	beq.n	679c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    6788:	e015      	b.n	67b6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    678a:	2800      	cmp	r0, #0
    678c:	d1f6      	bne.n	677c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    678e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    6792:	e00d      	b.n	67b0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    6794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6798:	f000 bc56 	b.w	7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    679c:	4809      	ldr	r0, [pc, #36]	; (67c4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    679e:	6800      	ldr	r0, [r0, #0]
    67a0:	f000 000f 	and.w	r0, r0, #15
    67a4:	2803      	cmp	r0, #3
    67a6:	d006      	beq.n	67b6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    67a8:	2804      	cmp	r0, #4
    67aa:	d006      	beq.n	67ba <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    67ac:	f240 210b 	movw	r1, #523	; 0x20b
    67b0:	203e      	movs	r0, #62	; 0x3e
    67b2:	f7fd f981 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67b6:	2001      	movs	r0, #1
    67b8:	bd10      	pop	{r4, pc}
    67ba:	2002      	movs	r0, #2
    67bc:	bd10      	pop	{r4, pc}
    67be:	0000      	.short	0x0000
    67c0:	20000964 	.word	0x20000964
    67c4:	40001510 	.word	0x40001510

000067c8 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    67c8:	4801      	ldr	r0, [pc, #4]	; (67d0 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    67ca:	7f40      	ldrb	r0, [r0, #29]
    67cc:	4770      	bx	lr
    67ce:	0000      	.short	0x0000
    67d0:	20000964 	.word	0x20000964

000067d4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    67d4:	b510      	push	{r4, lr}
    67d6:	f000 fcb9 	bl	714c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    67da:	f7ff fe59 	bl	6490 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    67de:	f002 ff6f 	bl	96c0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    67e2:	480f      	ldr	r0, [pc, #60]	; (6820 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    67e4:	4a0f      	ldr	r2, [pc, #60]	; (6824 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    67e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    67e8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    67ec:	6011      	str	r1, [r2, #0]
    67ee:	2400      	movs	r4, #0
    67f0:	6304      	str	r4, [r0, #48]	; 0x30
    67f2:	7404      	strb	r4, [r0, #16]
    67f4:	6244      	str	r4, [r0, #36]	; 0x24
    67f6:	6204      	str	r4, [r0, #32]
    67f8:	f000 fca8 	bl	714c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    67fc:	480a      	ldr	r0, [pc, #40]	; (6828 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    67fe:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    6802:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    6806:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    680a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    680e:	2001      	movs	r0, #1
    6810:	f002 ff8f 	bl	9732 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    6814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6818:	2001      	movs	r0, #1
    681a:	f002 bf7d 	b.w	9718 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    681e:	0000      	.short	0x0000
    6820:	20000964 	.word	0x20000964
    6824:	4001f508 	.word	0x4001f508
    6828:	40008000 	.word	0x40008000

0000682c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    682c:	b570      	push	{r4, r5, r6, lr}
    682e:	2001      	movs	r0, #1
    6830:	f002 ff7f 	bl	9732 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    6834:	4837      	ldr	r0, [pc, #220]	; (6914 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    6836:	2400      	movs	r4, #0
    6838:	6004      	str	r4, [r0, #0]
    683a:	2601      	movs	r6, #1
    683c:	6006      	str	r6, [r0, #0]
    683e:	f000 fe5f 	bl	7500 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    6842:	4d35      	ldr	r5, [pc, #212]	; (6918 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6844:	b118      	cbz	r0, 684e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    6846:	6828      	ldr	r0, [r5, #0]
    6848:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    684c:	6028      	str	r0, [r5, #0]
    684e:	f000 fe4b 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    6852:	b128      	cbz	r0, 6860 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    6854:	6828      	ldr	r0, [r5, #0]
    6856:	4931      	ldr	r1, [pc, #196]	; (691c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    6858:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    685c:	4308      	orrs	r0, r1
    685e:	6028      	str	r0, [r5, #0]
    6860:	f000 fe5e 	bl	7520 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6864:	b138      	cbz	r0, 6876 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    6866:	482c      	ldr	r0, [pc, #176]	; (6918 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6868:	1d00      	adds	r0, r0, #4
    686a:	6801      	ldr	r1, [r0, #0]
    686c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    6870:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    6874:	6001      	str	r1, [r0, #0]
    6876:	4928      	ldr	r1, [pc, #160]	; (6918 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6878:	4829      	ldr	r0, [pc, #164]	; (6920 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    687a:	313c      	adds	r1, #60	; 0x3c
    687c:	6008      	str	r0, [r1, #0]
    687e:	f7fd f819 	bl	38b4 <mpsl_fem_device_config_254_apply_get>
    6882:	b140      	cbz	r0, 6896 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    6884:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    6888:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    688c:	1c41      	adds	r1, r0, #1
    688e:	d002      	beq.n	6896 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    6890:	4921      	ldr	r1, [pc, #132]	; (6918 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6892:	3110      	adds	r1, #16
    6894:	6008      	str	r0, [r1, #0]
    6896:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    689a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    689c:	1c41      	adds	r1, r0, #1
    689e:	d004      	beq.n	68aa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    68a0:	4920      	ldr	r1, [pc, #128]	; (6924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    68a2:	680a      	ldr	r2, [r1, #0]
    68a4:	f360 4217 	bfi	r2, r0, #16, #8
    68a8:	600a      	str	r2, [r1, #0]
    68aa:	491e      	ldr	r1, [pc, #120]	; (6924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    68ac:	f240 605b 	movw	r0, #1627	; 0x65b
    68b0:	3954      	subs	r1, #84	; 0x54
    68b2:	6008      	str	r0, [r1, #0]
    68b4:	1f09      	subs	r1, r1, #4
    68b6:	f240 1003 	movw	r0, #259	; 0x103
    68ba:	6008      	str	r0, [r1, #0]
    68bc:	1f08      	subs	r0, r1, #4
    68be:	6006      	str	r6, [r0, #0]
    68c0:	2001      	movs	r0, #1
    68c2:	f000 fcc3 	bl	724c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    68c6:	4917      	ldr	r1, [pc, #92]	; (6924 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    68c8:	f240 1001 	movw	r0, #257	; 0x101
    68cc:	31c4      	adds	r1, #196	; 0xc4
    68ce:	6008      	str	r0, [r1, #0]
    68d0:	4e15      	ldr	r6, [pc, #84]	; (6928 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    68d2:	2502      	movs	r5, #2
    68d4:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    68d8:	4915      	ldr	r1, [pc, #84]	; (6930 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    68da:	4814      	ldr	r0, [pc, #80]	; (692c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    68dc:	6008      	str	r0, [r1, #0]
    68de:	4815      	ldr	r0, [pc, #84]	; (6934 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    68e0:	f506 7600 	add.w	r6, r6, #512	; 0x200
    68e4:	8704      	strh	r4, [r0, #56]	; 0x38
    68e6:	3010      	adds	r0, #16
    68e8:	6244      	str	r4, [r0, #36]	; 0x24
    68ea:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    68ee:	2001      	movs	r0, #1
    68f0:	f002 ff12 	bl	9718 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    68f4:	2010      	movs	r0, #16
    68f6:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    68fa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    68fe:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    6902:	480d      	ldr	r0, [pc, #52]	; (6938 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    6904:	6840      	ldr	r0, [r0, #4]
    6906:	2800      	cmp	r0, #0
    6908:	d002      	beq.n	6910 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    690a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    690e:	4700      	bx	r0
    6910:	bd70      	pop	{r4, r5, r6, pc}
    6912:	0000      	.short	0x0000
    6914:	40001ffc 	.word	0x40001ffc
    6918:	4000173c 	.word	0x4000173c
    691c:	80000096 	.word	0x80000096
    6920:	8900002c 	.word	0x8900002c
    6924:	4000158c 	.word	0x4000158c
    6928:	40001000 	.word	0x40001000
    692c:	0c0e0000 	.word	0x0c0e0000
    6930:	4001f508 	.word	0x4001f508
    6934:	20000954 	.word	0x20000954
    6938:	20000148 	.word	0x20000148

0000693c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    693c:	4901      	ldr	r1, [pc, #4]	; (6944 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    693e:	7608      	strb	r0, [r1, #24]
    6940:	4770      	bx	lr
    6942:	0000      	.short	0x0000
    6944:	20000964 	.word	0x20000964

00006948 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    6948:	4904      	ldr	r1, [pc, #16]	; (695c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    694a:	6008      	str	r0, [r1, #0]
    694c:	4804      	ldr	r0, [pc, #16]	; (6960 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    694e:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    6952:	f041 0101 	orr.w	r1, r1, #1
    6956:	7001      	strb	r1, [r0, #0]
    6958:	f000 ba9c 	b.w	6e94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    695c:	40001504 	.word	0x40001504
    6960:	20000964 	.word	0x20000964

00006964 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    6964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6968:	4e35      	ldr	r6, [pc, #212]	; (6a40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    696a:	4607      	mov	r7, r0
    696c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    6970:	468a      	mov	sl, r1
    6972:	4614      	mov	r4, r2
    6974:	6030      	str	r0, [r6, #0]
    6976:	4610      	mov	r0, r2
    6978:	f000 fc68 	bl	724c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    697c:	f000 fa12 	bl	6da4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    6980:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6a44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    6984:	4d30      	ldr	r5, [pc, #192]	; (6a48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    6986:	f04f 0801 	mov.w	r8, #1
    698a:	b127      	cbz	r7, 6996 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    698c:	2f01      	cmp	r7, #1
    698e:	d01d      	beq.n	69cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    6990:	f240 7144 	movw	r1, #1860	; 0x744
    6994:	e04a      	b.n	6a2c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    6996:	4620      	mov	r0, r4
    6998:	f000 fa24 	bl	6de4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    699c:	4620      	mov	r0, r4
    699e:	f000 f9e5 	bl	6d6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    69a2:	2c02      	cmp	r4, #2
    69a4:	d00f      	beq.n	69c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    69a6:	f640 0034 	movw	r0, #2100	; 0x834
    69aa:	bf00      	nop
    69ac:	f649 51f8 	movw	r1, #40440	; 0x9df8
    69b0:	4401      	add	r1, r0
    69b2:	4650      	mov	r0, sl
    69b4:	f000 fbee 	bl	7194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    69b8:	4604      	mov	r4, r0
    69ba:	4648      	mov	r0, r9
    69bc:	f000 fbd4 	bl	7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    69c0:	f885 800b 	strb.w	r8, [r5, #11]
    69c4:	e014      	b.n	69f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    69c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    69ca:	e7ef      	b.n	69ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    69cc:	f000 fa32 	bl	6e34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    69d0:	f000 fba0 	bl	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    69d4:	f000 faaa 	bl	6f2c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    69d8:	f649 71ba 	movw	r1, #40890	; 0x9fba
    69dc:	4650      	mov	r0, sl
    69de:	f000 fbd9 	bl	7194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    69e2:	4604      	mov	r4, r0
    69e4:	4817      	ldr	r0, [pc, #92]	; (6a44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    69e6:	1d00      	adds	r0, r0, #4
    69e8:	f000 fbbe 	bl	7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    69ec:	2002      	movs	r0, #2
    69ee:	72e8      	strb	r0, [r5, #11]
    69f0:	4816      	ldr	r0, [pc, #88]	; (6a4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    69f2:	6004      	str	r4, [r0, #0]
    69f4:	4917      	ldr	r1, [pc, #92]	; (6a54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    69f6:	4816      	ldr	r0, [pc, #88]	; (6a50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    69f8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    69fc:	6b28      	ldr	r0, [r5, #48]	; 0x30
    69fe:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    6a02:	6328      	str	r0, [r5, #48]	; 0x30
    6a04:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    6a08:	6030      	str	r0, [r6, #0]
    6a0a:	2110      	movs	r1, #16
    6a0c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    6a10:	1200      	asrs	r0, r0, #8
    6a12:	6030      	str	r0, [r6, #0]
    6a14:	f000 fa76 	bl	6f04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    6a18:	490f      	ldr	r1, [pc, #60]	; (6a58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    6a1a:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    6a1e:	480b      	ldr	r0, [pc, #44]	; (6a4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    6a20:	300c      	adds	r0, #12
    6a22:	6800      	ldr	r0, [r0, #0]
    6a24:	42a0      	cmp	r0, r4
    6a26:	d304      	bcc.n	6a32 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    6a28:	f240 7169 	movw	r1, #1897	; 0x769
    6a2c:	203e      	movs	r0, #62	; 0x3e
    6a2e:	f7fd f843 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a32:	4621      	mov	r1, r4
    6a34:	4638      	mov	r0, r7
    6a36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a3a:	f002 beab 	b.w	9794 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    6a3e:	0000      	.short	0x0000
    6a40:	4001f504 	.word	0x4001f504
    6a44:	40001000 	.word	0x40001000
    6a48:	20000964 	.word	0x20000964
    6a4c:	40008540 	.word	0x40008540
    6a50:	40008140 	.word	0x40008140
    6a54:	4001f098 	.word	0x4001f098
    6a58:	40008000 	.word	0x40008000

00006a5c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    6a5c:	b510      	push	{r4, lr}
    6a5e:	b14a      	cbz	r2, 6a74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    6a60:	4c12      	ldr	r4, [pc, #72]	; (6aac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    6a62:	7260      	strb	r0, [r4, #9]
    6a64:	7363      	strb	r3, [r4, #13]
    6a66:	07d0      	lsls	r0, r2, #31
    6a68:	d007      	beq.n	6a7a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    6a6a:	2a01      	cmp	r2, #1
    6a6c:	d005      	beq.n	6a7a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    6a6e:	f640 113e 	movw	r1, #2366	; 0x93e
    6a72:	e00c      	b.n	6a8e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    6a74:	f640 1137 	movw	r1, #2359	; 0x937
    6a78:	e009      	b.n	6a8e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    6a7a:	b159      	cbz	r1, 6a94 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    6a7c:	2002      	movs	r0, #2
    6a7e:	72a0      	strb	r0, [r4, #10]
    6a80:	7322      	strb	r2, [r4, #12]
    6a82:	2801      	cmp	r0, #1
    6a84:	d008      	beq.n	6a98 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    6a86:	2802      	cmp	r0, #2
    6a88:	d00f      	beq.n	6aaa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    6a8a:	f640 1155 	movw	r1, #2389	; 0x955
    6a8e:	203e      	movs	r0, #62	; 0x3e
    6a90:	f7fd f812 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a94:	2001      	movs	r0, #1
    6a96:	e7f2      	b.n	6a7e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    6a98:	7ae0      	ldrb	r0, [r4, #11]
    6a9a:	2802      	cmp	r0, #2
    6a9c:	d105      	bne.n	6aaa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    6a9e:	f000 f9c9 	bl	6e34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    6aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6aa6:	f000 bb35 	b.w	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    6aaa:	bd10      	pop	{r4, pc}
    6aac:	20000964 	.word	0x20000964

00006ab0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    6ab0:	490a      	ldr	r1, [pc, #40]	; (6adc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    6ab2:	b508      	push	{r3, lr}
    6ab4:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    6ab8:	2a01      	cmp	r2, #1
    6aba:	d001      	beq.n	6ac0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    6abc:	2000      	movs	r0, #0
    6abe:	bd08      	pop	{r3, pc}
    6ac0:	4a07      	ldr	r2, [pc, #28]	; (6ae0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    6ac2:	6812      	ldr	r2, [r2, #0]
    6ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6ac8:	4252      	negs	r2, r2
    6aca:	7002      	strb	r2, [r0, #0]
    6acc:	2000      	movs	r0, #0
    6ace:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    6ad2:	4804      	ldr	r0, [pc, #16]	; (6ae4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    6ad4:	6800      	ldr	r0, [r0, #0]
    6ad6:	9000      	str	r0, [sp, #0]
    6ad8:	2001      	movs	r0, #1
    6ada:	bd08      	pop	{r3, pc}
    6adc:	40001000 	.word	0x40001000
    6ae0:	40001548 	.word	0x40001548
    6ae4:	4000111c 	.word	0x4000111c

00006ae8 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    6ae8:	4a04      	ldr	r2, [pc, #16]	; (6afc <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    6aea:	6803      	ldr	r3, [r0, #0]
    6aec:	f8c2 3012 	str.w	r3, [r2, #18]
    6af0:	8880      	ldrh	r0, [r0, #4]
    6af2:	82d0      	strh	r0, [r2, #22]
    6af4:	f102 0010 	add.w	r0, r2, #16
    6af8:	7201      	strb	r1, [r0, #8]
    6afa:	4770      	bx	lr
    6afc:	20000954 	.word	0x20000954

00006b00 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    6b00:	4a04      	ldr	r2, [pc, #16]	; (6b14 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    6b02:	78c1      	ldrb	r1, [r0, #3]
    6b04:	6011      	str	r1, [r2, #0]
    6b06:	6800      	ldr	r0, [r0, #0]
    6b08:	4902      	ldr	r1, [pc, #8]	; (6b14 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    6b0a:	0200      	lsls	r0, r0, #8
    6b0c:	3908      	subs	r1, #8
    6b0e:	6008      	str	r0, [r1, #0]
    6b10:	4770      	bx	lr
    6b12:	0000      	.short	0x0000
    6b14:	40001524 	.word	0x40001524

00006b18 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    6b18:	6800      	ldr	r0, [r0, #0]
    6b1a:	4902      	ldr	r1, [pc, #8]	; (6b24 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    6b1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6b20:	6008      	str	r0, [r1, #0]
    6b22:	4770      	bx	lr
    6b24:	4000153c 	.word	0x4000153c

00006b28 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    6b28:	4901      	ldr	r1, [pc, #4]	; (6b30 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    6b2a:	7648      	strb	r0, [r1, #25]
    6b2c:	4770      	bx	lr
    6b2e:	0000      	.short	0x0000
    6b30:	20000964 	.word	0x20000964

00006b34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    6b34:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6b38:	4d6f      	ldr	r5, [pc, #444]	; (6cf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>)
    6b3a:	2701      	movs	r7, #1
    6b3c:	64ef      	str	r7, [r5, #76]	; 0x4c
    6b3e:	486f      	ldr	r0, [pc, #444]	; (6cfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    6b40:	f8d0 a000 	ldr.w	sl, [r0]
    6b44:	486e      	ldr	r0, [pc, #440]	; (6d00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    6b46:	6800      	ldr	r0, [r0, #0]
    6b48:	4c6e      	ldr	r4, [pc, #440]	; (6d04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    6b4a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 6d08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    6b4e:	e9c4 0a0e 	strd	r0, sl, [r4, #56]	; 0x38
    6b52:	f898 0000 	ldrb.w	r0, [r8]
    6b56:	2804      	cmp	r0, #4
    6b58:	d302      	bcc.n	6b60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    6b5a:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    6b5e:	e0c0      	b.n	6ce2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    6b60:	f000 f972 	bl	6e48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    6b64:	4969      	ldr	r1, [pc, #420]	; (6d0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    6b66:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6b68:	6008      	str	r0, [r1, #0]
    6b6a:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 6d10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>
    6b6e:	2600      	movs	r6, #0
    6b70:	6326      	str	r6, [r4, #48]	; 0x30
    6b72:	f8db 1200 	ldr.w	r1, [fp, #512]	; 0x200
    6b76:	f240 121d 	movw	r2, #285	; 0x11d
    6b7a:	4391      	bics	r1, r2
    6b7c:	f8cb 1200 	str.w	r1, [fp, #512]	; 0x200
    6b80:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    6b84:	f8db 010c 	ldr.w	r0, [fp, #268]	; 0x10c
    6b88:	b900      	cbnz	r0, 6b8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    6b8a:	64af      	str	r7, [r5, #72]	; 0x48
    6b8c:	f000 f9e0 	bl	6f50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x234>
    6b90:	4605      	mov	r5, r0
    6b92:	485a      	ldr	r0, [pc, #360]	; (6cfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    6b94:	1f00      	subs	r0, r0, #4
    6b96:	6800      	ldr	r0, [r0, #0]
    6b98:	6260      	str	r0, [r4, #36]	; 0x24
    6b9a:	f7ff fde7 	bl	676c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    6b9e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    6ba2:	7ae0      	ldrb	r0, [r4, #11]
    6ba4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    6ba8:	495a      	ldr	r1, [pc, #360]	; (6d14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    6baa:	6226      	str	r6, [r4, #32]
    6bac:	2802      	cmp	r0, #2
    6bae:	d107      	bne.n	6bc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    6bb0:	7860      	ldrb	r0, [r4, #1]
    6bb2:	b128      	cbz	r0, 6bc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    6bb4:	680a      	ldr	r2, [r1, #0]
    6bb6:	7812      	ldrb	r2, [r2, #0]
    6bb8:	4002      	ands	r2, r0
    6bba:	7820      	ldrb	r0, [r4, #0]
    6bbc:	4390      	bics	r0, r2
    6bbe:	d011      	beq.n	6be4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    6bc0:	7726      	strb	r6, [r4, #28]
    6bc2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 6d18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    6bc6:	07a8      	lsls	r0, r5, #30
    6bc8:	d502      	bpl.n	6bd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    6bca:	f8d9 0000 	ldr.w	r0, [r9]
    6bce:	6220      	str	r0, [r4, #32]
    6bd0:	0728      	lsls	r0, r5, #28
    6bd2:	d502      	bpl.n	6bda <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa6>
    6bd4:	f8d9 0000 	ldr.w	r0, [r9]
    6bd8:	6220      	str	r0, [r4, #32]
    6bda:	f898 0000 	ldrb.w	r0, [r8]
    6bde:	07c0      	lsls	r0, r0, #31
    6be0:	d002      	beq.n	6be8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    6be2:	e01c      	b.n	6c1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    6be4:	7727      	strb	r7, [r4, #28]
    6be6:	e7ec      	b.n	6bc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    6be8:	f8d1 8000 	ldr.w	r8, [r1]
    6bec:	f898 0000 	ldrb.w	r0, [r8]
    6bf0:	f000 000f 	and.w	r0, r0, #15
    6bf4:	2807      	cmp	r0, #7
    6bf6:	d211      	bcs.n	6c1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    6bf8:	2206      	movs	r2, #6
    6bfa:	f108 0109 	add.w	r1, r8, #9
    6bfe:	1ca0      	adds	r0, r4, #2
    6c00:	f000 fcb2 	bl	7568 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6c04:	b938      	cbnz	r0, 6c16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    6c06:	7a20      	ldrb	r0, [r4, #8]
    6c08:	f898 1000 	ldrb.w	r1, [r8]
    6c0c:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    6c10:	d101      	bne.n	6c16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    6c12:	2001      	movs	r0, #1
    6c14:	e000      	b.n	6c18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe4>
    6c16:	2000      	movs	r0, #0
    6c18:	7760      	strb	r0, [r4, #29]
    6c1a:	e000      	b.n	6c1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    6c1c:	7766      	strb	r6, [r4, #29]
    6c1e:	f04f 0800 	mov.w	r8, #0
    6c22:	4651      	mov	r1, sl
    6c24:	4628      	mov	r0, r5
    6c26:	f000 fa23 	bl	7070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    6c2a:	b918      	cbnz	r0, 6c34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    6c2c:	f8cb 7010 	str.w	r7, [fp, #16]
    6c30:	f04f 0801 	mov.w	r8, #1
    6c34:	4e33      	ldr	r6, [pc, #204]	; (6d04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    6c36:	07e8      	lsls	r0, r5, #31
    6c38:	f1a6 0610 	sub.w	r6, r6, #16
    6c3c:	d002      	beq.n	6c44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    6c3e:	6830      	ldr	r0, [r6, #0]
    6c40:	4780      	blx	r0
    6c42:	e031      	b.n	6ca8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    6c44:	07a8      	lsls	r0, r5, #30
    6c46:	d526      	bpl.n	6c96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x162>
    6c48:	0768      	lsls	r0, r5, #29
    6c4a:	d41e      	bmi.n	6c8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    6c4c:	f000 fc68 	bl	7520 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6c50:	b9d8      	cbnz	r0, 6c8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    6c52:	f000 fc55 	bl	7500 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    6c56:	b9c0      	cbnz	r0, 6c8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    6c58:	482e      	ldr	r0, [pc, #184]	; (6d14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    6c5a:	38b4      	subs	r0, #180	; 0xb4
    6c5c:	6800      	ldr	r0, [r0, #0]
    6c5e:	f3c0 5742 	ubfx	r7, r0, #21, #3
    6c62:	f3c0 6300 	ubfx	r3, r0, #24, #1
    6c66:	f000 020f 	and.w	r2, r0, #15
    6c6a:	f3c0 1103 	ubfx	r1, r0, #4, #4
    6c6e:	f3c0 2003 	ubfx	r0, r0, #8, #4
    6c72:	b153      	cbz	r3, 6c8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    6c74:	b10a      	cbz	r2, 6c7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    6c76:	b101      	cbz	r1, 6c7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    6c78:	b938      	cbnz	r0, 6c8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    6c7a:	4826      	ldr	r0, [pc, #152]	; (6d14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    6c7c:	38b0      	subs	r0, #176	; 0xb0
    6c7e:	6800      	ldr	r0, [r0, #0]
    6c80:	b118      	cbz	r0, 6c8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    6c82:	2f03      	cmp	r7, #3
    6c84:	d201      	bcs.n	6c8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    6c86:	f045 0504 	orr.w	r5, r5, #4
    6c8a:	f345 0080 	sbfx	r0, r5, #2, #1
    6c8e:	4641      	mov	r1, r8
    6c90:	1c40      	adds	r0, r0, #1
    6c92:	6872      	ldr	r2, [r6, #4]
    6c94:	e007      	b.n	6ca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x172>
    6c96:	f015 0f28 	tst.w	r5, #40	; 0x28
    6c9a:	d005      	beq.n	6ca8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    6c9c:	f345 1140 	sbfx	r1, r5, #5, #1
    6ca0:	68b2      	ldr	r2, [r6, #8]
    6ca2:	4640      	mov	r0, r8
    6ca4:	1c49      	adds	r1, r1, #1
    6ca6:	4790      	blx	r2
    6ca8:	06e8      	lsls	r0, r5, #27
    6caa:	d501      	bpl.n	6cb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    6cac:	68f0      	ldr	r0, [r6, #12]
    6cae:	4780      	blx	r0
    6cb0:	7ae0      	ldrb	r0, [r4, #11]
    6cb2:	2802      	cmp	r0, #2
    6cb4:	d11e      	bne.n	6cf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    6cb6:	7c20      	ldrb	r0, [r4, #16]
    6cb8:	2800      	cmp	r0, #0
    6cba:	d01b      	beq.n	6cf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    6cbc:	2802      	cmp	r0, #2
    6cbe:	d004      	beq.n	6cca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x196>
    6cc0:	2801      	cmp	r0, #1
    6cc2:	d008      	beq.n	6cd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a2>
    6cc4:	f640 3166 	movw	r1, #2918	; 0xb66
    6cc8:	e00b      	b.n	6ce2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    6cca:	6961      	ldr	r1, [r4, #20]
    6ccc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6cce:	4401      	add	r1, r0
    6cd0:	f8c9 1000 	str.w	r1, [r9]
    6cd4:	e00a      	b.n	6cec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    6cd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6cd8:	6960      	ldr	r0, [r4, #20]
    6cda:	4288      	cmp	r0, r1
    6cdc:	d804      	bhi.n	6ce8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    6cde:	f640 3167 	movw	r1, #2919	; 0xb67
    6ce2:	203e      	movs	r0, #62	; 0x3e
    6ce4:	f7fc fee8 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ce8:	f8c9 0000 	str.w	r0, [r9]
    6cec:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6cf0:	f000 ba1e 	b.w	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    6cf4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6cf8:	40008000 	.word	0x40008000
    6cfc:	4000854c 	.word	0x4000854c
    6d00:	4000b504 	.word	0x4000b504
    6d04:	20000964 	.word	0x20000964
    6d08:	20000148 	.word	0x20000148
    6d0c:	4001f508 	.word	0x4001f508
    6d10:	40001000 	.word	0x40001000
    6d14:	40001504 	.word	0x40001504
    6d18:	40008544 	.word	0x40008544

00006d1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    6d1c:	b570      	push	{r4, r5, r6, lr}
    6d1e:	4b11      	ldr	r3, [pc, #68]	; (6d64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    6d20:	888c      	ldrh	r4, [r1, #4]
    6d22:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6d26:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    6d2a:	780c      	ldrb	r4, [r1, #0]
    6d2c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    6d30:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6d34:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    6d38:	4d0b      	ldr	r5, [pc, #44]	; (6d68 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    6d3a:	6829      	ldr	r1, [r5, #0]
    6d3c:	f100 0608 	add.w	r6, r0, #8
    6d40:	2401      	movs	r4, #1
    6d42:	fa04 f306 	lsl.w	r3, r4, r6
    6d46:	b132      	cbz	r2, 6d56 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    6d48:	2a01      	cmp	r2, #1
    6d4a:	d006      	beq.n	6d5a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    6d4c:	f240 41f1 	movw	r1, #1265	; 0x4f1
    6d50:	203e      	movs	r0, #62	; 0x3e
    6d52:	f7fc feb1 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d56:	4399      	bics	r1, r3
    6d58:	e000      	b.n	6d5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    6d5a:	4319      	orrs	r1, r3
    6d5c:	4084      	lsls	r4, r0
    6d5e:	430c      	orrs	r4, r1
    6d60:	602c      	str	r4, [r5, #0]
    6d62:	bd70      	pop	{r4, r5, r6, pc}
    6d64:	40001000 	.word	0x40001000
    6d68:	40001640 	.word	0x40001640
    6d6c:	b510      	push	{r4, lr}
    6d6e:	4604      	mov	r4, r0
    6d70:	f000 fbd6 	bl	7520 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6d74:	2800      	cmp	r0, #0
    6d76:	d00e      	beq.n	6d96 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    6d78:	4a09      	ldr	r2, [pc, #36]	; (6da0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    6d7a:	6811      	ldr	r1, [r2, #0]
    6d7c:	0650      	lsls	r0, r2, #25
    6d7e:	2c02      	cmp	r4, #2
    6d80:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    6d84:	d008      	beq.n	6d98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    6d86:	f3c0 2006 	ubfx	r0, r0, #8, #7
    6d8a:	bf00      	nop
    6d8c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    6d90:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    6d94:	6010      	str	r0, [r2, #0]
    6d96:	bd10      	pop	{r4, pc}
    6d98:	f3c0 6006 	ubfx	r0, r0, #24, #7
    6d9c:	e7f6      	b.n	6d8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    6d9e:	0000      	.short	0x0000
    6da0:	40001588 	.word	0x40001588
    6da4:	480d      	ldr	r0, [pc, #52]	; (6ddc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    6da6:	7e40      	ldrb	r0, [r0, #25]
    6da8:	2825      	cmp	r0, #37	; 0x25
    6daa:	d007      	beq.n	6dbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    6dac:	2826      	cmp	r0, #38	; 0x26
    6dae:	d007      	beq.n	6dc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    6db0:	2827      	cmp	r0, #39	; 0x27
    6db2:	d007      	beq.n	6dc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    6db4:	280a      	cmp	r0, #10
    6db6:	d807      	bhi.n	6dc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    6db8:	2204      	movs	r2, #4
    6dba:	e006      	b.n	6dca <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    6dbc:	2102      	movs	r1, #2
    6dbe:	e007      	b.n	6dd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    6dc0:	211a      	movs	r1, #26
    6dc2:	e005      	b.n	6dd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    6dc4:	2150      	movs	r1, #80	; 0x50
    6dc6:	e003      	b.n	6dd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    6dc8:	2206      	movs	r2, #6
    6dca:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    6dce:	b2c9      	uxtb	r1, r1
    6dd0:	4a03      	ldr	r2, [pc, #12]	; (6de0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    6dd2:	6011      	str	r1, [r2, #0]
    6dd4:	4902      	ldr	r1, [pc, #8]	; (6de0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    6dd6:	314c      	adds	r1, #76	; 0x4c
    6dd8:	6008      	str	r0, [r1, #0]
    6dda:	4770      	bx	lr
    6ddc:	20000964 	.word	0x20000964
    6de0:	40001508 	.word	0x40001508
    6de4:	4912      	ldr	r1, [pc, #72]	; (6e30 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x114>)
    6de6:	b508      	push	{r3, lr}
    6de8:	f991 2018 	ldrsb.w	r2, [r1, #24]
    6dec:	7e49      	ldrb	r1, [r1, #25]
    6dee:	2801      	cmp	r0, #1
    6df0:	d00a      	beq.n	6e08 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    6df2:	2802      	cmp	r0, #2
    6df4:	d00a      	beq.n	6e0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf0>
    6df6:	2804      	cmp	r0, #4
    6df8:	d00a      	beq.n	6e10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf4>
    6dfa:	2808      	cmp	r0, #8
    6dfc:	d00a      	beq.n	6e14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf8>
    6dfe:	f240 31d7 	movw	r1, #983	; 0x3d7
    6e02:	2006      	movs	r0, #6
    6e04:	f7fc fe58 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e08:	2000      	movs	r0, #0
    6e0a:	e004      	b.n	6e16 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    6e0c:	2001      	movs	r0, #1
    6e0e:	e002      	b.n	6e16 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    6e10:	2003      	movs	r0, #3
    6e12:	e000      	b.n	6e16 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    6e14:	2002      	movs	r0, #2
    6e16:	466b      	mov	r3, sp
    6e18:	f7f9 fada 	bl	3d0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    6e1c:	b118      	cbz	r0, 6e26 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    6e1e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    6e22:	203e      	movs	r0, #62	; 0x3e
    6e24:	e7ee      	b.n	6e04 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>
    6e26:	f99d 0000 	ldrsb.w	r0, [sp]
    6e2a:	f000 fa09 	bl	7240 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    6e2e:	bd08      	pop	{r3, pc}
    6e30:	20000964 	.word	0x20000964
    6e34:	4803      	ldr	r0, [pc, #12]	; (6e44 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    6e36:	7a81      	ldrb	r1, [r0, #10]
    6e38:	2901      	cmp	r1, #1
    6e3a:	d102      	bne.n	6e42 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x126>
    6e3c:	7b40      	ldrb	r0, [r0, #13]
    6e3e:	f7ff bfd1 	b.w	6de4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    6e42:	4770      	bx	lr
    6e44:	20000964 	.word	0x20000964
    6e48:	4805      	ldr	r0, [pc, #20]	; (6e60 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x144>)
    6e4a:	7ac0      	ldrb	r0, [r0, #11]
    6e4c:	2801      	cmp	r0, #1
    6e4e:	d003      	beq.n	6e58 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x13c>
    6e50:	2802      	cmp	r0, #2
    6e52:	d103      	bne.n	6e5c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x140>
    6e54:	f002 bc1c 	b.w	9690 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    6e58:	f002 bc26 	b.w	96a8 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    6e5c:	4770      	bx	lr
    6e5e:	0000      	.short	0x0000
    6e60:	20000964 	.word	0x20000964
    6e64:	4809      	ldr	r0, [pc, #36]	; (6e8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>)
    6e66:	b508      	push	{r3, lr}
    6e68:	2100      	movs	r1, #0
    6e6a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6e6e:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    6e72:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    6e76:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6e7a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    6e7e:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    6e82:	4803      	ldr	r0, [pc, #12]	; (6e90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    6e84:	6800      	ldr	r0, [r0, #0]
    6e86:	9000      	str	r0, [sp, #0]
    6e88:	bd08      	pop	{r3, pc}
    6e8a:	0000      	.short	0x0000
    6e8c:	40001000 	.word	0x40001000
    6e90:	40001118 	.word	0x40001118
    6e94:	4816      	ldr	r0, [pc, #88]	; (6ef0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d4>)
    6e96:	b510      	push	{r4, lr}
    6e98:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    6e9c:	07c1      	lsls	r1, r0, #31
    6e9e:	d026      	beq.n	6eee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    6ea0:	0781      	lsls	r1, r0, #30
    6ea2:	d513      	bpl.n	6ecc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1b0>
    6ea4:	4813      	ldr	r0, [pc, #76]	; (6ef4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    6ea6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    6eaa:	f041 0101 	orr.w	r1, r1, #1
    6eae:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6eb2:	4811      	ldr	r0, [pc, #68]	; (6ef8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1dc>)
    6eb4:	6800      	ldr	r0, [r0, #0]
    6eb6:	280b      	cmp	r0, #11
    6eb8:	d005      	beq.n	6ec6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    6eba:	280a      	cmp	r0, #10
    6ebc:	d003      	beq.n	6ec6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    6ebe:	2803      	cmp	r0, #3
    6ec0:	d001      	beq.n	6ec6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    6ec2:	2802      	cmp	r0, #2
    6ec4:	d113      	bne.n	6eee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    6ec6:	f240 514b 	movw	r1, #1355	; 0x54b
    6eca:	e00d      	b.n	6ee8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>
    6ecc:	0740      	lsls	r0, r0, #29
    6ece:	d50e      	bpl.n	6eee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    6ed0:	4808      	ldr	r0, [pc, #32]	; (6ef4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    6ed2:	490a      	ldr	r1, [pc, #40]	; (6efc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e0>)
    6ed4:	3008      	adds	r0, #8
    6ed6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    6eda:	4809      	ldr	r0, [pc, #36]	; (6f00 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e4>)
    6edc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    6ee0:	2801      	cmp	r0, #1
    6ee2:	d104      	bne.n	6eee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    6ee4:	f240 5152 	movw	r1, #1362	; 0x552
    6ee8:	203e      	movs	r0, #62	; 0x3e
    6eea:	f7fc fde5 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6eee:	bd10      	pop	{r4, pc}
    6ef0:	20000964 	.word	0x20000964
    6ef4:	40001000 	.word	0x40001000
    6ef8:	40001550 	.word	0x40001550
    6efc:	4001f098 	.word	0x4001f098
    6f00:	40008000 	.word	0x40008000
    6f04:	4808      	ldr	r0, [pc, #32]	; (6f28 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20c>)
    6f06:	4601      	mov	r1, r0
    6f08:	7a42      	ldrb	r2, [r0, #9]
    6f0a:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    6f0e:	b112      	cbz	r2, 6f16 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1fa>
    6f10:	2a01      	cmp	r2, #1
    6f12:	d003      	beq.n	6f1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x200>
    6f14:	e006      	b.n	6f24 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    6f16:	f041 0102 	orr.w	r1, r1, #2
    6f1a:	e001      	b.n	6f20 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x204>
    6f1c:	f041 0104 	orr.w	r1, r1, #4
    6f20:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    6f24:	f7ff bfb6 	b.w	6e94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    6f28:	20000964 	.word	0x20000964
    6f2c:	b510      	push	{r4, lr}
    6f2e:	f000 faf7 	bl	7520 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6f32:	2800      	cmp	r0, #0
    6f34:	d108      	bne.n	6f48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    6f36:	f000 fae3 	bl	7500 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    6f3a:	2800      	cmp	r0, #0
    6f3c:	d104      	bne.n	6f48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    6f3e:	4803      	ldr	r0, [pc, #12]	; (6f4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x230>)
    6f40:	6801      	ldr	r1, [r0, #0]
    6f42:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    6f46:	6001      	str	r1, [r0, #0]
    6f48:	bd10      	pop	{r4, pc}
    6f4a:	0000      	.short	0x0000
    6f4c:	40001568 	.word	0x40001568
    6f50:	b538      	push	{r3, r4, r5, lr}
    6f52:	4d36      	ldr	r5, [pc, #216]	; (702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    6f54:	2400      	movs	r4, #0
    6f56:	7c28      	ldrb	r0, [r5, #16]
    6f58:	b120      	cbz	r0, 6f64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    6f5a:	4835      	ldr	r0, [pc, #212]	; (7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    6f5c:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    6f60:	2801      	cmp	r0, #1
    6f62:	d007      	beq.n	6f74 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x258>
    6f64:	2200      	movs	r2, #0
    6f66:	7ae9      	ldrb	r1, [r5, #11]
    6f68:	4832      	ldr	r0, [pc, #200]	; (7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    6f6a:	2901      	cmp	r1, #1
    6f6c:	d004      	beq.n	6f78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    6f6e:	2902      	cmp	r1, #2
    6f70:	d00a      	beq.n	6f88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    6f72:	e019      	b.n	6fa8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    6f74:	2201      	movs	r2, #1
    6f76:	e7f6      	b.n	6f66 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24a>
    6f78:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    6f7c:	2901      	cmp	r1, #1
    6f7e:	d001      	beq.n	6f84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    6f80:	2400      	movs	r4, #0
    6f82:	e011      	b.n	6fa8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    6f84:	2408      	movs	r4, #8
    6f86:	e00f      	b.n	6fa8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    6f88:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    6f8c:	2901      	cmp	r1, #1
    6f8e:	d006      	beq.n	6f9e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x282>
    6f90:	2100      	movs	r1, #0
    6f92:	4b29      	ldr	r3, [pc, #164]	; (7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    6f94:	681b      	ldr	r3, [r3, #0]
    6f96:	2b01      	cmp	r3, #1
    6f98:	d003      	beq.n	6fa2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x286>
    6f9a:	2404      	movs	r4, #4
    6f9c:	e002      	b.n	6fa4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x288>
    6f9e:	2102      	movs	r1, #2
    6fa0:	e7f7      	b.n	6f92 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x276>
    6fa2:	2400      	movs	r4, #0
    6fa4:	430c      	orrs	r4, r1
    6fa6:	4314      	orrs	r4, r2
    6fa8:	f014 0f0b 	tst.w	r4, #11
    6fac:	d105      	bne.n	6fba <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29e>
    6fae:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    6fb2:	2901      	cmp	r1, #1
    6fb4:	d006      	beq.n	6fc4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2a8>
    6fb6:	2100      	movs	r1, #0
    6fb8:	430c      	orrs	r4, r1
    6fba:	4920      	ldr	r1, [pc, #128]	; (703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    6fbc:	7809      	ldrb	r1, [r1, #0]
    6fbe:	07c9      	lsls	r1, r1, #31
    6fc0:	d002      	beq.n	6fc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    6fc2:	e023      	b.n	700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    6fc4:	2110      	movs	r1, #16
    6fc6:	e7f7      	b.n	6fb8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29c>
    6fc8:	491d      	ldr	r1, [pc, #116]	; (7040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    6fca:	6809      	ldr	r1, [r1, #0]
    6fcc:	f011 0fff 	tst.w	r1, #255	; 0xff
    6fd0:	d003      	beq.n	6fda <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2be>
    6fd2:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    6fd6:	2a01      	cmp	r2, #1
    6fd8:	d000      	beq.n	6fdc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c0>
    6fda:	2200      	movs	r2, #0
    6fdc:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    6fe0:	f011 0fff 	tst.w	r1, #255	; 0xff
    6fe4:	d003      	beq.n	6fee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d2>
    6fe6:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    6fea:	2801      	cmp	r0, #1
    6fec:	d000      	beq.n	6ff0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>
    6fee:	2000      	movs	r0, #0
    6ff0:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    6ff4:	4810      	ldr	r0, [pc, #64]	; (7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    6ff6:	3010      	adds	r0, #16
    6ff8:	6800      	ldr	r0, [r0, #0]
    6ffa:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    6ffe:	f7ff f96b 	bl	62d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    7002:	2801      	cmp	r0, #1
    7004:	d000      	beq.n	7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    7006:	2000      	movs	r0, #0
    7008:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    700c:	f7ff ff2a 	bl	6e64 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x148>
    7010:	06e0      	lsls	r0, r4, #27
    7012:	d506      	bpl.n	7022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    7014:	0720      	lsls	r0, r4, #28
    7016:	d404      	bmi.n	7022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    7018:	7ae8      	ldrb	r0, [r5, #11]
    701a:	2801      	cmp	r0, #1
    701c:	d101      	bne.n	7022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    701e:	f044 0420 	orr.w	r4, r4, #32
    7022:	4808      	ldr	r0, [pc, #32]	; (7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7024:	6800      	ldr	r0, [r0, #0]
    7026:	9000      	str	r0, [sp, #0]
    7028:	4620      	mov	r0, r4
    702a:	bd38      	pop	{r3, r4, r5, pc}
    702c:	20000964 	.word	0x20000964
    7030:	40008000 	.word	0x40008000
    7034:	40001000 	.word	0x40001000
    7038:	40001400 	.word	0x40001400
    703c:	20000148 	.word	0x20000148
    7040:	40001640 	.word	0x40001640
    7044:	40008144 	.word	0x40008144
    7048:	4808      	ldr	r0, [pc, #32]	; (706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    704a:	b510      	push	{r4, lr}
    704c:	6800      	ldr	r0, [r0, #0]
    704e:	f000 000f 	and.w	r0, r0, #15
    7052:	2803      	cmp	r0, #3
    7054:	d006      	beq.n	7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    7056:	2804      	cmp	r0, #4
    7058:	d006      	beq.n	7068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    705a:	f240 2136 	movw	r1, #566	; 0x236
    705e:	203e      	movs	r0, #62	; 0x3e
    7060:	f7fc fd2a 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7064:	2001      	movs	r0, #1
    7066:	bd10      	pop	{r4, pc}
    7068:	2002      	movs	r0, #2
    706a:	bd10      	pop	{r4, pc}
    706c:	40001510 	.word	0x40001510
    7070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7074:	4c25      	ldr	r4, [pc, #148]	; (710c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    7076:	460d      	mov	r5, r1
    7078:	7aa2      	ldrb	r2, [r4, #10]
    707a:	b19a      	cbz	r2, 70a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    707c:	7b21      	ldrb	r1, [r4, #12]
    707e:	078b      	lsls	r3, r1, #30
    7080:	d503      	bpl.n	708a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8a>
    7082:	0783      	lsls	r3, r0, #30
    7084:	d501      	bpl.n	708a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8a>
    7086:	0743      	lsls	r3, r0, #29
    7088:	d41c      	bmi.n	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    708a:	06cb      	lsls	r3, r1, #27
    708c:	d505      	bpl.n	709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
    708e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    7092:	b113      	cbz	r3, 709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
    7094:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    7098:	b1a3      	cbz	r3, 70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    709a:	070b      	lsls	r3, r1, #28
    709c:	d50b      	bpl.n	70b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6>
    709e:	7f23      	ldrb	r3, [r4, #28]
    70a0:	b983      	cbnz	r3, 70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    70a2:	e008      	b.n	70b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6>
    70a4:	491a      	ldr	r1, [pc, #104]	; (7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    70a6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    70aa:	6008      	str	r0, [r1, #0]
    70ac:	f000 f868 	bl	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    70b0:	2000      	movs	r0, #0
    70b2:	7420      	strb	r0, [r4, #16]
    70b4:	e028      	b.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    70b6:	0749      	lsls	r1, r1, #29
    70b8:	d501      	bpl.n	70be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbe>
    70ba:	7f61      	ldrb	r1, [r4, #29]
    70bc:	b111      	cbz	r1, 70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    70be:	f010 0f11 	tst.w	r0, #17
    70c2:	d002      	beq.n	70ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    70c4:	f7ff f9e4 	bl	6490 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    70c8:	e01e      	b.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    70ca:	2a01      	cmp	r2, #1
    70cc:	d001      	beq.n	70d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd2>
    70ce:	2601      	movs	r6, #1
    70d0:	e000      	b.n	70d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    70d2:	2600      	movs	r6, #0
    70d4:	7a60      	ldrb	r0, [r4, #9]
    70d6:	2801      	cmp	r0, #1
    70d8:	d00e      	beq.n	70f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
    70da:	2700      	movs	r7, #0
    70dc:	f000 f850 	bl	7180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    70e0:	2196      	movs	r1, #150	; 0x96
    70e2:	4630      	mov	r0, r6
    70e4:	f000 f864 	bl	71b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>
    70e8:	4601      	mov	r1, r0
    70ea:	b14f      	cbz	r7, 7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    70ec:	353b      	adds	r5, #59	; 0x3b
    70ee:	428d      	cmp	r5, r1
    70f0:	d904      	bls.n	70fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>
    70f2:	2000      	movs	r0, #0
    70f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70f8:	2701      	movs	r7, #1
    70fa:	e7ef      	b.n	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    70fc:	2001      	movs	r0, #1
    70fe:	7260      	strb	r0, [r4, #9]
    7100:	7b62      	ldrb	r2, [r4, #13]
    7102:	4630      	mov	r0, r6
    7104:	f7ff fc2e 	bl	6964 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7108:	2001      	movs	r0, #1
    710a:	e7f3      	b.n	70f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>
    710c:	20000964 	.word	0x20000964
    7110:	4001f508 	.word	0x4001f508
    7114:	4805      	ldr	r0, [pc, #20]	; (712c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    7116:	2100      	movs	r1, #0
    7118:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    711c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7120:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    7124:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7128:	4770      	bx	lr
    712a:	0000      	.short	0x0000
    712c:	40001000 	.word	0x40001000
    7130:	4804      	ldr	r0, [pc, #16]	; (7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    7132:	6b01      	ldr	r1, [r0, #48]	; 0x30
    7134:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    7138:	6301      	str	r1, [r0, #48]	; 0x30
    713a:	4903      	ldr	r1, [pc, #12]	; (7148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>)
    713c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7140:	6008      	str	r0, [r1, #0]
    7142:	4770      	bx	lr
    7144:	20000964 	.word	0x20000964
    7148:	4001f504 	.word	0x4001f504
    714c:	4905      	ldr	r1, [pc, #20]	; (7164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>)
    714e:	2000      	movs	r0, #0
    7150:	6008      	str	r0, [r1, #0]
    7152:	1f09      	subs	r1, r1, #4
    7154:	6008      	str	r0, [r1, #0]
    7156:	1f09      	subs	r1, r1, #4
    7158:	6008      	str	r0, [r1, #0]
    715a:	4902      	ldr	r1, [pc, #8]	; (7164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>)
    715c:	1d09      	adds	r1, r1, #4
    715e:	6008      	str	r0, [r1, #0]
    7160:	4770      	bx	lr
    7162:	0000      	.short	0x0000
    7164:	40008548 	.word	0x40008548
    7168:	4903      	ldr	r1, [pc, #12]	; (7178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    716a:	7a49      	ldrb	r1, [r1, #9]
    716c:	2900      	cmp	r1, #0
    716e:	d102      	bne.n	7176 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x176>
    7170:	4902      	ldr	r1, [pc, #8]	; (717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    7172:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    7176:	4770      	bx	lr
    7178:	20000964 	.word	0x20000964
    717c:	4001f098 	.word	0x4001f098
    7180:	4803      	ldr	r0, [pc, #12]	; (7190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    7182:	2100      	movs	r1, #0
    7184:	7241      	strb	r1, [r0, #9]
    7186:	7281      	strb	r1, [r0, #10]
    7188:	72c1      	strb	r1, [r0, #11]
    718a:	2101      	movs	r1, #1
    718c:	7301      	strb	r1, [r0, #12]
    718e:	4770      	bx	lr
    7190:	20000964 	.word	0x20000964
    7194:	4a05      	ldr	r2, [pc, #20]	; (71ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac>)
    7196:	7a52      	ldrb	r2, [r2, #9]
    7198:	2a01      	cmp	r2, #1
    719a:	d006      	beq.n	71aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    719c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    71a0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    71a4:	fbb1 f1f2 	udiv	r1, r1, r2
    71a8:	1a40      	subs	r0, r0, r1
    71aa:	4770      	bx	lr
    71ac:	20000964 	.word	0x20000964
    71b0:	b570      	push	{r4, r5, r6, lr}
    71b2:	4c13      	ldr	r4, [pc, #76]	; (7200 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x200>)
    71b4:	4603      	mov	r3, r0
    71b6:	460d      	mov	r5, r1
    71b8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    71bc:	2000      	movs	r0, #0
    71be:	b15a      	cbz	r2, 71d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    71c0:	4621      	mov	r1, r4
    71c2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    71c6:	b163      	cbz	r3, 71e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e2>
    71c8:	2b01      	cmp	r3, #1
    71ca:	d111      	bne.n	71f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f0>
    71cc:	2a01      	cmp	r2, #1
    71ce:	4628      	mov	r0, r5
    71d0:	d012      	beq.n	71f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f8>
    71d2:	f002 fb37 	bl	9844 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    71d6:	e009      	b.n	71ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    71d8:	f240 7186 	movw	r1, #1926	; 0x786
    71dc:	203e      	movs	r0, #62	; 0x3e
    71de:	f7fc fc6b 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71e2:	2a01      	cmp	r2, #1
    71e4:	4628      	mov	r0, r5
    71e6:	d004      	beq.n	71f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f2>
    71e8:	f002 fb3a 	bl	9860 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    71ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    71ee:	4408      	add	r0, r1
    71f0:	bd70      	pop	{r4, r5, r6, pc}
    71f2:	f002 fb4f 	bl	9894 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    71f6:	e7f9      	b.n	71ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    71f8:	f002 fb3d 	bl	9876 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    71fc:	e7f6      	b.n	71ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    71fe:	0000      	.short	0x0000
    7200:	20000964 	.word	0x20000964
    7204:	b510      	push	{r4, lr}
    7206:	2200      	movs	r2, #0
    7208:	2901      	cmp	r1, #1
    720a:	d008      	beq.n	721e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21e>
    720c:	2902      	cmp	r1, #2
    720e:	d004      	beq.n	721a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21a>
    7210:	f44f 7121 	mov.w	r1, #644	; 0x284
    7214:	203e      	movs	r0, #62	; 0x3e
    7216:	f7fc fc4f 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    721a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    721e:	4905      	ldr	r1, [pc, #20]	; (7234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>)
    7220:	430a      	orrs	r2, r1
    7222:	4905      	ldr	r1, [pc, #20]	; (7238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>)
    7224:	600a      	str	r2, [r1, #0]
    7226:	4905      	ldr	r1, [pc, #20]	; (723c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>)
    7228:	4308      	orrs	r0, r1
    722a:	4903      	ldr	r1, [pc, #12]	; (7238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>)
    722c:	1d09      	adds	r1, r1, #4
    722e:	6008      	str	r0, [r1, #0]
    7230:	bd10      	pop	{r4, pc}
    7232:	0000      	.short	0x0000
    7234:	00100108 	.word	0x00100108
    7238:	40001514 	.word	0x40001514
    723c:	02030000 	.word	0x02030000

00007240 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    7240:	4901      	ldr	r1, [pc, #4]	; (7248 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    7242:	b2c0      	uxtb	r0, r0
    7244:	6008      	str	r0, [r1, #0]
    7246:	4770      	bx	lr
    7248:	4000150c 	.word	0x4000150c

0000724c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    724c:	b510      	push	{r4, lr}
    724e:	4907      	ldr	r1, [pc, #28]	; (726c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    7250:	2801      	cmp	r0, #1
    7252:	d005      	beq.n	7260 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    7254:	2802      	cmp	r0, #2
    7256:	d005      	beq.n	7264 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    7258:	2197      	movs	r1, #151	; 0x97
    725a:	203f      	movs	r0, #63	; 0x3f
    725c:	f7fc fc2c 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7260:	2003      	movs	r0, #3
    7262:	e000      	b.n	7266 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    7264:	2004      	movs	r0, #4
    7266:	6008      	str	r0, [r1, #0]
    7268:	bd10      	pop	{r4, pc}
    726a:	0000      	.short	0x0000
    726c:	40001510 	.word	0x40001510

00007270 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    7270:	4770      	bx	lr
    7272:	2100      	movs	r1, #0
    7274:	7081      	strb	r1, [r0, #2]
    7276:	7001      	strb	r1, [r0, #0]
    7278:	7041      	strb	r1, [r0, #1]
    727a:	4770      	bx	lr

0000727c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    727c:	b570      	push	{r4, r5, r6, lr}
    727e:	f7f9 f8c1 	bl	404 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    7282:	4605      	mov	r5, r0
    7284:	2400      	movs	r4, #0
    7286:	e006      	b.n	7296 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    7288:	4620      	mov	r0, r4
    728a:	f7f9 f8c1 	bl	410 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    728e:	f7ff fff0 	bl	7272 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    7292:	1c64      	adds	r4, r4, #1
    7294:	b2e4      	uxtb	r4, r4
    7296:	42ac      	cmp	r4, r5
    7298:	d3f6      	bcc.n	7288 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    729a:	bd70      	pop	{r4, r5, r6, pc}

0000729c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    729c:	2000      	movs	r0, #0
    729e:	f7fb bdd1 	b.w	2e44 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

000072a2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    72a2:	b510      	push	{r4, lr}
    72a4:	f7fb faba 	bl	281c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    72a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72ac:	f000 b800 	b.w	72b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

000072b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    72b0:	0a41      	lsrs	r1, r0, #9
    72b2:	f643 5209 	movw	r2, #15625	; 0x3d09
    72b6:	4351      	muls	r1, r2
    72b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    72bc:	fb10 f002 	smulbb	r0, r0, r2
    72c0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    72c4:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    72c8:	4770      	bx	lr

000072ca <MPSL_IRQ_RADIO_Handler>:
    72ca:	f7fa b92b 	b.w	1524 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    72ce:	2800      	cmp	r0, #0
    72d0:	db09      	blt.n	72e6 <MPSL_IRQ_RADIO_Handler+0x1c>
    72d2:	f000 021f 	and.w	r2, r0, #31
    72d6:	2101      	movs	r1, #1
    72d8:	4091      	lsls	r1, r2
    72da:	0940      	lsrs	r0, r0, #5
    72dc:	0080      	lsls	r0, r0, #2
    72de:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    72e2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    72e6:	4770      	bx	lr
    72e8:	2800      	cmp	r0, #0
    72ea:	db0d      	blt.n	7308 <MPSL_IRQ_RADIO_Handler+0x3e>
    72ec:	f000 021f 	and.w	r2, r0, #31
    72f0:	2101      	movs	r1, #1
    72f2:	4091      	lsls	r1, r2
    72f4:	0940      	lsrs	r0, r0, #5
    72f6:	0080      	lsls	r0, r0, #2
    72f8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    72fc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    7300:	f3bf 8f4f 	dsb	sy
    7304:	f3bf 8f6f 	isb	sy
    7308:	4770      	bx	lr

0000730a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    730a:	b570      	push	{r4, r5, r6, lr}
    730c:	4602      	mov	r2, r0
    730e:	2000      	movs	r0, #0
    7310:	2900      	cmp	r1, #0
    7312:	d01d      	beq.n	7350 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    7314:	fba2 0101 	umull	r0, r1, r2, r1
    7318:	0a40      	lsrs	r0, r0, #9
    731a:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    731e:	0a49      	lsrs	r1, r1, #9
    7320:	1c40      	adds	r0, r0, #1
    7322:	f141 0100 	adc.w	r1, r1, #0
    7326:	f240 72a1 	movw	r2, #1953	; 0x7a1
    732a:	1883      	adds	r3, r0, r2
    732c:	f141 0100 	adc.w	r1, r1, #0
    7330:	1c5b      	adds	r3, r3, #1
    7332:	f141 0400 	adc.w	r4, r1, #0
    7336:	2100      	movs	r1, #0
    7338:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    733c:	41a1      	sbcs	r1, r4
    733e:	d203      	bcs.n	7348 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    7340:	2171      	movs	r1, #113	; 0x71
    7342:	206d      	movs	r0, #109	; 0x6d
    7344:	f7fc f922 	bl	358c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7348:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    734c:	fbb0 f0f2 	udiv	r0, r0, r2
    7350:	bd70      	pop	{r4, r5, r6, pc}
    7352:	5840      	ldr	r0, [r0, r1]
    7354:	2800      	cmp	r0, #0
    7356:	d000      	beq.n	735a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    7358:	2001      	movs	r0, #1
    735a:	4770      	bx	lr
    735c:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    7360:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    7364:	f002 0201 	and.w	r2, r2, #1
    7368:	03c0      	lsls	r0, r0, #15
    736a:	d503      	bpl.n	7374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    736c:	428a      	cmp	r2, r1
    736e:	d101      	bne.n	7374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    7370:	2001      	movs	r0, #1
    7372:	4770      	bx	lr
    7374:	2000      	movs	r0, #0
    7376:	4770      	bx	lr

00007378 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    7378:	b510      	push	{r4, lr}
    737a:	2101      	movs	r1, #1
    737c:	0788      	lsls	r0, r1, #30
    737e:	f7fc f8c3 	bl	3508 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    7382:	2800      	cmp	r0, #0
    7384:	d000      	beq.n	7388 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    7386:	2001      	movs	r0, #1
    7388:	bd10      	pop	{r4, pc}

0000738a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    738a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    738e:	2101      	movs	r1, #1
    7390:	6001      	str	r1, [r0, #0]
    7392:	4770      	bx	lr

00007394 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    7394:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7398:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    739c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    73a0:	f002 0203 	and.w	r2, r2, #3
    73a4:	03c9      	lsls	r1, r1, #15
    73a6:	d503      	bpl.n	73b0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    73a8:	4282      	cmp	r2, r0
    73aa:	d101      	bne.n	73b0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    73ac:	2001      	movs	r0, #1
    73ae:	4770      	bx	lr
    73b0:	2000      	movs	r0, #0
    73b2:	4770      	bx	lr

000073b4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    73b4:	b510      	push	{r4, lr}
    73b6:	2100      	movs	r1, #0
    73b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    73bc:	f7fc f8a4 	bl	3508 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    73c0:	2800      	cmp	r0, #0
    73c2:	d000      	beq.n	73c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    73c4:	2001      	movs	r0, #1
    73c6:	bd10      	pop	{r4, pc}
    73c8:	2800      	cmp	r0, #0
    73ca:	db09      	blt.n	73e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    73cc:	f000 021f 	and.w	r2, r0, #31
    73d0:	2101      	movs	r1, #1
    73d2:	4091      	lsls	r1, r2
    73d4:	0940      	lsrs	r0, r0, #5
    73d6:	0080      	lsls	r0, r0, #2
    73d8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    73dc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    73e0:	4770      	bx	lr
    73e2:	2800      	cmp	r0, #0
    73e4:	db0d      	blt.n	7402 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    73e6:	f000 021f 	and.w	r2, r0, #31
    73ea:	2101      	movs	r1, #1
    73ec:	4091      	lsls	r1, r2
    73ee:	0940      	lsrs	r0, r0, #5
    73f0:	0080      	lsls	r0, r0, #2
    73f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    73f6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    73fa:	f3bf 8f4f 	dsb	sy
    73fe:	f3bf 8f6f 	isb	sy
    7402:	4770      	bx	lr
    7404:	00021000 	.word	0x00021000
    7408:	000000fa 	.word	0x000000fa
    740c:	cd328aac 	.word	0xcd328aac
    7410:	09dd6d0b 	.word	0x09dd6d0b
    7414:	8494d80b 	.word	0x8494d80b
    7418:	bff32eb7 	.word	0xbff32eb7
    741c:	7bd81808 	.word	0x7bd81808
    7420:	2800      	cmp	r0, #0
    7422:	db09      	blt.n	7438 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    7424:	f000 021f 	and.w	r2, r0, #31
    7428:	2101      	movs	r1, #1
    742a:	4091      	lsls	r1, r2
    742c:	0940      	lsrs	r0, r0, #5
    742e:	0080      	lsls	r0, r0, #2
    7430:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7434:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    7438:	4770      	bx	lr

0000743a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    743a:	f3ef 8110 	mrs	r1, PRIMASK
    743e:	b672      	cpsid	i
    7440:	7802      	ldrb	r2, [r0, #0]
    7442:	2a01      	cmp	r2, #1
    7444:	d001      	beq.n	744a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    7446:	2201      	movs	r2, #1
    7448:	e000      	b.n	744c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    744a:	2200      	movs	r2, #0
    744c:	2301      	movs	r3, #1
    744e:	7003      	strb	r3, [r0, #0]
    7450:	b901      	cbnz	r1, 7454 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    7452:	b662      	cpsie	i
    7454:	b10a      	cbz	r2, 745a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    7456:	2000      	movs	r0, #0
    7458:	4770      	bx	lr
    745a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    745e:	4770      	bx	lr

00007460 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    7460:	2100      	movs	r1, #0
    7462:	7001      	strb	r1, [r0, #0]
    7464:	4608      	mov	r0, r1
    7466:	4770      	bx	lr

00007468 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    7468:	f3ef 8110 	mrs	r1, PRIMASK
    746c:	b672      	cpsid	i
    746e:	2200      	movs	r2, #0
    7470:	7002      	strb	r2, [r0, #0]
    7472:	b901      	cbnz	r1, 7476 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    7474:	b662      	cpsie	i
    7476:	2000      	movs	r0, #0
    7478:	4770      	bx	lr

0000747a <mpsl_low_priority_process>:
    747a:	f7fc b973 	b.w	3764 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000747e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    747e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7482:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7486:	280f      	cmp	r0, #15
    7488:	d001      	beq.n	748e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    748a:	2000      	movs	r0, #0
    748c:	4770      	bx	lr
    748e:	2001      	movs	r0, #1
    7490:	4770      	bx	lr

00007492 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    7492:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7496:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    749a:	280a      	cmp	r0, #10
    749c:	d001      	beq.n	74a2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    749e:	2000      	movs	r0, #0
    74a0:	4770      	bx	lr
    74a2:	2001      	movs	r0, #1
    74a4:	4770      	bx	lr

000074a6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    74a6:	b500      	push	{lr}
    74a8:	f7ff fff3 	bl	7492 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    74ac:	b120      	cbz	r0, 74b8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    74ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    74b2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    74b6:	b108      	cbz	r0, 74bc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    74b8:	2000      	movs	r0, #0
    74ba:	bd00      	pop	{pc}
    74bc:	2001      	movs	r0, #1
    74be:	bd00      	pop	{pc}

000074c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    74c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    74c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    74c8:	280e      	cmp	r0, #14
    74ca:	d001      	beq.n	74d0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    74cc:	2000      	movs	r0, #0
    74ce:	4770      	bx	lr
    74d0:	2001      	movs	r0, #1
    74d2:	4770      	bx	lr

000074d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    74d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    74d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    74dc:	2810      	cmp	r0, #16
    74de:	d001      	beq.n	74e4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    74e0:	2000      	movs	r0, #0
    74e2:	4770      	bx	lr
    74e4:	2001      	movs	r0, #1
    74e6:	4770      	bx	lr

000074e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    74e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    74ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    74f0:	2806      	cmp	r0, #6
    74f2:	d003      	beq.n	74fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    74f4:	1c40      	adds	r0, r0, #1
    74f6:	d001      	beq.n	74fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    74f8:	2000      	movs	r0, #0
    74fa:	4770      	bx	lr
    74fc:	2001      	movs	r0, #1
    74fe:	4770      	bx	lr

00007500 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    7500:	b500      	push	{lr}
    7502:	f7ff fff1 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7506:	b148      	cbz	r0, 751c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    7508:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    750c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    7510:	2806      	cmp	r0, #6
    7512:	d303      	bcc.n	751c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    7514:	1c40      	adds	r0, r0, #1
    7516:	d001      	beq.n	751c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    7518:	2001      	movs	r0, #1
    751a:	bd00      	pop	{pc}
    751c:	2000      	movs	r0, #0
    751e:	bd00      	pop	{pc}

00007520 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    7520:	b500      	push	{lr}
    7522:	f7ff ffe1 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7526:	b138      	cbz	r0, 7538 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    7528:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    752c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    7530:	2806      	cmp	r0, #6
    7532:	d303      	bcc.n	753c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    7534:	1c40      	adds	r0, r0, #1
    7536:	d001      	beq.n	753c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    7538:	2000      	movs	r0, #0
    753a:	bd00      	pop	{pc}
    753c:	2001      	movs	r0, #1
    753e:	bd00      	pop	{pc}

00007540 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    7540:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7544:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7548:	280d      	cmp	r0, #13
    754a:	d001      	beq.n	7550 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    754c:	2000      	movs	r0, #0
    754e:	4770      	bx	lr
    7550:	2001      	movs	r0, #1
    7552:	4770      	bx	lr

00007554 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    7554:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7558:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    755c:	2808      	cmp	r0, #8
    755e:	d001      	beq.n	7564 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    7560:	2000      	movs	r0, #0
    7562:	4770      	bx	lr
    7564:	2001      	movs	r0, #1
    7566:	4770      	bx	lr

00007568 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    7568:	2a00      	cmp	r2, #0
    756a:	bf04      	itt	eq
    756c:	2000      	moveq	r0, #0
    756e:	4770      	bxeq	lr
    7570:	1e52      	subs	r2, r2, #1
    7572:	d007      	beq.n	7584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    7574:	7803      	ldrb	r3, [r0, #0]
    7576:	f891 c000 	ldrb.w	ip, [r1]
    757a:	4563      	cmp	r3, ip
    757c:	bf04      	itt	eq
    757e:	1c40      	addeq	r0, r0, #1
    7580:	1c49      	addeq	r1, r1, #1
    7582:	d0f5      	beq.n	7570 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    7584:	7800      	ldrb	r0, [r0, #0]
    7586:	7809      	ldrb	r1, [r1, #0]
    7588:	1a40      	subs	r0, r0, r1
    758a:	4770      	bx	lr

0000758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    758c:	b4f0      	push	{r4, r5, r6, r7}
    758e:	ea80 0c01 	eor.w	ip, r0, r1
    7592:	4603      	mov	r3, r0
    7594:	f01c 0f03 	tst.w	ip, #3
    7598:	d13c      	bne.n	7614 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    759a:	f013 0f03 	tst.w	r3, #3
    759e:	d00b      	beq.n	75b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    75a0:	2a00      	cmp	r2, #0
    75a2:	bf04      	itt	eq
    75a4:	bcf0      	popeq	{r4, r5, r6, r7}
    75a6:	4770      	bxeq	lr
    75a8:	f811 cb01 	ldrb.w	ip, [r1], #1
    75ac:	f803 cb01 	strb.w	ip, [r3], #1
    75b0:	1e52      	subs	r2, r2, #1
    75b2:	f013 0f03 	tst.w	r3, #3
    75b6:	d1f3      	bne.n	75a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    75b8:	2a03      	cmp	r2, #3
    75ba:	d94f      	bls.n	765c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    75bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    75c0:	d24c      	bcs.n	765c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    75c2:	f1c2 0c00 	rsb	ip, r2, #0
    75c6:	ea4f 74ec 	mov.w	r4, ip, asr #31
    75ca:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    75ce:	ea4f 0cac 	mov.w	ip, ip, asr #2
    75d2:	f1cc 0c00 	rsb	ip, ip, #0
    75d6:	f1bc 0f00 	cmp.w	ip, #0
    75da:	dd1b      	ble.n	7614 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    75dc:	1f0d      	subs	r5, r1, #4
    75de:	1f1c      	subs	r4, r3, #4
    75e0:	f01c 0f01 	tst.w	ip, #1
    75e4:	d003      	beq.n	75ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    75e6:	f855 6f04 	ldr.w	r6, [r5, #4]!
    75ea:	f844 6f04 	str.w	r6, [r4, #4]!
    75ee:	ea5f 066c 	movs.w	r6, ip, asr #1
    75f2:	d007      	beq.n	7604 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    75f4:	686f      	ldr	r7, [r5, #4]
    75f6:	6067      	str	r7, [r4, #4]
    75f8:	f855 7f08 	ldr.w	r7, [r5, #8]!
    75fc:	f844 7f08 	str.w	r7, [r4, #8]!
    7600:	1e76      	subs	r6, r6, #1
    7602:	d1f7      	bne.n	75f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    7604:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    7608:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    760c:	f1cc 0c00 	rsb	ip, ip, #0
    7610:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    7614:	2a00      	cmp	r2, #0
    7616:	bf04      	itt	eq
    7618:	bcf0      	popeq	{r4, r5, r6, r7}
    761a:	4770      	bxeq	lr
    761c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7620:	d226      	bcs.n	7670 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    7622:	2a00      	cmp	r2, #0
    7624:	bfdc      	itt	le
    7626:	bcf0      	pople	{r4, r5, r6, r7}
    7628:	4770      	bxle	lr
    762a:	1e49      	subs	r1, r1, #1
    762c:	1e5b      	subs	r3, r3, #1
    762e:	f012 0f01 	tst.w	r2, #1
    7632:	d003      	beq.n	763c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    7634:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    7638:	f803 cf01 	strb.w	ip, [r3, #1]!
    763c:	1052      	asrs	r2, r2, #1
    763e:	bf04      	itt	eq
    7640:	bcf0      	popeq	{r4, r5, r6, r7}
    7642:	4770      	bxeq	lr
    7644:	f891 c001 	ldrb.w	ip, [r1, #1]
    7648:	f883 c001 	strb.w	ip, [r3, #1]
    764c:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    7650:	f803 cf02 	strb.w	ip, [r3, #2]!
    7654:	1e52      	subs	r2, r2, #1
    7656:	d1f5      	bne.n	7644 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    7658:	bcf0      	pop	{r4, r5, r6, r7}
    765a:	4770      	bx	lr
    765c:	2a04      	cmp	r2, #4
    765e:	d3d9      	bcc.n	7614 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    7660:	f851 cb04 	ldr.w	ip, [r1], #4
    7664:	1f12      	subs	r2, r2, #4
    7666:	f843 cb04 	str.w	ip, [r3], #4
    766a:	2a04      	cmp	r2, #4
    766c:	d2f8      	bcs.n	7660 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    766e:	e7d1      	b.n	7614 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    7670:	f811 cb01 	ldrb.w	ip, [r1], #1
    7674:	f803 cb01 	strb.w	ip, [r3], #1
    7678:	1e52      	subs	r2, r2, #1
    767a:	d1f9      	bne.n	7670 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    767c:	bcf0      	pop	{r4, r5, r6, r7}
    767e:	4770      	bx	lr

00007680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    7680:	b470      	push	{r4, r5, r6}
    7682:	4603      	mov	r3, r0
    7684:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    7688:	f010 0f03 	tst.w	r0, #3
    768c:	d009      	beq.n	76a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    768e:	2a00      	cmp	r2, #0
    7690:	bf04      	itt	eq
    7692:	bc70      	popeq	{r4, r5, r6}
    7694:	4770      	bxeq	lr
    7696:	f803 cb01 	strb.w	ip, [r3], #1
    769a:	1e52      	subs	r2, r2, #1
    769c:	f013 0f03 	tst.w	r3, #3
    76a0:	d1f5      	bne.n	768e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    76a2:	b2c9      	uxtb	r1, r1
    76a4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    76a8:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    76ac:	2a03      	cmp	r2, #3
    76ae:	d939      	bls.n	7724 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    76b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    76b4:	d236      	bcs.n	7724 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    76b6:	4251      	negs	r1, r2
    76b8:	17cc      	asrs	r4, r1, #31
    76ba:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    76be:	1089      	asrs	r1, r1, #2
    76c0:	424e      	negs	r6, r1
    76c2:	2e00      	cmp	r6, #0
    76c4:	dd11      	ble.n	76ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    76c6:	1f19      	subs	r1, r3, #4
    76c8:	f016 0f01 	tst.w	r6, #1
    76cc:	bf18      	it	ne
    76ce:	f841 5f04 	strne.w	r5, [r1, #4]!
    76d2:	1074      	asrs	r4, r6, #1
    76d4:	d004      	beq.n	76e0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    76d6:	604d      	str	r5, [r1, #4]
    76d8:	f841 5f08 	str.w	r5, [r1, #8]!
    76dc:	1e64      	subs	r4, r4, #1
    76de:	d1fa      	bne.n	76d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    76e0:	4271      	negs	r1, r6
    76e2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    76e6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    76ea:	2a00      	cmp	r2, #0
    76ec:	bf04      	itt	eq
    76ee:	bc70      	popeq	{r4, r5, r6}
    76f0:	4770      	bxeq	lr
    76f2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    76f6:	d21d      	bcs.n	7734 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    76f8:	2a00      	cmp	r2, #0
    76fa:	bfdc      	itt	le
    76fc:	bc70      	pople	{r4, r5, r6}
    76fe:	4770      	bxle	lr
    7700:	1e59      	subs	r1, r3, #1
    7702:	f012 0f01 	tst.w	r2, #1
    7706:	bf18      	it	ne
    7708:	f801 cf01 	strbne.w	ip, [r1, #1]!
    770c:	1052      	asrs	r2, r2, #1
    770e:	bf04      	itt	eq
    7710:	bc70      	popeq	{r4, r5, r6}
    7712:	4770      	bxeq	lr
    7714:	f881 c001 	strb.w	ip, [r1, #1]
    7718:	f801 cf02 	strb.w	ip, [r1, #2]!
    771c:	1e52      	subs	r2, r2, #1
    771e:	d1f9      	bne.n	7714 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    7720:	bc70      	pop	{r4, r5, r6}
    7722:	4770      	bx	lr
    7724:	2a04      	cmp	r2, #4
    7726:	d3e0      	bcc.n	76ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    7728:	1f12      	subs	r2, r2, #4
    772a:	f843 5b04 	str.w	r5, [r3], #4
    772e:	2a04      	cmp	r2, #4
    7730:	d2fa      	bcs.n	7728 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    7732:	e7da      	b.n	76ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    7734:	f803 cb01 	strb.w	ip, [r3], #1
    7738:	1e52      	subs	r2, r2, #1
    773a:	d1fb      	bne.n	7734 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    773c:	bc70      	pop	{r4, r5, r6}
    773e:	4770      	bx	lr
    7740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7744:	4770      	bx	lr
    7746:	2000      	movs	r0, #0
    7748:	4770      	bx	lr
    774a:	2000      	movs	r0, #0
    774c:	4770      	bx	lr
    774e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7752:	4770      	bx	lr
    7754:	4770      	bx	lr
    7756:	4770      	bx	lr
    7758:	2000      	movs	r0, #0
    775a:	4770      	bx	lr
    775c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7760:	4770      	bx	lr
    7762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7766:	4770      	bx	lr
    7768:	2100      	movs	r1, #0
    776a:	7001      	strb	r1, [r0, #0]
    776c:	4770      	bx	lr
    776e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7772:	4770      	bx	lr
    7774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7778:	4770      	bx	lr
    777a:	2000      	movs	r0, #0
    777c:	4770      	bx	lr
    777e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7780:	4604      	mov	r4, r0
    7782:	f100 0003 	add.w	r0, r0, #3
    7786:	f020 0003 	bic.w	r0, r0, #3
    778a:	0016      	movs	r6, r2
    778c:	9000      	str	r0, [sp, #0]
    778e:	460d      	mov	r5, r1
    7790:	788a      	ldrb	r2, [r1, #2]
    7792:	7849      	ldrb	r1, [r1, #1]
    7794:	d000      	beq.n	7798 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    7796:	2000      	movs	r0, #0
    7798:	f7fc fb6c 	bl	3e74 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    779c:	9900      	ldr	r1, [sp, #0]
    779e:	4408      	add	r0, r1
    77a0:	9000      	str	r0, [sp, #0]
    77a2:	78a9      	ldrb	r1, [r5, #2]
    77a4:	b139      	cbz	r1, 77b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    77a6:	89ea      	ldrh	r2, [r5, #14]
    77a8:	b106      	cbz	r6, 77ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12c>
    77aa:	2000      	movs	r0, #0
    77ac:	f7fc fd9c 	bl	42e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    77b0:	9900      	ldr	r1, [sp, #0]
    77b2:	4408      	add	r0, r1
    77b4:	9000      	str	r0, [sp, #0]
    77b6:	4632      	mov	r2, r6
    77b8:	4629      	mov	r1, r5
    77ba:	4668      	mov	r0, sp
    77bc:	f000 f807 	bl	77ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14e>
    77c0:	9800      	ldr	r0, [sp, #0]
    77c2:	1dc0      	adds	r0, r0, #7
    77c4:	f020 0007 	bic.w	r0, r0, #7
    77c8:	9000      	str	r0, [sp, #0]
    77ca:	1b00      	subs	r0, r0, r4
    77cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77d2:	4606      	mov	r6, r0
    77d4:	460c      	mov	r4, r1
    77d6:	7808      	ldrb	r0, [r1, #0]
    77d8:	7849      	ldrb	r1, [r1, #1]
    77da:	2700      	movs	r7, #0
    77dc:	4408      	add	r0, r1
    77de:	4691      	mov	r9, r2
    77e0:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    77e4:	463d      	mov	r5, r7
    77e6:	e00e      	b.n	7806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x186>
    77e8:	79a3      	ldrb	r3, [r4, #6]
    77ea:	2b02      	cmp	r3, #2
    77ec:	d200      	bcs.n	77f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x170>
    77ee:	2302      	movs	r3, #2
    77f0:	7962      	ldrb	r2, [r4, #5]
    77f2:	2a03      	cmp	r2, #3
    77f4:	d200      	bcs.n	77f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    77f6:	2203      	movs	r2, #3
    77f8:	7921      	ldrb	r1, [r4, #4]
    77fa:	78e0      	ldrb	r0, [r4, #3]
    77fc:	f000 fbfb 	bl	7ff6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    7800:	1c6d      	adds	r5, r5, #1
    7802:	4407      	add	r7, r0
    7804:	b2ed      	uxtb	r5, r5
    7806:	4545      	cmp	r5, r8
    7808:	d3ee      	bcc.n	77e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x168>
    780a:	6830      	ldr	r0, [r6, #0]
    780c:	1cc0      	adds	r0, r0, #3
    780e:	f020 0003 	bic.w	r0, r0, #3
    7812:	6030      	str	r0, [r6, #0]
    7814:	f1b9 0f00 	cmp.w	r9, #0
    7818:	d000      	beq.n	781c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x19c>
    781a:	2000      	movs	r0, #0
    781c:	463a      	mov	r2, r7
    781e:	4641      	mov	r1, r8
    7820:	f7fc fd00 	bl	4224 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    7824:	6831      	ldr	r1, [r6, #0]
    7826:	4408      	add	r0, r1
    7828:	6030      	str	r0, [r6, #0]
    782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000782e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    782e:	b510      	push	{r4, lr}
    7830:	4604      	mov	r4, r0
    7832:	4620      	mov	r0, r4
    7834:	f7fc fa10 	bl	3c58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    7838:	2800      	cmp	r0, #0
    783a:	d006      	beq.n	784a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    783c:	78a1      	ldrb	r1, [r4, #2]
    783e:	7820      	ldrb	r0, [r4, #0]
    7840:	f000 f804 	bl	784c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    7844:	2800      	cmp	r0, #0
    7846:	d0f4      	beq.n	7832 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    7848:	2001      	movs	r0, #1
    784a:	bd10      	pop	{r4, pc}
    784c:	b570      	push	{r4, r5, r6, lr}
    784e:	460c      	mov	r4, r1
    7850:	4605      	mov	r5, r0
    7852:	f7fc fa75 	bl	3d40 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    7856:	2800      	cmp	r0, #0
    7858:	d002      	beq.n	7860 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    785a:	2d3e      	cmp	r5, #62	; 0x3e
    785c:	d001      	beq.n	7862 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    785e:	2001      	movs	r0, #1
    7860:	bd70      	pop	{r4, r5, r6, pc}
    7862:	2c12      	cmp	r4, #18
    7864:	d004      	beq.n	7870 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    7866:	4620      	mov	r0, r4
    7868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    786c:	f7fc ba84 	b.w	3d78 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7870:	2000      	movs	r0, #0
    7872:	bd70      	pop	{r4, r5, r6, pc}

00007874 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    7874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7878:	4604      	mov	r4, r0
    787a:	780f      	ldrb	r7, [r1, #0]
    787c:	2000      	movs	r0, #0
    787e:	250c      	movs	r5, #12
    7880:	2605      	movs	r6, #5
    7882:	223e      	movs	r2, #62	; 0x3e
    7884:	23ff      	movs	r3, #255	; 0xff
    7886:	2f1b      	cmp	r7, #27
    7888:	d27d      	bcs.n	7986 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    788a:	e8df f007 	tbb	[pc, r7]
    788e:	0eeb      	.short	0x0eeb
    7890:	632d2725 	.word	0x632d2725
    7894:	af9b816d 	.word	0xaf9b816d
    7898:	e2c7bcb1 	.word	0xe2c7bcb1
    789c:	31ebebf5 	.word	0x31ebebf5
    78a0:	f2fed5d2 	.word	0xf2fed5d2
    78a4:	eeeff0f1 	.word	0xeeeff0f1
    78a8:	00ed      	.short	0x00ed
    78aa:	7025      	strb	r5, [r4, #0]
    78ac:	7908      	ldrb	r0, [r1, #4]
    78ae:	70a0      	strb	r0, [r4, #2]
    78b0:	7948      	ldrb	r0, [r1, #5]
    78b2:	70e0      	strb	r0, [r4, #3]
    78b4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    78b8:	0a00      	lsrs	r0, r0, #8
    78ba:	7120      	strb	r0, [r4, #4]
    78bc:	79c8      	ldrb	r0, [r1, #7]
    78be:	7160      	strb	r0, [r4, #5]
    78c0:	7a08      	ldrb	r0, [r1, #8]
    78c2:	71a0      	strb	r0, [r4, #6]
    78c4:	8908      	ldrh	r0, [r1, #8]
    78c6:	0a00      	lsrs	r0, r0, #8
    78c8:	71e0      	strb	r0, [r4, #7]
    78ca:	7a88      	ldrb	r0, [r1, #10]
    78cc:	7220      	strb	r0, [r4, #8]
    78ce:	8948      	ldrh	r0, [r1, #10]
    78d0:	0a00      	lsrs	r0, r0, #8
    78d2:	7260      	strb	r0, [r4, #9]
    78d4:	2008      	movs	r0, #8
    78d6:	e0c2      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    78d8:	2010      	movs	r0, #16
    78da:	e000      	b.n	78de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    78dc:	201a      	movs	r0, #26
    78de:	7020      	strb	r0, [r4, #0]
    78e0:	7908      	ldrb	r0, [r1, #4]
    78e2:	70a0      	strb	r0, [r4, #2]
    78e4:	2001      	movs	r0, #1
    78e6:	e0ba      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    78e8:	4620      	mov	r0, r4
    78ea:	f000 f947 	bl	7b7c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    78ee:	e0b4      	b.n	7a5a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    78f0:	7022      	strb	r2, [r4, #0]
    78f2:	200a      	movs	r0, #10
    78f4:	70a0      	strb	r0, [r4, #2]
    78f6:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    78fa:	70e0      	strb	r0, [r4, #3]
    78fc:	7888      	ldrb	r0, [r1, #2]
    78fe:	7120      	strb	r0, [r4, #4]
    7900:	8848      	ldrh	r0, [r1, #2]
    7902:	0a00      	lsrs	r0, r0, #8
    7904:	7160      	strb	r0, [r4, #5]
    7906:	7908      	ldrb	r0, [r1, #4]
    7908:	71a0      	strb	r0, [r4, #6]
    790a:	7948      	ldrb	r0, [r1, #5]
    790c:	71e0      	strb	r0, [r4, #7]
    790e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    7912:	60a0      	str	r0, [r4, #8]
    7914:	8948      	ldrh	r0, [r1, #10]
    7916:	81a0      	strh	r0, [r4, #12]
    7918:	68c8      	ldr	r0, [r1, #12]
    791a:	f8c4 000e 	str.w	r0, [r4, #14]
    791e:	8a08      	ldrh	r0, [r1, #16]
    7920:	8260      	strh	r0, [r4, #18]
    7922:	f8d1 0012 	ldr.w	r0, [r1, #18]
    7926:	6160      	str	r0, [r4, #20]
    7928:	8ac8      	ldrh	r0, [r1, #22]
    792a:	8320      	strh	r0, [r4, #24]
    792c:	7e08      	ldrb	r0, [r1, #24]
    792e:	76a0      	strb	r0, [r4, #26]
    7930:	8b08      	ldrh	r0, [r1, #24]
    7932:	0a00      	lsrs	r0, r0, #8
    7934:	76e0      	strb	r0, [r4, #27]
    7936:	7e88      	ldrb	r0, [r1, #26]
    7938:	7720      	strb	r0, [r4, #28]
    793a:	8b48      	ldrh	r0, [r1, #26]
    793c:	0a00      	lsrs	r0, r0, #8
    793e:	7760      	strb	r0, [r4, #29]
    7940:	7f08      	ldrb	r0, [r1, #28]
    7942:	77a0      	strb	r0, [r4, #30]
    7944:	8b88      	ldrh	r0, [r1, #28]
    7946:	0a00      	lsrs	r0, r0, #8
    7948:	77e0      	strb	r0, [r4, #31]
    794a:	7f88      	ldrb	r0, [r1, #30]
    794c:	f884 0020 	strb.w	r0, [r4, #32]
    7950:	201f      	movs	r0, #31
    7952:	e084      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7954:	7022      	strb	r2, [r4, #0]
    7956:	2014      	movs	r0, #20
    7958:	70a0      	strb	r0, [r4, #2]
    795a:	7908      	ldrb	r0, [r1, #4]
    795c:	70e0      	strb	r0, [r4, #3]
    795e:	8888      	ldrh	r0, [r1, #4]
    7960:	0a00      	lsrs	r0, r0, #8
    7962:	7120      	strb	r0, [r4, #4]
    7964:	7988      	ldrb	r0, [r1, #6]
    7966:	e0a8      	b.n	7aba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    7968:	7022      	strb	r2, [r4, #0]
    796a:	2004      	movs	r0, #4
    796c:	70a0      	strb	r0, [r4, #2]
    796e:	7908      	ldrb	r0, [r1, #4]
    7970:	70e0      	strb	r0, [r4, #3]
    7972:	7988      	ldrb	r0, [r1, #6]
    7974:	7120      	strb	r0, [r4, #4]
    7976:	88c8      	ldrh	r0, [r1, #6]
    7978:	0a00      	lsrs	r0, r0, #8
    797a:	7160      	strb	r0, [r4, #5]
    797c:	6888      	ldr	r0, [r1, #8]
    797e:	f8c4 0006 	str.w	r0, [r4, #6]
    7982:	68c8      	ldr	r0, [r1, #12]
    7984:	e000      	b.n	7988 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    7986:	e06d      	b.n	7a64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    7988:	f8c4 000a 	str.w	r0, [r4, #10]
    798c:	200c      	movs	r0, #12
    798e:	e066      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7990:	7022      	strb	r2, [r4, #0]
    7992:	2003      	movs	r0, #3
    7994:	70a0      	strb	r0, [r4, #2]
    7996:	7908      	ldrb	r0, [r1, #4]
    7998:	70e0      	strb	r0, [r4, #3]
    799a:	7988      	ldrb	r0, [r1, #6]
    799c:	7120      	strb	r0, [r4, #4]
    799e:	88c8      	ldrh	r0, [r1, #6]
    79a0:	0a00      	lsrs	r0, r0, #8
    79a2:	7160      	strb	r0, [r4, #5]
    79a4:	7a08      	ldrb	r0, [r1, #8]
    79a6:	71a0      	strb	r0, [r4, #6]
    79a8:	8908      	ldrh	r0, [r1, #8]
    79aa:	0a00      	lsrs	r0, r0, #8
    79ac:	71e0      	strb	r0, [r4, #7]
    79ae:	7a88      	ldrb	r0, [r1, #10]
    79b0:	7220      	strb	r0, [r4, #8]
    79b2:	8948      	ldrh	r0, [r1, #10]
    79b4:	0a00      	lsrs	r0, r0, #8
    79b6:	7260      	strb	r0, [r4, #9]
    79b8:	7b08      	ldrb	r0, [r1, #12]
    79ba:	72a0      	strb	r0, [r4, #10]
    79bc:	8988      	ldrh	r0, [r1, #12]
    79be:	0a00      	lsrs	r0, r0, #8
    79c0:	72e0      	strb	r0, [r4, #11]
    79c2:	e0d9      	b.n	7b78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    79c4:	7022      	strb	r2, [r4, #0]
    79c6:	70a6      	strb	r6, [r4, #2]
    79c8:	7908      	ldrb	r0, [r1, #4]
    79ca:	70e0      	strb	r0, [r4, #3]
    79cc:	8888      	ldrh	r0, [r1, #4]
    79ce:	0a00      	lsrs	r0, r0, #8
    79d0:	7120      	strb	r0, [r4, #4]
    79d2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    79d6:	f8c4 0005 	str.w	r0, [r4, #5]
    79da:	f8d1 000a 	ldr.w	r0, [r1, #10]
    79de:	f8c4 0009 	str.w	r0, [r4, #9]
    79e2:	89c8      	ldrh	r0, [r1, #14]
    79e4:	f8a4 000d 	strh.w	r0, [r4, #13]
    79e8:	200d      	movs	r0, #13
    79ea:	e038      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    79ec:	2011      	movs	r0, #17
    79ee:	e044      	b.n	7a7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    79f0:	7026      	strb	r6, [r4, #0]
    79f2:	7908      	ldrb	r0, [r1, #4]
    79f4:	70a0      	strb	r0, [r4, #2]
    79f6:	7948      	ldrb	r0, [r1, #5]
    79f8:	70e0      	strb	r0, [r4, #3]
    79fa:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    79fe:	0a00      	lsrs	r0, r0, #8
    7a00:	7120      	strb	r0, [r4, #4]
    7a02:	79c8      	ldrb	r0, [r1, #7]
    7a04:	e059      	b.n	7aba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    7a06:	2008      	movs	r0, #8
    7a08:	7020      	strb	r0, [r4, #0]
    7a0a:	7908      	ldrb	r0, [r1, #4]
    7a0c:	70a0      	strb	r0, [r4, #2]
    7a0e:	7988      	ldrb	r0, [r1, #6]
    7a10:	70e0      	strb	r0, [r4, #3]
    7a12:	88c8      	ldrh	r0, [r1, #6]
    7a14:	0a00      	lsrs	r0, r0, #8
    7a16:	7120      	strb	r0, [r4, #4]
    7a18:	7a08      	ldrb	r0, [r1, #8]
    7a1a:	e04e      	b.n	7aba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    7a1c:	2030      	movs	r0, #48	; 0x30
    7a1e:	7020      	strb	r0, [r4, #0]
    7a20:	7908      	ldrb	r0, [r1, #4]
    7a22:	70a0      	strb	r0, [r4, #2]
    7a24:	7988      	ldrb	r0, [r1, #6]
    7a26:	70e0      	strb	r0, [r4, #3]
    7a28:	88c8      	ldrh	r0, [r1, #6]
    7a2a:	0a00      	lsrs	r0, r0, #8
    7a2c:	7120      	strb	r0, [r4, #4]
    7a2e:	2003      	movs	r0, #3
    7a30:	e015      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7a32:	7022      	strb	r2, [r4, #0]
    7a34:	2007      	movs	r0, #7
    7a36:	e045      	b.n	7ac4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    7a38:	7022      	strb	r2, [r4, #0]
    7a3a:	70a5      	strb	r5, [r4, #2]
    7a3c:	7908      	ldrb	r0, [r1, #4]
    7a3e:	70e0      	strb	r0, [r4, #3]
    7a40:	7988      	ldrb	r0, [r1, #6]
    7a42:	7120      	strb	r0, [r4, #4]
    7a44:	88c8      	ldrh	r0, [r1, #6]
    7a46:	0a00      	lsrs	r0, r0, #8
    7a48:	7160      	strb	r0, [r4, #5]
    7a4a:	7a08      	ldrb	r0, [r1, #8]
    7a4c:	71a0      	strb	r0, [r4, #6]
    7a4e:	7a48      	ldrb	r0, [r1, #9]
    7a50:	e028      	b.n	7aa4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    7a52:	4620      	mov	r0, r4
    7a54:	1d09      	adds	r1, r1, #4
    7a56:	f7fc f945 	bl	3ce4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d002      	beq.n	7a64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    7a5e:	7060      	strb	r0, [r4, #1]
    7a60:	1c80      	adds	r0, r0, #2
    7a62:	b2c0      	uxtb	r0, r0
    7a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a68:	e073      	b.n	7b52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    7a6a:	e047      	b.n	7afc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    7a6c:	e028      	b.n	7ac0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    7a6e:	e053      	b.n	7b18 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    7a70:	e061      	b.n	7b36 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    7a72:	e01a      	b.n	7aaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    7a74:	e009      	b.n	7a8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    7a76:	e7ff      	b.n	7a78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    7a78:	2057      	movs	r0, #87	; 0x57
    7a7a:	7020      	strb	r0, [r4, #0]
    7a7c:	7908      	ldrb	r0, [r1, #4]
    7a7e:	70a0      	strb	r0, [r4, #2]
    7a80:	8888      	ldrh	r0, [r1, #4]
    7a82:	0a00      	lsrs	r0, r0, #8
    7a84:	70e0      	strb	r0, [r4, #3]
    7a86:	2002      	movs	r0, #2
    7a88:	e7e9      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7a8a:	7022      	strb	r2, [r4, #0]
    7a8c:	2012      	movs	r0, #18
    7a8e:	70a0      	strb	r0, [r4, #2]
    7a90:	7908      	ldrb	r0, [r1, #4]
    7a92:	70e0      	strb	r0, [r4, #3]
    7a94:	7948      	ldrb	r0, [r1, #5]
    7a96:	7120      	strb	r0, [r4, #4]
    7a98:	7988      	ldrb	r0, [r1, #6]
    7a9a:	7160      	strb	r0, [r4, #5]
    7a9c:	88c8      	ldrh	r0, [r1, #6]
    7a9e:	0a00      	lsrs	r0, r0, #8
    7aa0:	71a0      	strb	r0, [r4, #6]
    7aa2:	7a08      	ldrb	r0, [r1, #8]
    7aa4:	71e0      	strb	r0, [r4, #7]
    7aa6:	2006      	movs	r0, #6
    7aa8:	e7d9      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7aaa:	7023      	strb	r3, [r4, #0]
    7aac:	20a1      	movs	r0, #161	; 0xa1
    7aae:	70a0      	strb	r0, [r4, #2]
    7ab0:	7908      	ldrb	r0, [r1, #4]
    7ab2:	70e0      	strb	r0, [r4, #3]
    7ab4:	7948      	ldrb	r0, [r1, #5]
    7ab6:	7120      	strb	r0, [r4, #4]
    7ab8:	2000      	movs	r0, #0
    7aba:	7160      	strb	r0, [r4, #5]
    7abc:	2004      	movs	r0, #4
    7abe:	e7ce      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7ac0:	7023      	strb	r3, [r4, #0]
    7ac2:	20a2      	movs	r0, #162	; 0xa2
    7ac4:	70a0      	strb	r0, [r4, #2]
    7ac6:	7908      	ldrb	r0, [r1, #4]
    7ac8:	70e0      	strb	r0, [r4, #3]
    7aca:	8888      	ldrh	r0, [r1, #4]
    7acc:	0a00      	lsrs	r0, r0, #8
    7ace:	7120      	strb	r0, [r4, #4]
    7ad0:	7988      	ldrb	r0, [r1, #6]
    7ad2:	7160      	strb	r0, [r4, #5]
    7ad4:	88c8      	ldrh	r0, [r1, #6]
    7ad6:	0a00      	lsrs	r0, r0, #8
    7ad8:	71a0      	strb	r0, [r4, #6]
    7ada:	7a08      	ldrb	r0, [r1, #8]
    7adc:	71e0      	strb	r0, [r4, #7]
    7ade:	8908      	ldrh	r0, [r1, #8]
    7ae0:	0a00      	lsrs	r0, r0, #8
    7ae2:	7220      	strb	r0, [r4, #8]
    7ae4:	7a88      	ldrb	r0, [r1, #10]
    7ae6:	7260      	strb	r0, [r4, #9]
    7ae8:	8948      	ldrh	r0, [r1, #10]
    7aea:	0a00      	lsrs	r0, r0, #8
    7aec:	72a0      	strb	r0, [r4, #10]
    7aee:	7b08      	ldrb	r0, [r1, #12]
    7af0:	72e0      	strb	r0, [r4, #11]
    7af2:	8988      	ldrh	r0, [r1, #12]
    7af4:	0a00      	lsrs	r0, r0, #8
    7af6:	7320      	strb	r0, [r4, #12]
    7af8:	200b      	movs	r0, #11
    7afa:	e7b0      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7afc:	7023      	strb	r3, [r4, #0]
    7afe:	20a3      	movs	r0, #163	; 0xa3
    7b00:	70a0      	strb	r0, [r4, #2]
    7b02:	7908      	ldrb	r0, [r1, #4]
    7b04:	70e0      	strb	r0, [r4, #3]
    7b06:	8888      	ldrh	r0, [r1, #4]
    7b08:	0a00      	lsrs	r0, r0, #8
    7b0a:	7120      	strb	r0, [r4, #4]
    7b0c:	7988      	ldrb	r0, [r1, #6]
    7b0e:	7160      	strb	r0, [r4, #5]
    7b10:	79c8      	ldrb	r0, [r1, #7]
    7b12:	71a0      	strb	r0, [r4, #6]
    7b14:	2005      	movs	r0, #5
    7b16:	e7a2      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7b18:	7022      	strb	r2, [r4, #0]
    7b1a:	2013      	movs	r0, #19
    7b1c:	70a0      	strb	r0, [r4, #2]
    7b1e:	7908      	ldrb	r0, [r1, #4]
    7b20:	70e0      	strb	r0, [r4, #3]
    7b22:	7948      	ldrb	r0, [r1, #5]
    7b24:	7120      	strb	r0, [r4, #4]
    7b26:	f8d1 0006 	ldr.w	r0, [r1, #6]
    7b2a:	f8c4 0005 	str.w	r0, [r4, #5]
    7b2e:	8948      	ldrh	r0, [r1, #10]
    7b30:	f8a4 0009 	strh.w	r0, [r4, #9]
    7b34:	e020      	b.n	7b78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    7b36:	7023      	strb	r3, [r4, #0]
    7b38:	20a4      	movs	r0, #164	; 0xa4
    7b3a:	70a0      	strb	r0, [r4, #2]
    7b3c:	7908      	ldrb	r0, [r1, #4]
    7b3e:	70e0      	strb	r0, [r4, #3]
    7b40:	8888      	ldrh	r0, [r1, #4]
    7b42:	0a00      	lsrs	r0, r0, #8
    7b44:	7120      	strb	r0, [r4, #4]
    7b46:	7988      	ldrb	r0, [r1, #6]
    7b48:	7160      	strb	r0, [r4, #5]
    7b4a:	79c8      	ldrb	r0, [r1, #7]
    7b4c:	71a0      	strb	r0, [r4, #6]
    7b4e:	2007      	movs	r0, #7
    7b50:	e785      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    7b52:	7023      	strb	r3, [r4, #0]
    7b54:	2080      	movs	r0, #128	; 0x80
    7b56:	70a0      	strb	r0, [r4, #2]
    7b58:	888a      	ldrh	r2, [r1, #4]
    7b5a:	f8a4 2003 	strh.w	r2, [r4, #3]
    7b5e:	88ca      	ldrh	r2, [r1, #6]
    7b60:	f8a4 2005 	strh.w	r2, [r4, #5]
    7b64:	7a0a      	ldrb	r2, [r1, #8]
    7b66:	71e2      	strb	r2, [r4, #7]
    7b68:	7a4a      	ldrb	r2, [r1, #9]
    7b6a:	8122      	strh	r2, [r4, #8]
    7b6c:	7a8a      	ldrb	r2, [r1, #10]
    7b6e:	72a2      	strb	r2, [r4, #10]
    7b70:	7ac9      	ldrb	r1, [r1, #11]
    7b72:	f001 0101 	and.w	r1, r1, #1
    7b76:	72e1      	strb	r1, [r4, #11]
    7b78:	200a      	movs	r0, #10
    7b7a:	e770      	b.n	7a5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

00007b7c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    7b7c:	223e      	movs	r2, #62	; 0x3e
    7b7e:	7002      	strb	r2, [r0, #0]
    7b80:	2201      	movs	r2, #1
    7b82:	7082      	strb	r2, [r0, #2]
    7b84:	790a      	ldrb	r2, [r1, #4]
    7b86:	70c2      	strb	r2, [r0, #3]
    7b88:	798a      	ldrb	r2, [r1, #6]
    7b8a:	7102      	strb	r2, [r0, #4]
    7b8c:	88ca      	ldrh	r2, [r1, #6]
    7b8e:	0a12      	lsrs	r2, r2, #8
    7b90:	7142      	strb	r2, [r0, #5]
    7b92:	7a0a      	ldrb	r2, [r1, #8]
    7b94:	7182      	strb	r2, [r0, #6]
    7b96:	7a4a      	ldrb	r2, [r1, #9]
    7b98:	71c2      	strb	r2, [r0, #7]
    7b9a:	f8d1 200a 	ldr.w	r2, [r1, #10]
    7b9e:	6082      	str	r2, [r0, #8]
    7ba0:	89ca      	ldrh	r2, [r1, #14]
    7ba2:	8182      	strh	r2, [r0, #12]
    7ba4:	7c0a      	ldrb	r2, [r1, #16]
    7ba6:	7382      	strb	r2, [r0, #14]
    7ba8:	8a0a      	ldrh	r2, [r1, #16]
    7baa:	0a12      	lsrs	r2, r2, #8
    7bac:	73c2      	strb	r2, [r0, #15]
    7bae:	7c8a      	ldrb	r2, [r1, #18]
    7bb0:	7402      	strb	r2, [r0, #16]
    7bb2:	8a4a      	ldrh	r2, [r1, #18]
    7bb4:	0a12      	lsrs	r2, r2, #8
    7bb6:	7442      	strb	r2, [r0, #17]
    7bb8:	7d0a      	ldrb	r2, [r1, #20]
    7bba:	7482      	strb	r2, [r0, #18]
    7bbc:	8a8a      	ldrh	r2, [r1, #20]
    7bbe:	0a12      	lsrs	r2, r2, #8
    7bc0:	74c2      	strb	r2, [r0, #19]
    7bc2:	7d89      	ldrb	r1, [r1, #22]
    7bc4:	7501      	strb	r1, [r0, #20]
    7bc6:	2013      	movs	r0, #19
    7bc8:	4770      	bx	lr

00007bca <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    7bca:	223e      	movs	r2, #62	; 0x3e
    7bcc:	7002      	strb	r2, [r0, #0]
    7bce:	2201      	movs	r2, #1
    7bd0:	7082      	strb	r2, [r0, #2]
    7bd2:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    7bd6:	70c2      	strb	r2, [r0, #3]
    7bd8:	788a      	ldrb	r2, [r1, #2]
    7bda:	7102      	strb	r2, [r0, #4]
    7bdc:	884a      	ldrh	r2, [r1, #2]
    7bde:	0a12      	lsrs	r2, r2, #8
    7be0:	7142      	strb	r2, [r0, #5]
    7be2:	790a      	ldrb	r2, [r1, #4]
    7be4:	7182      	strb	r2, [r0, #6]
    7be6:	794a      	ldrb	r2, [r1, #5]
    7be8:	71c2      	strb	r2, [r0, #7]
    7bea:	f8d1 2006 	ldr.w	r2, [r1, #6]
    7bee:	6082      	str	r2, [r0, #8]
    7bf0:	894a      	ldrh	r2, [r1, #10]
    7bf2:	8182      	strh	r2, [r0, #12]
    7bf4:	7e0a      	ldrb	r2, [r1, #24]
    7bf6:	7382      	strb	r2, [r0, #14]
    7bf8:	8b0a      	ldrh	r2, [r1, #24]
    7bfa:	0a12      	lsrs	r2, r2, #8
    7bfc:	73c2      	strb	r2, [r0, #15]
    7bfe:	7e8a      	ldrb	r2, [r1, #26]
    7c00:	7402      	strb	r2, [r0, #16]
    7c02:	8b4a      	ldrh	r2, [r1, #26]
    7c04:	0a12      	lsrs	r2, r2, #8
    7c06:	7442      	strb	r2, [r0, #17]
    7c08:	7f0a      	ldrb	r2, [r1, #28]
    7c0a:	7482      	strb	r2, [r0, #18]
    7c0c:	8b8a      	ldrh	r2, [r1, #28]
    7c0e:	0a12      	lsrs	r2, r2, #8
    7c10:	74c2      	strb	r2, [r0, #19]
    7c12:	7f89      	ldrb	r1, [r1, #30]
    7c14:	7501      	strb	r1, [r0, #20]
    7c16:	2113      	movs	r1, #19
    7c18:	7041      	strb	r1, [r0, #1]
    7c1a:	4608      	mov	r0, r1
    7c1c:	4770      	bx	lr

00007c1e <sdc_hci_evt_get>:
    7c1e:	b510      	push	{r4, lr}
    7c20:	b120      	cbz	r0, 7c2c <sdc_hci_evt_get+0xe>
    7c22:	f7ff fe04 	bl	782e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    7c26:	b120      	cbz	r0, 7c32 <sdc_hci_evt_get+0x14>
    7c28:	2000      	movs	r0, #0
    7c2a:	bd10      	pop	{r4, pc}
    7c2c:	f06f 0015 	mvn.w	r0, #21
    7c30:	bd10      	pop	{r4, pc}
    7c32:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7c36:	bd10      	pop	{r4, pc}

00007c38 <sdc_hci_cmd_cb_set_event_mask>:
    7c38:	b510      	push	{r4, lr}
    7c3a:	f7fc f8b1 	bl	3da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    7c3e:	2000      	movs	r0, #0
    7c40:	bd10      	pop	{r4, pc}

00007c42 <sdc_hci_cmd_vs_conn_event_extend>:
    7c42:	b508      	push	{r3, lr}
    7c44:	7800      	ldrb	r0, [r0, #0]
    7c46:	f88d 0000 	strb.w	r0, [sp]
    7c4a:	4668      	mov	r0, sp
    7c4c:	f001 face 	bl	91ec <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    7c50:	bd08      	pop	{r3, pc}

00007c52 <sdc_hci_cmd_vs_conn_update>:
    7c52:	2001      	movs	r0, #1
    7c54:	4770      	bx	lr

00007c56 <sdc_hci_cmd_vs_event_length_set>:
    7c56:	f7fe b93d 	b.w	5ed4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00007c5a <sdc_hci_cmd_vs_llpm_mode_set>:
    7c5a:	2001      	movs	r0, #1
    7c5c:	4770      	bx	lr

00007c5e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    7c5e:	7800      	ldrb	r0, [r0, #0]
    7c60:	b100      	cbz	r0, 7c64 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    7c62:	2001      	movs	r0, #1
    7c64:	f001 ba3d 	b.w	90e2 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00007c68 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    7c68:	b570      	push	{r4, r5, r6, lr}
    7c6a:	4605      	mov	r5, r0
    7c6c:	2210      	movs	r2, #16
    7c6e:	2100      	movs	r1, #0
    7c70:	f7ff fd06 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c74:	2210      	movs	r2, #16
    7c76:	2100      	movs	r1, #0
    7c78:	f105 0010 	add.w	r0, r5, #16
    7c7c:	f7ff fd00 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c80:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    7c84:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    7c88:	1c40      	adds	r0, r0, #1
    7c8a:	d10b      	bne.n	7ca4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    7c8c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    7c90:	1c40      	adds	r0, r0, #1
    7c92:	d107      	bne.n	7ca4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    7c94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    7c98:	1c40      	adds	r0, r0, #1
    7c9a:	d103      	bne.n	7ca4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    7c9c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    7ca0:	1c40      	adds	r0, r0, #1
    7ca2:	d00b      	beq.n	7cbc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    7ca4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    7ca8:	6128      	str	r0, [r5, #16]
    7caa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    7cae:	6168      	str	r0, [r5, #20]
    7cb0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    7cb4:	61a8      	str	r0, [r5, #24]
    7cb6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    7cba:	61e8      	str	r0, [r5, #28]
    7cbc:	2000      	movs	r0, #0
    7cbe:	f7fc fd07 	bl	46d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    7cc2:	b918      	cbnz	r0, 7ccc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    7cc4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    7cc8:	07c0      	lsls	r0, r0, #31
    7cca:	d118      	bne.n	7cfe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    7ccc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    7cd0:	1c40      	adds	r0, r0, #1
    7cd2:	d10b      	bne.n	7cec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    7cd4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7cd8:	1c40      	adds	r0, r0, #1
    7cda:	d107      	bne.n	7cec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    7cdc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    7ce0:	1c40      	adds	r0, r0, #1
    7ce2:	d103      	bne.n	7cec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    7ce4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    7ce8:	1c40      	adds	r0, r0, #1
    7cea:	d008      	beq.n	7cfe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    7cec:	f854 0f90 	ldr.w	r0, [r4, #144]!
    7cf0:	6028      	str	r0, [r5, #0]
    7cf2:	6860      	ldr	r0, [r4, #4]
    7cf4:	6068      	str	r0, [r5, #4]
    7cf6:	68a0      	ldr	r0, [r4, #8]
    7cf8:	60a8      	str	r0, [r5, #8]
    7cfa:	68e0      	ldr	r0, [r4, #12]
    7cfc:	60e8      	str	r0, [r5, #12]
    7cfe:	2000      	movs	r0, #0
    7d00:	bd70      	pop	{r4, r5, r6, pc}

00007d02 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    7d02:	b570      	push	{r4, r5, r6, lr}
    7d04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7d08:	4604      	mov	r4, r0
    7d0a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    7d0e:	1c40      	adds	r0, r0, #1
    7d10:	d105      	bne.n	7d1e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    7d12:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    7d16:	43c0      	mvns	r0, r0
    7d18:	0400      	lsls	r0, r0, #16
    7d1a:	0c00      	lsrs	r0, r0, #16
    7d1c:	d03a      	beq.n	7d94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    7d1e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    7d22:	07c0      	lsls	r0, r0, #31
    7d24:	d036      	beq.n	7d94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    7d26:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    7d2a:	f8c4 0001 	str.w	r0, [r4, #1]
    7d2e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    7d32:	f8a4 0005 	strh.w	r0, [r4, #5]
    7d36:	79a0      	ldrb	r0, [r4, #6]
    7d38:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    7d3c:	71a0      	strb	r0, [r4, #6]
    7d3e:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    7d42:	1c40      	adds	r0, r0, #1
    7d44:	d00f      	beq.n	7d66 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    7d46:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7d4a:	1c40      	adds	r0, r0, #1
    7d4c:	d00b      	beq.n	7d66 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    7d4e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    7d52:	1c40      	adds	r0, r0, #1
    7d54:	d007      	beq.n	7d66 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    7d56:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    7d5a:	1c40      	adds	r0, r0, #1
    7d5c:	d003      	beq.n	7d66 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    7d5e:	2000      	movs	r0, #0
    7d60:	f7fc fcb6 	bl	46d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    7d64:	b140      	cbz	r0, 7d78 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    7d66:	2210      	movs	r2, #16
    7d68:	2100      	movs	r1, #0
    7d6a:	1de0      	adds	r0, r4, #7
    7d6c:	f7ff fc88 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7d70:	2001      	movs	r0, #1
    7d72:	7020      	strb	r0, [r4, #0]
    7d74:	2000      	movs	r0, #0
    7d76:	bd70      	pop	{r4, r5, r6, pc}
    7d78:	f855 0f90 	ldr.w	r0, [r5, #144]!
    7d7c:	f8c4 0007 	str.w	r0, [r4, #7]
    7d80:	6868      	ldr	r0, [r5, #4]
    7d82:	f8c4 000b 	str.w	r0, [r4, #11]
    7d86:	68a8      	ldr	r0, [r5, #8]
    7d88:	f8c4 000f 	str.w	r0, [r4, #15]
    7d8c:	68e8      	ldr	r0, [r5, #12]
    7d8e:	f8c4 0013 	str.w	r0, [r4, #19]
    7d92:	e7ed      	b.n	7d70 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    7d94:	2000      	movs	r0, #0
    7d96:	e7ec      	b.n	7d72 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

00007d98 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    7d98:	f001 ba0e 	b.w	91b8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00007d9c <sdc_hci_cmd_ip_read_bd_addr>:
    7d9c:	f001 ba7f 	b.w	929e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00007da0 <sdc_hci_cmd_ip_read_local_version_information>:
    7da0:	f7fe b8a6 	b.w	5ef0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00007da4 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    7da4:	f000 bf72 	b.w	8c8c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

00007da8 <sdc_hci_cmd_le_add_device_to_white_list>:
    7da8:	f000 bf8b 	b.w	8cc2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00007dac <sdc_hci_cmd_le_clear_resolving_list>:
    7dac:	f000 bfa0 	b.w	8cf0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

00007db0 <sdc_hci_cmd_le_clear_white_list>:
    7db0:	f000 bfab 	b.w	8d0a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00007db4 <sdc_hci_cmd_le_encrypt>:
    7db4:	f000 bfb3 	b.w	8d1e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00007db8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    7db8:	8802      	ldrh	r2, [r0, #0]
    7dba:	800a      	strh	r2, [r1, #0]
    7dbc:	f000 bfb8 	b.w	8d30 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

00007dc0 <sdc_hci_cmd_le_rand>:
    7dc0:	f000 bfcf 	b.w	8d62 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00007dc4 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    7dc4:	f000 bfd3 	b.w	8d6e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00007dc8 <sdc_hci_cmd_le_read_buffer_size>:
    7dc8:	f7fe b864 	b.w	5e94 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00007dcc <sdc_hci_cmd_le_read_resolving_list_size>:
    7dcc:	f000 bfd8 	b.w	8d80 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

00007dd0 <sdc_hci_cmd_le_read_transmit_power>:
    7dd0:	f000 bfda 	b.w	8d88 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00007dd4 <sdc_hci_cmd_le_read_white_list_size>:
    7dd4:	f000 bfe1 	b.w	8d9a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00007dd8 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    7dd8:	f000 bfe3 	b.w	8da2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

00007ddc <sdc_hci_cmd_le_remove_device_from_white_list>:
    7ddc:	f000 bffa 	b.w	8dd4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00007de0 <sdc_hci_cmd_le_set_address_resolution_enable>:
    7de0:	f001 b80d 	b.w	8dfe <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

00007de4 <sdc_hci_cmd_le_set_adv_data>:
    7de4:	f001 b819 	b.w	8e1a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00007de8 <sdc_hci_cmd_le_set_adv_enable>:
    7de8:	f001 b853 	b.w	8e92 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00007dec <sdc_hci_cmd_le_set_adv_params>:
    7dec:	f001 b884 	b.w	8ef8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00007df0 <sdc_hci_cmd_le_set_event_mask>:
    7df0:	b510      	push	{r4, lr}
    7df2:	f7fb ffcf 	bl	3d94 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    7df6:	2000      	movs	r0, #0
    7df8:	bd10      	pop	{r4, pc}

00007dfa <sdc_hci_cmd_le_set_privacy_mode>:
    7dfa:	f001 b90f 	b.w	901c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

00007dfe <sdc_hci_cmd_le_set_random_address>:
    7dfe:	f001 b923 	b.w	9048 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00007e02 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    7e02:	f001 b92f 	b.w	9064 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

00007e06 <sdc_hci_cmd_le_set_scan_response_data>:
    7e06:	f001 b936 	b.w	9076 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

00007e0a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    7e0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7e0e:	8281      	strh	r1, [r0, #20]
    7e10:	2100      	movs	r1, #0
    7e12:	7581      	strb	r1, [r0, #22]
    7e14:	4770      	bx	lr

00007e16 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    7e16:	b510      	push	{r4, lr}
    7e18:	8a81      	ldrh	r1, [r0, #20]
    7e1a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    7e1e:	3aff      	subs	r2, #255	; 0xff
    7e20:	d004      	beq.n	7e2c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    7e22:	f44f 714e 	mov.w	r1, #824	; 0x338
    7e26:	2014      	movs	r0, #20
    7e28:	f7fb fe46 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e2c:	88c1      	ldrh	r1, [r0, #6]
    7e2e:	8281      	strh	r1, [r0, #20]
    7e30:	89c1      	ldrh	r1, [r0, #14]
    7e32:	b101      	cbz	r1, 7e36 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    7e34:	2101      	movs	r1, #1
    7e36:	7581      	strb	r1, [r0, #22]
    7e38:	bd10      	pop	{r4, pc}

00007e3a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    7e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e3e:	461d      	mov	r5, r3
    7e40:	4616      	mov	r6, r2
    7e42:	9f06      	ldr	r7, [sp, #24]
    7e44:	460b      	mov	r3, r1
    7e46:	4604      	mov	r4, r0
    7e48:	463a      	mov	r2, r7
    7e4a:	4629      	mov	r1, r5
    7e4c:	4630      	mov	r0, r6
    7e4e:	f000 f828 	bl	7ea2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    7e52:	4283      	cmp	r3, r0
    7e54:	d201      	bcs.n	7e5a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    7e56:	21a1      	movs	r1, #161	; 0xa1
    7e58:	e018      	b.n	7e8c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    7e5a:	1ce0      	adds	r0, r4, #3
    7e5c:	f020 0103 	bic.w	r1, r0, #3
    7e60:	4620      	mov	r0, r4
    7e62:	42a1      	cmp	r1, r4
    7e64:	d001      	beq.n	7e6a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    7e66:	21a2      	movs	r1, #162	; 0xa2
    7e68:	e010      	b.n	7e8c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    7e6a:	2224      	movs	r2, #36	; 0x24
    7e6c:	2100      	movs	r1, #0
    7e6e:	f7ff fc07 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7e72:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7e76:	82a0      	strh	r0, [r4, #20]
    7e78:	19a8      	adds	r0, r5, r6
    7e7a:	1d80      	adds	r0, r0, #6
    7e7c:	4378      	muls	r0, r7
    7e7e:	b280      	uxth	r0, r0
    7e80:	7725      	strb	r5, [r4, #28]
    7e82:	8060      	strh	r0, [r4, #2]
    7e84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    7e88:	d903      	bls.n	7e92 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    7e8a:	21a8      	movs	r1, #168	; 0xa8
    7e8c:	2014      	movs	r0, #20
    7e8e:	f7fb fe13 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e92:	8026      	strh	r6, [r4, #0]
    7e94:	2000      	movs	r0, #0
    7e96:	7760      	strb	r0, [r4, #29]
    7e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007e9c <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    7e9c:	6181      	str	r1, [r0, #24]
    7e9e:	6188      	str	r0, [r1, #24]
    7ea0:	4770      	bx	lr

00007ea2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    7ea2:	4401      	add	r1, r0
    7ea4:	1d89      	adds	r1, r1, #6
    7ea6:	4351      	muls	r1, r2
    7ea8:	b28a      	uxth	r2, r1
    7eaa:	2100      	movs	r1, #0
    7eac:	2845      	cmp	r0, #69	; 0x45
    7eae:	d201      	bcs.n	7eb4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    7eb0:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    7eb4:	3224      	adds	r2, #36	; 0x24
    7eb6:	1850      	adds	r0, r2, r1
    7eb8:	b280      	uxth	r0, r0
    7eba:	4770      	bx	lr

00007ebc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    7ebc:	b570      	push	{r4, r5, r6, lr}
    7ebe:	2300      	movs	r3, #0
    7ec0:	2908      	cmp	r1, #8
    7ec2:	d204      	bcs.n	7ece <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    7ec4:	f240 11cb 	movw	r1, #459	; 0x1cb
    7ec8:	2015      	movs	r0, #21
    7eca:	f7fb fdf5 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ece:	6802      	ldr	r2, [r0, #0]
    7ed0:	b90a      	cbnz	r2, 7ed6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    7ed2:	e01e      	b.n	7f12 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    7ed4:	4610      	mov	r0, r2
    7ed6:	6802      	ldr	r2, [r0, #0]
    7ed8:	8893      	ldrh	r3, [r2, #4]
    7eda:	428b      	cmp	r3, r1
    7edc:	d002      	beq.n	7ee4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    7ede:	6813      	ldr	r3, [r2, #0]
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	d1f7      	bne.n	7ed4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    7ee4:	8894      	ldrh	r4, [r2, #4]
    7ee6:	4613      	mov	r3, r2
    7ee8:	428c      	cmp	r4, r1
    7eea:	d101      	bne.n	7ef0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    7eec:	6811      	ldr	r1, [r2, #0]
    7eee:	e00d      	b.n	7f0c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    7ef0:	f101 0508 	add.w	r5, r1, #8
    7ef4:	b2ae      	uxth	r6, r5
    7ef6:	2500      	movs	r5, #0
    7ef8:	42b4      	cmp	r4, r6
    7efa:	d309      	bcc.n	7f10 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    7efc:	1a64      	subs	r4, r4, r1
    7efe:	4411      	add	r1, r2
    7f00:	600d      	str	r5, [r1, #0]
    7f02:	808c      	strh	r4, [r1, #4]
    7f04:	6802      	ldr	r2, [r0, #0]
    7f06:	6812      	ldr	r2, [r2, #0]
    7f08:	6002      	str	r2, [r0, #0]
    7f0a:	600a      	str	r2, [r1, #0]
    7f0c:	6001      	str	r1, [r0, #0]
    7f0e:	e000      	b.n	7f12 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    7f10:	2300      	movs	r3, #0
    7f12:	4618      	mov	r0, r3
    7f14:	bd70      	pop	{r4, r5, r6, pc}

00007f16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    7f16:	b510      	push	{r4, lr}
    7f18:	000c      	movs	r4, r1
    7f1a:	d006      	beq.n	7f2a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    7f1c:	2c08      	cmp	r4, #8
    7f1e:	d209      	bcs.n	7f34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    7f20:	f240 1195 	movw	r1, #405	; 0x195
    7f24:	2015      	movs	r0, #21
    7f26:	f7fb fdc7 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f2a:	b108      	cbz	r0, 7f30 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    7f2c:	2100      	movs	r1, #0
    7f2e:	6001      	str	r1, [r0, #0]
    7f30:	2000      	movs	r0, #0
    7f32:	bd10      	pop	{r4, pc}
    7f34:	b118      	cbz	r0, 7f3e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    7f36:	b2a1      	uxth	r1, r4
    7f38:	6800      	ldr	r0, [r0, #0]
    7f3a:	f000 f814 	bl	7f66 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    7f3e:	1d20      	adds	r0, r4, #4
    7f40:	bd10      	pop	{r4, pc}

00007f42 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    7f42:	2100      	movs	r1, #0
    7f44:	6802      	ldr	r2, [r0, #0]
    7f46:	e003      	b.n	7f50 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    7f48:	8893      	ldrh	r3, [r2, #4]
    7f4a:	6812      	ldr	r2, [r2, #0]
    7f4c:	4419      	add	r1, r3
    7f4e:	b289      	uxth	r1, r1
    7f50:	2a00      	cmp	r2, #0
    7f52:	d1f9      	bne.n	7f48 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    7f54:	f000 b807 	b.w	7f66 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00007f58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    7f58:	2300      	movs	r3, #0
    7f5a:	600b      	str	r3, [r1, #0]
    7f5c:	808a      	strh	r2, [r1, #4]
    7f5e:	6802      	ldr	r2, [r0, #0]
    7f60:	600a      	str	r2, [r1, #0]
    7f62:	6001      	str	r1, [r0, #0]
    7f64:	4770      	bx	lr
    7f66:	2300      	movs	r3, #0
    7f68:	6043      	str	r3, [r0, #4]
    7f6a:	1d02      	adds	r2, r0, #4
    7f6c:	8101      	strh	r1, [r0, #8]
    7f6e:	6002      	str	r2, [r0, #0]
    7f70:	4770      	bx	lr

00007f72 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    7f72:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    7f76:	3bff      	subs	r3, #255	; 0xff
    7f78:	d001      	beq.n	7f7e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    7f7a:	2902      	cmp	r1, #2
    7f7c:	d301      	bcc.n	7f82 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    7f7e:	2000      	movs	r0, #0
    7f80:	4770      	bx	lr
    7f82:	f7fc b837 	b.w	3ff4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

00007f86 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    7f86:	b50e      	push	{r1, r2, r3, lr}
    7f88:	4669      	mov	r1, sp
    7f8a:	f000 f818 	bl	7fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7f8e:	b120      	cbz	r0, 7f9a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    7f90:	f44f 71b2 	mov.w	r1, #356	; 0x164
    7f94:	2017      	movs	r0, #23
    7f96:	f7fb fd8f 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f9a:	4668      	mov	r0, sp
    7f9c:	f7fb ffa8 	bl	3ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7fa0:	b108      	cbz	r0, 7fa6 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    7fa2:	2000      	movs	r0, #0
    7fa4:	bd0e      	pop	{r1, r2, r3, pc}
    7fa6:	2001      	movs	r0, #1
    7fa8:	bd0e      	pop	{r1, r2, r3, pc}

00007faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    7faa:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    7fae:	3aff      	subs	r2, #255	; 0xff
    7fb0:	d001      	beq.n	7fb6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    7fb2:	2902      	cmp	r1, #2
    7fb4:	d301      	bcc.n	7fba <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    7fb6:	2000      	movs	r0, #0
    7fb8:	4770      	bx	lr
    7fba:	f7fc b855 	b.w	4068 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

00007fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    7fbe:	b570      	push	{r4, r5, r6, lr}
    7fc0:	4605      	mov	r5, r0
    7fc2:	460c      	mov	r4, r1
    7fc4:	4608      	mov	r0, r1
    7fc6:	f000 f864 	bl	8092 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    7fca:	b108      	cbz	r0, 7fd0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    7fcc:	2010      	movs	r0, #16
    7fce:	bd70      	pop	{r4, r5, r6, pc}
    7fd0:	2d02      	cmp	r5, #2
    7fd2:	d301      	bcc.n	7fd8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    7fd4:	2007      	movs	r0, #7
    7fd6:	bd70      	pop	{r4, r5, r6, pc}
    7fd8:	7025      	strb	r5, [r4, #0]
    7fda:	2000      	movs	r0, #0
    7fdc:	8060      	strh	r0, [r4, #2]
    7fde:	bd70      	pop	{r4, r5, r6, pc}
    7fe0:	b510      	push	{r4, lr}
    7fe2:	4604      	mov	r4, r0
    7fe4:	f7fc f88c 	bl	4100 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    7fe8:	42a0      	cmp	r0, r4
    7fea:	d901      	bls.n	7ff0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    7fec:	2001      	movs	r0, #1
    7fee:	bd10      	pop	{r4, pc}
    7ff0:	2000      	movs	r0, #0
    7ff2:	bd10      	pop	{r4, pc}
    7ff4:	4770      	bx	lr

00007ff6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    7ff6:	b570      	push	{r4, r5, r6, lr}
    7ff8:	460e      	mov	r6, r1
    7ffa:	461d      	mov	r5, r3
    7ffc:	4611      	mov	r1, r2
    7ffe:	f000 f811 	bl	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
    8002:	4604      	mov	r4, r0
    8004:	4629      	mov	r1, r5
    8006:	4630      	mov	r0, r6
    8008:	f000 f803 	bl	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    800c:	4420      	add	r0, r4
    800e:	1d00      	adds	r0, r0, #4
    8010:	bd70      	pop	{r4, r5, r6, pc}
    8012:	b510      	push	{r4, lr}
    8014:	460a      	mov	r2, r1
    8016:	2101      	movs	r1, #1
    8018:	f7ff ff43 	bl	7ea2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    801c:	1cc0      	adds	r0, r0, #3
    801e:	f020 0003 	bic.w	r0, r0, #3
    8022:	bd10      	pop	{r4, pc}
    8024:	b510      	push	{r4, lr}
    8026:	460a      	mov	r2, r1
    8028:	2101      	movs	r1, #1
    802a:	f7ff ff3a 	bl	7ea2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    802e:	1cc0      	adds	r0, r0, #3
    8030:	f020 0003 	bic.w	r0, r0, #3
    8034:	bd10      	pop	{r4, pc}

00008036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>:
    8036:	b510      	push	{r4, lr}
    8038:	680b      	ldr	r3, [r1, #0]
    803a:	4604      	mov	r4, r0
    803c:	2b00      	cmp	r3, #0
    803e:	d00d      	beq.n	805c <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x26>
    8040:	88ca      	ldrh	r2, [r1, #6]
    8042:	4619      	mov	r1, r3
    8044:	6820      	ldr	r0, [r4, #0]
    8046:	f7ff ff87 	bl	7f58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    804a:	7920      	ldrb	r0, [r4, #4]
    804c:	2801      	cmp	r0, #1
    804e:	d102      	bne.n	8056 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x20>
    8050:	6820      	ldr	r0, [r4, #0]
    8052:	f7ff ff76 	bl	7f42 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    8056:	7920      	ldrb	r0, [r4, #4]
    8058:	1e40      	subs	r0, r0, #1
    805a:	7120      	strb	r0, [r4, #4]
    805c:	bd10      	pop	{r4, pc}
    805e:	2800      	cmp	r0, #0
    8060:	db09      	blt.n	8076 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x40>
    8062:	f000 021f 	and.w	r2, r0, #31
    8066:	2101      	movs	r1, #1
    8068:	4091      	lsls	r1, r2
    806a:	0940      	lsrs	r0, r0, #5
    806c:	0080      	lsls	r0, r0, #2
    806e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8072:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8076:	4770      	bx	lr

00008078 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    8078:	f7fc ba2a 	b.w	44d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000807c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    807c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8080:	2000      	movs	r0, #0
    8082:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    8086:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    808a:	2001      	movs	r0, #1
    808c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8090:	4770      	bx	lr

00008092 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    8092:	b108      	cbz	r0, 8098 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    8094:	2000      	movs	r0, #0
    8096:	4770      	bx	lr
    8098:	2001      	movs	r0, #1
    809a:	4770      	bx	lr

0000809c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    809c:	f7fc bade 	b.w	465c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

000080a0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    80a0:	b510      	push	{r4, lr}
    80a2:	2900      	cmp	r1, #0
    80a4:	4604      	mov	r4, r0
    80a6:	f04f 0106 	mov.w	r1, #6
    80aa:	d002      	beq.n	80b2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    80ac:	f7fb fd6c 	bl	3b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    80b0:	e001      	b.n	80b6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    80b2:	f7fb fd85 	bl	3bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    80b6:	7960      	ldrb	r0, [r4, #5]
    80b8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    80bc:	7160      	strb	r0, [r4, #5]
    80be:	bd10      	pop	{r4, pc}

000080c0 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    80c0:	4770      	bx	lr

000080c2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    80c2:	b530      	push	{r4, r5, lr}
    80c4:	460c      	mov	r4, r1
    80c6:	4605      	mov	r5, r0
    80c8:	b08d      	sub	sp, #52	; 0x34
    80ca:	f04f 0103 	mov.w	r1, #3
    80ce:	f104 0003 	add.w	r0, r4, #3
    80d2:	b112      	cbz	r2, 80da <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    80d4:	f7fb fd58 	bl	3b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    80d8:	e001      	b.n	80de <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    80da:	f7fb fd71 	bl	3bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    80de:	7960      	ldrb	r0, [r4, #5]
    80e0:	220d      	movs	r2, #13
    80e2:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    80e6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    80ea:	7160      	strb	r0, [r4, #5]
    80ec:	2100      	movs	r1, #0
    80ee:	a804      	add	r0, sp, #16
    80f0:	f7ff fac6 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80f4:	78e0      	ldrb	r0, [r4, #3]
    80f6:	f88d 001f 	strb.w	r0, [sp, #31]
    80fa:	7920      	ldrb	r0, [r4, #4]
    80fc:	f88d 001e 	strb.w	r0, [sp, #30]
    8100:	7960      	ldrb	r0, [r4, #5]
    8102:	f88d 001d 	strb.w	r0, [sp, #29]
    8106:	2210      	movs	r2, #16
    8108:	4629      	mov	r1, r5
    810a:	4668      	mov	r0, sp
    810c:	f7ff fa3e 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8110:	4668      	mov	r0, sp
    8112:	f7ff ffb1 	bl	8078 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8116:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    811a:	7020      	strb	r0, [r4, #0]
    811c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    8120:	7060      	strb	r0, [r4, #1]
    8122:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    8126:	70a0      	strb	r0, [r4, #2]
    8128:	b00d      	add	sp, #52	; 0x34
    812a:	bd30      	pop	{r4, r5, pc}

0000812c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    812c:	2201      	movs	r2, #1
    812e:	f7fc bc89 	b.w	4a44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

00008132 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    8132:	b510      	push	{r4, lr}
    8134:	f001 fa9a 	bl	966c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    8138:	b118      	cbz	r0, 8142 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    813a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    813e:	f7fe b8b7 	b.w	62b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    8142:	20ff      	movs	r0, #255	; 0xff
    8144:	bd10      	pop	{r4, pc}

00008146 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    8146:	b510      	push	{r4, lr}
    8148:	f7fc fcc6 	bl	4ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    814c:	2810      	cmp	r0, #16
    814e:	d003      	beq.n	8158 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    8150:	f7fc fc92 	bl	4a78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    8154:	2810      	cmp	r0, #16
    8156:	d100      	bne.n	815a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    8158:	2008      	movs	r0, #8
    815a:	bd10      	pop	{r4, pc}

0000815c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    815c:	b510      	push	{r4, lr}
    815e:	f7fc fcbb 	bl	4ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    8162:	2810      	cmp	r0, #16
    8164:	d007      	beq.n	8176 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    8166:	f7fc fc87 	bl	4a78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    816a:	2810      	cmp	r0, #16
    816c:	d003      	beq.n	8176 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    816e:	f7fc fcfb 	bl	4b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    8172:	2001      	movs	r0, #1
    8174:	bd10      	pop	{r4, pc}
    8176:	2000      	movs	r0, #0
    8178:	bd10      	pop	{r4, pc}

0000817a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    817a:	b510      	push	{r4, lr}
    817c:	f7fc fcac 	bl	4ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    8180:	2810      	cmp	r0, #16
    8182:	d003      	beq.n	818c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    8184:	f7fc fd38 	bl	4bf8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    8188:	2001      	movs	r0, #1
    818a:	bd10      	pop	{r4, pc}
    818c:	2000      	movs	r0, #0
    818e:	bd10      	pop	{r4, pc}

00008190 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    8190:	b570      	push	{r4, r5, r6, lr}
    8192:	460e      	mov	r6, r1
    8194:	b08c      	sub	sp, #48	; 0x30
    8196:	4614      	mov	r4, r2
    8198:	4601      	mov	r1, r0
    819a:	461d      	mov	r5, r3
    819c:	2210      	movs	r2, #16
    819e:	4668      	mov	r0, sp
    81a0:	f000 f84e 	bl	8240 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    81a4:	2210      	movs	r2, #16
    81a6:	4631      	mov	r1, r6
    81a8:	a804      	add	r0, sp, #16
    81aa:	f000 f849 	bl	8240 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    81ae:	4668      	mov	r0, sp
    81b0:	f7ff ff62 	bl	8078 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    81b4:	a908      	add	r1, sp, #32
    81b6:	f04f 0210 	mov.w	r2, #16
    81ba:	4628      	mov	r0, r5
    81bc:	b11c      	cbz	r4, 81c6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    81be:	f000 f83f 	bl	8240 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    81c2:	b00c      	add	sp, #48	; 0x30
    81c4:	bd70      	pop	{r4, r5, r6, pc}
    81c6:	f7ff f9e1 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    81ca:	e7fa      	b.n	81c2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

000081cc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    81cc:	b510      	push	{r4, lr}
    81ce:	460c      	mov	r4, r1
    81d0:	2100      	movs	r1, #0
    81d2:	f7ff feea 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    81d6:	6060      	str	r0, [r4, #4]
    81d8:	b118      	cbz	r0, 81e2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    81da:	2001      	movs	r0, #1
    81dc:	7020      	strb	r0, [r4, #0]
    81de:	2000      	movs	r0, #0
    81e0:	bd10      	pop	{r4, pc}
    81e2:	2002      	movs	r0, #2
    81e4:	bd10      	pop	{r4, pc}

000081e6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    81e6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    81ea:	fbb0 f0f1 	udiv	r0, r0, r1
    81ee:	b280      	uxth	r0, r0
    81f0:	4770      	bx	lr

000081f2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    81f2:	6809      	ldr	r1, [r1, #0]
    81f4:	f8c0 105e 	str.w	r1, [r0, #94]	; 0x5e
    81f8:	4770      	bx	lr

000081fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    81fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81fe:	460c      	mov	r4, r1
    8200:	4605      	mov	r5, r0
    8202:	68c6      	ldr	r6, [r0, #12]
    8204:	f7f9 fc50 	bl	1aa8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8208:	b198      	cbz	r0, 8232 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    820a:	b1bc      	cbz	r4, 823c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    820c:	4630      	mov	r0, r6
    820e:	68e9      	ldr	r1, [r5, #12]
    8210:	f7f9 f964 	bl	14dc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8214:	2800      	cmp	r0, #0
    8216:	dd11      	ble.n	823c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    8218:	4420      	add	r0, r4
    821a:	1e40      	subs	r0, r0, #1
    821c:	fbb0 f7f4 	udiv	r7, r0, r4
    8220:	fb07 f104 	mul.w	r1, r7, r4
    8224:	4630      	mov	r0, r6
    8226:	f7f9 f927 	bl	1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    822a:	60e8      	str	r0, [r5, #12]
    822c:	4638      	mov	r0, r7
    822e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8232:	f240 21ae 	movw	r1, #686	; 0x2ae
    8236:	2029      	movs	r0, #41	; 0x29
    8238:	f7fb fc3e 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    823c:	2000      	movs	r0, #0
    823e:	e7f6      	b.n	822e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

00008240 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    8240:	b530      	push	{r4, r5, lr}
    8242:	4613      	mov	r3, r2
    8244:	e006      	b.n	8254 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    8246:	18cc      	adds	r4, r1, r3
    8248:	1ad5      	subs	r5, r2, r3
    824a:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    824e:	1e5b      	subs	r3, r3, #1
    8250:	5544      	strb	r4, [r0, r5]
    8252:	b2db      	uxtb	r3, r3
    8254:	2b00      	cmp	r3, #0
    8256:	d1f6      	bne.n	8246 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    8258:	bd30      	pop	{r4, r5, pc}

0000825a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    825a:	b510      	push	{r4, lr}
    825c:	2300      	movs	r3, #0
    825e:	461a      	mov	r2, r3
    8260:	e003      	b.n	826a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    8262:	5c84      	ldrb	r4, [r0, r2]
    8264:	4323      	orrs	r3, r4
    8266:	1c52      	adds	r2, r2, #1
    8268:	b2d2      	uxtb	r2, r2
    826a:	428a      	cmp	r2, r1
    826c:	d3f9      	bcc.n	8262 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    826e:	b10b      	cbz	r3, 8274 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    8270:	2000      	movs	r0, #0
    8272:	bd10      	pop	{r4, pc}
    8274:	2001      	movs	r0, #1
    8276:	bd10      	pop	{r4, pc}

00008278 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    8278:	b530      	push	{r4, r5, lr}
    827a:	1c42      	adds	r2, r0, #1
    827c:	428a      	cmp	r2, r1
    827e:	d004      	beq.n	828a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    8280:	680a      	ldr	r2, [r1, #0]
    8282:	f8c0 2001 	str.w	r2, [r0, #1]
    8286:	7909      	ldrb	r1, [r1, #4]
    8288:	7141      	strb	r1, [r0, #5]
    828a:	7941      	ldrb	r1, [r0, #5]
    828c:	f001 011f 	and.w	r1, r1, #31
    8290:	7141      	strb	r1, [r0, #5]
    8292:	2100      	movs	r1, #0
    8294:	72c1      	strb	r1, [r0, #11]
    8296:	1843      	adds	r3, r0, r1
    8298:	1c49      	adds	r1, r1, #1
    829a:	785c      	ldrb	r4, [r3, #1]
    829c:	b2c9      	uxtb	r1, r1
    829e:	f004 0201 	and.w	r2, r4, #1
    82a2:	0864      	lsrs	r4, r4, #1
    82a4:	f004 0501 	and.w	r5, r4, #1
    82a8:	4415      	add	r5, r2
    82aa:	0862      	lsrs	r2, r4, #1
    82ac:	f002 0401 	and.w	r4, r2, #1
    82b0:	442c      	add	r4, r5
    82b2:	0852      	lsrs	r2, r2, #1
    82b4:	f002 0501 	and.w	r5, r2, #1
    82b8:	442c      	add	r4, r5
    82ba:	0852      	lsrs	r2, r2, #1
    82bc:	f002 0501 	and.w	r5, r2, #1
    82c0:	442c      	add	r4, r5
    82c2:	0852      	lsrs	r2, r2, #1
    82c4:	f002 0501 	and.w	r5, r2, #1
    82c8:	442c      	add	r4, r5
    82ca:	0852      	lsrs	r2, r2, #1
    82cc:	f002 0501 	and.w	r5, r2, #1
    82d0:	442c      	add	r4, r5
    82d2:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    82d6:	719a      	strb	r2, [r3, #6]
    82d8:	7ac3      	ldrb	r3, [r0, #11]
    82da:	2905      	cmp	r1, #5
    82dc:	441a      	add	r2, r3
    82de:	72c2      	strb	r2, [r0, #11]
    82e0:	d3d9      	bcc.n	8296 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    82e2:	bd30      	pop	{r4, r5, pc}

000082e4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    82e4:	b570      	push	{r4, r5, r6, lr}
    82e6:	7802      	ldrb	r2, [r0, #0]
    82e8:	f002 020f 	and.w	r2, r2, #15
    82ec:	2a03      	cmp	r2, #3
    82ee:	d02c      	beq.n	834a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    82f0:	2a05      	cmp	r2, #5
    82f2:	d12d      	bne.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    82f4:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    82f8:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    82fc:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    8300:	7d83      	ldrb	r3, [r0, #22]
    8302:	b141      	cbz	r1, 8316 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    8304:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    8308:	d905      	bls.n	8316 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    830a:	f640 5107 	movw	r1, #3335	; 0xd07
    830e:	428a      	cmp	r2, r1
    8310:	d801      	bhi.n	8316 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    8312:	2101      	movs	r1, #1
    8314:	e000      	b.n	8318 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    8316:	2100      	movs	r1, #0
    8318:	7846      	ldrb	r6, [r0, #1]
    831a:	2e22      	cmp	r6, #34	; 0x22
    831c:	d118      	bne.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    831e:	b959      	cbnz	r1, 8338 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    8320:	1f91      	subs	r1, r2, #6
    8322:	f640 467a 	movw	r6, #3194	; 0xc7a
    8326:	42b1      	cmp	r1, r6
    8328:	d812      	bhi.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    832a:	b18b      	cbz	r3, 8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    832c:	2b08      	cmp	r3, #8
    832e:	d80f      	bhi.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    8330:	4293      	cmp	r3, r2
    8332:	d20d      	bcs.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    8334:	4294      	cmp	r4, r2
    8336:	d80b      	bhi.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    8338:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    833c:	d208      	bcs.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    833e:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    8342:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    8346:	d905      	bls.n	8354 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    8348:	e002      	b.n	8350 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    834a:	7840      	ldrb	r0, [r0, #1]
    834c:	280c      	cmp	r0, #12
    834e:	d001      	beq.n	8354 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    8350:	2000      	movs	r0, #0
    8352:	bd70      	pop	{r4, r5, r6, pc}
    8354:	2001      	movs	r0, #1
    8356:	bd70      	pop	{r4, r5, r6, pc}

00008358 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    8358:	b570      	push	{r4, r5, r6, lr}
    835a:	4614      	mov	r4, r2
    835c:	4605      	mov	r5, r0
    835e:	2a1f      	cmp	r2, #31
    8360:	d903      	bls.n	836a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    8362:	21b2      	movs	r1, #178	; 0xb2
    8364:	202a      	movs	r0, #42	; 0x2a
    8366:	f7fb fba7 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    836a:	f105 0009 	add.w	r0, r5, #9
    836e:	f7ff f90d 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8372:	1da4      	adds	r4, r4, #6
    8374:	706c      	strb	r4, [r5, #1]
    8376:	bd70      	pop	{r4, r5, r6, pc}

00008378 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    8378:	b510      	push	{r4, lr}
    837a:	7802      	ldrb	r2, [r0, #0]
    837c:	f001 030f 	and.w	r3, r1, #15
    8380:	f022 020f 	bic.w	r2, r2, #15
    8384:	431a      	orrs	r2, r3
    8386:	7002      	strb	r2, [r0, #0]
    8388:	2907      	cmp	r1, #7
    838a:	d20c      	bcs.n	83a6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    838c:	e8df f001 	tbb	[pc, r1]
    8390:	06040604 	.word	0x06040604
    8394:	00040804 	.word	0x00040804
    8398:	2106      	movs	r1, #6
    839a:	e002      	b.n	83a2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    839c:	210c      	movs	r1, #12
    839e:	e000      	b.n	83a2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    83a0:	2122      	movs	r1, #34	; 0x22
    83a2:	7041      	strb	r1, [r0, #1]
    83a4:	bd10      	pop	{r4, pc}
    83a6:	216e      	movs	r1, #110	; 0x6e
    83a8:	202a      	movs	r0, #42	; 0x2a
    83aa:	f7fb fb85 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000083ae <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    83ae:	680a      	ldr	r2, [r1, #0]
    83b0:	f840 2f09 	str.w	r2, [r0, #9]!
    83b4:	8889      	ldrh	r1, [r1, #4]
    83b6:	8081      	strh	r1, [r0, #4]
    83b8:	4770      	bx	lr

000083ba <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    83ba:	7802      	ldrb	r2, [r0, #0]
    83bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    83c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    83c4:	7002      	strb	r2, [r0, #0]
    83c6:	4770      	bx	lr

000083c8 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    83c8:	680a      	ldr	r2, [r1, #0]
    83ca:	f840 2f03 	str.w	r2, [r0, #3]!
    83ce:	8889      	ldrh	r1, [r1, #4]
    83d0:	8081      	strh	r1, [r0, #4]
    83d2:	4770      	bx	lr

000083d4 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    83d4:	7802      	ldrb	r2, [r0, #0]
    83d6:	2340      	movs	r3, #64	; 0x40
    83d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    83dc:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    83e0:	430a      	orrs	r2, r1
    83e2:	7002      	strb	r2, [r0, #0]
    83e4:	4770      	bx	lr

000083e6 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    83e6:	b570      	push	{r4, r5, r6, lr}
    83e8:	4614      	mov	r4, r2
    83ea:	4605      	mov	r5, r0
    83ec:	2a1f      	cmp	r2, #31
    83ee:	d903      	bls.n	83f8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    83f0:	21d4      	movs	r1, #212	; 0xd4
    83f2:	202a      	movs	r0, #42	; 0x2a
    83f4:	f7fb fb60 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83f8:	f105 0009 	add.w	r0, r5, #9
    83fc:	f7ff f8c6 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8400:	1da4      	adds	r4, r4, #6
    8402:	706c      	strb	r4, [r5, #1]
    8404:	bd70      	pop	{r4, r5, r6, pc}
    8406:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    840a:	4604      	mov	r4, r0
    840c:	460e      	mov	r6, r1
    840e:	2000      	movs	r0, #0
    8410:	f7fb fd22 	bl	3e58 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    8414:	4605      	mov	r5, r0
    8416:	2000      	movs	r0, #0
    8418:	b916      	cbnz	r6, 8420 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x3a>
    841a:	2001      	movs	r0, #1
    841c:	f7fb fd1c 	bl	3e58 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    8420:	2600      	movs	r6, #0
    8422:	46b0      	mov	r8, r6
    8424:	182f      	adds	r7, r5, r0
    8426:	e017      	b.n	8458 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x72>
    8428:	8820      	ldrh	r0, [r4, #0]
    842a:	1c40      	adds	r0, r0, #1
    842c:	b280      	uxth	r0, r0
    842e:	8020      	strh	r0, [r4, #0]
    8430:	42b8      	cmp	r0, r7
    8432:	d302      	bcc.n	843a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x54>
    8434:	4640      	mov	r0, r8
    8436:	f8a4 8000 	strh.w	r8, [r4]
    843a:	b280      	uxth	r0, r0
    843c:	42a8      	cmp	r0, r5
    843e:	d304      	bcc.n	844a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x64>
    8440:	42b8      	cmp	r0, r7
    8442:	d202      	bcs.n	844a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x64>
    8444:	2000      	movs	r0, #0
    8446:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    844a:	4669      	mov	r1, sp
    844c:	f7ff febe 	bl	81cc <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    8450:	2800      	cmp	r0, #0
    8452:	d0f8      	beq.n	8446 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x60>
    8454:	1c76      	adds	r6, r6, #1
    8456:	b2f6      	uxtb	r6, r6
    8458:	42b7      	cmp	r7, r6
    845a:	d8e5      	bhi.n	8428 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x42>
    845c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8460:	8020      	strh	r0, [r4, #0]
    8462:	2012      	movs	r0, #18
    8464:	e7ef      	b.n	8446 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x60>
    8466:	2801      	cmp	r0, #1
    8468:	d102      	bne.n	8470 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x8a>
    846a:	7948      	ldrb	r0, [r1, #5]
    846c:	0980      	lsrs	r0, r0, #6
    846e:	d001      	beq.n	8474 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x8e>
    8470:	2000      	movs	r0, #0
    8472:	4770      	bx	lr
    8474:	2001      	movs	r0, #1
    8476:	4770      	bx	lr
    8478:	2801      	cmp	r0, #1
    847a:	d106      	bne.n	848a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0xa4>
    847c:	7948      	ldrb	r0, [r1, #5]
    847e:	2101      	movs	r1, #1
    8480:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    8484:	d101      	bne.n	848a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0xa4>
    8486:	2001      	movs	r0, #1
    8488:	4770      	bx	lr
    848a:	2000      	movs	r0, #0
    848c:	4770      	bx	lr
    848e:	2802      	cmp	r0, #2
    8490:	d003      	beq.n	849a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0xb4>
    8492:	2803      	cmp	r0, #3
    8494:	d001      	beq.n	849a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0xb4>
    8496:	2000      	movs	r0, #0
    8498:	4770      	bx	lr
    849a:	2001      	movs	r0, #1
    849c:	4770      	bx	lr

0000849e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    849e:	b510      	push	{r4, lr}
    84a0:	4604      	mov	r4, r0
    84a2:	7c00      	ldrb	r0, [r0, #16]
    84a4:	f7ff fff3 	bl	848e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0xa8>
    84a8:	b148      	cbz	r0, 84be <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    84aa:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    84ae:	f104 0150 	add.w	r1, r4, #80	; 0x50
    84b2:	f7ff fe48 	bl	8146 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    84b6:	2808      	cmp	r0, #8
    84b8:	d001      	beq.n	84be <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    84ba:	2001      	movs	r0, #1
    84bc:	bd10      	pop	{r4, pc}
    84be:	7c20      	ldrb	r0, [r4, #16]
    84c0:	b118      	cbz	r0, 84ca <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    84c2:	2802      	cmp	r0, #2
    84c4:	d001      	beq.n	84ca <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    84c6:	7de0      	ldrb	r0, [r4, #23]
    84c8:	bd10      	pop	{r4, pc}
    84ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    84ce:	2000      	movs	r0, #0
    84d0:	f7fc b8fe 	b.w	46d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

000084d4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    84d4:	b508      	push	{r3, lr}
    84d6:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    84da:	f88d 1000 	strb.w	r1, [sp]
    84de:	9900      	ldr	r1, [sp, #0]
    84e0:	9100      	str	r1, [sp, #0]
    84e2:	f89d 1000 	ldrb.w	r1, [sp]
    84e6:	b109      	cbz	r1, 84ec <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    84e8:	2001      	movs	r0, #1
    84ea:	bd08      	pop	{r3, pc}
    84ec:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    84f0:	f88d 0000 	strb.w	r0, [sp]
    84f4:	9800      	ldr	r0, [sp, #0]
    84f6:	9000      	str	r0, [sp, #0]
    84f8:	f89d 0000 	ldrb.w	r0, [sp]
    84fc:	2000      	movs	r0, #0
    84fe:	bd08      	pop	{r3, pc}

00008500 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    8500:	20ff      	movs	r0, #255	; 0xff
    8502:	7008      	strb	r0, [r1, #0]
    8504:	4770      	bx	lr

00008506 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    8506:	b570      	push	{r4, r5, r6, lr}
    8508:	460d      	mov	r5, r1
    850a:	4604      	mov	r4, r0
    850c:	22e8      	movs	r2, #232	; 0xe8
    850e:	2100      	movs	r1, #0
    8510:	f7ff f8b6 	bl	7680 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8514:	20ff      	movs	r0, #255	; 0xff
    8516:	7020      	strb	r0, [r4, #0]
    8518:	207f      	movs	r0, #127	; 0x7f
    851a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    851e:	2013      	movs	r0, #19
    8520:	8060      	strh	r0, [r4, #2]
    8522:	4628      	mov	r0, r5
    8524:	f7fb ff30 	bl	4388 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    8528:	62e0      	str	r0, [r4, #44]	; 0x2c
    852a:	2002      	movs	r0, #2
    852c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    8530:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    8534:	2000      	movs	r0, #0
    8536:	73a0      	strb	r0, [r4, #14]
    8538:	f104 0020 	add.w	r0, r4, #32
    853c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8540:	f000 b9a0 	b.w	8884 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

00008544 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    8544:	7880      	ldrb	r0, [r0, #2]
    8546:	f3c0 0080 	ubfx	r0, r0, #2, #1
    854a:	b108      	cbz	r0, 8550 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    854c:	2000      	movs	r0, #0
    854e:	4770      	bx	lr
    8550:	201f      	movs	r0, #31
    8552:	4770      	bx	lr

00008554 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    8554:	f7fd b9c0 	b.w	58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>

00008558 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    8558:	6880      	ldr	r0, [r0, #8]
    855a:	4770      	bx	lr

0000855c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    855c:	2001      	movs	r0, #1
    855e:	4770      	bx	lr

00008560 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    8560:	b510      	push	{r4, lr}
    8562:	4604      	mov	r4, r0
    8564:	3020      	adds	r0, #32
    8566:	f000 f94d 	bl	8804 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    856a:	8861      	ldrh	r1, [r4, #2]
    856c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8570:	2228      	movs	r2, #40	; 0x28
    8572:	f7fd baf1 	b.w	5b58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

00008576 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    8576:	2200      	movs	r2, #0
    8578:	6282      	str	r2, [r0, #40]	; 0x28
    857a:	8843      	ldrh	r3, [r0, #2]
    857c:	2b1d      	cmp	r3, #29
    857e:	d001      	beq.n	8584 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    8580:	7341      	strb	r1, [r0, #13]
    8582:	4770      	bx	lr
    8584:	7342      	strb	r2, [r0, #13]
    8586:	4770      	bx	lr

00008588 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    8588:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    858c:	2100      	movs	r1, #0
    858e:	2a02      	cmp	r2, #2
    8590:	d104      	bne.n	859c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    8592:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    8596:	b108      	cbz	r0, 859c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    8598:	2001      	movs	r0, #1
    859a:	e000      	b.n	859e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    859c:	2000      	movs	r0, #0
    859e:	4381      	bics	r1, r0
    85a0:	f081 0001 	eor.w	r0, r1, #1
    85a4:	4770      	bx	lr

000085a6 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    85a6:	2000      	movs	r0, #0
    85a8:	4770      	bx	lr

000085aa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    85aa:	7880      	ldrb	r0, [r0, #2]
    85ac:	f000 0001 	and.w	r0, r0, #1
    85b0:	4770      	bx	lr

000085b2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    85b2:	7880      	ldrb	r0, [r0, #2]
    85b4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    85b8:	4770      	bx	lr

000085ba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    85ba:	2001      	movs	r0, #1
    85bc:	4770      	bx	lr

000085be <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    85be:	7880      	ldrb	r0, [r0, #2]
    85c0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    85c4:	4770      	bx	lr

000085c6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    85c6:	f990 000e 	ldrsb.w	r0, [r0, #14]
    85ca:	4770      	bx	lr

000085cc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    85cc:	7800      	ldrb	r0, [r0, #0]
    85ce:	28ff      	cmp	r0, #255	; 0xff
    85d0:	d001      	beq.n	85d6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    85d2:	2001      	movs	r0, #1
    85d4:	4770      	bx	lr
    85d6:	2000      	movs	r0, #0
    85d8:	4770      	bx	lr

000085da <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    85da:	680a      	ldr	r2, [r1, #0]
    85dc:	f840 2f11 	str.w	r2, [r0, #17]!
    85e0:	8889      	ldrh	r1, [r1, #4]
    85e2:	8081      	strh	r1, [r0, #4]
    85e4:	2101      	movs	r1, #1
    85e6:	7181      	strb	r1, [r0, #6]
    85e8:	4770      	bx	lr

000085ea <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    85ea:	7b00      	ldrb	r0, [r0, #12]
    85ec:	4770      	bx	lr

000085ee <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    85ee:	2001      	movs	r0, #1
    85f0:	4770      	bx	lr

000085f2 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    85f2:	61c1      	str	r1, [r0, #28]
    85f4:	4770      	bx	lr

000085f6 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>:
    85f6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    85fa:	b102      	cbz	r2, 85fe <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x8>
    85fc:	2201      	movs	r2, #1
    85fe:	2300      	movs	r3, #0
    8600:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    8604:	b119      	cbz	r1, 860e <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x18>
    8606:	e9d0 3019 	ldrd	r3, r0, [r0, #100]	; 0x64
    860a:	e9c1 3000 	strd	r3, r0, [r1]
    860e:	4610      	mov	r0, r2
    8610:	4770      	bx	lr

00008612 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>:
    8612:	2102      	movs	r1, #2
    8614:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    8618:	4770      	bx	lr

0000861a <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>:
    861a:	e9d0 2019 	ldrd	r2, r0, [r0, #100]	; 0x64
    861e:	e9c1 2000 	strd	r2, r0, [r1]
    8622:	4770      	bx	lr

00008624 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    8624:	2201      	movs	r2, #1
    8626:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    862a:	e9d1 2100 	ldrd	r2, r1, [r1]
    862e:	e9c0 2119 	strd	r2, r1, [r0, #100]	; 0x64
    8632:	4770      	bx	lr

00008634 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>:
    8634:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8638:	b102      	cbz	r2, 863c <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x8>
    863a:	2201      	movs	r2, #1
    863c:	2300      	movs	r3, #0
    863e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    8642:	b119      	cbz	r1, 864c <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x18>
    8644:	e9d0 301b 	ldrd	r3, r0, [r0, #108]	; 0x6c
    8648:	e9c1 3000 	strd	r3, r0, [r1]
    864c:	4610      	mov	r0, r2
    864e:	4770      	bx	lr

00008650 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>:
    8650:	2102      	movs	r1, #2
    8652:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    8656:	4770      	bx	lr

00008658 <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>:
    8658:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    865c:	e9c1 2000 	strd	r2, r0, [r1]
    8660:	4770      	bx	lr

00008662 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    8662:	2201      	movs	r2, #1
    8664:	f880 2075 	strb.w	r2, [r0, #117]	; 0x75
    8668:	e9d1 2100 	ldrd	r2, r1, [r1]
    866c:	e9c0 211b 	strd	r2, r1, [r0, #108]	; 0x6c
    8670:	4770      	bx	lr

00008672 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    8672:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    8676:	4770      	bx	lr

00008678 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    8678:	b570      	push	{r4, r5, r6, lr}
    867a:	4604      	mov	r4, r0
    867c:	7880      	ldrb	r0, [r0, #2]
    867e:	2501      	movs	r5, #1
    8680:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8684:	b138      	cbz	r0, 8696 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    8686:	233c      	movs	r3, #60	; 0x3c
    8688:	22ff      	movs	r2, #255	; 0xff
    868a:	4620      	mov	r0, r4
    868c:	69e1      	ldr	r1, [r4, #28]
    868e:	f7fd f949 	bl	5924 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    8692:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    8696:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    869a:	bd70      	pop	{r4, r5, r6, pc}

0000869c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    869c:	7bc0      	ldrb	r0, [r0, #15]
    869e:	2800      	cmp	r0, #0
    86a0:	d000      	beq.n	86a4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    86a2:	2001      	movs	r0, #1
    86a4:	4770      	bx	lr
    86a6:	b510      	push	{r4, lr}
    86a8:	f7ff fd4d 	bl	8146 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    86ac:	4604      	mov	r4, r0
    86ae:	f7fc f93d 	bl	492c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    86b2:	b138      	cbz	r0, 86c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    86b4:	4620      	mov	r0, r4
    86b6:	f7fc f871 	bl	479c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    86ba:	b118      	cbz	r0, 86c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    86bc:	2110      	movs	r1, #16
    86be:	f7ff fdcc 	bl	825a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    86c2:	b108      	cbz	r0, 86c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    86c4:	2000      	movs	r0, #0
    86c6:	bd10      	pop	{r4, pc}
    86c8:	2001      	movs	r0, #1
    86ca:	bd10      	pop	{r4, pc}
    86cc:	2101      	movs	r1, #1
    86ce:	f7fc bd99 	b.w	5204 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    86d2:	2101      	movs	r1, #1
    86d4:	f7fc bd96 	b.w	5204 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    86d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86dc:	4604      	mov	r4, r0
    86de:	2700      	movs	r7, #0
    86e0:	704f      	strb	r7, [r1, #1]
    86e2:	2011      	movs	r0, #17
    86e4:	460d      	mov	r5, r1
    86e6:	7008      	strb	r0, [r1, #0]
    86e8:	2220      	movs	r2, #32
    86ea:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    86ee:	1d28      	adds	r0, r5, #4
    86f0:	f7fe ff4c 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    86f4:	2601      	movs	r6, #1
    86f6:	722e      	strb	r6, [r5, #8]
    86f8:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    86fc:	7928      	ldrb	r0, [r5, #4]
    86fe:	2800      	cmp	r0, #0
    8700:	d111      	bne.n	8726 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    8702:	88e8      	ldrh	r0, [r5, #6]
    8704:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    8708:	69e0      	ldr	r0, [r4, #28]
    870a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    870e:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
    8712:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    8716:	8800      	ldrh	r0, [r0, #0]
    8718:	f7fb fdb8 	bl	428c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    871c:	f7ff fb75 	bl	7e0a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8720:	69e0      	ldr	r0, [r4, #28]
    8722:	f880 6068 	strb.w	r6, [r0, #104]	; 0x68
    8726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    872e:	4604      	mov	r4, r0
    8730:	460f      	mov	r7, r1
    8732:	7e40      	ldrb	r0, [r0, #25]
    8734:	f7fb fff2 	bl	471c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    8738:	4606      	mov	r6, r0
    873a:	7e20      	ldrb	r0, [r4, #24]
    873c:	f104 0549 	add.w	r5, r4, #73	; 0x49
    8740:	b120      	cbz	r0, 874c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    8742:	b11e      	cbz	r6, 874c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    8744:	7e60      	ldrb	r0, [r4, #25]
    8746:	f7fb ffdd 	bl	4704 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    874a:	b1a0      	cbz	r0, 8776 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    874c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    8750:	2800      	cmp	r0, #0
    8752:	d024      	beq.n	879e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    8754:	7ea0      	ldrb	r0, [r4, #26]
    8756:	2800      	cmp	r0, #0
    8758:	d021      	beq.n	879e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    875a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    875e:	4629      	mov	r1, r5
    8760:	f7ff fe8a 	bl	8478 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x92>
    8764:	b1a8      	cbz	r0, 8792 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    8766:	f7fb ffc9 	bl	46fc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    876a:	463a      	mov	r2, r7
    876c:	4629      	mov	r1, r5
    876e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8772:	f7ff bca6 	b.w	80c2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8776:	2001      	movs	r0, #1
    8778:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    877c:	463a      	mov	r2, r7
    877e:	4629      	mov	r1, r5
    8780:	4630      	mov	r0, r6
    8782:	f7ff fc9e 	bl	80c2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8786:	7e61      	ldrb	r1, [r4, #25]
    8788:	4628      	mov	r0, r5
    878a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    878e:	f7fb bfd1 	b.w	4734 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    8792:	4639      	mov	r1, r7
    8794:	4628      	mov	r0, r5
    8796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    879a:	f7ff bc81 	b.w	80a0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    879e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87a2:	b510      	push	{r4, lr}
    87a4:	4604      	mov	r4, r0
    87a6:	4608      	mov	r0, r1
    87a8:	f7fe f9be 	bl	6b28 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    87ac:	7921      	ldrb	r1, [r4, #4]
    87ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87b2:	2025      	movs	r0, #37	; 0x25
    87b4:	f000 bfec 	b.w	9790 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    87b8:	b510      	push	{r4, lr}
    87ba:	4604      	mov	r4, r0
    87bc:	3026      	adds	r0, #38	; 0x26
    87be:	f7fe f977 	bl	6ab0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    87c2:	2800      	cmp	r0, #0
    87c4:	d102      	bne.n	87cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    87c6:	207f      	movs	r0, #127	; 0x7f
    87c8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    87cc:	bd10      	pop	{r4, pc}
    87ce:	7802      	ldrb	r2, [r0, #0]
    87d0:	2320      	movs	r3, #32
    87d2:	f022 0220 	bic.w	r2, r2, #32
    87d6:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    87da:	430a      	orrs	r2, r1
    87dc:	7002      	strb	r2, [r0, #0]
    87de:	4770      	bx	lr

000087e0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    87e0:	b570      	push	{r4, r5, r6, lr}
    87e2:	7001      	strb	r1, [r0, #0]
    87e4:	7042      	strb	r2, [r0, #1]
    87e6:	4614      	mov	r4, r2
    87e8:	460d      	mov	r5, r1
    87ea:	7880      	ldrb	r0, [r0, #2]
    87ec:	f000 f87f 	bl	88ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    87f0:	fb10 f005 	smulbb	r0, r0, r5
    87f4:	4360      	muls	r0, r4
    87f6:	28ff      	cmp	r0, #255	; 0xff
    87f8:	d303      	bcc.n	8802 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    87fa:	215c      	movs	r1, #92	; 0x5c
    87fc:	202e      	movs	r0, #46	; 0x2e
    87fe:	f7fb f95b 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8802:	bd70      	pop	{r4, r5, r6, pc}

00008804 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    8804:	b510      	push	{r4, lr}
    8806:	4604      	mov	r4, r0
    8808:	7880      	ldrb	r0, [r0, #2]
    880a:	f000 f870 	bl	88ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    880e:	7861      	ldrb	r1, [r4, #1]
    8810:	7822      	ldrb	r2, [r4, #0]
    8812:	fb11 f102 	smulbb	r1, r1, r2
    8816:	4348      	muls	r0, r1
    8818:	b2c0      	uxtb	r0, r0
    881a:	bd10      	pop	{r4, pc}

0000881c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    881c:	b510      	push	{r4, lr}
    881e:	4604      	mov	r4, r0
    8820:	f000 f84d 	bl	88be <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    8824:	7961      	ldrb	r1, [r4, #5]
    8826:	1c49      	adds	r1, r1, #1
    8828:	b2c9      	uxtb	r1, r1
    882a:	7161      	strb	r1, [r4, #5]
    882c:	7862      	ldrb	r2, [r4, #1]
    882e:	4291      	cmp	r1, r2
    8830:	d10b      	bne.n	884a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    8832:	2200      	movs	r2, #0
    8834:	7162      	strb	r2, [r4, #5]
    8836:	78e1      	ldrb	r1, [r4, #3]
    8838:	4301      	orrs	r1, r0
    883a:	70e1      	strb	r1, [r4, #3]
    883c:	78a3      	ldrb	r3, [r4, #2]
    883e:	4299      	cmp	r1, r3
    8840:	d103      	bne.n	884a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    8842:	70e2      	strb	r2, [r4, #3]
    8844:	7921      	ldrb	r1, [r4, #4]
    8846:	1c49      	adds	r1, r1, #1
    8848:	7121      	strb	r1, [r4, #4]
    884a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    884e:	f000 b825 	b.w	889c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

00008852 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    8852:	7081      	strb	r1, [r0, #2]
    8854:	4770      	bx	lr

00008856 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    8856:	b570      	push	{r4, r5, r6, lr}
    8858:	4604      	mov	r4, r0
    885a:	7880      	ldrb	r0, [r0, #2]
    885c:	f000 f847 	bl	88ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8860:	7861      	ldrb	r1, [r4, #1]
    8862:	fb11 f500 	smulbb	r5, r1, r0
    8866:	78e0      	ldrb	r0, [r4, #3]
    8868:	f000 f841 	bl	88ee <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    886c:	7861      	ldrb	r1, [r4, #1]
    886e:	7962      	ldrb	r2, [r4, #5]
    8870:	fb10 2001 	smlabb	r0, r0, r1, r2
    8874:	7821      	ldrb	r1, [r4, #0]
    8876:	7922      	ldrb	r2, [r4, #4]
    8878:	1a89      	subs	r1, r1, r2
    887a:	fb11 f105 	smulbb	r1, r1, r5
    887e:	1a08      	subs	r0, r1, r0
    8880:	b2c0      	uxtb	r0, r0
    8882:	bd70      	pop	{r4, r5, r6, pc}

00008884 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    8884:	2100      	movs	r1, #0
    8886:	6001      	str	r1, [r0, #0]
    8888:	8081      	strh	r1, [r0, #4]
    888a:	2101      	movs	r1, #1
    888c:	7041      	strb	r1, [r0, #1]
    888e:	7001      	strb	r1, [r0, #0]
    8890:	4770      	bx	lr

00008892 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    8892:	2100      	movs	r1, #0
    8894:	70c1      	strb	r1, [r0, #3]
    8896:	7141      	strb	r1, [r0, #5]
    8898:	7101      	strb	r1, [r0, #4]
    889a:	4770      	bx	lr
    889c:	b510      	push	{r4, lr}
    889e:	2801      	cmp	r0, #1
    88a0:	d007      	beq.n	88b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    88a2:	2802      	cmp	r0, #2
    88a4:	d007      	beq.n	88b6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    88a6:	2804      	cmp	r0, #4
    88a8:	d007      	beq.n	88ba <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    88aa:	2139      	movs	r1, #57	; 0x39
    88ac:	202e      	movs	r0, #46	; 0x2e
    88ae:	f7fb f903 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88b2:	2025      	movs	r0, #37	; 0x25
    88b4:	bd10      	pop	{r4, pc}
    88b6:	2026      	movs	r0, #38	; 0x26
    88b8:	bd10      	pop	{r4, pc}
    88ba:	2027      	movs	r0, #39	; 0x27
    88bc:	bd10      	pop	{r4, pc}
    88be:	4601      	mov	r1, r0
    88c0:	2000      	movs	r0, #0
    88c2:	788a      	ldrb	r2, [r1, #2]
    88c4:	07d3      	lsls	r3, r2, #31
    88c6:	d002      	beq.n	88ce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    88c8:	78cb      	ldrb	r3, [r1, #3]
    88ca:	07db      	lsls	r3, r3, #31
    88cc:	d006      	beq.n	88dc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    88ce:	0793      	lsls	r3, r2, #30
    88d0:	d506      	bpl.n	88e0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    88d2:	78cb      	ldrb	r3, [r1, #3]
    88d4:	079b      	lsls	r3, r3, #30
    88d6:	d403      	bmi.n	88e0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    88d8:	2002      	movs	r0, #2
    88da:	4770      	bx	lr
    88dc:	2001      	movs	r0, #1
    88de:	4770      	bx	lr
    88e0:	0752      	lsls	r2, r2, #29
    88e2:	d5fc      	bpl.n	88de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    88e4:	78c9      	ldrb	r1, [r1, #3]
    88e6:	0749      	lsls	r1, r1, #29
    88e8:	d4f9      	bmi.n	88de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    88ea:	2004      	movs	r0, #4
    88ec:	4770      	bx	lr
    88ee:	f3c0 0180 	ubfx	r1, r0, #2, #1
    88f2:	f3c0 0240 	ubfx	r2, r0, #1, #1
    88f6:	4411      	add	r1, r2
    88f8:	f000 0001 	and.w	r0, r0, #1
    88fc:	4408      	add	r0, r1
    88fe:	4770      	bx	lr

00008900 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    8900:	f240 315a 	movw	r1, #858	; 0x35a
    8904:	4348      	muls	r0, r1
    8906:	4770      	bx	lr

00008908 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    8908:	f240 20ef 	movw	r0, #751	; 0x2ef
    890c:	4770      	bx	lr
    890e:	020e      	.short	0x020e
    8910:	0630041c 	.word	0x0630041c
    8914:	035a0c60 	.word	0x035a0c60
    8918:	05c506b4 	.word	0x05c506b4
    891c:	12250bf5 	.word	0x12250bf5
    8920:	03b101a3 	.word	0x03b101a3
    8924:	02ef05bf 	.word	0x02ef05bf
    8928:	09a30649 	.word	0x09a30649

0000892c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    892c:	b510      	push	{r4, lr}
    892e:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    8932:	b109      	cbz	r1, 8938 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    8934:	2000      	movs	r0, #0
    8936:	bd10      	pop	{r4, pc}
    8938:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    893c:	b949      	cbnz	r1, 8952 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    893e:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    8942:	b131      	cbz	r1, 8952 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    8944:	e9d0 1230 	ldrd	r1, r2, [r0, #192]	; 0xc0
    8948:	428a      	cmp	r2, r1
    894a:	d902      	bls.n	8952 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    894c:	f7ff fe94 	bl	8678 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8950:	e7f0      	b.n	8934 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    8952:	2001      	movs	r0, #1
    8954:	bd10      	pop	{r4, pc}

00008956 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8956:	b510      	push	{r4, lr}
    8958:	b131      	cbz	r1, 8968 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    895a:	2901      	cmp	r1, #1
    895c:	d008      	beq.n	8970 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    895e:	f240 71a3 	movw	r1, #1955	; 0x7a3
    8962:	2030      	movs	r0, #48	; 0x30
    8964:	f7fb f8a8 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    896c:	f000 b91c 	b.w	8ba8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1a0>
    8970:	2100      	movs	r1, #0
    8972:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    8976:	f000 f8f2 	bl	8b5e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x156>
    897a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    897e:	f7fd ba83 	b.w	5e88 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>

00008982 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    8982:	b510      	push	{r4, lr}
    8984:	4604      	mov	r4, r0
    8986:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    898a:	2800      	cmp	r0, #0
    898c:	d019      	beq.n	89c2 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    898e:	2001      	movs	r0, #1
    8990:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
    8994:	4601      	mov	r1, r0
    8996:	4620      	mov	r0, r4
    8998:	f7ff fe6b 	bl	8672 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    899c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    89a0:	b170      	cbz	r0, 89c0 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    89a2:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    89a6:	f7f9 f9dd 	bl	1d64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    89aa:	7820      	ldrb	r0, [r4, #0]
    89ac:	f7f9 fb08 	bl	1fc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    89b0:	f814 09b4 	ldrb.w	r0, [r4], #-180
    89b4:	f7f9 fae2 	bl	1f7c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    89b8:	b120      	cbz	r0, 89c4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    89ba:	2000      	movs	r0, #0
    89bc:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    89c0:	2000      	movs	r0, #0
    89c2:	bd10      	pop	{r4, pc}
    89c4:	f240 2117 	movw	r1, #535	; 0x217
    89c8:	2030      	movs	r0, #48	; 0x30
    89ca:	f7fb f875 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000089ce <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    89ce:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    89d2:	4770      	bx	lr

000089d4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    89d4:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    89d8:	4770      	bx	lr

000089da <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    89da:	b50e      	push	{r1, r2, r3, lr}
    89dc:	4669      	mov	r1, sp
    89de:	2001      	movs	r0, #1
    89e0:	f7ff faed 	bl	7fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    89e4:	b138      	cbz	r0, 89f6 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    89e6:	f240 1145 	movw	r1, #325	; 0x145
    89ea:	2030      	movs	r0, #48	; 0x30
    89ec:	f7fb f864 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89f0:	9802      	ldr	r0, [sp, #8]
    89f2:	f7ff ffc6 	bl	8982 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    89f6:	4668      	mov	r0, sp
    89f8:	f7fb fa7a 	bl	3ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    89fc:	2800      	cmp	r0, #0
    89fe:	d0f7      	beq.n	89f0 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    8a00:	f7fd f9b4 	bl	5d6c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x28>
    8a04:	2000      	movs	r0, #0
    8a06:	bd0e      	pop	{r1, r2, r3, pc}

00008a08 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    8a08:	b50e      	push	{r1, r2, r3, lr}
    8a0a:	4669      	mov	r1, sp
    8a0c:	2001      	movs	r0, #1
    8a0e:	f7ff fad6 	bl	7fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8a12:	b150      	cbz	r0, 8a2a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    8a14:	f240 71ae 	movw	r1, #1966	; 0x7ae
    8a18:	2030      	movs	r0, #48	; 0x30
    8a1a:	f7fb f84d 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a1e:	9802      	ldr	r0, [sp, #8]
    8a20:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    8a24:	b108      	cbz	r0, 8a2a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    8a26:	2000      	movs	r0, #0
    8a28:	bd0e      	pop	{r1, r2, r3, pc}
    8a2a:	4668      	mov	r0, sp
    8a2c:	f7fb fa60 	bl	3ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8a30:	2800      	cmp	r0, #0
    8a32:	d0f4      	beq.n	8a1e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    8a34:	2000      	movs	r0, #0
    8a36:	f7ff faa6 	bl	7f86 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    8a3a:	f080 0001 	eor.w	r0, r0, #1
    8a3e:	bd0e      	pop	{r1, r2, r3, pc}
    8a40:	b570      	push	{r4, r5, r6, lr}
    8a42:	4604      	mov	r4, r0
    8a44:	2601      	movs	r6, #1
    8a46:	f000 f893 	bl	8b70 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x168>
    8a4a:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    8a4e:	2000      	movs	r0, #0
    8a50:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    8a54:	2001      	movs	r0, #1
    8a56:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    8a5a:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    8a5e:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    8a62:	b160      	cbz	r0, 8a7e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x76>
    8a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a68:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    8a6c:	f7f8 fd04 	bl	1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8a70:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    8a74:	2100      	movs	r1, #0
    8a76:	4628      	mov	r0, r5
    8a78:	f7ff fbbf 	bl	81fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8a7c:	e00f      	b.n	8a9e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x96>
    8a7e:	4620      	mov	r0, r4
    8a80:	f7ff fd6a 	bl	8558 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8a84:	4606      	mov	r6, r0
    8a86:	4631      	mov	r1, r6
    8a88:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    8a8c:	f7f8 fcf4 	bl	1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8a90:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    8a94:	4631      	mov	r1, r6
    8a96:	4628      	mov	r0, r5
    8a98:	f7ff fbaf 	bl	81fa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8a9c:	1c46      	adds	r6, r0, #1
    8a9e:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    8aa2:	1c41      	adds	r1, r0, #1
    8aa4:	290a      	cmp	r1, #10
    8aa6:	d202      	bcs.n	8aae <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xa6>
    8aa8:	4430      	add	r0, r6
    8aaa:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    8aae:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    8ab2:	b130      	cbz	r0, 8ac2 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xba>
    8ab4:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    8ab8:	1c40      	adds	r0, r0, #1
    8aba:	280a      	cmp	r0, #10
    8abc:	d301      	bcc.n	8ac2 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xba>
    8abe:	2002      	movs	r0, #2
    8ac0:	e000      	b.n	8ac4 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xbc>
    8ac2:	2003      	movs	r0, #3
    8ac4:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    8ac8:	2100      	movs	r1, #0
    8aca:	4620      	mov	r0, r4
    8acc:	f000 f824 	bl	8b18 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x110>
    8ad0:	b130      	cbz	r0, 8ae0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xd8>
    8ad2:	4620      	mov	r0, r4
    8ad4:	f000 f811 	bl	8afa <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xf2>
    8ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8adc:	f7fd b9d4 	b.w	5e88 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8ae0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8ae4:	4629      	mov	r1, r5
    8ae6:	f000 f841 	bl	8b6c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x164>
    8aea:	2800      	cmp	r0, #0
    8aec:	d104      	bne.n	8af8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0xf0>
    8aee:	f240 61b6 	movw	r1, #1718	; 0x6b6
    8af2:	2030      	movs	r0, #48	; 0x30
    8af4:	f7fa ffe0 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8af8:	bd70      	pop	{r4, r5, r6, pc}
    8afa:	b510      	push	{r4, lr}
    8afc:	4604      	mov	r4, r0
    8afe:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    8b02:	f7f9 fa3b 	bl	1f7c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8b06:	2000      	movs	r0, #0
    8b08:	7520      	strb	r0, [r4, #20]
    8b0a:	bd10      	pop	{r4, pc}
    8b0c:	b510      	push	{r4, lr}
    8b0e:	f7ff fd27 	bl	8560 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8b12:	f200 1007 	addw	r0, r0, #263	; 0x107
    8b16:	bd10      	pop	{r4, pc}
    8b18:	b570      	push	{r4, r5, r6, lr}
    8b1a:	4604      	mov	r4, r0
    8b1c:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    8b20:	460d      	mov	r5, r1
    8b22:	b108      	cbz	r0, 8b28 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x120>
    8b24:	2001      	movs	r0, #1
    8b26:	bd70      	pop	{r4, r5, r6, pc}
    8b28:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    8b2c:	b1a8      	cbz	r0, 8b5a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x152>
    8b2e:	4620      	mov	r0, r4
    8b30:	f7ff fd12 	bl	8558 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8b34:	4405      	add	r5, r0
    8b36:	4620      	mov	r0, r4
    8b38:	f7ff ffe8 	bl	8b0c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x104>
    8b3c:	1941      	adds	r1, r0, r5
    8b3e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    8b42:	4288      	cmp	r0, r1
    8b44:	d206      	bcs.n	8b54 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x14c>
    8b46:	2001      	movs	r0, #1
    8b48:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    8b4c:	4620      	mov	r0, r4
    8b4e:	f7ff fd93 	bl	8678 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8b52:	e7e7      	b.n	8b24 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x11c>
    8b54:	1b40      	subs	r0, r0, r5
    8b56:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    8b5a:	2000      	movs	r0, #0
    8b5c:	bd70      	pop	{r4, r5, r6, pc}
    8b5e:	b510      	push	{r4, lr}
    8b60:	f7fd fe38 	bl	67d4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8b68:	f7f9 bb5a 	b.w	2220 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8b6c:	f7f8 bde4 	b.w	1738 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8b70:	b510      	push	{r4, lr}
    8b72:	4604      	mov	r4, r0
    8b74:	f7ff fd21 	bl	85ba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    8b78:	b1a0      	cbz	r0, 8ba4 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x19c>
    8b7a:	4620      	mov	r0, r4
    8b7c:	f7ff fd15 	bl	85aa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    8b80:	b918      	cbnz	r0, 8b8a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x182>
    8b82:	4620      	mov	r0, r4
    8b84:	f7ff fd1b 	bl	85be <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    8b88:	b120      	cbz	r0, 8b94 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x18c>
    8b8a:	2449      	movs	r4, #73	; 0x49
    8b8c:	f000 fdae 	bl	96ec <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    8b90:	b928      	cbnz	r0, 8b9e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x196>
    8b92:	e001      	b.n	8b98 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x190>
    8b94:	2442      	movs	r4, #66	; 0x42
    8b96:	e7f9      	b.n	8b8c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x184>
    8b98:	f000 fd9e 	bl	96d8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    8b9c:	b100      	cbz	r0, 8ba0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x198>
    8b9e:	1de4      	adds	r4, r4, #7
    8ba0:	4620      	mov	r0, r4
    8ba2:	bd10      	pop	{r4, pc}
    8ba4:	206b      	movs	r0, #107	; 0x6b
    8ba6:	bd10      	pop	{r4, pc}
    8ba8:	b570      	push	{r4, r5, r6, lr}
    8baa:	4604      	mov	r4, r0
    8bac:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
    8bb0:	2500      	movs	r5, #0
    8bb2:	b118      	cbz	r0, 8bbc <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1b4>
    8bb4:	2001      	movs	r0, #1
    8bb6:	f000 f83f 	bl	8c38 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x230>
    8bba:	4605      	mov	r5, r0
    8bbc:	4620      	mov	r0, r4
    8bbe:	f7ff fccb 	bl	8558 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8bc2:	1941      	adds	r1, r0, r5
    8bc4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    8bc8:	34cc      	adds	r4, #204	; 0xcc
    8bca:	f7f8 fc55 	bl	1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8bce:	2600      	movs	r6, #0
    8bd0:	60e0      	str	r0, [r4, #12]
    8bd2:	f804 6b0b 	strb.w	r6, [r4], #11
    8bd6:	2001      	movs	r0, #1
    8bd8:	f804 0901 	strb.w	r0, [r4], #-1
    8bdc:	2003      	movs	r0, #3
    8bde:	f804 09d6 	strb.w	r0, [r4], #-214
    8be2:	4620      	mov	r0, r4
    8be4:	f7ff ffc4 	bl	8b70 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x168>
    8be8:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    8bec:	4629      	mov	r1, r5
    8bee:	4620      	mov	r0, r4
    8bf0:	f7ff ff92 	bl	8b18 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x110>
    8bf4:	b930      	cbnz	r0, 8c04 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1fc>
    8bf6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8bfa:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    8bfe:	f7ff ffb5 	bl	8b6c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x164>
    8c02:	b138      	cbz	r0, 8c14 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x20c>
    8c04:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
    8c08:	f7ff ffa9 	bl	8b5e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x156>
    8c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c10:	f7fd b93a 	b.w	5e88 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8c14:	f240 7104 	movw	r1, #1796	; 0x704
    8c18:	2030      	movs	r0, #48	; 0x30
    8c1a:	f7fa ff4d 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c1e:	b510      	push	{r4, lr}
    8c20:	4604      	mov	r4, r0
    8c22:	2000      	movs	r0, #0
    8c24:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    8c28:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    8c2c:	f7f9 f9a6 	bl	1f7c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8c30:	2020      	movs	r0, #32
    8c32:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
    8c36:	bd10      	pop	{r4, pc}
    8c38:	b508      	push	{r3, lr}
    8c3a:	2800      	cmp	r0, #0
    8c3c:	f04f 0101 	mov.w	r1, #1
    8c40:	4668      	mov	r0, sp
    8c42:	d002      	beq.n	8c4a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x242>
    8c44:	f7fa ffa0 	bl	3b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8c48:	e001      	b.n	8c4e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x246>
    8c4a:	f7fa ffab 	bl	3ba4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    8c4e:	f89d 0000 	ldrb.w	r0, [sp]
    8c52:	f242 7110 	movw	r1, #10000	; 0x2710
    8c56:	0200      	lsls	r0, r0, #8
    8c58:	fbb0 f2f1 	udiv	r2, r0, r1
    8c5c:	fb01 0012 	mls	r0, r1, r2, r0
    8c60:	bd08      	pop	{r3, pc}
    8c62:	01f4      	.short	0x01f4
    8c64:	009600fa 	.word	0x009600fa
    8c68:	004b0064 	.word	0x004b0064
    8c6c:	001e0032 	.word	0x001e0032
    8c70:	000a0014 	.word	0x000a0014
    8c74:	00020005 	.word	0x00020005
    8c78:	0001      	.short	0x0001

00008c7a <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    8c7a:	f7fb baa7 	b.w	41cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    8c7e:	b118      	cbz	r0, 8c88 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0xe>
    8c80:	2802      	cmp	r0, #2
    8c82:	d001      	beq.n	8c88 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0xe>
    8c84:	2001      	movs	r0, #1
    8c86:	4770      	bx	lr
    8c88:	2000      	movs	r0, #0
    8c8a:	4770      	bx	lr

00008c8c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    8c8c:	b510      	push	{r4, lr}
    8c8e:	4604      	mov	r4, r0
    8c90:	7800      	ldrb	r0, [r0, #0]
    8c92:	b118      	cbz	r0, 8c9c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    8c94:	2801      	cmp	r0, #1
    8c96:	d001      	beq.n	8c9c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    8c98:	2012      	movs	r0, #18
    8c9a:	bd10      	pop	{r4, pc}
    8c9c:	f000 fbe7 	bl	946e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1ae>
    8ca0:	b120      	cbz	r0, 8cac <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    8ca2:	f7fb fda7 	bl	47f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    8ca6:	b108      	cbz	r0, 8cac <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    8ca8:	200c      	movs	r0, #12
    8caa:	bd10      	pop	{r4, pc}
    8cac:	7820      	ldrb	r0, [r4, #0]
    8cae:	f7ff ffe6 	bl	8c7e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x4>
    8cb2:	1de2      	adds	r2, r4, #7
    8cb4:	f104 0317 	add.w	r3, r4, #23
    8cb8:	1c61      	adds	r1, r4, #1
    8cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cbe:	f7fb bdcb 	b.w	4858 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

00008cc2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    8cc2:	b510      	push	{r4, lr}
    8cc4:	4604      	mov	r4, r0
    8cc6:	f000 fc81 	bl	95cc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x30c>
    8cca:	b108      	cbz	r0, 8cd0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    8ccc:	200c      	movs	r0, #12
    8cce:	bd10      	pop	{r4, pc}
    8cd0:	7820      	ldrb	r0, [r4, #0]
    8cd2:	b118      	cbz	r0, 8cdc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    8cd4:	2801      	cmp	r0, #1
    8cd6:	d001      	beq.n	8cdc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    8cd8:	2012      	movs	r0, #18
    8cda:	bd10      	pop	{r4, pc}
    8cdc:	f7ff ffcf 	bl	8c7e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x4>
    8ce0:	1c61      	adds	r1, r4, #1
    8ce2:	f7fb fe31 	bl	4948 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    8ce6:	b108      	cbz	r0, 8cec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    8ce8:	2000      	movs	r0, #0
    8cea:	bd10      	pop	{r4, pc}
    8cec:	2007      	movs	r0, #7
    8cee:	bd10      	pop	{r4, pc}

00008cf0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    8cf0:	b510      	push	{r4, lr}
    8cf2:	f000 fbbc 	bl	946e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1ae>
    8cf6:	b120      	cbz	r0, 8d02 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    8cf8:	f7fb fd7c 	bl	47f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    8cfc:	b108      	cbz	r0, 8d02 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    8cfe:	200c      	movs	r0, #12
    8d00:	bd10      	pop	{r4, pc}
    8d02:	f7fb fdef 	bl	48e4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    8d06:	2000      	movs	r0, #0
    8d08:	bd10      	pop	{r4, pc}

00008d0a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    8d0a:	b510      	push	{r4, lr}
    8d0c:	f000 fc5e 	bl	95cc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x30c>
    8d10:	b108      	cbz	r0, 8d16 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    8d12:	200c      	movs	r0, #12
    8d14:	bd10      	pop	{r4, pc}
    8d16:	f7fb fe3f 	bl	4998 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    8d1a:	2000      	movs	r0, #0
    8d1c:	bd10      	pop	{r4, pc}

00008d1e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    8d1e:	b510      	push	{r4, lr}
    8d20:	460b      	mov	r3, r1
    8d22:	2201      	movs	r2, #1
    8d24:	f100 0110 	add.w	r1, r0, #16
    8d28:	f7ff fa32 	bl	8190 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8d2c:	2000      	movs	r0, #0
    8d2e:	bd10      	pop	{r4, pc}

00008d30 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    8d30:	b510      	push	{r4, lr}
    8d32:	8800      	ldrh	r0, [r0, #0]
    8d34:	2100      	movs	r1, #0
    8d36:	f7ff f938 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8d3a:	b118      	cbz	r0, 8d44 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    8d3c:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8d40:	b111      	cbz	r1, 8d48 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    8d42:	e007      	b.n	8d54 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    8d44:	2002      	movs	r0, #2
    8d46:	bd10      	pop	{r4, pc}
    8d48:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8d4c:	2914      	cmp	r1, #20
    8d4e:	d003      	beq.n	8d58 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    8d50:	2915      	cmp	r1, #21
    8d52:	d001      	beq.n	8d58 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    8d54:	200c      	movs	r0, #12
    8d56:	bd10      	pop	{r4, pc}
    8d58:	2102      	movs	r1, #2
    8d5a:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    8d5e:	2000      	movs	r0, #0
    8d60:	bd10      	pop	{r4, pc}

00008d62 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    8d62:	b510      	push	{r4, lr}
    8d64:	2108      	movs	r1, #8
    8d66:	f7fa ff2b 	bl	3bc0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8d6a:	2000      	movs	r0, #0
    8d6c:	bd10      	pop	{r4, pc}

00008d6e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    8d6e:	b510      	push	{r4, lr}
    8d70:	4604      	mov	r4, r0
    8d72:	f000 fbc8 	bl	9506 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x246>
    8d76:	f7ff fc26 	bl	85c6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    8d7a:	7020      	strb	r0, [r4, #0]
    8d7c:	2000      	movs	r0, #0
    8d7e:	bd10      	pop	{r4, pc}

00008d80 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    8d80:	2108      	movs	r1, #8
    8d82:	7001      	strb	r1, [r0, #0]
    8d84:	2000      	movs	r0, #0
    8d86:	4770      	bx	lr

00008d88 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    8d88:	b510      	push	{r4, lr}
    8d8a:	4604      	mov	r4, r0
    8d8c:	20d8      	movs	r0, #216	; 0xd8
    8d8e:	7020      	strb	r0, [r4, #0]
    8d90:	f000 fb94 	bl	94bc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1fc>
    8d94:	7060      	strb	r0, [r4, #1]
    8d96:	2000      	movs	r0, #0
    8d98:	bd10      	pop	{r4, pc}

00008d9a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    8d9a:	2108      	movs	r1, #8
    8d9c:	7001      	strb	r1, [r0, #0]
    8d9e:	2000      	movs	r0, #0
    8da0:	4770      	bx	lr

00008da2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    8da2:	b510      	push	{r4, lr}
    8da4:	4604      	mov	r4, r0
    8da6:	7800      	ldrb	r0, [r0, #0]
    8da8:	b108      	cbz	r0, 8dae <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    8daa:	2801      	cmp	r0, #1
    8dac:	d110      	bne.n	8dd0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    8dae:	f000 fb5e 	bl	946e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1ae>
    8db2:	b120      	cbz	r0, 8dbe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    8db4:	f7fb fd1e 	bl	47f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    8db8:	b108      	cbz	r0, 8dbe <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    8dba:	200c      	movs	r0, #12
    8dbc:	bd10      	pop	{r4, pc}
    8dbe:	7820      	ldrb	r0, [r4, #0]
    8dc0:	f7ff ff5d 	bl	8c7e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x4>
    8dc4:	1c61      	adds	r1, r4, #1
    8dc6:	f7ff f9c9 	bl	815c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    8dca:	b108      	cbz	r0, 8dd0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    8dcc:	2000      	movs	r0, #0
    8dce:	bd10      	pop	{r4, pc}
    8dd0:	2012      	movs	r0, #18
    8dd2:	bd10      	pop	{r4, pc}

00008dd4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    8dd4:	b510      	push	{r4, lr}
    8dd6:	4604      	mov	r4, r0
    8dd8:	f000 fbf8 	bl	95cc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x30c>
    8ddc:	b108      	cbz	r0, 8de2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    8dde:	200c      	movs	r0, #12
    8de0:	bd10      	pop	{r4, pc}
    8de2:	7820      	ldrb	r0, [r4, #0]
    8de4:	b108      	cbz	r0, 8dea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    8de6:	2801      	cmp	r0, #1
    8de8:	d107      	bne.n	8dfa <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    8dea:	f7ff ff48 	bl	8c7e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x4>
    8dee:	1c61      	adds	r1, r4, #1
    8df0:	f7ff f9c3 	bl	817a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    8df4:	b108      	cbz	r0, 8dfa <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    8df6:	2000      	movs	r0, #0
    8df8:	bd10      	pop	{r4, pc}
    8dfa:	2012      	movs	r0, #18
    8dfc:	bd10      	pop	{r4, pc}

00008dfe <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    8dfe:	b510      	push	{r4, lr}
    8e00:	4604      	mov	r4, r0
    8e02:	f000 fb34 	bl	946e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1ae>
    8e06:	b108      	cbz	r0, 8e0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    8e08:	200c      	movs	r0, #12
    8e0a:	bd10      	pop	{r4, pc}
    8e0c:	7820      	ldrb	r0, [r4, #0]
    8e0e:	f000 0001 	and.w	r0, r0, #1
    8e12:	f7fb fce9 	bl	47e8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    8e16:	2000      	movs	r0, #0
    8e18:	bd10      	pop	{r4, pc}

00008e1a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    8e1a:	b570      	push	{r4, r5, r6, lr}
    8e1c:	b086      	sub	sp, #24
    8e1e:	4605      	mov	r5, r0
    8e20:	f000 fb71 	bl	9506 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x246>
    8e24:	4604      	mov	r4, r0
    8e26:	4669      	mov	r1, sp
    8e28:	f7ff fbe5 	bl	85f6 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    8e2c:	b118      	cbz	r0, 8e36 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x1c>
    8e2e:	4669      	mov	r1, sp
    8e30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8e32:	f7ff f900 	bl	8036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    8e36:	2200      	movs	r2, #0
    8e38:	a804      	add	r0, sp, #16
    8e3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8e3c:	f7fb fa3c 	bl	42b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    8e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8e44:	e9cd 0100 	strd	r0, r1, [sp]
    8e48:	b168      	cbz	r0, 8e66 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    8e4a:	7829      	ldrb	r1, [r5, #0]
    8e4c:	466a      	mov	r2, sp
    8e4e:	1c68      	adds	r0, r5, #1
    8e50:	f000 fa6c 	bl	932c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x6c>
    8e54:	0006      	movs	r6, r0
    8e56:	d00c      	beq.n	8e72 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>
    8e58:	4669      	mov	r1, sp
    8e5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8e5c:	f7ff f8eb 	bl	8036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    8e60:	4630      	mov	r0, r6
    8e62:	b006      	add	sp, #24
    8e64:	bd70      	pop	{r4, r5, r6, pc}
    8e66:	4669      	mov	r1, sp
    8e68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8e6a:	f7ff f8e4 	bl	8036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    8e6e:	2007      	movs	r0, #7
    8e70:	e7f7      	b.n	8e62 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>
    8e72:	4669      	mov	r1, sp
    8e74:	4620      	mov	r0, r4
    8e76:	f7ff fbd5 	bl	8624 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    8e7a:	9800      	ldr	r0, [sp, #0]
    8e7c:	9003      	str	r0, [sp, #12]
    8e7e:	7828      	ldrb	r0, [r5, #0]
    8e80:	f8ad 000a 	strh.w	r0, [sp, #10]
    8e84:	2000      	movs	r0, #0
    8e86:	f88d 0008 	strb.w	r0, [sp, #8]
    8e8a:	a802      	add	r0, sp, #8
    8e8c:	f000 f9b6 	bl	91fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    8e90:	e7e7      	b.n	8e62 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>

00008e92 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    8e92:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8e94:	4605      	mov	r5, r0
    8e96:	f000 fb36 	bl	9506 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x246>
    8e9a:	4606      	mov	r6, r0
    8e9c:	7828      	ldrb	r0, [r5, #0]
    8e9e:	2400      	movs	r4, #0
    8ea0:	b160      	cbz	r0, 8ebc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    8ea2:	f88d 4000 	strb.w	r4, [sp]
    8ea6:	2001      	movs	r0, #1
    8ea8:	f10d 0101 	add.w	r1, sp, #1
    8eac:	f7fb fbe4 	bl	4678 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    8eb0:	b120      	cbz	r0, 8ebc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    8eb2:	4668      	mov	r0, sp
    8eb4:	f000 f894 	bl	8fe0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    8eb8:	2800      	cmp	r0, #0
    8eba:	d112      	bne.n	8ee2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    8ebc:	f88d 400c 	strb.w	r4, [sp, #12]
    8ec0:	4630      	mov	r0, r6
    8ec2:	f7ff fb76 	bl	85b2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8ec6:	b118      	cbz	r0, 8ed0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    8ec8:	2080      	movs	r0, #128	; 0x80
    8eca:	f8ad 000d 	strh.w	r0, [sp, #13]
    8ece:	e001      	b.n	8ed4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    8ed0:	f8ad 400d 	strh.w	r4, [sp, #13]
    8ed4:	f88d 400f 	strb.w	r4, [sp, #15]
    8ed8:	7828      	ldrb	r0, [r5, #0]
    8eda:	2801      	cmp	r0, #1
    8edc:	d003      	beq.n	8ee6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    8ede:	b138      	cbz	r0, 8ef0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    8ee0:	2012      	movs	r0, #18
    8ee2:	b004      	add	sp, #16
    8ee4:	bd70      	pop	{r4, r5, r6, pc}
    8ee6:	a903      	add	r1, sp, #12
    8ee8:	4630      	mov	r0, r6
    8eea:	f7fd f84d 	bl	5f88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    8eee:	e7f8      	b.n	8ee2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    8ef0:	4630      	mov	r0, r6
    8ef2:	f000 fb20 	bl	9536 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x276>
    8ef6:	e7f4      	b.n	8ee2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00008ef8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    8ef8:	b530      	push	{r4, r5, lr}
    8efa:	b08b      	sub	sp, #44	; 0x2c
    8efc:	4604      	mov	r4, r0
    8efe:	f000 fb02 	bl	9506 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x246>
    8f02:	4602      	mov	r2, r0
    8f04:	8860      	ldrh	r0, [r4, #2]
    8f06:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    8f0a:	d902      	bls.n	8f12 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    8f0c:	2012      	movs	r0, #18
    8f0e:	b00b      	add	sp, #44	; 0x2c
    8f10:	bd30      	pop	{r4, r5, pc}
    8f12:	2500      	movs	r5, #0
    8f14:	f88d 5004 	strb.w	r5, [sp, #4]
    8f18:	7921      	ldrb	r1, [r4, #4]
    8f1a:	9500      	str	r5, [sp, #0]
    8f1c:	f89d 0000 	ldrb.w	r0, [sp]
    8f20:	2905      	cmp	r1, #5
    8f22:	f040 0010 	orr.w	r0, r0, #16
    8f26:	f88d 0000 	strb.w	r0, [sp]
    8f2a:	d254      	bcs.n	8fd6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xde>
    8f2c:	e8df f001 	tbb	[pc, r1]
    8f30:	11050803 	.word	0x11050803
    8f34:	000b      	.short	0x000b
    8f36:	f040 0001 	orr.w	r0, r0, #1
    8f3a:	f040 0002 	orr.w	r0, r0, #2
    8f3e:	e006      	b.n	8f4e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    8f40:	f040 0009 	orr.w	r0, r0, #9
    8f44:	e001      	b.n	8f4a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    8f46:	f040 0001 	orr.w	r0, r0, #1
    8f4a:	f040 0004 	orr.w	r0, r0, #4
    8f4e:	f88d 0000 	strb.w	r0, [sp]
    8f52:	f8bd 0000 	ldrh.w	r0, [sp]
    8f56:	9000      	str	r0, [sp, #0]
    8f58:	f8bd 0000 	ldrh.w	r0, [sp]
    8f5c:	f8ad 0005 	strh.w	r0, [sp, #5]
    8f60:	8821      	ldrh	r1, [r4, #0]
    8f62:	f8dd 0006 	ldr.w	r0, [sp, #6]
    8f66:	f361 201f 	bfi	r0, r1, #8, #24
    8f6a:	f8cd 0006 	str.w	r0, [sp, #6]
    8f6e:	8861      	ldrh	r1, [r4, #2]
    8f70:	f8dd 0009 	ldr.w	r0, [sp, #9]
    8f74:	f361 201f 	bfi	r0, r1, #8, #24
    8f78:	f8cd 0009 	str.w	r0, [sp, #9]
    8f7c:	7b60      	ldrb	r0, [r4, #13]
    8f7e:	f88d 000d 	strb.w	r0, [sp, #13]
    8f82:	7960      	ldrb	r0, [r4, #5]
    8f84:	f88d 000e 	strb.w	r0, [sp, #14]
    8f88:	79a0      	ldrb	r0, [r4, #6]
    8f8a:	f88d 000f 	strb.w	r0, [sp, #15]
    8f8e:	f8d4 0007 	ldr.w	r0, [r4, #7]
    8f92:	9004      	str	r0, [sp, #16]
    8f94:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    8f98:	f8ad 0014 	strh.w	r0, [sp, #20]
    8f9c:	7ba0      	ldrb	r0, [r4, #14]
    8f9e:	f88d 0016 	strb.w	r0, [sp, #22]
    8fa2:	207f      	movs	r0, #127	; 0x7f
    8fa4:	f88d 0017 	strb.w	r0, [sp, #23]
    8fa8:	2001      	movs	r0, #1
    8faa:	f88d 0018 	strb.w	r0, [sp, #24]
    8fae:	f88d 5019 	strb.w	r5, [sp, #25]
    8fb2:	f88d 001a 	strb.w	r0, [sp, #26]
    8fb6:	f88d 501b 	strb.w	r5, [sp, #27]
    8fba:	4610      	mov	r0, r2
    8fbc:	f7ff fb15 	bl	85ea <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    8fc0:	f88d 001c 	strb.w	r0, [sp, #28]
    8fc4:	f88d 501d 	strb.w	r5, [sp, #29]
    8fc8:	f88d 501e 	strb.w	r5, [sp, #30]
    8fcc:	a909      	add	r1, sp, #36	; 0x24
    8fce:	a801      	add	r0, sp, #4
    8fd0:	f000 f88c 	bl	90ec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    8fd4:	e79b      	b.n	8f0e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    8fd6:	f241 01a9 	movw	r1, #4265	; 0x10a9
    8fda:	2039      	movs	r0, #57	; 0x39
    8fdc:	f7fa fd6c 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00008fe0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    8fe0:	b570      	push	{r4, r5, r6, lr}
    8fe2:	4604      	mov	r4, r0
    8fe4:	7800      	ldrb	r0, [r0, #0]
    8fe6:	2101      	movs	r1, #1
    8fe8:	f7fe ffdf 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8fec:	0005      	movs	r5, r0
    8fee:	d007      	beq.n	9000 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    8ff0:	f7ff fcf0 	bl	89d4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    8ff4:	b160      	cbz	r0, 9010 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    8ff6:	4628      	mov	r0, r5
    8ff8:	f7ff fae1 	bl	85be <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    8ffc:	b110      	cbz	r0, 9004 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    8ffe:	e005      	b.n	900c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    9000:	2042      	movs	r0, #66	; 0x42
    9002:	bd70      	pop	{r4, r5, r6, pc}
    9004:	4628      	mov	r0, r5
    9006:	f7ff fad0 	bl	85aa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    900a:	b108      	cbz	r0, 9010 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    900c:	200c      	movs	r0, #12
    900e:	bd70      	pop	{r4, r5, r6, pc}
    9010:	1c61      	adds	r1, r4, #1
    9012:	4628      	mov	r0, r5
    9014:	f7ff fae1 	bl	85da <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    9018:	2000      	movs	r0, #0
    901a:	bd70      	pop	{r4, r5, r6, pc}

0000901c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    901c:	b510      	push	{r4, lr}
    901e:	4604      	mov	r4, r0
    9020:	f000 fa25 	bl	946e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1ae>
    9024:	b120      	cbz	r0, 9030 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    9026:	f7fb fbe5 	bl	47f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    902a:	b108      	cbz	r0, 9030 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    902c:	200c      	movs	r0, #12
    902e:	bd10      	pop	{r4, pc}
    9030:	7820      	ldrb	r0, [r4, #0]
    9032:	f7ff fe24 	bl	8c7e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x4>
    9036:	79e2      	ldrb	r2, [r4, #7]
    9038:	1c61      	adds	r1, r4, #1
    903a:	f7fb fb89 	bl	4750 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    903e:	b108      	cbz	r0, 9044 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    9040:	2000      	movs	r0, #0
    9042:	bd10      	pop	{r4, pc}
    9044:	2002      	movs	r0, #2
    9046:	bd10      	pop	{r4, pc}

00009048 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    9048:	b510      	push	{r4, lr}
    904a:	4604      	mov	r4, r0
    904c:	2001      	movs	r0, #1
    904e:	f000 f95b 	bl	9308 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x48>
    9052:	b128      	cbz	r0, 9060 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    9054:	4621      	mov	r1, r4
    9056:	2001      	movs	r0, #1
    9058:	f7fb fb26 	bl	46a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    905c:	2000      	movs	r0, #0
    905e:	bd10      	pop	{r4, pc}
    9060:	200c      	movs	r0, #12
    9062:	bd10      	pop	{r4, pc}

00009064 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    9064:	b510      	push	{r4, lr}
    9066:	8800      	ldrh	r0, [r0, #0]
    9068:	f7fb fc52 	bl	4910 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    906c:	b108      	cbz	r0, 9072 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    906e:	2000      	movs	r0, #0
    9070:	bd10      	pop	{r4, pc}
    9072:	2030      	movs	r0, #48	; 0x30
    9074:	bd10      	pop	{r4, pc}

00009076 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    9076:	b530      	push	{r4, r5, lr}
    9078:	b087      	sub	sp, #28
    907a:	4605      	mov	r5, r0
    907c:	f000 fa43 	bl	9506 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x246>
    9080:	4604      	mov	r4, r0
    9082:	4669      	mov	r1, sp
    9084:	f7ff fad6 	bl	8634 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    9088:	b118      	cbz	r0, 9092 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x1c>
    908a:	4669      	mov	r1, sp
    908c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    908e:	f7fe ffd2 	bl	8036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    9092:	2200      	movs	r2, #0
    9094:	a805      	add	r0, sp, #20
    9096:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9098:	f7fb f90e 	bl	42b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    909c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    90a0:	e9cd 0100 	strd	r0, r1, [sp]
    90a4:	7829      	ldrb	r1, [r5, #0]
    90a6:	466a      	mov	r2, sp
    90a8:	1c68      	adds	r0, r5, #1
    90aa:	f000 f93f 	bl	932c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x6c>
    90ae:	0005      	movs	r5, r0
    90b0:	d006      	beq.n	90c0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4a>
    90b2:	4669      	mov	r1, sp
    90b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    90b6:	f7fe ffbe 	bl	8036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    90ba:	4628      	mov	r0, r5
    90bc:	b007      	add	sp, #28
    90be:	bd30      	pop	{r4, r5, pc}
    90c0:	4669      	mov	r1, sp
    90c2:	4620      	mov	r0, r4
    90c4:	f7ff facd 	bl	8662 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    90c8:	2000      	movs	r0, #0
    90ca:	f88d 000c 	strb.w	r0, [sp, #12]
    90ce:	9800      	ldr	r0, [sp, #0]
    90d0:	9004      	str	r0, [sp, #16]
    90d2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    90d6:	f8ad 000e 	strh.w	r0, [sp, #14]
    90da:	a803      	add	r0, sp, #12
    90dc:	f000 f8b7 	bl	924e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    90e0:	e7ec      	b.n	90bc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x46>

000090e2 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    90e2:	b510      	push	{r4, lr}
    90e4:	f7fb fb04 	bl	46f0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    90e8:	2000      	movs	r0, #0
    90ea:	bd10      	pop	{r4, pc}

000090ec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    90ec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    90f0:	460f      	mov	r7, r1
    90f2:	4605      	mov	r5, r0
    90f4:	7806      	ldrb	r6, [r0, #0]
    90f6:	f000 f969 	bl	93cc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x10c>
    90fa:	2800      	cmp	r0, #0
    90fc:	d10a      	bne.n	9114 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    90fe:	4628      	mov	r0, r5
    9100:	f000 f948 	bl	9394 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xd4>
    9104:	2800      	cmp	r0, #0
    9106:	d105      	bne.n	9114 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9108:	2001      	movs	r0, #1
    910a:	f7fa fea5 	bl	3e58 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    910e:	4286      	cmp	r6, r0
    9110:	d302      	bcc.n	9118 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    9112:	2007      	movs	r0, #7
    9114:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9118:	2101      	movs	r1, #1
    911a:	4630      	mov	r0, r6
    911c:	f7fe ff45 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9120:	0004      	movs	r4, r0
    9122:	d004      	beq.n	912e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    9124:	f7ff fc56 	bl	89d4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9128:	b158      	cbz	r0, 9142 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    912a:	200c      	movs	r0, #12
    912c:	e7f2      	b.n	9114 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    912e:	2200      	movs	r2, #0
    9130:	2101      	movs	r1, #1
    9132:	4630      	mov	r0, r6
    9134:	f7fe ff1d 	bl	7f72 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    9138:	0004      	movs	r4, r0
    913a:	d010      	beq.n	915e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    913c:	4631      	mov	r1, r6
    913e:	f7ff f9e2 	bl	8506 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    9142:	4620      	mov	r0, r4
    9144:	f7ff fa3f 	bl	85c6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    9148:	7038      	strb	r0, [r7, #0]
    914a:	74e8      	strb	r0, [r5, #19]
    914c:	4629      	mov	r1, r5
    914e:	4620      	mov	r0, r4
    9150:	f7fb ff6a 	bl	5028 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    9154:	4606      	mov	r6, r0
    9156:	7e68      	ldrb	r0, [r5, #25]
    9158:	b360      	cbz	r0, 91b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    915a:	b12e      	cbz	r6, 9168 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    915c:	e02a      	b.n	91b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    915e:	f241 212b 	movw	r1, #4651	; 0x122b
    9162:	2039      	movs	r0, #57	; 0x39
    9164:	f7fa fca8 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9168:	4669      	mov	r1, sp
    916a:	4620      	mov	r0, r4
    916c:	f7ff fa43 	bl	85f6 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    9170:	b118      	cbz	r0, 917a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8e>
    9172:	4669      	mov	r1, sp
    9174:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9176:	f7fe ff5e 	bl	8036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    917a:	4669      	mov	r1, sp
    917c:	4620      	mov	r0, r4
    917e:	f7ff fa59 	bl	8634 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    9182:	b118      	cbz	r0, 918c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    9184:	4669      	mov	r1, sp
    9186:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9188:	f7fe ff55 	bl	8036 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    918c:	2000      	movs	r0, #0
    918e:	f8ad 0004 	strh.w	r0, [sp, #4]
    9192:	9000      	str	r0, [sp, #0]
    9194:	f8ad 0006 	strh.w	r0, [sp, #6]
    9198:	4669      	mov	r1, sp
    919a:	4620      	mov	r0, r4
    919c:	f7ff fa42 	bl	8624 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    91a0:	4669      	mov	r1, sp
    91a2:	4620      	mov	r0, r4
    91a4:	f7ff fa5d 	bl	8662 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    91a8:	4620      	mov	r0, r4
    91aa:	f7ff fa32 	bl	8612 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    91ae:	4620      	mov	r0, r4
    91b0:	f7ff fa4e 	bl	8650 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    91b4:	4630      	mov	r0, r6
    91b6:	e7ad      	b.n	9114 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

000091b8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    91b8:	b510      	push	{r4, lr}
    91ba:	4604      	mov	r4, r0
    91bc:	2000      	movs	r0, #0
    91be:	f000 f8a3 	bl	9308 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x48>
    91c2:	b128      	cbz	r0, 91d0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    91c4:	4621      	mov	r1, r4
    91c6:	2000      	movs	r0, #0
    91c8:	f7fb fa6e 	bl	46a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    91cc:	2000      	movs	r0, #0
    91ce:	bd10      	pop	{r4, pc}
    91d0:	200c      	movs	r0, #12
    91d2:	bd10      	pop	{r4, pc}

000091d4 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    91d4:	b510      	push	{r4, lr}
    91d6:	4604      	mov	r4, r0
    91d8:	f7ff fc16 	bl	8a08 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    91dc:	b120      	cbz	r0, 91e8 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    91de:	7820      	ldrb	r0, [r4, #0]
    91e0:	f7fc fdaa 	bl	5d38 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    91e4:	2000      	movs	r0, #0
    91e6:	bd10      	pop	{r4, pc}
    91e8:	200c      	movs	r0, #12
    91ea:	bd10      	pop	{r4, pc}

000091ec <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    91ec:	b510      	push	{r4, lr}
    91ee:	7800      	ldrb	r0, [r0, #0]
    91f0:	f000 0001 	and.w	r0, r0, #1
    91f4:	f7fc fda6 	bl	5d44 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    91f8:	2000      	movs	r0, #0
    91fa:	bd10      	pop	{r4, pc}

000091fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    91fc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    91fe:	4605      	mov	r5, r0
    9200:	7800      	ldrb	r0, [r0, #0]
    9202:	2101      	movs	r1, #1
    9204:	f7fe fed1 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9208:	0006      	movs	r6, r0
    920a:	d01e      	beq.n	924a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4e>
    920c:	2201      	movs	r2, #1
    920e:	8869      	ldrh	r1, [r5, #2]
    9210:	f000 f8a1 	bl	9356 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x96>
    9214:	2800      	cmp	r0, #0
    9216:	d117      	bne.n	9248 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4c>
    9218:	4630      	mov	r0, r6
    921a:	f7ff f993 	bl	8544 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    921e:	4604      	mov	r4, r0
    9220:	8868      	ldrh	r0, [r5, #2]
    9222:	42a0      	cmp	r0, r4
    9224:	d800      	bhi.n	9228 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    9226:	4604      	mov	r4, r0
    9228:	4669      	mov	r1, sp
    922a:	4630      	mov	r0, r6
    922c:	f7ff f9f5 	bl	861a <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>
    9230:	6868      	ldr	r0, [r5, #4]
    9232:	9000      	str	r0, [sp, #0]
    9234:	f8ad 4004 	strh.w	r4, [sp, #4]
    9238:	4669      	mov	r1, sp
    923a:	4630      	mov	r0, r6
    923c:	f7ff f9f2 	bl	8624 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    9240:	4630      	mov	r0, r6
    9242:	f7ff f9e6 	bl	8612 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    9246:	2000      	movs	r0, #0
    9248:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    924a:	2042      	movs	r0, #66	; 0x42
    924c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000924e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    924e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9250:	4604      	mov	r4, r0
    9252:	7800      	ldrb	r0, [r0, #0]
    9254:	2101      	movs	r1, #1
    9256:	f7fe fea8 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    925a:	0005      	movs	r5, r0
    925c:	d00b      	beq.n	9276 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    925e:	2201      	movs	r2, #1
    9260:	8861      	ldrh	r1, [r4, #2]
    9262:	f000 f878 	bl	9356 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x96>
    9266:	2800      	cmp	r0, #0
    9268:	d106      	bne.n	9278 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    926a:	8866      	ldrh	r6, [r4, #2]
    926c:	4628      	mov	r0, r5
    926e:	f7ff f9a6 	bl	85be <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9272:	b110      	cbz	r0, 927a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    9274:	e002      	b.n	927c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    9276:	2042      	movs	r0, #66	; 0x42
    9278:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    927a:	2600      	movs	r6, #0
    927c:	4669      	mov	r1, sp
    927e:	4628      	mov	r0, r5
    9280:	f7ff f9ea 	bl	8658 <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>
    9284:	6860      	ldr	r0, [r4, #4]
    9286:	9000      	str	r0, [sp, #0]
    9288:	f8ad 6004 	strh.w	r6, [sp, #4]
    928c:	4669      	mov	r1, sp
    928e:	4628      	mov	r0, r5
    9290:	f7ff f9e7 	bl	8662 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    9294:	4628      	mov	r0, r5
    9296:	f7ff f9db 	bl	8650 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    929a:	2000      	movs	r0, #0
    929c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000929e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    929e:	b510      	push	{r4, lr}
    92a0:	4604      	mov	r4, r0
    92a2:	4601      	mov	r1, r0
    92a4:	2000      	movs	r0, #0
    92a6:	f7fb f9e7 	bl	4678 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    92aa:	b910      	cbnz	r0, 92b2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    92ac:	2000      	movs	r0, #0
    92ae:	6020      	str	r0, [r4, #0]
    92b0:	80a0      	strh	r0, [r4, #4]
    92b2:	2000      	movs	r0, #0
    92b4:	bd10      	pop	{r4, pc}

000092b6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    92b6:	b510      	push	{r4, lr}
    92b8:	f7fc ff52 	bl	6160 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    92bc:	2000      	movs	r0, #0
    92be:	bd10      	pop	{r4, pc}

000092c0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    92c0:	f7fc be20 	b.w	5f04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    92c4:	07c1      	lsls	r1, r0, #31
    92c6:	d001      	beq.n	92cc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xc>
    92c8:	2001      	movs	r0, #1
    92ca:	4770      	bx	lr
    92cc:	0780      	lsls	r0, r0, #30
    92ce:	d501      	bpl.n	92d4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x14>
    92d0:	2002      	movs	r0, #2
    92d2:	4770      	bx	lr
    92d4:	2000      	movs	r0, #0
    92d6:	4770      	bx	lr
    92d8:	b50e      	push	{r1, r2, r3, lr}
    92da:	4669      	mov	r1, sp
    92dc:	2001      	movs	r0, #1
    92de:	f7fe fe6e 	bl	7fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    92e2:	b150      	cbz	r0, 92fa <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x3a>
    92e4:	f240 1131 	movw	r1, #305	; 0x131
    92e8:	2039      	movs	r0, #57	; 0x39
    92ea:	f7fa fbe5 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92ee:	9802      	ldr	r0, [sp, #8]
    92f0:	f7ff fb70 	bl	89d4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    92f4:	b108      	cbz	r0, 92fa <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x3a>
    92f6:	2001      	movs	r0, #1
    92f8:	bd0e      	pop	{r1, r2, r3, pc}
    92fa:	4668      	mov	r0, sp
    92fc:	f7fa fdf8 	bl	3ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9300:	2800      	cmp	r0, #0
    9302:	d0f4      	beq.n	92ee <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2e>
    9304:	2000      	movs	r0, #0
    9306:	bd0e      	pop	{r1, r2, r3, pc}
    9308:	b510      	push	{r4, lr}
    930a:	f7ff ffe5 	bl	92d8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x18>
    930e:	b158      	cbz	r0, 9328 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x68>
    9310:	f000 f8f9 	bl	9506 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x246>
    9314:	4604      	mov	r4, r0
    9316:	f7ff f952 	bl	85be <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    931a:	b918      	cbnz	r0, 9324 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x64>
    931c:	4620      	mov	r0, r4
    931e:	f7ff f944 	bl	85aa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9322:	b108      	cbz	r0, 9328 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x68>
    9324:	2000      	movs	r0, #0
    9326:	bd10      	pop	{r4, pc}
    9328:	2001      	movs	r0, #1
    932a:	bd10      	pop	{r4, pc}
    932c:	b570      	push	{r4, r5, r6, lr}
    932e:	460d      	mov	r5, r1
    9330:	4614      	mov	r4, r2
    9332:	4601      	mov	r1, r0
    9334:	8890      	ldrh	r0, [r2, #4]
    9336:	88e3      	ldrh	r3, [r4, #6]
    9338:	1942      	adds	r2, r0, r5
    933a:	429a      	cmp	r2, r3
    933c:	d901      	bls.n	9342 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x82>
    933e:	2007      	movs	r0, #7
    9340:	bd70      	pop	{r4, r5, r6, pc}
    9342:	6822      	ldr	r2, [r4, #0]
    9344:	4410      	add	r0, r2
    9346:	462a      	mov	r2, r5
    9348:	f7fe f920 	bl	758c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    934c:	88a0      	ldrh	r0, [r4, #4]
    934e:	4428      	add	r0, r5
    9350:	80a0      	strh	r0, [r4, #4]
    9352:	2000      	movs	r0, #0
    9354:	bd70      	pop	{r4, r5, r6, pc}
    9356:	b570      	push	{r4, r5, r6, lr}
    9358:	460c      	mov	r4, r1
    935a:	4605      	mov	r5, r0
    935c:	b112      	cbz	r2, 9364 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xa4>
    935e:	291f      	cmp	r1, #31
    9360:	d807      	bhi.n	9372 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xb2>
    9362:	e011      	b.n	9388 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xc8>
    9364:	2cff      	cmp	r4, #255	; 0xff
    9366:	d804      	bhi.n	9372 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xb2>
    9368:	f7ff f927 	bl	85ba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    936c:	b118      	cbz	r0, 9376 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xb6>
    936e:	2c1f      	cmp	r4, #31
    9370:	d901      	bls.n	9376 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xb6>
    9372:	2012      	movs	r0, #18
    9374:	bd70      	pop	{r4, r5, r6, pc}
    9376:	4628      	mov	r0, r5
    9378:	f7ff f928 	bl	85cc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    937c:	b130      	cbz	r0, 938c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xcc>
    937e:	4621      	mov	r1, r4
    9380:	4628      	mov	r0, r5
    9382:	f7ff f8eb 	bl	855c <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    9386:	b118      	cbz	r0, 9390 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xd0>
    9388:	2000      	movs	r0, #0
    938a:	bd70      	pop	{r4, r5, r6, pc}
    938c:	2042      	movs	r0, #66	; 0x42
    938e:	bd70      	pop	{r4, r5, r6, pc}
    9390:	2045      	movs	r0, #69	; 0x45
    9392:	bd70      	pop	{r4, r5, r6, pc}
    9394:	b510      	push	{r4, lr}
    9396:	4604      	mov	r4, r0
    9398:	7840      	ldrb	r0, [r0, #1]
    939a:	06c1      	lsls	r1, r0, #27
    939c:	d512      	bpl.n	93c4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x104>
    939e:	07c0      	lsls	r0, r0, #31
    93a0:	d00b      	beq.n	93ba <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xfa>
    93a2:	f7fc ff01 	bl	61a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    93a6:	b168      	cbz	r0, 93c4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x104>
    93a8:	7860      	ldrb	r0, [r4, #1]
    93aa:	06c1      	lsls	r1, r0, #27
    93ac:	d405      	bmi.n	93ba <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xfa>
    93ae:	0700      	lsls	r0, r0, #28
    93b0:	d503      	bpl.n	93ba <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xfa>
    93b2:	7d20      	ldrb	r0, [r4, #20]
    93b4:	2802      	cmp	r0, #2
    93b6:	d105      	bne.n	93c4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x104>
    93b8:	e006      	b.n	93c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x108>
    93ba:	7d20      	ldrb	r0, [r4, #20]
    93bc:	2802      	cmp	r0, #2
    93be:	d003      	beq.n	93c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x108>
    93c0:	7ea0      	ldrb	r0, [r4, #26]
    93c2:	b108      	cbz	r0, 93c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x108>
    93c4:	2011      	movs	r0, #17
    93c6:	bd10      	pop	{r4, pc}
    93c8:	2000      	movs	r0, #0
    93ca:	bd10      	pop	{r4, pc}
    93cc:	b538      	push	{r3, r4, r5, lr}
    93ce:	4604      	mov	r4, r0
    93d0:	7800      	ldrb	r0, [r0, #0]
    93d2:	28ef      	cmp	r0, #239	; 0xef
    93d4:	d847      	bhi.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    93d6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    93da:	f8ad 0000 	strh.w	r0, [sp]
    93de:	9800      	ldr	r0, [sp, #0]
    93e0:	f000 f8cf 	bl	9582 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2c2>
    93e4:	b3c0      	cbz	r0, 9458 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x198>
    93e6:	7861      	ldrb	r1, [r4, #1]
    93e8:	0708      	lsls	r0, r1, #28
    93ea:	d40f      	bmi.n	940c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x14c>
    93ec:	f8d4 2002 	ldr.w	r2, [r4, #2]
    93f0:	f8d4 0005 	ldr.w	r0, [r4, #5]
    93f4:	0a13      	lsrs	r3, r2, #8
    93f6:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    93fa:	d834      	bhi.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    93fc:	2320      	movs	r3, #32
    93fe:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    9402:	d830      	bhi.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    9404:	025a      	lsls	r2, r3, #9
    9406:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    940a:	d32c      	bcc.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    940c:	7a60      	ldrb	r0, [r4, #9]
    940e:	b318      	cbz	r0, 9458 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x198>
    9410:	2807      	cmp	r0, #7
    9412:	d828      	bhi.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    9414:	7aa0      	ldrb	r0, [r4, #10]
    9416:	b128      	cbz	r0, 9424 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x164>
    9418:	2801      	cmp	r0, #1
    941a:	d003      	beq.n	9424 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x164>
    941c:	2802      	cmp	r0, #2
    941e:	d001      	beq.n	9424 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x164>
    9420:	2803      	cmp	r0, #3
    9422:	d120      	bne.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    9424:	074a      	lsls	r2, r1, #29
    9426:	d403      	bmi.n	9430 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x170>
    9428:	2802      	cmp	r0, #2
    942a:	d001      	beq.n	9430 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x170>
    942c:	2803      	cmp	r0, #3
    942e:	d105      	bne.n	943c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x17c>
    9430:	7ae0      	ldrb	r0, [r4, #11]
    9432:	b108      	cbz	r0, 9438 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x178>
    9434:	2801      	cmp	r0, #1
    9436:	d116      	bne.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    9438:	0748      	lsls	r0, r1, #29
    943a:	d407      	bmi.n	944c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x18c>
    943c:	7ca0      	ldrb	r0, [r4, #18]
    943e:	b128      	cbz	r0, 944c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x18c>
    9440:	2801      	cmp	r0, #1
    9442:	d003      	beq.n	944c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x18c>
    9444:	2802      	cmp	r0, #2
    9446:	d001      	beq.n	944c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x18c>
    9448:	2803      	cmp	r0, #3
    944a:	d10c      	bne.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    944c:	06c8      	lsls	r0, r1, #27
    944e:	7d20      	ldrb	r0, [r4, #20]
    9450:	d503      	bpl.n	945a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x19a>
    9452:	2801      	cmp	r0, #1
    9454:	d107      	bne.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    9456:	e002      	b.n	945e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x19e>
    9458:	e005      	b.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    945a:	2802      	cmp	r0, #2
    945c:	d003      	beq.n	9466 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1a6>
    945e:	7e20      	ldrb	r0, [r4, #24]
    9460:	b118      	cbz	r0, 946a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1aa>
    9462:	2801      	cmp	r0, #1
    9464:	d001      	beq.n	946a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1aa>
    9466:	2012      	movs	r0, #18
    9468:	bd38      	pop	{r3, r4, r5, pc}
    946a:	2000      	movs	r0, #0
    946c:	bd38      	pop	{r3, r4, r5, pc}
    946e:	b510      	push	{r4, lr}
    9470:	f7ff ff32 	bl	92d8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x18>
    9474:	2800      	cmp	r0, #0
    9476:	d000      	beq.n	947a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1ba>
    9478:	2001      	movs	r0, #1
    947a:	bd10      	pop	{r4, pc}
    947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9480:	7890      	ldrb	r0, [r2, #2]
    9482:	9e06      	ldr	r6, [sp, #24]
    9484:	461d      	mov	r5, r3
    9486:	4614      	mov	r4, r2
    9488:	b908      	cbnz	r0, 948e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1ce>
    948a:	f7fc feb3 	bl	61f4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    948e:	78e4      	ldrb	r4, [r4, #3]
    9490:	4607      	mov	r7, r0
    9492:	b914      	cbnz	r4, 949a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1da>
    9494:	f7fc feae 	bl	61f4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9498:	4604      	mov	r4, r0
    949a:	b16f      	cbz	r7, 94b8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1f8>
    949c:	b164      	cbz	r4, 94b8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1f8>
    949e:	4638      	mov	r0, r7
    94a0:	f7ff ff10 	bl	92c4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x4>
    94a4:	4620      	mov	r0, r4
    94a6:	f7ff ff0d 	bl	92c4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x4>
    94aa:	b12f      	cbz	r7, 94b8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1f8>
    94ac:	b124      	cbz	r4, 94b8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1f8>
    94ae:	702f      	strb	r7, [r5, #0]
    94b0:	7034      	strb	r4, [r6, #0]
    94b2:	2000      	movs	r0, #0
    94b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94b8:	2009      	movs	r0, #9
    94ba:	e7fb      	b.n	94b4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x1f4>
    94bc:	b510      	push	{r4, lr}
    94be:	f7fe f809 	bl	74d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    94c2:	b928      	cbnz	r0, 94d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x210>
    94c4:	f7fe f83c 	bl	7540 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    94c8:	b910      	cbnz	r0, 94d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x210>
    94ca:	f7fe f843 	bl	7554 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    94ce:	b108      	cbz	r0, 94d4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x214>
    94d0:	2008      	movs	r0, #8
    94d2:	bd10      	pop	{r4, pc}
    94d4:	f7fd ffd3 	bl	747e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    94d8:	b940      	cbnz	r0, 94ec <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x22c>
    94da:	f7fd ffda 	bl	7492 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    94de:	b928      	cbnz	r0, 94ec <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x22c>
    94e0:	f7fd ffee 	bl	74c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    94e4:	b910      	cbnz	r0, 94ec <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x22c>
    94e6:	f7fd ffff 	bl	74e8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    94ea:	b108      	cbz	r0, 94f0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x230>
    94ec:	2004      	movs	r0, #4
    94ee:	bd10      	pop	{r4, pc}
    94f0:	f240 5197 	movw	r1, #1431	; 0x597
    94f4:	2039      	movs	r0, #57	; 0x39
    94f6:	f7fa fadf 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94fa:	b510      	push	{r4, lr}
    94fc:	f7fc fe74 	bl	61e8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9500:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9504:	bd10      	pop	{r4, pc}
    9506:	b510      	push	{r4, lr}
    9508:	2101      	movs	r1, #1
    950a:	2000      	movs	r0, #0
    950c:	f7fe fd4d 	bl	7faa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9510:	0004      	movs	r4, r0
    9512:	d109      	bne.n	9528 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x268>
    9514:	2200      	movs	r2, #0
    9516:	2101      	movs	r1, #1
    9518:	4610      	mov	r0, r2
    951a:	f7fe fd2a 	bl	7f72 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    951e:	0004      	movs	r4, r0
    9520:	d004      	beq.n	952c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x26c>
    9522:	2100      	movs	r1, #0
    9524:	f7fe ffef 	bl	8506 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    9528:	4620      	mov	r0, r4
    952a:	bd10      	pop	{r4, pc}
    952c:	f240 2126 	movw	r1, #550	; 0x226
    9530:	2039      	movs	r0, #57	; 0x39
    9532:	f7fa fac1 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9536:	b570      	push	{r4, r5, r6, lr}
    9538:	4605      	mov	r5, r0
    953a:	f7ff f847 	bl	85cc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    953e:	b170      	cbz	r0, 955e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x29e>
    9540:	4628      	mov	r0, r5
    9542:	f7ff fa47 	bl	89d4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9546:	2800      	cmp	r0, #0
    9548:	d008      	beq.n	955c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x29c>
    954a:	4628      	mov	r0, r5
    954c:	f7ff fa3f 	bl	89ce <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    9550:	4604      	mov	r4, r0
    9552:	4628      	mov	r0, r5
    9554:	f7ff fa15 	bl	8982 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    9558:	b118      	cbz	r0, 9562 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2a2>
    955a:	200c      	movs	r0, #12
    955c:	bd70      	pop	{r4, r5, r6, pc}
    955e:	2042      	movs	r0, #66	; 0x42
    9560:	bd70      	pop	{r4, r5, r6, pc}
    9562:	b164      	cbz	r4, 957e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2be>
    9564:	8820      	ldrh	r0, [r4, #0]
    9566:	f7fe fd99 	bl	809c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    956a:	8820      	ldrh	r0, [r4, #0]
    956c:	2100      	movs	r1, #0
    956e:	f7fa fd0f 	bl	3f90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9572:	b120      	cbz	r0, 957e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2be>
    9574:	f241 417a 	movw	r1, #5242	; 0x147a
    9578:	2039      	movs	r0, #57	; 0x39
    957a:	f7fa fa9d 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    957e:	2000      	movs	r0, #0
    9580:	bd70      	pop	{r4, r5, r6, pc}
    9582:	b2c0      	uxtb	r0, r0
    9584:	06c1      	lsls	r1, r0, #27
    9586:	d40c      	bmi.n	95a2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2e2>
    9588:	0681      	lsls	r1, r0, #26
    958a:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    958e:	d503      	bpl.n	9598 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2d8>
    9590:	b9d1      	cbnz	r1, 95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    9592:	0781      	lsls	r1, r0, #30
    9594:	d418      	bmi.n	95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    9596:	e001      	b.n	959c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2dc>
    9598:	2900      	cmp	r1, #0
    959a:	d1fa      	bne.n	9592 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2d2>
    959c:	0700      	lsls	r0, r0, #28
    959e:	d413      	bmi.n	95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    95a0:	e010      	b.n	95c4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x304>
    95a2:	0641      	lsls	r1, r0, #25
    95a4:	d410      	bmi.n	95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    95a6:	0681      	lsls	r1, r0, #26
    95a8:	d40e      	bmi.n	95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    95aa:	07c1      	lsls	r1, r0, #31
    95ac:	ea4f 7180 	mov.w	r1, r0, lsl #30
    95b0:	d004      	beq.n	95bc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2fc>
    95b2:	2900      	cmp	r1, #0
    95b4:	db02      	blt.n	95bc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x2fc>
    95b6:	0740      	lsls	r0, r0, #29
    95b8:	d404      	bmi.n	95c4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x304>
    95ba:	e005      	b.n	95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    95bc:	0701      	lsls	r1, r0, #28
    95be:	d403      	bmi.n	95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    95c0:	0740      	lsls	r0, r0, #29
    95c2:	d401      	bmi.n	95c8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x308>
    95c4:	2001      	movs	r0, #1
    95c6:	4770      	bx	lr
    95c8:	2000      	movs	r0, #0
    95ca:	4770      	bx	lr
    95cc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    95ce:	4669      	mov	r1, sp
    95d0:	2001      	movs	r0, #1
    95d2:	f7fe fcf4 	bl	7fbe <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    95d6:	b178      	cbz	r0, 95f8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x338>
    95d8:	f240 114f 	movw	r1, #335	; 0x14f
    95dc:	2039      	movs	r0, #57	; 0x39
    95de:	f7fa fa6b 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95e2:	9c02      	ldr	r4, [sp, #8]
    95e4:	4620      	mov	r0, r4
    95e6:	f7ff f9f5 	bl	89d4 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    95ea:	b128      	cbz	r0, 95f8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x338>
    95ec:	4620      	mov	r0, r4
    95ee:	f7ff f855 	bl	869c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    95f2:	b108      	cbz	r0, 95f8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x338>
    95f4:	2001      	movs	r0, #1
    95f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    95f8:	4668      	mov	r0, sp
    95fa:	f7fa fc79 	bl	3ef0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    95fe:	2800      	cmp	r0, #0
    9600:	d0ef      	beq.n	95e2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x322>
    9602:	2000      	movs	r0, #0
    9604:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009606 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    9606:	6802      	ldr	r2, [r0, #0]
    9608:	b912      	cbnz	r2, 9610 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    960a:	6001      	str	r1, [r0, #0]
    960c:	4770      	bx	lr
    960e:	4602      	mov	r2, r0
    9610:	6850      	ldr	r0, [r2, #4]
    9612:	b108      	cbz	r0, 9618 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    9614:	428a      	cmp	r2, r1
    9616:	d1fa      	bne.n	960e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    9618:	428a      	cmp	r2, r1
    961a:	d0f7      	beq.n	960c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    961c:	6051      	str	r1, [r2, #4]
    961e:	4770      	bx	lr
    9620:	b510      	push	{r4, lr}
    9622:	f7ff f9da 	bl	89da <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    9626:	b108      	cbz	r0, 962c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    9628:	21d8      	movs	r1, #216	; 0xd8
    962a:	e003      	b.n	9634 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    962c:	f7fb fdca 	bl	51c4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    9630:	b118      	cbz	r0, 963a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    9632:	21dd      	movs	r1, #221	; 0xdd
    9634:	2001      	movs	r0, #1
    9636:	f7fa fa3f 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    963a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    963e:	2001      	movs	r0, #1
    9640:	f7fa bbee 	b.w	3e20 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    9644:	b510      	push	{r4, lr}
    9646:	4604      	mov	r4, r0
    9648:	e002      	b.n	9650 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    964a:	6820      	ldr	r0, [r4, #0]
    964c:	4780      	blx	r0
    964e:	6864      	ldr	r4, [r4, #4]
    9650:	2c00      	cmp	r4, #0
    9652:	d1fa      	bne.n	964a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    9654:	bd10      	pop	{r4, pc}

00009656 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    9656:	b510      	push	{r4, lr}
    9658:	f7fd f852 	bl	6700 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    965c:	f000 f850 	bl	9700 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    9660:	f7fc fe1c 	bl	629c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    9664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9668:	f7fc beac 	b.w	63c4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000966c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    966c:	b510      	push	{r4, lr}
    966e:	24c8      	movs	r4, #200	; 0xc8
    9670:	1e64      	subs	r4, r4, #1
    9672:	b2e4      	uxtb	r4, r4
    9674:	f7fc fe30 	bl	62d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    9678:	2802      	cmp	r0, #2
    967a:	d003      	beq.n	9684 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    967c:	2801      	cmp	r0, #1
    967e:	d000      	beq.n	9682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    9680:	2000      	movs	r0, #0
    9682:	bd10      	pop	{r4, pc}
    9684:	2c00      	cmp	r4, #0
    9686:	d1f3      	bne.n	9670 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    9688:	218f      	movs	r1, #143	; 0x8f
    968a:	203b      	movs	r0, #59	; 0x3b
    968c:	f7fa fa14 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009690 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    9690:	b510      	push	{r4, lr}
    9692:	f7fa f8f1 	bl	3878 <mpsl_fem_lna_configuration_clear>
    9696:	2800      	cmp	r0, #0
    9698:	d005      	beq.n	96a6 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    969a:	1c40      	adds	r0, r0, #1
    969c:	d003      	beq.n	96a6 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    969e:	2150      	movs	r1, #80	; 0x50
    96a0:	2040      	movs	r0, #64	; 0x40
    96a2:	f7fa fa09 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96a6:	bd10      	pop	{r4, pc}

000096a8 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    96a8:	b510      	push	{r4, lr}
    96aa:	f7fa f8f1 	bl	3890 <mpsl_fem_pa_configuration_clear>
    96ae:	2800      	cmp	r0, #0
    96b0:	d005      	beq.n	96be <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    96b2:	1c40      	adds	r0, r0, #1
    96b4:	d003      	beq.n	96be <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    96b6:	2149      	movs	r1, #73	; 0x49
    96b8:	2040      	movs	r0, #64	; 0x40
    96ba:	f7fa f9fd 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96be:	bd10      	pop	{r4, pc}

000096c0 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    96c0:	b510      	push	{r4, lr}
    96c2:	f7fa f8d3 	bl	386c <mpsl_fem_disable>
    96c6:	2800      	cmp	r0, #0
    96c8:	d005      	beq.n	96d6 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    96ca:	1c40      	adds	r0, r0, #1
    96cc:	d003      	beq.n	96d6 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    96ce:	2157      	movs	r1, #87	; 0x57
    96d0:	2040      	movs	r0, #64	; 0x40
    96d2:	f7fa f9f1 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96d6:	bd10      	pop	{r4, pc}

000096d8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    96d8:	b510      	push	{r4, lr}
    96da:	2100      	movs	r1, #0
    96dc:	4608      	mov	r0, r1
    96de:	f7fa f8d1 	bl	3884 <mpsl_fem_lna_configuration_set>
    96e2:	b108      	cbz	r0, 96e8 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    96e4:	2000      	movs	r0, #0
    96e6:	bd10      	pop	{r4, pc}
    96e8:	2001      	movs	r0, #1
    96ea:	bd10      	pop	{r4, pc}

000096ec <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    96ec:	b508      	push	{r3, lr}
    96ee:	4668      	mov	r0, sp
    96f0:	f7fa f8da 	bl	38a8 <mpsl_fem_pa_is_configured>
    96f4:	f89d 0000 	ldrb.w	r0, [sp]
    96f8:	2800      	cmp	r0, #0
    96fa:	d000      	beq.n	96fe <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    96fc:	2001      	movs	r0, #1
    96fe:	bd08      	pop	{r3, pc}

00009700 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    9700:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9704:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9708:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    970c:	f3bf 8f4f 	dsb	sy
    9710:	f3bf 8f6f 	isb	sy
    9714:	f7fc be84 	b.w	6420 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    9718:	2800      	cmp	r0, #0
    971a:	db09      	blt.n	9730 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    971c:	f000 021f 	and.w	r2, r0, #31
    9720:	2101      	movs	r1, #1
    9722:	4091      	lsls	r1, r2
    9724:	0940      	lsrs	r0, r0, #5
    9726:	0080      	lsls	r0, r0, #2
    9728:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    972c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9730:	4770      	bx	lr
    9732:	2800      	cmp	r0, #0
    9734:	db0d      	blt.n	9752 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    9736:	f000 021f 	and.w	r2, r0, #31
    973a:	2101      	movs	r1, #1
    973c:	4091      	lsls	r1, r2
    973e:	0940      	lsrs	r0, r0, #5
    9740:	0080      	lsls	r0, r0, #2
    9742:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9746:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    974a:	f3bf 8f4f 	dsb	sy
    974e:	f3bf 8f6f 	isb	sy
    9752:	4770      	bx	lr

00009754 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    9754:	b510      	push	{r4, lr}
    9756:	2801      	cmp	r0, #1
    9758:	d006      	beq.n	9768 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    975a:	2802      	cmp	r0, #2
    975c:	d006      	beq.n	976c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    975e:	f640 31c5 	movw	r1, #3013	; 0xbc5
    9762:	203e      	movs	r0, #62	; 0x3e
    9764:	f7fa f9a8 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9768:	2028      	movs	r0, #40	; 0x28
    976a:	bd10      	pop	{r4, pc}
    976c:	2018      	movs	r0, #24
    976e:	bd10      	pop	{r4, pc}

00009770 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    9770:	b510      	push	{r4, lr}
    9772:	2801      	cmp	r0, #1
    9774:	d006      	beq.n	9784 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    9776:	2802      	cmp	r0, #2
    9778:	d007      	beq.n	978a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    977a:	f640 31d9 	movw	r1, #3033	; 0xbd9
    977e:	203e      	movs	r0, #62	; 0x3e
    9780:	f7fa f99a 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9784:	f641 6014 	movw	r0, #7700	; 0x1e14
    9788:	bd10      	pop	{r4, pc}
    978a:	f241 1030 	movw	r0, #4400	; 0x1130
    978e:	bd10      	pop	{r4, pc}

00009790 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    9790:	f7fd bd38 	b.w	7204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    9794:	b510      	push	{r4, lr}
    9796:	460a      	mov	r2, r1
    9798:	b130      	cbz	r0, 97a8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    979a:	2801      	cmp	r0, #1
    979c:	d00b      	beq.n	97b6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    979e:	f240 614f 	movw	r1, #1615	; 0x64f
    97a2:	203e      	movs	r0, #62	; 0x3e
    97a4:	f7fa f988 	bl	3ab8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97ac:	f102 0128 	add.w	r1, r2, #40	; 0x28
    97b0:	4610      	mov	r0, r2
    97b2:	f7fc bde5 	b.w	6380 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    97b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97ba:	f102 0129 	add.w	r1, r2, #41	; 0x29
    97be:	4610      	mov	r0, r2
    97c0:	f7fc bdc8 	b.w	6354 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

000097c4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    97c4:	b570      	push	{r4, r5, r6, lr}
    97c6:	4605      	mov	r5, r0
    97c8:	4614      	mov	r4, r2
    97ca:	4608      	mov	r0, r1
    97cc:	f7ff ffd0 	bl	9770 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    97d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    97d4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    97d8:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    97dc:	4620      	mov	r0, r4
    97de:	f7ff ffc7 	bl	9770 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    97e2:	4428      	add	r0, r5
    97e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    97e8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    97ec:	fbb0 f5f1 	udiv	r5, r0, r1
    97f0:	4620      	mov	r0, r4
    97f2:	f7ff ffaf 	bl	9754 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    97f6:	4428      	add	r0, r5
    97f8:	1d40      	adds	r0, r0, #5
    97fa:	bd70      	pop	{r4, r5, r6, pc}

000097fc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    97fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9800:	4607      	mov	r7, r0
    9802:	461d      	mov	r5, r3
    9804:	460e      	mov	r6, r1
    9806:	4614      	mov	r4, r2
    9808:	4610      	mov	r0, r2
    980a:	f7ff ffb1 	bl	9770 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    980e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    9812:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    9816:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    981a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    981e:	2e02      	cmp	r6, #2
    9820:	d00e      	beq.n	9840 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    9822:	f240 52dc 	movw	r2, #1500	; 0x5dc
    9826:	4411      	add	r1, r2
    9828:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    982c:	fbb1 f6f0 	udiv	r6, r1, r0
    9830:	4620      	mov	r0, r4
    9832:	f7ff ff8f 	bl	9754 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9836:	4430      	add	r0, r6
    9838:	4428      	add	r0, r5
    983a:	1d40      	adds	r0, r0, #5
    983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9840:	4602      	mov	r2, r0
    9842:	e7f0      	b.n	9826 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

00009844 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    9844:	b510      	push	{r4, lr}
    9846:	4604      	mov	r4, r0
    9848:	4608      	mov	r0, r1
    984a:	f7ff ff91 	bl	9770 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    984e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9852:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9856:	fbb0 f0f1 	udiv	r0, r0, r1
    985a:	1a20      	subs	r0, r4, r0
    985c:	1e80      	subs	r0, r0, #2
    985e:	bd10      	pop	{r4, pc}

00009860 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    9860:	b510      	push	{r4, lr}
    9862:	4604      	mov	r4, r0
    9864:	4608      	mov	r0, r1
    9866:	f7ff ff83 	bl	9770 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    986a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    986e:	fbb0 f0f1 	udiv	r0, r0, r1
    9872:	1a20      	subs	r0, r4, r0
    9874:	bd10      	pop	{r4, pc}

00009876 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    9876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    987a:	2902      	cmp	r1, #2
    987c:	d008      	beq.n	9890 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    987e:	f240 51dc 	movw	r1, #1500	; 0x5dc
    9882:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    9886:	fbb1 f1f2 	udiv	r1, r1, r2
    988a:	4408      	add	r0, r1
    988c:	1e80      	subs	r0, r0, #2
    988e:	4770      	bx	lr
    9890:	4611      	mov	r1, r2
    9892:	e7f6      	b.n	9882 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

00009894 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    9894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9898:	2902      	cmp	r1, #2
    989a:	d007      	beq.n	98ac <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    989c:	f240 51dc 	movw	r1, #1500	; 0x5dc
    98a0:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    98a4:	fbb1 f1f2 	udiv	r1, r1, r2
    98a8:	4408      	add	r0, r1
    98aa:	4770      	bx	lr
    98ac:	4611      	mov	r1, r2
    98ae:	e7f7      	b.n	98a0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>

000098b0 <bt_ready>:
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void bt_ready(int err)
{
    98b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98b4:	b0b4      	sub	sp, #208	; 0xd0
	char addr_s[BT_ADDR_LE_STR_LEN];
	bt_addr_le_t addr = {0};
    98b6:	2300      	movs	r3, #0
    98b8:	9307      	str	r3, [sp, #28]
    98ba:	f8cd 301f 	str.w	r3, [sp, #31]
	size_t count = 1;
    98be:	2301      	movs	r3, #1
    98c0:	9306      	str	r3, [sp, #24]

	if (err) {
    98c2:	4605      	mov	r5, r0
    98c4:	b130      	cbz	r0, 98d4 <bt_ready+0x24>
		printk("Bluetooth init failed (err %d)\n", err);
    98c6:	4601      	mov	r1, r0
    98c8:	483e      	ldr	r0, [pc, #248]	; (99c4 <bt_ready+0x114>)
	 */

	bt_id_get(&addr, &count);
	bt_addr_le_to_str(&addr, addr_s, sizeof(addr_s));

	printk("Beacon started, advertising as %s\n", addr_s);
    98ca:	f007 f88c 	bl	109e6 <printk>
}
    98ce:	b034      	add	sp, #208	; 0xd0
    98d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	char arr[5][25] =
    98d4:	493c      	ldr	r1, [pc, #240]	; (99c8 <bt_ready+0x118>)
		printk("Bluetooth initialized\n");
    98d6:	f8df 8124 	ldr.w	r8, [pc, #292]	; 99fc <bt_ready+0x14c>
		printk("BLE Name is %s \n", arr[i]);
    98da:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9a00 <bt_ready+0x150>
		err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    98de:	f8df a124 	ldr.w	sl, [pc, #292]	; 9a04 <bt_ready+0x154>
	char arr[5][25] =
    98e2:	227d      	movs	r2, #125	; 0x7d
    98e4:	a814      	add	r0, sp, #80	; 0x50
    98e6:	f008 f8d3 	bl	11a90 <memcpy>
	printk("Starting Beacon Demo\n");
    98ea:	4838      	ldr	r0, [pc, #224]	; (99cc <bt_ready+0x11c>)
    98ec:	f007 f87b 	bl	109e6 <printk>
	for (int i=0; i<5; i++){
    98f0:	ae14      	add	r6, sp, #80	; 0x50
		printk("Bluetooth initialized\n");
    98f2:	4640      	mov	r0, r8
    98f4:	f007 f877 	bl	109e6 <printk>
		err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    98f8:	4f35      	ldr	r7, [pc, #212]	; (99d0 <bt_ready+0x120>)
		printk("BLE Name is %s \n", arr[i]);
    98fa:	4631      	mov	r1, r6
    98fc:	4648      	mov	r0, r9
    98fe:	f007 f872 	bl	109e6 <printk>
		struct bt_data sd[] = {BT_DATA(BT_DATA_NAME_COMPLETE, arr[i], DEVICE_NAME_LEN)};
    9902:	f242 4309 	movw	r3, #9225	; 0x2409
    9906:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    990a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    990c:	ac0c      	add	r4, sp, #48	; 0x30
    990e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9910:	683b      	ldr	r3, [r7, #0]
    9912:	6023      	str	r3, [r4, #0]
    9914:	ac09      	add	r4, sp, #36	; 0x24
    9916:	2301      	movs	r3, #1
    9918:	9300      	str	r3, [sp, #0]
    991a:	2203      	movs	r2, #3
    991c:	4623      	mov	r3, r4
    991e:	4651      	mov	r1, sl
    9920:	a80c      	add	r0, sp, #48	; 0x30
		struct bt_data sd[] = {BT_DATA(BT_DATA_NAME_COMPLETE, arr[i], DEVICE_NAME_LEN)};
    9922:	960a      	str	r6, [sp, #40]	; 0x28
		err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    9924:	f003 ff7a 	bl	d81c <bt_le_adv_start>
    9928:	4607      	mov	r7, r0
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    992a:	2100      	movs	r1, #0
    992c:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    9930:	f006 fcb8 	bl	102a4 <z_impl_k_sleep>
		printk("Bluetooth stopped\n");
    9934:	4827      	ldr	r0, [pc, #156]	; (99d4 <bt_ready+0x124>)
    9936:	f007 f856 	bl	109e6 <printk>
		int err2 = bt_le_adv_stop();
    993a:	f003 ff7d 	bl	d838 <bt_le_adv_stop>
		if (err2)
    993e:	b110      	cbz	r0, 9946 <bt_ready+0x96>
			printk("Error on stop");
    9940:	4825      	ldr	r0, [pc, #148]	; (99d8 <bt_ready+0x128>)
    9942:	f007 f850 	bl	109e6 <printk>
	for (int i=0; i<5; i++){
    9946:	3501      	adds	r5, #1
    9948:	2d05      	cmp	r5, #5
    994a:	f106 0619 	add.w	r6, r6, #25
    994e:	d1d0      	bne.n	98f2 <bt_ready+0x42>
	if (err) {
    9950:	b117      	cbz	r7, 9958 <bt_ready+0xa8>
		printk("Advertising failed to start (err %d)\n", err);
    9952:	4822      	ldr	r0, [pc, #136]	; (99dc <bt_ready+0x12c>)
    9954:	4639      	mov	r1, r7
    9956:	e7b8      	b.n	98ca <bt_ready+0x1a>
	bt_id_get(&addr, &count);
    9958:	a906      	add	r1, sp, #24
    995a:	a807      	add	r0, sp, #28
    995c:	f003 fbd6 	bl	d10c <bt_id_get>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    9960:	f89d 301c 	ldrb.w	r3, [sp, #28]
    9964:	2b03      	cmp	r3, #3
    9966:	d827      	bhi.n	99b8 <bt_ready+0x108>
    9968:	e8df f003 	tbb	[pc, r3]
    996c:	24222002 	.word	0x24222002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    9970:	491b      	ldr	r1, [pc, #108]	; (99e0 <bt_ready+0x130>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    9972:	4620      	mov	r0, r4
    9974:	f008 f843 	bl	119fe <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    9978:	f89d 301d 	ldrb.w	r3, [sp, #29]
    997c:	9304      	str	r3, [sp, #16]
    997e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9982:	9303      	str	r3, [sp, #12]
    9984:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9988:	9302      	str	r3, [sp, #8]
    998a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    998e:	9301      	str	r3, [sp, #4]
    9990:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    9994:	9300      	str	r3, [sp, #0]
    9996:	211e      	movs	r1, #30
    9998:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    999c:	4a11      	ldr	r2, [pc, #68]	; (99e4 <bt_ready+0x134>)
    999e:	9405      	str	r4, [sp, #20]
    99a0:	a80c      	add	r0, sp, #48	; 0x30
    99a2:	f007 f82d 	bl	10a00 <snprintk>
	printk("Beacon started, advertising as %s\n", addr_s);
    99a6:	4810      	ldr	r0, [pc, #64]	; (99e8 <bt_ready+0x138>)
    99a8:	a90c      	add	r1, sp, #48	; 0x30
    99aa:	e78e      	b.n	98ca <bt_ready+0x1a>
		strcpy(type, "random");
    99ac:	490f      	ldr	r1, [pc, #60]	; (99ec <bt_ready+0x13c>)
    99ae:	e7e0      	b.n	9972 <bt_ready+0xc2>
		strcpy(type, "public-id");
    99b0:	490f      	ldr	r1, [pc, #60]	; (99f0 <bt_ready+0x140>)
    99b2:	e7de      	b.n	9972 <bt_ready+0xc2>
		strcpy(type, "random-id");
    99b4:	490f      	ldr	r1, [pc, #60]	; (99f4 <bt_ready+0x144>)
    99b6:	e7dc      	b.n	9972 <bt_ready+0xc2>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    99b8:	4a0f      	ldr	r2, [pc, #60]	; (99f8 <bt_ready+0x148>)
    99ba:	210a      	movs	r1, #10
    99bc:	4620      	mov	r0, r4
    99be:	f007 f81f 	bl	10a00 <snprintk>
		break;
    99c2:	e7d9      	b.n	9978 <bt_ready+0xc8>
    99c4:	00012f50 	.word	0x00012f50
    99c8:	00012c40 	.word	0x00012c40
    99cc:	00012f70 	.word	0x00012f70
    99d0:	00012cc0 	.word	0x00012cc0
    99d4:	00012fae 	.word	0x00012fae
    99d8:	00012fc1 	.word	0x00012fc1
    99dc:	00012fcf 	.word	0x00012fcf
    99e0:	00012ff5 	.word	0x00012ff5
    99e4:	00013017 	.word	0x00013017
    99e8:	0001303a 	.word	0x0001303a
    99ec:	00012ffc 	.word	0x00012ffc
    99f0:	00013003 	.word	0x00013003
    99f4:	0001300d 	.word	0x0001300d
    99f8:	000138b6 	.word	0x000138b6
    99fc:	00012f86 	.word	0x00012f86
    9a00:	00012f9d 	.word	0x00012f9d
    9a04:	00012d28 	.word	0x00012d28

00009a08 <main>:

void main(void)
{
    9a08:	b508      	push	{r3, lr}
	int err;
	
	err = bt_enable(bt_ready);
    9a0a:	4805      	ldr	r0, [pc, #20]	; (9a20 <main+0x18>)
    9a0c:	f003 fa6e 	bl	ceec <bt_enable>
		
	if (err) {
    9a10:	4601      	mov	r1, r0
    9a12:	b120      	cbz	r0, 9a1e <main+0x16>
		printk("Bluetooth init failed (err %d)\n", err);
	}
}
    9a14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    9a18:	4802      	ldr	r0, [pc, #8]	; (9a24 <main+0x1c>)
    9a1a:	f006 bfe4 	b.w	109e6 <printk>
}
    9a1e:	bd08      	pop	{r3, pc}
    9a20:	000098b1 	.word	0x000098b1
    9a24:	00012f50 	.word	0x00012f50

00009a28 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    9a28:	680b      	ldr	r3, [r1, #0]
    9a2a:	3301      	adds	r3, #1
    9a2c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    9a2e:	4b01      	ldr	r3, [pc, #4]	; (9a34 <char_out+0xc>)
    9a30:	681b      	ldr	r3, [r3, #0]
    9a32:	4718      	bx	r3
    9a34:	20000278 	.word	0x20000278

00009a38 <__printk_hook_install>:
	_char_out = fn;
    9a38:	4b01      	ldr	r3, [pc, #4]	; (9a40 <__printk_hook_install+0x8>)
    9a3a:	6018      	str	r0, [r3, #0]
}
    9a3c:	4770      	bx	lr
    9a3e:	bf00      	nop
    9a40:	20000278 	.word	0x20000278

00009a44 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    9a44:	b507      	push	{r0, r1, r2, lr}
    9a46:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    9a48:	2100      	movs	r1, #0
{
    9a4a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    9a4c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    9a4e:	4803      	ldr	r0, [pc, #12]	; (9a5c <vprintk+0x18>)
    9a50:	a901      	add	r1, sp, #4
    9a52:	f000 f8ff 	bl	9c54 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    9a56:	b003      	add	sp, #12
    9a58:	f85d fb04 	ldr.w	pc, [sp], #4
    9a5c:	00009a29 	.word	0x00009a29

00009a60 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9a60:	b530      	push	{r4, r5, lr}
    9a62:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    9a64:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    9a68:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    9a6a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    9a6c:	a901      	add	r1, sp, #4
    9a6e:	4805      	ldr	r0, [pc, #20]	; (9a84 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    9a70:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    9a72:	f000 f8ef 	bl	9c54 <cbvprintf>

	if (ctx.count < ctx.max) {
    9a76:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    9a7a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9a7c:	bfb8      	it	lt
    9a7e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9a80:	b005      	add	sp, #20
    9a82:	bd30      	pop	{r4, r5, pc}
    9a84:	000109c1 	.word	0x000109c1

00009a88 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9a8c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9a90:	f019 0808 	ands.w	r8, r9, #8
{
    9a94:	4604      	mov	r4, r0
    9a96:	4693      	mov	fp, r2
	if (processing) {
    9a98:	d00d      	beq.n	9ab6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    9a9a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9a9c:	bf0c      	ite	eq
    9a9e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    9aa2:	f049 0920 	orrne.w	r9, r9, #32
    9aa6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9aaa:	f38b 8811 	msr	BASEPRI, fp
    9aae:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    9ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9ab6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    9aba:	2902      	cmp	r1, #2
    9abc:	d107      	bne.n	9ace <process_event+0x46>
			evt = process_recheck(mgr);
    9abe:	4620      	mov	r0, r4
    9ac0:	f006 ffab 	bl	10a1a <process_recheck>
		if (evt == EVT_NOP) {
    9ac4:	2800      	cmp	r0, #0
    9ac6:	d0f0      	beq.n	9aaa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    9ac8:	2801      	cmp	r0, #1
    9aca:	8b23      	ldrh	r3, [r4, #24]
    9acc:	d150      	bne.n	9b70 <process_event+0xe8>
			res = mgr->last_res;
    9ace:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9ad0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    9ad2:	2f00      	cmp	r7, #0
    9ad4:	da15      	bge.n	9b02 <process_event+0x7a>
		*clients = mgr->clients;
    9ad6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ad8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    9adc:	e9c4 8800 	strd	r8, r8, [r4]
    9ae0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9ae4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    9ae6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9ae8:	8b21      	ldrh	r1, [r4, #24]
    9aea:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9aee:	45ca      	cmp	sl, r9
    9af0:	d002      	beq.n	9af8 <process_event+0x70>
		if (do_monitors
    9af2:	68a3      	ldr	r3, [r4, #8]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d15c      	bne.n	9bb2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    9af8:	b90d      	cbnz	r5, 9afe <process_event+0x76>
		    || (transit != NULL)) {
    9afa:	2e00      	cmp	r6, #0
    9afc:	d074      	beq.n	9be8 <process_event+0x160>
    9afe:	2300      	movs	r3, #0
    9b00:	e058      	b.n	9bb4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9b02:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9b06:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9b08:	2a01      	cmp	r2, #1
    9b0a:	d820      	bhi.n	9b4e <process_event+0xc6>
		*clients = mgr->clients;
    9b0c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    9b10:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    9b12:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    9b14:	b289      	uxth	r1, r1
	list->tail = NULL;
    9b16:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9b1a:	d10c      	bne.n	9b36 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    9b1c:	2d00      	cmp	r5, #0
    9b1e:	462b      	mov	r3, r5
    9b20:	bf38      	it	cc
    9b22:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9b24:	b12b      	cbz	r3, 9b32 <process_event+0xaa>
				mgr->refs += 1U;
    9b26:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9b28:	681b      	ldr	r3, [r3, #0]
    9b2a:	3201      	adds	r2, #1
    9b2c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d1f8      	bne.n	9b24 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b32:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    9b36:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    9b38:	4620      	mov	r0, r4
    9b3a:	f006 ff6e 	bl	10a1a <process_recheck>
    9b3e:	4606      	mov	r6, r0
    9b40:	2800      	cmp	r0, #0
    9b42:	d0d1      	beq.n	9ae8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9b44:	8b23      	ldrh	r3, [r4, #24]
    9b46:	f043 0320 	orr.w	r3, r3, #32
    9b4a:	8323      	strh	r3, [r4, #24]
    9b4c:	e7cb      	b.n	9ae6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9b4e:	2b04      	cmp	r3, #4
    9b50:	d10c      	bne.n	9b6c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b52:	f021 0107 	bic.w	r1, r1, #7
    9b56:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9b58:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    9b5a:	4620      	mov	r0, r4
    9b5c:	f006 ff5d 	bl	10a1a <process_recheck>
    9b60:	4605      	mov	r5, r0
    9b62:	2800      	cmp	r0, #0
    9b64:	d0bf      	beq.n	9ae6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9b66:	f041 0120 	orr.w	r1, r1, #32
    9b6a:	8321      	strh	r1, [r4, #24]
    9b6c:	2500      	movs	r5, #0
    9b6e:	e7ba      	b.n	9ae6 <process_event+0x5e>
		} else if (evt == EVT_START) {
    9b70:	2803      	cmp	r0, #3
    9b72:	d109      	bne.n	9b88 <process_event+0x100>
			transit = mgr->transitions->start;
    9b74:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b76:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    9b7a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b7c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    9b80:	8323      	strh	r3, [r4, #24]
}
    9b82:	2500      	movs	r5, #0
		res = 0;
    9b84:	462f      	mov	r7, r5
    9b86:	e7af      	b.n	9ae8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    9b88:	2804      	cmp	r0, #4
    9b8a:	d106      	bne.n	9b9a <process_event+0x112>
			transit = mgr->transitions->stop;
    9b8c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b8e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    9b92:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b94:	f043 0304 	orr.w	r3, r3, #4
    9b98:	e7f2      	b.n	9b80 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    9b9a:	2805      	cmp	r0, #5
    9b9c:	d106      	bne.n	9bac <process_event+0x124>
			transit = mgr->transitions->reset;
    9b9e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ba0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    9ba4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ba6:	f043 0305 	orr.w	r3, r3, #5
    9baa:	e7e9      	b.n	9b80 <process_event+0xf8>
    9bac:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    9bae:	462e      	mov	r6, r5
    9bb0:	e7e8      	b.n	9b84 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    9bb2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9bb4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    9bb8:	8321      	strh	r1, [r4, #24]
    9bba:	f38b 8811 	msr	BASEPRI, fp
    9bbe:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    9bc2:	bb03      	cbnz	r3, 9c06 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    9bc4:	2d00      	cmp	r5, #0
    9bc6:	d133      	bne.n	9c30 <process_event+0x1a8>
			if (transit != NULL) {
    9bc8:	b116      	cbz	r6, 9bd0 <process_event+0x148>
				transit(mgr, transition_complete);
    9bca:	4921      	ldr	r1, [pc, #132]	; (9c50 <process_event+0x1c8>)
    9bcc:	4620      	mov	r0, r4
    9bce:	47b0      	blx	r6
	__asm__ volatile(
    9bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
    9bd4:	f3ef 8b11 	mrs	fp, BASEPRI
    9bd8:	f383 8811 	msr	BASEPRI, r3
    9bdc:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    9be0:	8b23      	ldrh	r3, [r4, #24]
    9be2:	f023 0308 	bic.w	r3, r3, #8
    9be6:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9be8:	8b23      	ldrh	r3, [r4, #24]
    9bea:	06da      	lsls	r2, r3, #27
    9bec:	d528      	bpl.n	9c40 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9bee:	f023 0310 	bic.w	r3, r3, #16
    9bf2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    9bf4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    9bf6:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    9bfa:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    9bfe:	2900      	cmp	r1, #0
    9c00:	f47f af5b 	bne.w	9aba <process_event+0x32>
out:
    9c04:	e751      	b.n	9aaa <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9c06:	68a1      	ldr	r1, [r4, #8]
    9c08:	2900      	cmp	r1, #0
    9c0a:	d0db      	beq.n	9bc4 <process_event+0x13c>
	return node->next;
    9c0c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    9c0e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    9c12:	2b00      	cmp	r3, #0
    9c14:	bf38      	it	cc
    9c16:	2300      	movcc	r3, #0
    9c18:	4699      	mov	r9, r3
    9c1a:	4652      	mov	r2, sl
    9c1c:	463b      	mov	r3, r7
    9c1e:	4620      	mov	r0, r4
    9c20:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9c22:	f1b9 0f00 	cmp.w	r9, #0
    9c26:	d0cd      	beq.n	9bc4 <process_event+0x13c>
    9c28:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9c2c:	4649      	mov	r1, r9
    9c2e:	e7ee      	b.n	9c0e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9c30:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    9c32:	463b      	mov	r3, r7
    9c34:	4652      	mov	r2, sl
    9c36:	4620      	mov	r0, r4
    9c38:	682d      	ldr	r5, [r5, #0]
    9c3a:	f006 ff0a 	bl	10a52 <notify_one>
    9c3e:	e7c1      	b.n	9bc4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    9c40:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    9c44:	bf1e      	ittt	ne
    9c46:	f023 0320 	bicne.w	r3, r3, #32
    9c4a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    9c4c:	2102      	movne	r1, #2
    9c4e:	e7d2      	b.n	9bf6 <process_event+0x16e>
    9c50:	00010a7f 	.word	0x00010a7f

00009c54 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    9c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c58:	b091      	sub	sp, #68	; 0x44
    9c5a:	468b      	mov	fp, r1
    9c5c:	9002      	str	r0, [sp, #8]
    9c5e:	4692      	mov	sl, r2
    9c60:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    9c62:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    9c64:	f89a 0000 	ldrb.w	r0, [sl]
    9c68:	b908      	cbnz	r0, 9c6e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    9c6a:	4628      	mov	r0, r5
    9c6c:	e35e      	b.n	a32c <cbvprintf+0x6d8>
		if (*fp != '%') {
    9c6e:	2825      	cmp	r0, #37	; 0x25
    9c70:	f10a 0701 	add.w	r7, sl, #1
    9c74:	d007      	beq.n	9c86 <cbvprintf+0x32>
			OUTC('%');
    9c76:	9b02      	ldr	r3, [sp, #8]
    9c78:	4659      	mov	r1, fp
    9c7a:	4798      	blx	r3
    9c7c:	2800      	cmp	r0, #0
    9c7e:	f2c0 8355 	blt.w	a32c <cbvprintf+0x6d8>
    9c82:	3501      	adds	r5, #1
			break;
    9c84:	e210      	b.n	a0a8 <cbvprintf+0x454>
		} state = {
    9c86:	2218      	movs	r2, #24
    9c88:	2100      	movs	r1, #0
    9c8a:	a80a      	add	r0, sp, #40	; 0x28
    9c8c:	f007 ff0b 	bl	11aa6 <memset>
	if (*sp == '%') {
    9c90:	f89a 3001 	ldrb.w	r3, [sl, #1]
    9c94:	2b25      	cmp	r3, #37	; 0x25
    9c96:	d078      	beq.n	9d8a <cbvprintf+0x136>
    9c98:	2200      	movs	r2, #0
    9c9a:	4694      	mov	ip, r2
    9c9c:	4616      	mov	r6, r2
    9c9e:	4696      	mov	lr, r2
    9ca0:	4610      	mov	r0, r2
    9ca2:	4639      	mov	r1, r7
		switch (*sp) {
    9ca4:	f817 3b01 	ldrb.w	r3, [r7], #1
    9ca8:	2b2b      	cmp	r3, #43	; 0x2b
    9caa:	f000 809d 	beq.w	9de8 <cbvprintf+0x194>
    9cae:	f200 8094 	bhi.w	9dda <cbvprintf+0x186>
    9cb2:	2b20      	cmp	r3, #32
    9cb4:	f000 809b 	beq.w	9dee <cbvprintf+0x19a>
    9cb8:	2b23      	cmp	r3, #35	; 0x23
    9cba:	f000 809a 	beq.w	9df2 <cbvprintf+0x19e>
    9cbe:	b128      	cbz	r0, 9ccc <cbvprintf+0x78>
    9cc0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    9cc4:	f040 0004 	orr.w	r0, r0, #4
    9cc8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    9ccc:	f1be 0f00 	cmp.w	lr, #0
    9cd0:	d005      	beq.n	9cde <cbvprintf+0x8a>
    9cd2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    9cd6:	f040 0008 	orr.w	r0, r0, #8
    9cda:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    9cde:	b12e      	cbz	r6, 9cec <cbvprintf+0x98>
    9ce0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    9ce4:	f040 0010 	orr.w	r0, r0, #16
    9ce8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    9cec:	f1bc 0f00 	cmp.w	ip, #0
    9cf0:	d005      	beq.n	9cfe <cbvprintf+0xaa>
    9cf2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    9cf6:	f040 0020 	orr.w	r0, r0, #32
    9cfa:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    9cfe:	b12a      	cbz	r2, 9d0c <cbvprintf+0xb8>
    9d00:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    9d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    9d08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    9d0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    9d10:	f002 0044 	and.w	r0, r2, #68	; 0x44
    9d14:	2844      	cmp	r0, #68	; 0x44
    9d16:	d103      	bne.n	9d20 <cbvprintf+0xcc>
		conv->flag_zero = false;
    9d18:	f36f 1286 	bfc	r2, #6, #1
    9d1c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    9d20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    9d24:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    9d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9d2a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    9d2e:	d17b      	bne.n	9e28 <cbvprintf+0x1d4>
		conv->width_star = true;
    9d30:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    9d34:	f042 0201 	orr.w	r2, r2, #1
    9d38:	1c4b      	adds	r3, r1, #1
    9d3a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    9d3e:	781a      	ldrb	r2, [r3, #0]
    9d40:	2a2e      	cmp	r2, #46	; 0x2e
    9d42:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    9d46:	bf0c      	ite	eq
    9d48:	2101      	moveq	r1, #1
    9d4a:	2100      	movne	r1, #0
    9d4c:	f361 0241 	bfi	r2, r1, #1, #1
    9d50:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    9d54:	d174      	bne.n	9e40 <cbvprintf+0x1ec>
	if (*sp == '*') {
    9d56:	785a      	ldrb	r2, [r3, #1]
    9d58:	2a2a      	cmp	r2, #42	; 0x2a
    9d5a:	d06a      	beq.n	9e32 <cbvprintf+0x1de>
    9d5c:	3301      	adds	r3, #1
	size_t val = 0;
    9d5e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    9d60:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9d62:	4618      	mov	r0, r3
    9d64:	f810 2b01 	ldrb.w	r2, [r0], #1
    9d68:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9d6c:	2f09      	cmp	r7, #9
    9d6e:	f240 808e 	bls.w	9e8e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    9d72:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    9d76:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    9d78:	f3c2 0040 	ubfx	r0, r2, #1, #1
    9d7c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    9d80:	f361 0241 	bfi	r2, r1, #1, #1
    9d84:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    9d88:	e05a      	b.n	9e40 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    9d8a:	f10a 0702 	add.w	r7, sl, #2
    9d8e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    9d92:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9d96:	07d9      	lsls	r1, r3, #31
    9d98:	f140 8149 	bpl.w	a02e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    9d9c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    9da0:	f1b9 0f00 	cmp.w	r9, #0
    9da4:	da07      	bge.n	9db6 <cbvprintf+0x162>
				conv->flag_dash = true;
    9da6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    9daa:	f042 0204 	orr.w	r2, r2, #4
    9dae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    9db2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    9db6:	075a      	lsls	r2, r3, #29
    9db8:	f140 8142 	bpl.w	a040 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    9dbc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    9dc0:	f1b8 0f00 	cmp.w	r8, #0
    9dc4:	f280 8141 	bge.w	a04a <cbvprintf+0x3f6>
				conv->prec_present = false;
    9dc8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9dcc:	f36f 0341 	bfc	r3, #1, #1
    9dd0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    9dd4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9dd8:	e137      	b.n	a04a <cbvprintf+0x3f6>
		switch (*sp) {
    9dda:	2b2d      	cmp	r3, #45	; 0x2d
    9ddc:	d00c      	beq.n	9df8 <cbvprintf+0x1a4>
    9dde:	2b30      	cmp	r3, #48	; 0x30
    9de0:	f47f af6d 	bne.w	9cbe <cbvprintf+0x6a>
			conv->flag_zero = true;
    9de4:	2201      	movs	r2, #1
	} while (loop);
    9de6:	e75c      	b.n	9ca2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    9de8:	f04f 0e01 	mov.w	lr, #1
    9dec:	e759      	b.n	9ca2 <cbvprintf+0x4e>
			conv->flag_space = true;
    9dee:	2601      	movs	r6, #1
    9df0:	e757      	b.n	9ca2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    9df2:	f04f 0c01 	mov.w	ip, #1
    9df6:	e754      	b.n	9ca2 <cbvprintf+0x4e>
		switch (*sp) {
    9df8:	2001      	movs	r0, #1
    9dfa:	e752      	b.n	9ca2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    9dfc:	fb0c 0202 	mla	r2, ip, r2, r0
    9e00:	3a30      	subs	r2, #48	; 0x30
    9e02:	4633      	mov	r3, r6
    9e04:	461e      	mov	r6, r3
    9e06:	f816 0b01 	ldrb.w	r0, [r6], #1
    9e0a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9e0e:	2f09      	cmp	r7, #9
    9e10:	d9f4      	bls.n	9dfc <cbvprintf+0x1a8>
	if (sp != wp) {
    9e12:	4299      	cmp	r1, r3
    9e14:	d093      	beq.n	9d3e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    9e16:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    9e1a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    9e1c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    9e1e:	f362 0141 	bfi	r1, r2, #1, #1
    9e22:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    9e26:	e78a      	b.n	9d3e <cbvprintf+0xea>
    9e28:	460b      	mov	r3, r1
	size_t val = 0;
    9e2a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    9e2c:	f04f 0c0a 	mov.w	ip, #10
    9e30:	e7e8      	b.n	9e04 <cbvprintf+0x1b0>
		conv->prec_star = true;
    9e32:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    9e36:	f042 0204 	orr.w	r2, r2, #4
    9e3a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    9e3e:	3302      	adds	r3, #2
	switch (*sp) {
    9e40:	461f      	mov	r7, r3
    9e42:	f817 2b01 	ldrb.w	r2, [r7], #1
    9e46:	2a6c      	cmp	r2, #108	; 0x6c
    9e48:	d041      	beq.n	9ece <cbvprintf+0x27a>
    9e4a:	d825      	bhi.n	9e98 <cbvprintf+0x244>
    9e4c:	2a68      	cmp	r2, #104	; 0x68
    9e4e:	d02b      	beq.n	9ea8 <cbvprintf+0x254>
    9e50:	2a6a      	cmp	r2, #106	; 0x6a
    9e52:	d046      	beq.n	9ee2 <cbvprintf+0x28e>
    9e54:	2a4c      	cmp	r2, #76	; 0x4c
    9e56:	d04c      	beq.n	9ef2 <cbvprintf+0x29e>
    9e58:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    9e5a:	f817 2b01 	ldrb.w	r2, [r7], #1
    9e5e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9e62:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    9e66:	2a78      	cmp	r2, #120	; 0x78
    9e68:	f200 80d9 	bhi.w	a01e <cbvprintf+0x3ca>
    9e6c:	2a57      	cmp	r2, #87	; 0x57
    9e6e:	d84d      	bhi.n	9f0c <cbvprintf+0x2b8>
    9e70:	2a41      	cmp	r2, #65	; 0x41
    9e72:	d003      	beq.n	9e7c <cbvprintf+0x228>
    9e74:	3a45      	subs	r2, #69	; 0x45
    9e76:	2a02      	cmp	r2, #2
    9e78:	f200 80d1 	bhi.w	a01e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    9e7c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    9e80:	2204      	movs	r2, #4
    9e82:	f362 0302 	bfi	r3, r2, #0, #3
    9e86:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    9e8a:	2301      	movs	r3, #1
			break;
    9e8c:	e09e      	b.n	9fcc <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    9e8e:	fb06 2101 	mla	r1, r6, r1, r2
    9e92:	3930      	subs	r1, #48	; 0x30
    9e94:	4603      	mov	r3, r0
    9e96:	e764      	b.n	9d62 <cbvprintf+0x10e>
	switch (*sp) {
    9e98:	2a74      	cmp	r2, #116	; 0x74
    9e9a:	d026      	beq.n	9eea <cbvprintf+0x296>
    9e9c:	2a7a      	cmp	r2, #122	; 0x7a
    9e9e:	d1db      	bne.n	9e58 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    9ea0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9ea4:	2206      	movs	r2, #6
    9ea6:	e00d      	b.n	9ec4 <cbvprintf+0x270>
		if (*++sp == 'h') {
    9ea8:	785a      	ldrb	r2, [r3, #1]
    9eaa:	2a68      	cmp	r2, #104	; 0x68
    9eac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    9eb0:	d106      	bne.n	9ec0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    9eb2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    9eb4:	f361 02c6 	bfi	r2, r1, #3, #4
    9eb8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    9ebc:	1c9f      	adds	r7, r3, #2
    9ebe:	e7cc      	b.n	9e5a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    9ec0:	4613      	mov	r3, r2
    9ec2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    9ec4:	f362 03c6 	bfi	r3, r2, #3, #4
    9ec8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    9ecc:	e7c5      	b.n	9e5a <cbvprintf+0x206>
		if (*++sp == 'l') {
    9ece:	785a      	ldrb	r2, [r3, #1]
    9ed0:	2a6c      	cmp	r2, #108	; 0x6c
    9ed2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    9ed6:	d101      	bne.n	9edc <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    9ed8:	2104      	movs	r1, #4
    9eda:	e7eb      	b.n	9eb4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    9edc:	4613      	mov	r3, r2
    9ede:	2203      	movs	r2, #3
    9ee0:	e7f0      	b.n	9ec4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    9ee2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9ee6:	2205      	movs	r2, #5
    9ee8:	e7ec      	b.n	9ec4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    9eea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    9eee:	2207      	movs	r2, #7
    9ef0:	e7e8      	b.n	9ec4 <cbvprintf+0x270>
		conv->unsupported = true;
    9ef2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9ef6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    9efa:	f023 0302 	bic.w	r3, r3, #2
    9efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    9f02:	f043 0302 	orr.w	r3, r3, #2
    9f06:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    9f0a:	e7a6      	b.n	9e5a <cbvprintf+0x206>
    9f0c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    9f10:	2920      	cmp	r1, #32
    9f12:	f200 8084 	bhi.w	a01e <cbvprintf+0x3ca>
    9f16:	a001      	add	r0, pc, #4	; (adr r0, 9f1c <cbvprintf+0x2c8>)
    9f18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    9f1c:	00009fe1 	.word	0x00009fe1
    9f20:	0000a01f 	.word	0x0000a01f
    9f24:	0000a01f 	.word	0x0000a01f
    9f28:	0000a01f 	.word	0x0000a01f
    9f2c:	0000a01f 	.word	0x0000a01f
    9f30:	0000a01f 	.word	0x0000a01f
    9f34:	0000a01f 	.word	0x0000a01f
    9f38:	0000a01f 	.word	0x0000a01f
    9f3c:	0000a01f 	.word	0x0000a01f
    9f40:	00009e7d 	.word	0x00009e7d
    9f44:	0000a01f 	.word	0x0000a01f
    9f48:	00009fe1 	.word	0x00009fe1
    9f4c:	00009fa1 	.word	0x00009fa1
    9f50:	00009e7d 	.word	0x00009e7d
    9f54:	00009e7d 	.word	0x00009e7d
    9f58:	00009e7d 	.word	0x00009e7d
    9f5c:	0000a01f 	.word	0x0000a01f
    9f60:	00009fa1 	.word	0x00009fa1
    9f64:	0000a01f 	.word	0x0000a01f
    9f68:	0000a01f 	.word	0x0000a01f
    9f6c:	0000a01f 	.word	0x0000a01f
    9f70:	0000a01f 	.word	0x0000a01f
    9f74:	00009fe9 	.word	0x00009fe9
    9f78:	00009fe1 	.word	0x00009fe1
    9f7c:	0000a005 	.word	0x0000a005
    9f80:	0000a01f 	.word	0x0000a01f
    9f84:	0000a01f 	.word	0x0000a01f
    9f88:	0000a005 	.word	0x0000a005
    9f8c:	0000a01f 	.word	0x0000a01f
    9f90:	00009fe1 	.word	0x00009fe1
    9f94:	0000a01f 	.word	0x0000a01f
    9f98:	0000a01f 	.word	0x0000a01f
    9f9c:	00009fe1 	.word	0x00009fe1
		conv->specifier_cat = SPECIFIER_SINT;
    9fa0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    9fa4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    9fa6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9faa:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9fae:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    9fb0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    9fb4:	bf02      	ittt	eq
    9fb6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    9fba:	f041 0101 	orreq.w	r1, r1, #1
    9fbe:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    9fc2:	2a63      	cmp	r2, #99	; 0x63
    9fc4:	d131      	bne.n	a02a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    9fc6:	3b00      	subs	r3, #0
    9fc8:	bf18      	it	ne
    9fca:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    9fcc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    9fd0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    9fd4:	430b      	orrs	r3, r1
    9fd6:	f363 0241 	bfi	r2, r3, #1, #1
    9fda:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    9fde:	e6d8      	b.n	9d92 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    9fe0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    9fe4:	2002      	movs	r0, #2
    9fe6:	e7de      	b.n	9fa6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    9fe8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    9fec:	f003 0378 	and.w	r3, r3, #120	; 0x78
    9ff0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    9ff4:	2103      	movs	r1, #3
    9ff6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9ffa:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    9ffc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    a000:	4143      	adcs	r3, r0
    a002:	e7e3      	b.n	9fcc <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    a004:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    a008:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    a00a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    a00e:	f361 0202 	bfi	r2, r1, #0, #3
    a012:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    a016:	bf14      	ite	ne
    a018:	2301      	movne	r3, #1
    a01a:	2300      	moveq	r3, #0
    a01c:	e7d6      	b.n	9fcc <cbvprintf+0x378>
		conv->invalid = true;
    a01e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    a022:	f043 0301 	orr.w	r3, r3, #1
    a026:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    a02a:	2300      	movs	r3, #0
    a02c:	e7ce      	b.n	9fcc <cbvprintf+0x378>
		} else if (conv->width_present) {
    a02e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    a032:	2a00      	cmp	r2, #0
			width = conv->width_value;
    a034:	bfb4      	ite	lt
    a036:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    a03a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    a03e:	e6ba      	b.n	9db6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    a040:	079b      	lsls	r3, r3, #30
    a042:	f57f aec7 	bpl.w	9dd4 <cbvprintf+0x180>
			precision = conv->prec_value;
    a046:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    a04a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    a04e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    a050:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    a054:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    a058:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    a05c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    a05e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    a062:	d136      	bne.n	a0d2 <cbvprintf+0x47e>
			switch (length_mod) {
    a064:	1ed3      	subs	r3, r2, #3
    a066:	2b04      	cmp	r3, #4
    a068:	d820      	bhi.n	a0ac <cbvprintf+0x458>
    a06a:	e8df f003 	tbb	[pc, r3]
    a06e:	0703      	.short	0x0703
    a070:	1f07      	.short	0x1f07
    a072:	1f          	.byte	0x1f
    a073:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    a074:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    a078:	17c1      	asrs	r1, r0, #31
    a07a:	e004      	b.n	a086 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    a07c:	3407      	adds	r4, #7
    a07e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    a082:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    a086:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    a08a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    a08e:	f013 0603 	ands.w	r6, r3, #3
    a092:	d054      	beq.n	a13e <cbvprintf+0x4ea>
			OUTS(sp, fp);
    a094:	9802      	ldr	r0, [sp, #8]
    a096:	463b      	mov	r3, r7
    a098:	4652      	mov	r2, sl
    a09a:	4659      	mov	r1, fp
    a09c:	f007 f869 	bl	11172 <outs>
    a0a0:	2800      	cmp	r0, #0
    a0a2:	f2c0 8143 	blt.w	a32c <cbvprintf+0x6d8>
    a0a6:	4405      	add	r5, r0
			continue;
    a0a8:	46ba      	mov	sl, r7
    a0aa:	e5db      	b.n	9c64 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    a0ac:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    a0b0:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    a0b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
    a0b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    a0ba:	d105      	bne.n	a0c8 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    a0bc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    a0c0:	930a      	str	r3, [sp, #40]	; 0x28
    a0c2:	2300      	movs	r3, #0
    a0c4:	930b      	str	r3, [sp, #44]	; 0x2c
    a0c6:	e7e0      	b.n	a08a <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    a0c8:	2a02      	cmp	r2, #2
    a0ca:	d1de      	bne.n	a08a <cbvprintf+0x436>
				value->sint = (short)value->sint;
    a0cc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    a0d0:	e7d2      	b.n	a078 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    a0d2:	2b02      	cmp	r3, #2
    a0d4:	d123      	bne.n	a11e <cbvprintf+0x4ca>
			switch (length_mod) {
    a0d6:	1ed3      	subs	r3, r2, #3
    a0d8:	2b04      	cmp	r3, #4
    a0da:	d813      	bhi.n	a104 <cbvprintf+0x4b0>
    a0dc:	e8df f003 	tbb	[pc, r3]
    a0e0:	120a0a03 	.word	0x120a0a03
    a0e4:	12          	.byte	0x12
    a0e5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    a0e6:	6820      	ldr	r0, [r4, #0]
    a0e8:	900a      	str	r0, [sp, #40]	; 0x28
    a0ea:	2100      	movs	r1, #0
    a0ec:	1d23      	adds	r3, r4, #4
    a0ee:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    a0f0:	461c      	mov	r4, r3
    a0f2:	e7ca      	b.n	a08a <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    a0f4:	3407      	adds	r4, #7
    a0f6:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    a0fa:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    a0fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    a102:	e7f5      	b.n	a0f0 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    a104:	f854 3b04 	ldr.w	r3, [r4], #4
    a108:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    a10a:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    a10c:	f04f 0300 	mov.w	r3, #0
    a110:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    a112:	d0d3      	beq.n	a0bc <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    a114:	2a02      	cmp	r2, #2
    a116:	d1b8      	bne.n	a08a <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    a118:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a11c:	e7d0      	b.n	a0c0 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    a11e:	2b04      	cmp	r3, #4
    a120:	d107      	bne.n	a132 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    a122:	3407      	adds	r4, #7
    a124:	f024 0407 	bic.w	r4, r4, #7
    a128:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    a12c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a130:	e7ab      	b.n	a08a <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    a132:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    a134:	bf04      	itt	eq
    a136:	f854 3b04 	ldreq.w	r3, [r4], #4
    a13a:	930a      	streq	r3, [sp, #40]	; 0x28
    a13c:	e7a5      	b.n	a08a <cbvprintf+0x436>
		switch (conv->specifier) {
    a13e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a142:	2878      	cmp	r0, #120	; 0x78
    a144:	d8b0      	bhi.n	a0a8 <cbvprintf+0x454>
    a146:	2862      	cmp	r0, #98	; 0x62
    a148:	d822      	bhi.n	a190 <cbvprintf+0x53c>
    a14a:	2825      	cmp	r0, #37	; 0x25
    a14c:	f43f ad93 	beq.w	9c76 <cbvprintf+0x22>
    a150:	2858      	cmp	r0, #88	; 0x58
    a152:	d1a9      	bne.n	a0a8 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    a154:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    a158:	9300      	str	r3, [sp, #0]
    a15a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a15e:	ab04      	add	r3, sp, #16
    a160:	aa0c      	add	r2, sp, #48	; 0x30
    a162:	f006 ffbb 	bl	110dc <encode_uint>
    a166:	4682      	mov	sl, r0
			if (precision >= 0) {
    a168:	f1b8 0f00 	cmp.w	r8, #0
    a16c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    a170:	db0c      	blt.n	a18c <cbvprintf+0x538>
				conv->flag_zero = false;
    a172:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    a176:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    a17a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    a17e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    a180:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    a184:	d902      	bls.n	a18c <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    a186:	eba8 0303 	sub.w	r3, r8, r3
    a18a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    a18c:	4680      	mov	r8, r0
    a18e:	e03d      	b.n	a20c <cbvprintf+0x5b8>
    a190:	3863      	subs	r0, #99	; 0x63
    a192:	2815      	cmp	r0, #21
    a194:	d888      	bhi.n	a0a8 <cbvprintf+0x454>
    a196:	a101      	add	r1, pc, #4	; (adr r1, a19c <cbvprintf+0x548>)
    a198:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    a19c:	0000a21d 	.word	0x0000a21d
    a1a0:	0000a281 	.word	0x0000a281
    a1a4:	0000a0a9 	.word	0x0000a0a9
    a1a8:	0000a0a9 	.word	0x0000a0a9
    a1ac:	0000a0a9 	.word	0x0000a0a9
    a1b0:	0000a0a9 	.word	0x0000a0a9
    a1b4:	0000a281 	.word	0x0000a281
    a1b8:	0000a0a9 	.word	0x0000a0a9
    a1bc:	0000a0a9 	.word	0x0000a0a9
    a1c0:	0000a0a9 	.word	0x0000a0a9
    a1c4:	0000a0a9 	.word	0x0000a0a9
    a1c8:	0000a2df 	.word	0x0000a2df
    a1cc:	0000a2ad 	.word	0x0000a2ad
    a1d0:	0000a2b1 	.word	0x0000a2b1
    a1d4:	0000a0a9 	.word	0x0000a0a9
    a1d8:	0000a0a9 	.word	0x0000a0a9
    a1dc:	0000a1f5 	.word	0x0000a1f5
    a1e0:	0000a0a9 	.word	0x0000a0a9
    a1e4:	0000a2ad 	.word	0x0000a2ad
    a1e8:	0000a0a9 	.word	0x0000a0a9
    a1ec:	0000a0a9 	.word	0x0000a0a9
    a1f0:	0000a2ad 	.word	0x0000a2ad
			if (precision >= 0) {
    a1f4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    a1f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    a1fc:	db0a      	blt.n	a214 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    a1fe:	4641      	mov	r1, r8
    a200:	4650      	mov	r0, sl
    a202:	f007 fc20 	bl	11a46 <strnlen>
			bpe = bps + len;
    a206:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    a20a:	2600      	movs	r6, #0
		if (bps == NULL) {
    a20c:	f1ba 0f00 	cmp.w	sl, #0
    a210:	d10c      	bne.n	a22c <cbvprintf+0x5d8>
    a212:	e749      	b.n	a0a8 <cbvprintf+0x454>
				len = strlen(bps);
    a214:	4650      	mov	r0, sl
    a216:	f007 fc0f 	bl	11a38 <strlen>
    a21a:	e7f4      	b.n	a206 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    a21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a21e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    a222:	2600      	movs	r6, #0
			bpe = buf + 1;
    a224:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    a228:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    a22c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    a230:	b106      	cbz	r6, a234 <cbvprintf+0x5e0>
			nj_len += 1U;
    a232:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    a234:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    a238:	06d0      	lsls	r0, r2, #27
    a23a:	d56b      	bpl.n	a314 <cbvprintf+0x6c0>
			nj_len += 2U;
    a23c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    a23e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    a240:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    a242:	bf48      	it	mi
    a244:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    a246:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    a248:	bf48      	it	mi
    a24a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    a24c:	f1b9 0f00 	cmp.w	r9, #0
    a250:	dd79      	ble.n	a346 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    a252:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    a256:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    a25a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    a25e:	9303      	str	r3, [sp, #12]
    a260:	0753      	lsls	r3, r2, #29
    a262:	d470      	bmi.n	a346 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    a264:	0650      	lsls	r0, r2, #25
    a266:	d564      	bpl.n	a332 <cbvprintf+0x6de>
					if (sign != 0) {
    a268:	b146      	cbz	r6, a27c <cbvprintf+0x628>
						OUTC(sign);
    a26a:	9b02      	ldr	r3, [sp, #8]
    a26c:	4659      	mov	r1, fp
    a26e:	4630      	mov	r0, r6
    a270:	4798      	blx	r3
    a272:	2800      	cmp	r0, #0
    a274:	db5a      	blt.n	a32c <cbvprintf+0x6d8>
						sign = 0;
    a276:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    a278:	3501      	adds	r5, #1
						sign = 0;
    a27a:	461e      	mov	r6, r3
					pad = '0';
    a27c:	2330      	movs	r3, #48	; 0x30
    a27e:	e059      	b.n	a334 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    a280:	071e      	lsls	r6, r3, #28
    a282:	d411      	bmi.n	a2a8 <cbvprintf+0x654>
				sign = ' ';
    a284:	f013 0610 	ands.w	r6, r3, #16
    a288:	bf18      	it	ne
    a28a:	2620      	movne	r6, #32
			sint = value->sint;
    a28c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    a290:	2a00      	cmp	r2, #0
    a292:	f173 0100 	sbcs.w	r1, r3, #0
    a296:	f6bf af5d 	bge.w	a154 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    a29a:	4252      	negs	r2, r2
    a29c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a2a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    a2a4:	262d      	movs	r6, #45	; 0x2d
    a2a6:	e755      	b.n	a154 <cbvprintf+0x500>
				sign = '+';
    a2a8:	262b      	movs	r6, #43	; 0x2b
    a2aa:	e7ef      	b.n	a28c <cbvprintf+0x638>
		switch (conv->specifier) {
    a2ac:	2600      	movs	r6, #0
    a2ae:	e751      	b.n	a154 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    a2b0:	980a      	ldr	r0, [sp, #40]	; 0x28
    a2b2:	b348      	cbz	r0, a308 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a2b4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    a2b8:	9300      	str	r3, [sp, #0]
    a2ba:	aa0c      	add	r2, sp, #48	; 0x30
    a2bc:	ab04      	add	r3, sp, #16
    a2be:	2100      	movs	r1, #0
    a2c0:	f006 ff0c 	bl	110dc <encode_uint>
				conv->altform_0c = true;
    a2c4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    a2c8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    a2cc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    a2d0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    a2d4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    a2d6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    a2da:	2600      	movs	r6, #0
				goto prec_int_pad0;
    a2dc:	e744      	b.n	a168 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    a2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    a2e0:	2a07      	cmp	r2, #7
    a2e2:	f63f aee1 	bhi.w	a0a8 <cbvprintf+0x454>
    a2e6:	e8df f002 	tbb	[pc, r2]
    a2ea:	040d      	.short	0x040d
    a2ec:	08080d06 	.word	0x08080d06
    a2f0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    a2f2:	701d      	strb	r5, [r3, #0]
		break;
    a2f4:	e6d8      	b.n	a0a8 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    a2f6:	801d      	strh	r5, [r3, #0]
		break;
    a2f8:	e6d6      	b.n	a0a8 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    a2fa:	4628      	mov	r0, r5
    a2fc:	17e9      	asrs	r1, r5, #31
    a2fe:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    a302:	e6d1      	b.n	a0a8 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    a304:	601d      	str	r5, [r3, #0]
		break;
    a306:	e6cf      	b.n	a0a8 <cbvprintf+0x454>
			bpe = bps + 5;
    a308:	f8df 80c4 	ldr.w	r8, [pc, #196]	; a3d0 <cbvprintf+0x77c>
    a30c:	4606      	mov	r6, r0
			bps = "(nil)";
    a30e:	f1a8 0a05 	sub.w	sl, r8, #5
    a312:	e78b      	b.n	a22c <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    a314:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    a316:	bf48      	it	mi
    a318:	3301      	addmi	r3, #1
    a31a:	e790      	b.n	a23e <cbvprintf+0x5ea>
					OUTC(pad);
    a31c:	4618      	mov	r0, r3
    a31e:	9303      	str	r3, [sp, #12]
    a320:	4659      	mov	r1, fp
    a322:	9b02      	ldr	r3, [sp, #8]
    a324:	4798      	blx	r3
    a326:	2800      	cmp	r0, #0
    a328:	9b03      	ldr	r3, [sp, #12]
    a32a:	da04      	bge.n	a336 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    a32c:	b011      	add	sp, #68	; 0x44
    a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    a332:	2320      	movs	r3, #32
    a334:	444d      	add	r5, r9
    a336:	464a      	mov	r2, r9
				while (width-- > 0) {
    a338:	2a00      	cmp	r2, #0
    a33a:	eba5 0109 	sub.w	r1, r5, r9
    a33e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a342:	dceb      	bgt.n	a31c <cbvprintf+0x6c8>
    a344:	460d      	mov	r5, r1
		if (sign != 0) {
    a346:	b136      	cbz	r6, a356 <cbvprintf+0x702>
			OUTC(sign);
    a348:	9b02      	ldr	r3, [sp, #8]
    a34a:	4659      	mov	r1, fp
    a34c:	4630      	mov	r0, r6
    a34e:	4798      	blx	r3
    a350:	2800      	cmp	r0, #0
    a352:	dbeb      	blt.n	a32c <cbvprintf+0x6d8>
    a354:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    a356:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    a35a:	06d9      	lsls	r1, r3, #27
    a35c:	d401      	bmi.n	a362 <cbvprintf+0x70e>
    a35e:	071a      	lsls	r2, r3, #28
    a360:	d506      	bpl.n	a370 <cbvprintf+0x71c>
				OUTC('0');
    a362:	9b02      	ldr	r3, [sp, #8]
    a364:	4659      	mov	r1, fp
    a366:	2030      	movs	r0, #48	; 0x30
    a368:	4798      	blx	r3
    a36a:	2800      	cmp	r0, #0
    a36c:	dbde      	blt.n	a32c <cbvprintf+0x6d8>
    a36e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    a370:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    a374:	06db      	lsls	r3, r3, #27
    a376:	d507      	bpl.n	a388 <cbvprintf+0x734>
				OUTC(conv->specifier);
    a378:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a37c:	9b02      	ldr	r3, [sp, #8]
    a37e:	4659      	mov	r1, fp
    a380:	4798      	blx	r3
    a382:	2800      	cmp	r0, #0
    a384:	dbd2      	blt.n	a32c <cbvprintf+0x6d8>
    a386:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    a388:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a38a:	442e      	add	r6, r5
    a38c:	1b73      	subs	r3, r6, r5
    a38e:	2b00      	cmp	r3, #0
    a390:	dc16      	bgt.n	a3c0 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    a392:	9802      	ldr	r0, [sp, #8]
    a394:	4643      	mov	r3, r8
    a396:	4652      	mov	r2, sl
    a398:	4659      	mov	r1, fp
    a39a:	f006 feea 	bl	11172 <outs>
    a39e:	2800      	cmp	r0, #0
    a3a0:	dbc4      	blt.n	a32c <cbvprintf+0x6d8>
    a3a2:	4405      	add	r5, r0
		while (width > 0) {
    a3a4:	44a9      	add	r9, r5
    a3a6:	eba9 0305 	sub.w	r3, r9, r5
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	f77f ae7c 	ble.w	a0a8 <cbvprintf+0x454>
			OUTC(' ');
    a3b0:	9b02      	ldr	r3, [sp, #8]
    a3b2:	4659      	mov	r1, fp
    a3b4:	2020      	movs	r0, #32
    a3b6:	4798      	blx	r3
    a3b8:	2800      	cmp	r0, #0
    a3ba:	dbb7      	blt.n	a32c <cbvprintf+0x6d8>
    a3bc:	3501      	adds	r5, #1
			--width;
    a3be:	e7f2      	b.n	a3a6 <cbvprintf+0x752>
				OUTC('0');
    a3c0:	9b02      	ldr	r3, [sp, #8]
    a3c2:	4659      	mov	r1, fp
    a3c4:	2030      	movs	r0, #48	; 0x30
    a3c6:	4798      	blx	r3
    a3c8:	2800      	cmp	r0, #0
    a3ca:	dbaf      	blt.n	a32c <cbvprintf+0x6d8>
    a3cc:	3501      	adds	r5, #1
    a3ce:	e7dd      	b.n	a38c <cbvprintf+0x738>
    a3d0:	00013062 	.word	0x00013062

0000a3d4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a3d4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    a3d6:	4910      	ldr	r1, [pc, #64]	; (a418 <enable_logger+0x44>)
    a3d8:	4810      	ldr	r0, [pc, #64]	; (a41c <enable_logger+0x48>)
{
    a3da:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    a3dc:	2200      	movs	r2, #0
    a3de:	f008 f934 	bl	1264a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a3e2:	4d0f      	ldr	r5, [pc, #60]	; (a420 <enable_logger+0x4c>)
    a3e4:	490f      	ldr	r1, [pc, #60]	; (a424 <enable_logger+0x50>)
    a3e6:	2200      	movs	r2, #0
    a3e8:	2300      	movs	r3, #0
    a3ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a3ee:	2400      	movs	r4, #0
    a3f0:	230e      	movs	r3, #14
    a3f2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    a3f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a3fa:	4b0b      	ldr	r3, [pc, #44]	; (a428 <enable_logger+0x54>)
    a3fc:	9400      	str	r4, [sp, #0]
    a3fe:	f44f 7240 	mov.w	r2, #768	; 0x300
    a402:	4628      	mov	r0, r5
    a404:	f005 f950 	bl	f6a8 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    a408:	4908      	ldr	r1, [pc, #32]	; (a42c <enable_logger+0x58>)
    a40a:	4628      	mov	r0, r5
    a40c:	f007 fe9c 	bl	12148 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    a410:	4620      	mov	r0, r4
    a412:	b009      	add	sp, #36	; 0x24
    a414:	bd30      	pop	{r4, r5, pc}
    a416:	bf00      	nop
    a418:	0000a431 	.word	0x0000a431
    a41c:	20000f00 	.word	0x20000f00
    a420:	20000f38 	.word	0x20000f38
    a424:	20001f20 	.word	0x20001f20
    a428:	0000a875 	.word	0x0000a875
    a42c:	00013063 	.word	0x00013063

0000a430 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a430:	4801      	ldr	r0, [pc, #4]	; (a438 <log_process_thread_timer_expiry_fn+0x8>)
    a432:	f005 bad1 	b.w	f9d8 <z_impl_k_sem_give>
    a436:	bf00      	nop
    a438:	20000304 	.word	0x20000304

0000a43c <log_core_init>:
{
    a43c:	b510      	push	{r4, lr}
	panic_mode = false;
    a43e:	4b0b      	ldr	r3, [pc, #44]	; (a46c <log_core_init+0x30>)
    a440:	2200      	movs	r2, #0
    a442:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    a444:	4b0a      	ldr	r3, [pc, #40]	; (a470 <log_core_init+0x34>)
    a446:	4a0b      	ldr	r2, [pc, #44]	; (a474 <log_core_init+0x38>)
    a448:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    a44a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a44e:	f000 fcbd 	bl	adcc <log_output_timestamp_freq_set>
		log_msg_pool_init();
    a452:	f000 fa71 	bl	a938 <log_msg_pool_init>
		log_list_init(&list);
    a456:	4808      	ldr	r0, [pc, #32]	; (a478 <log_core_init+0x3c>)
    a458:	f006 fea2 	bl	111a0 <log_list_init>
}
    a45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    a460:	4906      	ldr	r1, [pc, #24]	; (a47c <log_core_init+0x40>)
    a462:	4807      	ldr	r0, [pc, #28]	; (a480 <log_core_init+0x44>)
    a464:	2308      	movs	r3, #8
    a466:	2248      	movs	r2, #72	; 0x48
    a468:	f007 be24 	b.w	120b4 <k_mem_slab_init>
    a46c:	20001671 	.word	0x20001671
    a470:	2000027c 	.word	0x2000027c
    a474:	000111df 	.word	0x000111df
    a478:	2000136c 	.word	0x2000136c
    a47c:	20004a80 	.word	0x20004a80
    a480:	20001374 	.word	0x20001374

0000a484 <get_msg>:
{
    a484:	b510      	push	{r4, lr}
    a486:	f04f 0340 	mov.w	r3, #64	; 0x40
    a48a:	f3ef 8411 	mrs	r4, BASEPRI
    a48e:	f383 8811 	msr	BASEPRI, r3
    a492:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    a496:	4804      	ldr	r0, [pc, #16]	; (a4a8 <get_msg+0x24>)
    a498:	f006 fe92 	bl	111c0 <log_list_head_get>
	__asm__ volatile(
    a49c:	f384 8811 	msr	BASEPRI, r4
    a4a0:	f3bf 8f6f 	isb	sy
}
    a4a4:	bd10      	pop	{r4, pc}
    a4a6:	bf00      	nop
    a4a8:	2000136c 	.word	0x2000136c

0000a4ac <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a4ac:	4b06      	ldr	r3, [pc, #24]	; (a4c8 <z_log_dropped+0x1c>)
    a4ae:	f3bf 8f5b 	dmb	ish
    a4b2:	e853 2f00 	ldrex	r2, [r3]
    a4b6:	3201      	adds	r2, #1
    a4b8:	e843 2100 	strex	r1, r2, [r3]
    a4bc:	2900      	cmp	r1, #0
    a4be:	d1f8      	bne.n	a4b2 <z_log_dropped+0x6>
    a4c0:	f3bf 8f5b 	dmb	ish
}
    a4c4:	4770      	bx	lr
    a4c6:	bf00      	nop
    a4c8:	20001364 	.word	0x20001364

0000a4cc <z_log_dropped_read_and_clear>:
}
    a4cc:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a4ce:	4b06      	ldr	r3, [pc, #24]	; (a4e8 <z_log_dropped_read_and_clear+0x1c>)
    a4d0:	f3bf 8f5b 	dmb	ish
    a4d4:	4602      	mov	r2, r0
    a4d6:	e853 0f00 	ldrex	r0, [r3]
    a4da:	e843 2100 	strex	r1, r2, [r3]
    a4de:	2900      	cmp	r1, #0
    a4e0:	d1f9      	bne.n	a4d6 <z_log_dropped_read_and_clear+0xa>
    a4e2:	f3bf 8f5b 	dmb	ish
    a4e6:	4770      	bx	lr
    a4e8:	20001364 	.word	0x20001364

0000a4ec <dropped_notify>:
{
    a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    a4ee:	f7ff ffed 	bl	a4cc <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    a4f2:	4c0a      	ldr	r4, [pc, #40]	; (a51c <dropped_notify+0x30>)
    a4f4:	4d0a      	ldr	r5, [pc, #40]	; (a520 <dropped_notify+0x34>)
    a4f6:	1b2d      	subs	r5, r5, r4
    a4f8:	4607      	mov	r7, r0
    a4fa:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    a4fc:	2600      	movs	r6, #0
    a4fe:	42ae      	cmp	r6, r5
    a500:	db00      	blt.n	a504 <dropped_notify+0x18>
}
    a502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    a504:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a506:	795b      	ldrb	r3, [r3, #5]
    a508:	b12b      	cbz	r3, a516 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    a50a:	6823      	ldr	r3, [r4, #0]
    a50c:	691b      	ldr	r3, [r3, #16]
    a50e:	b113      	cbz	r3, a516 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    a510:	4639      	mov	r1, r7
    a512:	4620      	mov	r0, r4
    a514:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    a516:	3601      	adds	r6, #1
    a518:	3410      	adds	r4, #16
    a51a:	e7f0      	b.n	a4fe <dropped_notify+0x12>
    a51c:	00012bf4 	.word	0x00012bf4
    a520:	00012c14 	.word	0x00012c14

0000a524 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    a524:	4a04      	ldr	r2, [pc, #16]	; (a538 <log_source_name_get+0x14>)
    a526:	4b05      	ldr	r3, [pc, #20]	; (a53c <log_source_name_get+0x18>)
    a528:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    a52a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    a52e:	bf34      	ite	cc
    a530:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    a534:	2000      	movcs	r0, #0
}
    a536:	4770      	bx	lr
    a538:	00012b64 	.word	0x00012b64
    a53c:	00012bf4 	.word	0x00012bf4

0000a540 <log_backend_enable>:
	id += backend - log_backend_get(0);
    a540:	4b09      	ldr	r3, [pc, #36]	; (a568 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    a542:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    a544:	1ac3      	subs	r3, r0, r3
    a546:	111b      	asrs	r3, r3, #4
    a548:	3301      	adds	r3, #1
{
    a54a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    a54c:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    a54e:	6843      	ldr	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    a550:	4c06      	ldr	r4, [pc, #24]	; (a56c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    a552:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    a554:	2201      	movs	r2, #1
    a556:	715a      	strb	r2, [r3, #5]
    a558:	7822      	ldrb	r2, [r4, #0]
    a55a:	b912      	cbnz	r2, a562 <log_backend_enable+0x22>
    a55c:	4804      	ldr	r0, [pc, #16]	; (a570 <log_backend_enable+0x30>)
    a55e:	f005 fa3b 	bl	f9d8 <z_impl_k_sem_give>
	backend_attached = true;
    a562:	2301      	movs	r3, #1
    a564:	7023      	strb	r3, [r4, #0]
}
    a566:	bd10      	pop	{r4, pc}
    a568:	00012bf4 	.word	0x00012bf4
    a56c:	20001670 	.word	0x20001670
    a570:	20000304 	.word	0x20000304

0000a574 <log_init>:
{
    a574:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a576:	4b12      	ldr	r3, [pc, #72]	; (a5c0 <log_init+0x4c>)
    a578:	f3bf 8f5b 	dmb	ish
    a57c:	e853 5f00 	ldrex	r5, [r3]
    a580:	1c6a      	adds	r2, r5, #1
    a582:	e843 2100 	strex	r1, r2, [r3]
    a586:	2900      	cmp	r1, #0
    a588:	d1f8      	bne.n	a57c <log_init+0x8>
    a58a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    a58e:	b92d      	cbnz	r5, a59c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    a590:	4c0c      	ldr	r4, [pc, #48]	; (a5c4 <log_init+0x50>)
    a592:	4e0d      	ldr	r6, [pc, #52]	; (a5c8 <log_init+0x54>)
    a594:	1b36      	subs	r6, r6, r4
    a596:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    a598:	42b5      	cmp	r5, r6
    a59a:	db00      	blt.n	a59e <log_init+0x2a>
}
    a59c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    a59e:	7b23      	ldrb	r3, [r4, #12]
    a5a0:	b153      	cbz	r3, a5b8 <log_init+0x44>
			if (backend->api->init != NULL) {
    a5a2:	6823      	ldr	r3, [r4, #0]
    a5a4:	699b      	ldr	r3, [r3, #24]
    a5a6:	b10b      	cbz	r3, a5ac <log_init+0x38>
				backend->api->init(backend);
    a5a8:	4620      	mov	r0, r4
    a5aa:	4798      	blx	r3
			log_backend_enable(backend,
    a5ac:	6863      	ldr	r3, [r4, #4]
    a5ae:	2204      	movs	r2, #4
    a5b0:	6819      	ldr	r1, [r3, #0]
    a5b2:	4620      	mov	r0, r4
    a5b4:	f7ff ffc4 	bl	a540 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    a5b8:	3501      	adds	r5, #1
    a5ba:	3410      	adds	r4, #16
    a5bc:	e7ec      	b.n	a598 <log_init+0x24>
    a5be:	bf00      	nop
    a5c0:	20001368 	.word	0x20001368
    a5c4:	00012bf4 	.word	0x00012bf4
    a5c8:	00012c14 	.word	0x00012c14

0000a5cc <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    a5cc:	4b16      	ldr	r3, [pc, #88]	; (a628 <z_log_strdup+0x5c>)
    a5ce:	4298      	cmp	r0, r3
{
    a5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a5d2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    a5d4:	d302      	bcc.n	a5dc <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    a5d6:	4b15      	ldr	r3, [pc, #84]	; (a62c <z_log_strdup+0x60>)
    a5d8:	4298      	cmp	r0, r3
    a5da:	d320      	bcc.n	a61e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    a5dc:	4814      	ldr	r0, [pc, #80]	; (a630 <z_log_strdup+0x64>)
    a5de:	2200      	movs	r2, #0
    a5e0:	2300      	movs	r3, #0
    a5e2:	a901      	add	r1, sp, #4
    a5e4:	f004 fffe 	bl	f5e4 <k_mem_slab_alloc>
	if (err != 0) {
    a5e8:	4605      	mov	r5, r0
    a5ea:	b9d8      	cbnz	r0, a624 <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a5ec:	2201      	movs	r2, #1
    a5ee:	9b01      	ldr	r3, [sp, #4]
    a5f0:	f3bf 8f5b 	dmb	ish
    a5f4:	e853 1f00 	ldrex	r1, [r3]
    a5f8:	e843 2000 	strex	r0, r2, [r3]
    a5fc:	2800      	cmp	r0, #0
    a5fe:	d1f9      	bne.n	a5f4 <z_log_strdup+0x28>
    a600:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    a604:	9801      	ldr	r0, [sp, #4]
    a606:	4621      	mov	r1, r4
    a608:	2241      	movs	r2, #65	; 0x41
    a60a:	3004      	adds	r0, #4
    a60c:	f007 fa01 	bl	11a12 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    a610:	9c01      	ldr	r4, [sp, #4]
    a612:	237e      	movs	r3, #126	; 0x7e
    a614:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    a618:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
    a61c:	3404      	adds	r4, #4
}
    a61e:	4620      	mov	r0, r4
    a620:	b003      	add	sp, #12
    a622:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    a624:	4c03      	ldr	r4, [pc, #12]	; (a634 <z_log_strdup+0x68>)
    a626:	e7fa      	b.n	a61e <z_log_strdup+0x52>
    a628:	0001293c 	.word	0x0001293c
    a62c:	00013f18 	.word	0x00013f18
    a630:	20001374 	.word	0x20001374
    a634:	0001306b 	.word	0x0001306b

0000a638 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    a638:	b150      	cbz	r0, a650 <log_is_strdup+0x18>
    a63a:	4b06      	ldr	r3, [pc, #24]	; (a654 <log_is_strdup+0x1c>)
    a63c:	4298      	cmp	r0, r3
    a63e:	d306      	bcc.n	a64e <log_is_strdup+0x16>
    a640:	f503 7310 	add.w	r3, r3, #576	; 0x240
    a644:	4298      	cmp	r0, r3
    a646:	bf2c      	ite	cs
    a648:	2000      	movcs	r0, #0
    a64a:	2001      	movcc	r0, #1
    a64c:	4770      	bx	lr
    a64e:	2000      	movs	r0, #0
}
    a650:	4770      	bx	lr
    a652:	bf00      	nop
    a654:	20004a80 	.word	0x20004a80

0000a658 <z_impl_log_process>:
{
    a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    a65c:	4b46      	ldr	r3, [pc, #280]	; (a778 <z_impl_log_process+0x120>)
    a65e:	781b      	ldrb	r3, [r3, #0]
{
    a660:	b085      	sub	sp, #20
    a662:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    a664:	b903      	cbnz	r3, a668 <z_impl_log_process+0x10>
    a666:	b300      	cbz	r0, a6aa <z_impl_log_process+0x52>
	msg = get_msg();
    a668:	f7ff ff0c 	bl	a484 <get_msg>
	if (msg.msg) {
    a66c:	4605      	mov	r5, r0
    a66e:	b178      	cbz	r0, a690 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a670:	f3bf 8f5b 	dmb	ish
    a674:	4b41      	ldr	r3, [pc, #260]	; (a77c <z_impl_log_process+0x124>)
    a676:	e853 2f00 	ldrex	r2, [r3]
    a67a:	3a01      	subs	r2, #1
    a67c:	e843 2100 	strex	r1, r2, [r3]
    a680:	2900      	cmp	r1, #0
    a682:	d1f8      	bne.n	a676 <z_impl_log_process+0x1e>
    a684:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    a688:	b19c      	cbz	r4, a6b2 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
    a68a:	4628      	mov	r0, r5
    a68c:	f006 febc 	bl	11408 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    a690:	b92c      	cbnz	r4, a69e <z_impl_log_process+0x46>
	return dropped_cnt > 0;
    a692:	4b3b      	ldr	r3, [pc, #236]	; (a780 <z_impl_log_process+0x128>)
	if (!bypass && z_log_dropped_pending()) {
    a694:	681b      	ldr	r3, [r3, #0]
    a696:	2b00      	cmp	r3, #0
    a698:	dd01      	ble.n	a69e <z_impl_log_process+0x46>
		dropped_notify();
    a69a:	f7ff ff27 	bl	a4ec <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    a69e:	4839      	ldr	r0, [pc, #228]	; (a784 <z_impl_log_process+0x12c>)
    a6a0:	f006 fd8c 	bl	111bc <log_list_head_peek>
    a6a4:	1e04      	subs	r4, r0, #0
    a6a6:	bf18      	it	ne
    a6a8:	2401      	movne	r4, #1
}
    a6aa:	4620      	mov	r0, r4
    a6ac:	b005      	add	sp, #20
    a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    a6b2:	4b35      	ldr	r3, [pc, #212]	; (a788 <z_impl_log_process+0x130>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    a6b4:	781b      	ldrb	r3, [r3, #0]
    a6b6:	b9cb      	cbnz	r3, a6ec <z_impl_log_process+0x94>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    a6b8:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    a6ba:	07db      	lsls	r3, r3, #31
    a6bc:	d416      	bmi.n	a6ec <z_impl_log_process+0x94>
	msg_str = log_msg_str_get(msg);
    a6be:	f006 feb6 	bl	1142e <log_msg_str_get>
    a6c2:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    a6c4:	4628      	mov	r0, r5
    a6c6:	f006 fe7d 	bl	113c4 <log_msg_nargs_get>
    a6ca:	4601      	mov	r1, r0
    a6cc:	4640      	mov	r0, r8
    a6ce:	f006 fd8a 	bl	111e6 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    a6d2:	4f2e      	ldr	r7, [pc, #184]	; (a78c <z_impl_log_process+0x134>)
    a6d4:	4b2e      	ldr	r3, [pc, #184]	; (a790 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    a6d6:	f8df b0d4 	ldr.w	fp, [pc, #212]	; a7ac <z_impl_log_process+0x154>
    a6da:	1bdb      	subs	r3, r3, r7
    a6dc:	08db      	lsrs	r3, r3, #3
    a6de:	9303      	str	r3, [sp, #12]
    a6e0:	4b2c      	ldr	r3, [pc, #176]	; (a794 <z_impl_log_process+0x13c>)
    a6e2:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    a6e4:	4606      	mov	r6, r0
    a6e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    a6ea:	b936      	cbnz	r6, a6fa <z_impl_log_process+0xa2>
    a6ec:	4e2a      	ldr	r6, [pc, #168]	; (a798 <z_impl_log_process+0x140>)
    a6ee:	4f2b      	ldr	r7, [pc, #172]	; (a79c <z_impl_log_process+0x144>)
    a6f0:	1bbf      	subs	r7, r7, r6
    a6f2:	113f      	asrs	r7, r7, #4
    a6f4:	f04f 0800 	mov.w	r8, #0
    a6f8:	e03a      	b.n	a770 <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
    a6fa:	fab6 f186 	clz	r1, r6
    a6fe:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    a702:	4649      	mov	r1, r9
    a704:	4628      	mov	r0, r5
    a706:	f006 fe60 	bl	113ca <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    a70a:	4b25      	ldr	r3, [pc, #148]	; (a7a0 <z_impl_log_process+0x148>)
    a70c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    a70e:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    a710:	d302      	bcc.n	a718 <z_impl_log_process+0xc0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    a712:	4b24      	ldr	r3, [pc, #144]	; (a7a4 <z_impl_log_process+0x14c>)
    a714:	4298      	cmp	r0, r3
    a716:	d31a      	bcc.n	a74e <z_impl_log_process+0xf6>
    a718:	4608      	mov	r0, r1
    a71a:	f7ff ff8d 	bl	a638 <log_is_strdup>
    a71e:	4602      	mov	r2, r0
    a720:	b9a8      	cbnz	r0, a74e <z_impl_log_process+0xf6>
    a722:	4b21      	ldr	r3, [pc, #132]	; (a7a8 <z_impl_log_process+0x150>)
    a724:	4299      	cmp	r1, r3
    a726:	d012      	beq.n	a74e <z_impl_log_process+0xf6>
	return msg->hdr.ids.source_id;
    a728:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    a72a:	9903      	ldr	r1, [sp, #12]
    a72c:	f3c3 1389 	ubfx	r3, r3, #6, #10
    a730:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    a732:	bf38      	it	cc
    a734:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    a738:	ea4f 138a 	mov.w	r3, sl, lsl #6
    a73c:	f043 0301 	orr.w	r3, r3, #1
    a740:	f8ad 3000 	strh.w	r3, [sp]
    a744:	4649      	mov	r1, r9
    a746:	4643      	mov	r3, r8
    a748:	4658      	mov	r0, fp
    a74a:	f006 fda6 	bl	1129a <log_3>
		mask &= ~BIT(idx);
    a74e:	2101      	movs	r1, #1
    a750:	fa01 f109 	lsl.w	r1, r1, r9
    a754:	ea26 0601 	bic.w	r6, r6, r1
    a758:	e7c7      	b.n	a6ea <z_impl_log_process+0x92>
	return backend->cb->active;
    a75a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    a75c:	795b      	ldrb	r3, [r3, #5]
    a75e:	b123      	cbz	r3, a76a <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
    a760:	6833      	ldr	r3, [r6, #0]
    a762:	4629      	mov	r1, r5
    a764:	685b      	ldr	r3, [r3, #4]
    a766:	4630      	mov	r0, r6
    a768:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    a76a:	f108 0801 	add.w	r8, r8, #1
    a76e:	3610      	adds	r6, #16
    a770:	45b8      	cmp	r8, r7
    a772:	dbf2      	blt.n	a75a <z_impl_log_process+0x102>
    a774:	e789      	b.n	a68a <z_impl_log_process+0x32>
    a776:	bf00      	nop
    a778:	20001670 	.word	0x20001670
    a77c:	20001360 	.word	0x20001360
    a780:	20001364 	.word	0x20001364
    a784:	2000136c 	.word	0x2000136c
    a788:	20001671 	.word	0x20001671
    a78c:	00012b64 	.word	0x00012b64
    a790:	00012bf4 	.word	0x00012bf4
    a794:	00012b9c 	.word	0x00012b9c
    a798:	00012bf4 	.word	0x00012bf4
    a79c:	00012c14 	.word	0x00012c14
    a7a0:	0001293c 	.word	0x0001293c
    a7a4:	00013f18 	.word	0x00013f18
    a7a8:	0001306b 	.word	0x0001306b
    a7ac:	00013085 	.word	0x00013085

0000a7b0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    a7b0:	4b29      	ldr	r3, [pc, #164]	; (a858 <msg_finalize+0xa8>)
{
    a7b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    a7b4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    a7b6:	8141      	strh	r1, [r0, #10]
{
    a7b8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    a7ba:	4798      	blx	r3
    a7bc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a7be:	f04f 0340 	mov.w	r3, #64	; 0x40
    a7c2:	f3ef 8511 	mrs	r5, BASEPRI
    a7c6:	f383 8811 	msr	BASEPRI, r3
    a7ca:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    a7ce:	4823      	ldr	r0, [pc, #140]	; (a85c <msg_finalize+0xac>)
    a7d0:	4621      	mov	r1, r4
    a7d2:	f006 fce9 	bl	111a8 <log_list_add_tail>
	__asm__ volatile(
    a7d6:	f385 8811 	msr	BASEPRI, r5
    a7da:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a7de:	f3bf 8f5b 	dmb	ish
    a7e2:	4b1f      	ldr	r3, [pc, #124]	; (a860 <msg_finalize+0xb0>)
    a7e4:	e853 2f00 	ldrex	r2, [r3]
    a7e8:	3201      	adds	r2, #1
    a7ea:	e843 2100 	strex	r1, r2, [r3]
    a7ee:	2900      	cmp	r1, #0
    a7f0:	d1f8      	bne.n	a7e4 <msg_finalize+0x34>
    a7f2:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    a7f6:	4a1b      	ldr	r2, [pc, #108]	; (a864 <msg_finalize+0xb4>)
    a7f8:	7812      	ldrb	r2, [r2, #0]
    a7fa:	b182      	cbz	r2, a81e <msg_finalize+0x6e>
	__asm__ volatile(
    a7fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    a800:	f3ef 8411 	mrs	r4, BASEPRI
    a804:	f383 8811 	msr	BASEPRI, r3
    a808:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    a80c:	2000      	movs	r0, #0
    a80e:	f7ff ff23 	bl	a658 <z_impl_log_process>
	__asm__ volatile(
    a812:	f384 8811 	msr	BASEPRI, r4
    a816:	f3bf 8f6f 	isb	sy
}
    a81a:	b003      	add	sp, #12
    a81c:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    a81e:	4a12      	ldr	r2, [pc, #72]	; (a868 <msg_finalize+0xb8>)
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	6812      	ldr	r2, [r2, #0]
    a824:	2a00      	cmp	r2, #0
    a826:	d0f8      	beq.n	a81a <msg_finalize+0x6a>
    a828:	2b01      	cmp	r3, #1
    a82a:	d10a      	bne.n	a842 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    a82c:	2200      	movs	r2, #0
    a82e:	2300      	movs	r3, #0
    a830:	e9cd 2300 	strd	r2, r3, [sp]
    a834:	480d      	ldr	r0, [pc, #52]	; (a86c <msg_finalize+0xbc>)
    a836:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    a83a:	2300      	movs	r3, #0
    a83c:	f005 ff66 	bl	1070c <z_impl_k_timer_start>
    a840:	e7eb      	b.n	a81a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    a842:	2b0a      	cmp	r3, #10
    a844:	d1e9      	bne.n	a81a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    a846:	4809      	ldr	r0, [pc, #36]	; (a86c <msg_finalize+0xbc>)
    a848:	f007 ff0b 	bl	12662 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    a84c:	4808      	ldr	r0, [pc, #32]	; (a870 <msg_finalize+0xc0>)
}
    a84e:	b003      	add	sp, #12
    a850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    a854:	f005 b8c0 	b.w	f9d8 <z_impl_k_sem_give>
    a858:	2000027c 	.word	0x2000027c
    a85c:	2000136c 	.word	0x2000136c
    a860:	20001360 	.word	0x20001360
    a864:	20001671 	.word	0x20001671
    a868:	20001390 	.word	0x20001390
    a86c:	20000f00 	.word	0x20000f00
    a870:	20000304 	.word	0x20000304

0000a874 <log_process_thread_func>:
{
    a874:	b510      	push	{r4, lr}
	log_init();
    a876:	f7ff fe7d 	bl	a574 <log_init>
	return z_impl_k_current_get();
    a87a:	f005 fd2d 	bl	102d8 <z_impl_k_current_get>
	proc_tid = process_tid;
    a87e:	4b0c      	ldr	r3, [pc, #48]	; (a8b0 <log_process_thread_func+0x3c>)
    a880:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    a882:	b130      	cbz	r0, a892 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    a884:	4b0b      	ldr	r3, [pc, #44]	; (a8b4 <log_process_thread_func+0x40>)
	    process_tid &&
    a886:	681b      	ldr	r3, [r3, #0]
    a888:	2b09      	cmp	r3, #9
    a88a:	dd02      	ble.n	a892 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    a88c:	480a      	ldr	r0, [pc, #40]	; (a8b8 <log_process_thread_func+0x44>)
    a88e:	f005 f8a3 	bl	f9d8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    a892:	4c09      	ldr	r4, [pc, #36]	; (a8b8 <log_process_thread_func+0x44>)
    a894:	2000      	movs	r0, #0
    a896:	f7ff fedf 	bl	a658 <z_impl_log_process>
		if (log_process(false) == false) {
    a89a:	2800      	cmp	r0, #0
    a89c:	d1fa      	bne.n	a894 <log_process_thread_func+0x20>
    a89e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a8a6:	4620      	mov	r0, r4
    a8a8:	f005 f8bc 	bl	fa24 <z_impl_k_sem_take>
    a8ac:	e7f2      	b.n	a894 <log_process_thread_func+0x20>
    a8ae:	bf00      	nop
    a8b0:	20001390 	.word	0x20001390
    a8b4:	20001360 	.word	0x20001360
    a8b8:	20000304 	.word	0x20000304

0000a8bc <z_impl_log_panic>:
{
    a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    a8be:	4f0e      	ldr	r7, [pc, #56]	; (a8f8 <z_impl_log_panic+0x3c>)
    a8c0:	783d      	ldrb	r5, [r7, #0]
    a8c2:	b975      	cbnz	r5, a8e2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    a8c4:	4c0d      	ldr	r4, [pc, #52]	; (a8fc <z_impl_log_panic+0x40>)
    a8c6:	4e0e      	ldr	r6, [pc, #56]	; (a900 <z_impl_log_panic+0x44>)
	log_init();
    a8c8:	f7ff fe54 	bl	a574 <log_init>
    a8cc:	1b36      	subs	r6, r6, r4
    a8ce:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    a8d0:	42b5      	cmp	r5, r6
    a8d2:	db07      	blt.n	a8e4 <z_impl_log_panic+0x28>
    a8d4:	2000      	movs	r0, #0
    a8d6:	f7ff febf 	bl	a658 <z_impl_log_process>
		while (log_process(false) == true) {
    a8da:	2800      	cmp	r0, #0
    a8dc:	d1fa      	bne.n	a8d4 <z_impl_log_panic+0x18>
	panic_mode = true;
    a8de:	2301      	movs	r3, #1
    a8e0:	703b      	strb	r3, [r7, #0]
}
    a8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    a8e4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a8e6:	795b      	ldrb	r3, [r3, #5]
    a8e8:	b11b      	cbz	r3, a8f2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    a8ea:	6823      	ldr	r3, [r4, #0]
    a8ec:	4620      	mov	r0, r4
    a8ee:	695b      	ldr	r3, [r3, #20]
    a8f0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    a8f2:	3501      	adds	r5, #1
    a8f4:	3410      	adds	r4, #16
    a8f6:	e7eb      	b.n	a8d0 <z_impl_log_panic+0x14>
    a8f8:	20001671 	.word	0x20001671
    a8fc:	00012bf4 	.word	0x00012bf4
    a900:	00012c14 	.word	0x00012c14

0000a904 <log_free>:
{
    a904:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    a906:	3804      	subs	r0, #4
    a908:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a90a:	f3bf 8f5b 	dmb	ish
    a90e:	e850 3f00 	ldrex	r3, [r0]
    a912:	1e5a      	subs	r2, r3, #1
    a914:	e840 2100 	strex	r1, r2, [r0]
    a918:	2900      	cmp	r1, #0
    a91a:	d1f8      	bne.n	a90e <log_free+0xa>
    a91c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    a920:	2b01      	cmp	r3, #1
    a922:	d103      	bne.n	a92c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    a924:	4803      	ldr	r0, [pc, #12]	; (a934 <log_free+0x30>)
    a926:	a901      	add	r1, sp, #4
    a928:	f007 fbdf 	bl	120ea <k_mem_slab_free>
}
    a92c:	b003      	add	sp, #12
    a92e:	f85d fb04 	ldr.w	pc, [sp], #4
    a932:	bf00      	nop
    a934:	20001374 	.word	0x20001374

0000a938 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    a938:	2320      	movs	r3, #32
    a93a:	4902      	ldr	r1, [pc, #8]	; (a944 <log_msg_pool_init+0xc>)
    a93c:	4802      	ldr	r0, [pc, #8]	; (a948 <log_msg_pool_init+0x10>)
    a93e:	461a      	mov	r2, r3
    a940:	f007 bbb8 	b.w	120b4 <k_mem_slab_init>
    a944:	20004cc0 	.word	0x20004cc0
    a948:	20001394 	.word	0x20001394

0000a94c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    a94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    a94e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    a950:	4d09      	ldr	r5, [pc, #36]	; (a978 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    a952:	9301      	str	r3, [sp, #4]
    a954:	2001      	movs	r0, #1
    a956:	f7ff fe7f 	bl	a658 <z_impl_log_process>
    a95a:	4604      	mov	r4, r0
			z_log_dropped();
    a95c:	f7ff fda6 	bl	a4ac <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    a960:	2200      	movs	r2, #0
    a962:	2300      	movs	r3, #0
    a964:	a901      	add	r1, sp, #4
    a966:	4628      	mov	r0, r5
    a968:	f004 fe3c 	bl	f5e4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    a96c:	b108      	cbz	r0, a972 <log_msg_no_space_handle+0x26>
    a96e:	2c00      	cmp	r4, #0
    a970:	d1f0      	bne.n	a954 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    a972:	9801      	ldr	r0, [sp, #4]
    a974:	b003      	add	sp, #12
    a976:	bd30      	pop	{r4, r5, pc}
    a978:	20001394 	.word	0x20001394

0000a97c <log_msg_chunk_alloc>:
{
    a97c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    a97e:	2300      	movs	r3, #0
    a980:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    a982:	4807      	ldr	r0, [pc, #28]	; (a9a0 <log_msg_chunk_alloc+0x24>)
    a984:	2200      	movs	r2, #0
    a986:	2300      	movs	r3, #0
    a988:	a901      	add	r1, sp, #4
    a98a:	f004 fe2b 	bl	f5e4 <k_mem_slab_alloc>
	if (err != 0) {
    a98e:	b110      	cbz	r0, a996 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    a990:	f7ff ffdc 	bl	a94c <log_msg_no_space_handle>
    a994:	9001      	str	r0, [sp, #4]
}
    a996:	9801      	ldr	r0, [sp, #4]
    a998:	b003      	add	sp, #12
    a99a:	f85d fb04 	ldr.w	pc, [sp], #4
    a99e:	bf00      	nop
    a9a0:	20001394 	.word	0x20001394

0000a9a4 <msg_free>:
{
    a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    a9a6:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    a9a8:	7a45      	ldrb	r5, [r0, #9]
{
    a9aa:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    a9ac:	092d      	lsrs	r5, r5, #4
{
    a9ae:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    a9b0:	07d8      	lsls	r0, r3, #31
    a9b2:	d41c      	bmi.n	a9ee <msg_free+0x4a>
    a9b4:	b1dd      	cbz	r5, a9ee <msg_free+0x4a>
		uint32_t smask = 0U;
    a9b6:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    a9b8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    a9ba:	9801      	ldr	r0, [sp, #4]
    a9bc:	4631      	mov	r1, r6
    a9be:	f006 fd04 	bl	113ca <log_msg_arg_get>
    a9c2:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    a9c4:	f7ff fe38 	bl	a638 <log_is_strdup>
    a9c8:	b170      	cbz	r0, a9e8 <msg_free+0x44>
				if (smask == 0U) {
    a9ca:	b934      	cbnz	r4, a9da <msg_free+0x36>
					smask = z_log_get_s_mask(
    a9cc:	9b01      	ldr	r3, [sp, #4]
    a9ce:	4629      	mov	r1, r5
    a9d0:	6918      	ldr	r0, [r3, #16]
    a9d2:	f006 fc08 	bl	111e6 <z_log_get_s_mask>
					if (smask == 0U) {
    a9d6:	4604      	mov	r4, r0
    a9d8:	b148      	cbz	r0, a9ee <msg_free+0x4a>
				if (smask & BIT(i)) {
    a9da:	fa24 f306 	lsr.w	r3, r4, r6
    a9de:	07d9      	lsls	r1, r3, #31
    a9e0:	d502      	bpl.n	a9e8 <msg_free+0x44>
					log_free(buf);
    a9e2:	4638      	mov	r0, r7
    a9e4:	f7ff ff8e 	bl	a904 <log_free>
		for (i = 0U; i < nargs; i++) {
    a9e8:	3601      	adds	r6, #1
    a9ea:	42ae      	cmp	r6, r5
    a9ec:	d3e5      	bcc.n	a9ba <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    a9ee:	9b01      	ldr	r3, [sp, #4]
    a9f0:	7a1a      	ldrb	r2, [r3, #8]
    a9f2:	0792      	lsls	r2, r2, #30
    a9f4:	d504      	bpl.n	aa00 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    a9f6:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    a9f8:	4c08      	ldr	r4, [pc, #32]	; (aa1c <msg_free+0x78>)
    a9fa:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    a9fc:	9b03      	ldr	r3, [sp, #12]
    a9fe:	b92b      	cbnz	r3, aa0c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    aa00:	4806      	ldr	r0, [pc, #24]	; (aa1c <msg_free+0x78>)
    aa02:	a901      	add	r1, sp, #4
    aa04:	f007 fb71 	bl	120ea <k_mem_slab_free>
}
    aa08:	b005      	add	sp, #20
    aa0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    aa0c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    aa0e:	a903      	add	r1, sp, #12
    aa10:	4620      	mov	r0, r4
    aa12:	f007 fb6a 	bl	120ea <k_mem_slab_free>
		cont = next;
    aa16:	9503      	str	r5, [sp, #12]
    aa18:	e7f0      	b.n	a9fc <msg_free+0x58>
    aa1a:	bf00      	nop
    aa1c:	20001394 	.word	0x20001394

0000aa20 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    aa20:	b40e      	push	{r1, r2, r3}
    aa22:	b503      	push	{r0, r1, lr}
    aa24:	ab03      	add	r3, sp, #12
    aa26:	4601      	mov	r1, r0
    aa28:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    aa2c:	4804      	ldr	r0, [pc, #16]	; (aa40 <print_formatted+0x20>)
	va_start(args, fmt);
    aa2e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    aa30:	f7ff f910 	bl	9c54 <cbvprintf>
	va_end(args);

	return length;
}
    aa34:	b002      	add	sp, #8
    aa36:	f85d eb04 	ldr.w	lr, [sp], #4
    aa3a:	b003      	add	sp, #12
    aa3c:	4770      	bx	lr
    aa3e:	bf00      	nop
    aa40:	0001187d 	.word	0x0001187d

0000aa44 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa48:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    aa4a:	f011 0602 	ands.w	r6, r1, #2
{
    aa4e:	9205      	str	r2, [sp, #20]
    aa50:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    aa54:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    aa58:	4607      	mov	r7, r0
    aa5a:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    aa5c:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    aa60:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    aa64:	d006      	beq.n	aa74 <prefix_print+0x30>
	if (!format) {
    aa66:	f011 0f44 	tst.w	r1, #68	; 0x44
    aa6a:	d138      	bne.n	aade <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    aa6c:	4932      	ldr	r1, [pc, #200]	; (ab38 <prefix_print+0xf4>)
    aa6e:	f7ff ffd7 	bl	aa20 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    aa72:	4606      	mov	r6, r0
	if (color) {
    aa74:	f1ba 0f00 	cmp.w	sl, #0
    aa78:	d00a      	beq.n	aa90 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    aa7a:	4b30      	ldr	r3, [pc, #192]	; (ab3c <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
    aa7c:	4930      	ldr	r1, [pc, #192]	; (ab40 <prefix_print+0xfc>)
		const char *log_color = start && (colors[level] != NULL) ?
    aa7e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    aa82:	4b30      	ldr	r3, [pc, #192]	; (ab44 <prefix_print+0x100>)
    aa84:	4638      	mov	r0, r7
    aa86:	2a00      	cmp	r2, #0
    aa88:	bf08      	it	eq
    aa8a:	461a      	moveq	r2, r3
    aa8c:	f7ff ffc8 	bl	aa20 <print_formatted>
	if (level_on) {
    aa90:	b13d      	cbz	r5, aaa2 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    aa92:	4b2d      	ldr	r3, [pc, #180]	; (ab48 <prefix_print+0x104>)
    aa94:	492d      	ldr	r1, [pc, #180]	; (ab4c <prefix_print+0x108>)
    aa96:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    aa9a:	4638      	mov	r0, r7
    aa9c:	f7ff ffc0 	bl	aa20 <print_formatted>
    aaa0:	4605      	mov	r5, r0
	if (source_id >= 0) {
    aaa2:	f1b9 0f00 	cmp.w	r9, #0
    aaa6:	db16      	blt.n	aad6 <prefix_print+0x92>
		total += print_formatted(output,
    aaa8:	9b05      	ldr	r3, [sp, #20]
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d041      	beq.n	ab32 <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    aaae:	2301      	movs	r3, #1
    aab0:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    aab4:	4b26      	ldr	r3, [pc, #152]	; (ab50 <prefix_print+0x10c>)
    aab6:	4c27      	ldr	r4, [pc, #156]	; (ab54 <prefix_print+0x110>)
    aab8:	f018 0f10 	tst.w	r8, #16
    aabc:	bf18      	it	ne
    aabe:	461c      	movne	r4, r3
    aac0:	4649      	mov	r1, r9
    aac2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    aac6:	f7ff fd2d 	bl	a524 <log_source_name_get>
    aaca:	4621      	mov	r1, r4
    aacc:	4602      	mov	r2, r0
    aace:	4638      	mov	r0, r7
    aad0:	f7ff ffa6 	bl	aa20 <print_formatted>
    aad4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    aad6:	19a8      	adds	r0, r5, r6
    aad8:	b007      	add	sp, #28
    aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    aade:	4b1e      	ldr	r3, [pc, #120]	; (ab58 <prefix_print+0x114>)
    aae0:	6819      	ldr	r1, [r3, #0]
    aae2:	b321      	cbz	r1, ab2e <prefix_print+0xea>
		timestamp /= timestamp_div;
    aae4:	4b1d      	ldr	r3, [pc, #116]	; (ab5c <prefix_print+0x118>)
    aae6:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    aaf0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    aaf4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    aaf8:	fbb4 f2fc 	udiv	r2, r4, ip
    aafc:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    ab00:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    ab04:	4374      	muls	r4, r6
		mins = seconds / 60U;
    ab06:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ab0a:	fbb4 fbf1 	udiv	fp, r4, r1
    ab0e:	fb01 441b 	mls	r4, r1, fp, r4
    ab12:	4374      	muls	r4, r6
		mins = seconds / 60U;
    ab14:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ab18:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    ab1c:	e9cd b101 	strd	fp, r1, [sp, #4]
    ab20:	fb0e c113 	mls	r1, lr, r3, ip
    ab24:	9100      	str	r1, [sp, #0]
    ab26:	490e      	ldr	r1, [pc, #56]	; (ab60 <prefix_print+0x11c>)
    ab28:	f7ff ff7a 	bl	aa20 <print_formatted>
    ab2c:	e7a1      	b.n	aa72 <prefix_print+0x2e>
		length = 0;
    ab2e:	4608      	mov	r0, r1
    ab30:	e79f      	b.n	aa72 <prefix_print+0x2e>
		total += print_formatted(output,
    ab32:	4c08      	ldr	r4, [pc, #32]	; (ab54 <prefix_print+0x110>)
    ab34:	e7c4      	b.n	aac0 <prefix_print+0x7c>
    ab36:	bf00      	nop
    ab38:	000130d6 	.word	0x000130d6
    ab3c:	00012d40 	.word	0x00012d40
    ab40:	00013a61 	.word	0x00013a61
    ab44:	000130c8 	.word	0x000130c8
    ab48:	00012d54 	.word	0x00012d54
    ab4c:	000130fb 	.word	0x000130fb
    ab50:	000130d2 	.word	0x000130d2
    ab54:	000130cd 	.word	0x000130cd
    ab58:	200013b0 	.word	0x200013b0
    ab5c:	200013b4 	.word	0x200013b4
    ab60:	000130df 	.word	0x000130df

0000ab64 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    ab64:	b538      	push	{r3, r4, r5, lr}
    ab66:	460c      	mov	r4, r1
	if (color) {
    ab68:	07e1      	lsls	r1, r4, #31
{
    ab6a:	4605      	mov	r5, r0
	if (color) {
    ab6c:	d503      	bpl.n	ab76 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    ab6e:	4a08      	ldr	r2, [pc, #32]	; (ab90 <postfix_print+0x2c>)
    ab70:	4908      	ldr	r1, [pc, #32]	; (ab94 <postfix_print+0x30>)
    ab72:	f7ff ff55 	bl	aa20 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ab76:	06e2      	lsls	r2, r4, #27
    ab78:	d408      	bmi.n	ab8c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ab7a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    ab7c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    ab7e:	bf4c      	ite	mi
    ab80:	4905      	ldrmi	r1, [pc, #20]	; (ab98 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    ab82:	4906      	ldrpl	r1, [pc, #24]	; (ab9c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    ab84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    ab88:	f7ff bf4a 	b.w	aa20 <print_formatted>
}
    ab8c:	bd38      	pop	{r3, r4, r5, pc}
    ab8e:	bf00      	nop
    ab90:	000130c8 	.word	0x000130c8
    ab94:	00013a61 	.word	0x00013a61
    ab98:	00013102 	.word	0x00013102
    ab9c:	00013101 	.word	0x00013101

0000aba0 <hexdump_line_print>:
{
    aba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aba4:	461d      	mov	r5, r3
    aba6:	9b08      	ldr	r3, [sp, #32]
    aba8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    abaa:	06da      	lsls	r2, r3, #27
{
    abac:	4604      	mov	r4, r0
    abae:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    abb0:	d405      	bmi.n	abbe <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    abb2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    abb4:	bf4c      	ite	mi
    abb6:	492a      	ldrmi	r1, [pc, #168]	; (ac60 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    abb8:	492a      	ldrpl	r1, [pc, #168]	; (ac64 <hexdump_line_print+0xc4>)
    abba:	f7ff ff31 	bl	aa20 <print_formatted>
		print_formatted(output, " ");
    abbe:	f8df 90ac 	ldr.w	r9, [pc, #172]	; ac6c <hexdump_line_print+0xcc>
{
    abc2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    abc6:	45a8      	cmp	r8, r5
    abc8:	db2a      	blt.n	ac20 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    abca:	f8df 80a4 	ldr.w	r8, [pc, #164]	; ac70 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    abce:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ac74 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    abd2:	f8df a098 	ldr.w	sl, [pc, #152]	; ac6c <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    abd6:	2500      	movs	r5, #0
		if (i < length) {
    abd8:	42bd      	cmp	r5, r7
    abda:	d22f      	bcs.n	ac3c <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    abdc:	5d72      	ldrb	r2, [r6, r5]
    abde:	4649      	mov	r1, r9
    abe0:	4620      	mov	r0, r4
    abe2:	f7ff ff1d 	bl	aa20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    abe6:	3501      	adds	r5, #1
    abe8:	2d10      	cmp	r5, #16
    abea:	d120      	bne.n	ac2e <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    abec:	491e      	ldr	r1, [pc, #120]	; (ac68 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
    abee:	f8df 807c 	ldr.w	r8, [pc, #124]	; ac6c <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
    abf2:	f8df 9084 	ldr.w	r9, [pc, #132]	; ac78 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    abf6:	4620      	mov	r0, r4
    abf8:	f7ff ff12 	bl	aa20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    abfc:	2500      	movs	r5, #0
		if (i < length) {
    abfe:	42af      	cmp	r7, r5
    ac00:	d928      	bls.n	ac54 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    ac02:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    ac04:	f1a2 0320 	sub.w	r3, r2, #32
    ac08:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    ac0a:	bf28      	it	cs
    ac0c:	222e      	movcs	r2, #46	; 0x2e
    ac0e:	4649      	mov	r1, r9
    ac10:	4620      	mov	r0, r4
    ac12:	f7ff ff05 	bl	aa20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ac16:	3501      	adds	r5, #1
    ac18:	2d10      	cmp	r5, #16
    ac1a:	d114      	bne.n	ac46 <hexdump_line_print+0xa6>
}
    ac1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    ac20:	4649      	mov	r1, r9
    ac22:	4620      	mov	r0, r4
    ac24:	f7ff fefc 	bl	aa20 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ac28:	f108 0801 	add.w	r8, r8, #1
    ac2c:	e7cb      	b.n	abc6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    ac2e:	076a      	lsls	r2, r5, #29
    ac30:	d1d2      	bne.n	abd8 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    ac32:	4651      	mov	r1, sl
    ac34:	4620      	mov	r0, r4
    ac36:	f7ff fef3 	bl	aa20 <print_formatted>
    ac3a:	e7cd      	b.n	abd8 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    ac3c:	4641      	mov	r1, r8
    ac3e:	4620      	mov	r0, r4
    ac40:	f7ff feee 	bl	aa20 <print_formatted>
    ac44:	e7cf      	b.n	abe6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    ac46:	076b      	lsls	r3, r5, #29
    ac48:	d1d9      	bne.n	abfe <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    ac4a:	4641      	mov	r1, r8
    ac4c:	4620      	mov	r0, r4
    ac4e:	f7ff fee7 	bl	aa20 <print_formatted>
    ac52:	e7d4      	b.n	abfe <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    ac54:	4641      	mov	r1, r8
    ac56:	4620      	mov	r0, r4
    ac58:	f7ff fee2 	bl	aa20 <print_formatted>
    ac5c:	e7db      	b.n	ac16 <hexdump_line_print+0x76>
    ac5e:	bf00      	nop
    ac60:	00013102 	.word	0x00013102
    ac64:	00013101 	.word	0x00013101
    ac68:	0001310e 	.word	0x0001310e
    ac6c:	0001310c 	.word	0x0001310c
    ac70:	0001310a 	.word	0x0001310a
    ac74:	00013104 	.word	0x00013104
    ac78:	00013110 	.word	0x00013110

0000ac7c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    ac7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    ac80:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    ac82:	f013 0807 	ands.w	r8, r3, #7
{
    ac86:	4617      	mov	r7, r2
    ac88:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ac8a:	7a0a      	ldrb	r2, [r1, #8]
    ac8c:	4605      	mov	r5, r0
    ac8e:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    ac90:	d021      	beq.n	acd6 <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    ac92:	8949      	ldrh	r1, [r1, #10]
    ac94:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ac98:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ac9c:	43d2      	mvns	r2, r2
    ac9e:	e9cd 8300 	strd	r8, r3, [sp]
    aca2:	9102      	str	r1, [sp, #8]
    aca4:	68f3      	ldr	r3, [r6, #12]
    aca6:	f002 0201 	and.w	r2, r2, #1
    acaa:	4639      	mov	r1, r7
    acac:	f7ff feca 	bl	aa44 <prefix_print>
    acb0:	4681      	mov	r9, r0
    acb2:	7a34      	ldrb	r4, [r6, #8]
    acb4:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    acb6:	f014 0401 	ands.w	r4, r4, #1
    acba:	d00e      	beq.n	acda <log_output_msg_process+0x5e>
		std_print(msg, output);
    acbc:	4629      	mov	r1, r5
    acbe:	4630      	mov	r0, r6
    acc0:	f006 fc72 	bl	115a8 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    acc4:	f1b8 0f00 	cmp.w	r8, #0
    acc8:	d02b      	beq.n	ad22 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    acca:	4642      	mov	r2, r8
    accc:	4639      	mov	r1, r7
    acce:	4628      	mov	r0, r5
    acd0:	f7ff ff48 	bl	ab64 <postfix_print>
    acd4:	e025      	b.n	ad22 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    acd6:	46c1      	mov	r9, r8
    acd8:	e7eb      	b.n	acb2 <log_output_msg_process+0x36>
	} else if (raw_string) {
    acda:	f1b8 0f00 	cmp.w	r8, #0
    acde:	d126      	bne.n	ad2e <log_output_msg_process+0xb2>
	size_t offset = 0;
    ace0:	4627      	mov	r7, r4
		length = output->size;
    ace2:	68eb      	ldr	r3, [r5, #12]
    ace4:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    ace6:	aa06      	add	r2, sp, #24
    ace8:	463b      	mov	r3, r7
    acea:	68a9      	ldr	r1, [r5, #8]
    acec:	4630      	mov	r0, r6
    acee:	f006 fc47 	bl	11580 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    acf2:	9a06      	ldr	r2, [sp, #24]
    acf4:	686b      	ldr	r3, [r5, #4]
    acf6:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    acf8:	b13a      	cbz	r2, ad0a <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    acfa:	68ab      	ldr	r3, [r5, #8]
    acfc:	4413      	add	r3, r2
    acfe:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    ad02:	f1a4 030a 	sub.w	r3, r4, #10
    ad06:	425c      	negs	r4, r3
    ad08:	415c      	adcs	r4, r3
		log_output_flush(output);
    ad0a:	4628      	mov	r0, r5
    ad0c:	f006 fda9 	bl	11862 <log_output_flush>
		offset += length;
    ad10:	9b06      	ldr	r3, [sp, #24]
    ad12:	441f      	add	r7, r3
	} while (length > 0);
    ad14:	2b00      	cmp	r3, #0
    ad16:	d1e4      	bne.n	ace2 <log_output_msg_process+0x66>
	if (eol) {
    ad18:	b11c      	cbz	r4, ad22 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    ad1a:	4914      	ldr	r1, [pc, #80]	; (ad6c <log_output_msg_process+0xf0>)
    ad1c:	4628      	mov	r0, r5
    ad1e:	f7ff fe7f 	bl	aa20 <print_formatted>
	}

	log_output_flush(output);
    ad22:	4628      	mov	r0, r5
    ad24:	f006 fd9d 	bl	11862 <log_output_flush>
}
    ad28:	b00a      	add	sp, #40	; 0x28
    ad2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    ad2e:	4630      	mov	r0, r6
    ad30:	f006 fb7d 	bl	1142e <log_msg_str_get>
    ad34:	490e      	ldr	r1, [pc, #56]	; (ad70 <log_output_msg_process+0xf4>)
    ad36:	4602      	mov	r2, r0
    ad38:	4628      	mov	r0, r5
    ad3a:	f7ff fe71 	bl	aa20 <print_formatted>
		length = sizeof(buf);
    ad3e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    ad42:	aa05      	add	r2, sp, #20
    ad44:	4623      	mov	r3, r4
    ad46:	a906      	add	r1, sp, #24
    ad48:	4630      	mov	r0, r6
		length = sizeof(buf);
    ad4a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    ad4e:	f006 fc17 	bl	11580 <log_msg_hexdump_data_get>
		if (length) {
    ad52:	9a05      	ldr	r2, [sp, #20]
    ad54:	2a00      	cmp	r2, #0
    ad56:	d0b8      	beq.n	acca <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    ad58:	464b      	mov	r3, r9
    ad5a:	9700      	str	r7, [sp, #0]
    ad5c:	a906      	add	r1, sp, #24
    ad5e:	4628      	mov	r0, r5
    ad60:	f7ff ff1e 	bl	aba0 <hexdump_line_print>
			offset += length;
    ad64:	9b05      	ldr	r3, [sp, #20]
    ad66:	441c      	add	r4, r3
		length = sizeof(buf);
    ad68:	e7eb      	b.n	ad42 <log_output_msg_process+0xc6>
    ad6a:	bf00      	nop
    ad6c:	00013113 	.word	0x00013113
    ad70:	00013a61 	.word	0x00013a61

0000ad74 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    ad74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ad76:	f242 730f 	movw	r3, #9999	; 0x270f
    ad7a:	428b      	cmp	r3, r1
    ad7c:	bf28      	it	cs
    ad7e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ad80:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ad82:	4a0f      	ldr	r2, [pc, #60]	; (adc0 <log_output_dropped_process+0x4c>)
{
    ad84:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ad86:	2105      	movs	r1, #5
    ad88:	4668      	mov	r0, sp
    ad8a:	f005 fe39 	bl	10a00 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ad8e:	6863      	ldr	r3, [r4, #4]
    ad90:	490c      	ldr	r1, [pc, #48]	; (adc4 <log_output_dropped_process+0x50>)
    ad92:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ad94:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ad96:	220b      	movs	r2, #11
    ad98:	4628      	mov	r0, r5
    ad9a:	f006 fbf8 	bl	1158e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ad9e:	6863      	ldr	r3, [r4, #4]
    ada0:	4632      	mov	r2, r6
    ada2:	4669      	mov	r1, sp
    ada4:	4628      	mov	r0, r5
    ada6:	685b      	ldr	r3, [r3, #4]
    ada8:	f006 fbf1 	bl	1158e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    adac:	6863      	ldr	r3, [r4, #4]
    adae:	4906      	ldr	r1, [pc, #24]	; (adc8 <log_output_dropped_process+0x54>)
    adb0:	685b      	ldr	r3, [r3, #4]
    adb2:	221b      	movs	r2, #27
    adb4:	4628      	mov	r0, r5
    adb6:	f006 fbea 	bl	1158e <buffer_write>
		     output->control_block->ctx);
}
    adba:	b002      	add	sp, #8
    adbc:	bd70      	pop	{r4, r5, r6, pc}
    adbe:	bf00      	nop
    adc0:	00013dd6 	.word	0x00013dd6
    adc4:	00013151 	.word	0x00013151
    adc8:	00013135 	.word	0x00013135

0000adcc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    adcc:	4a08      	ldr	r2, [pc, #32]	; (adf0 <log_output_timestamp_freq_set+0x24>)
{
    adce:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    add0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    add2:	4c08      	ldr	r4, [pc, #32]	; (adf4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    add4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    add6:	2100      	movs	r1, #0
    add8:	42a0      	cmp	r0, r4
    adda:	d804      	bhi.n	ade6 <log_output_timestamp_freq_set+0x1a>
    addc:	b101      	cbz	r1, ade0 <log_output_timestamp_freq_set+0x14>
    adde:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ade0:	4b05      	ldr	r3, [pc, #20]	; (adf8 <log_output_timestamp_freq_set+0x2c>)
    ade2:	6018      	str	r0, [r3, #0]
}
    ade4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    ade6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    ade8:	005b      	lsls	r3, r3, #1
    adea:	2101      	movs	r1, #1
    adec:	e7f4      	b.n	add8 <log_output_timestamp_freq_set+0xc>
    adee:	bf00      	nop
    adf0:	200013b4 	.word	0x200013b4
    adf4:	000f4240 	.word	0x000f4240
    adf8:	200013b0 	.word	0x200013b0

0000adfc <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    adfe:	4f07      	ldr	r7, [pc, #28]	; (ae1c <char_out+0x20>)
{
    ae00:	460d      	mov	r5, r1
    ae02:	4604      	mov	r4, r0
    ae04:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    ae06:	42b4      	cmp	r4, r6
    ae08:	d101      	bne.n	ae0e <char_out+0x12>
#endif
	}

	return length;
}
    ae0a:	4628      	mov	r0, r5
    ae0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    ae0e:	6838      	ldr	r0, [r7, #0]
    ae10:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    ae14:	6883      	ldr	r3, [r0, #8]
    ae16:	685b      	ldr	r3, [r3, #4]
    ae18:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    ae1a:	e7f4      	b.n	ae06 <char_out+0xa>
    ae1c:	200013cc 	.word	0x200013cc

0000ae20 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    ae20:	4801      	ldr	r0, [pc, #4]	; (ae28 <panic+0x8>)
    ae22:	f006 bd1e 	b.w	11862 <log_output_flush>
    ae26:	bf00      	nop
    ae28:	00012d84 	.word	0x00012d84

0000ae2c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    ae2c:	4801      	ldr	r0, [pc, #4]	; (ae34 <dropped+0x8>)
    ae2e:	f7ff bfa1 	b.w	ad74 <log_output_dropped_process>
    ae32:	bf00      	nop
    ae34:	00012d84 	.word	0x00012d84

0000ae38 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    ae38:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    ae3a:	4803      	ldr	r0, [pc, #12]	; (ae48 <log_backend_uart_init+0x10>)
    ae3c:	f004 fa66 	bl	f30c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    ae40:	4b02      	ldr	r3, [pc, #8]	; (ae4c <log_backend_uart_init+0x14>)
    ae42:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    ae44:	bd08      	pop	{r3, pc}
    ae46:	bf00      	nop
    ae48:	0001315d 	.word	0x0001315d
    ae4c:	200013cc 	.word	0x200013cc

0000ae50 <put>:
{
    ae50:	b510      	push	{r4, lr}
	log_msg_get(msg);
    ae52:	4608      	mov	r0, r1
    ae54:	460c      	mov	r4, r1
    ae56:	f006 faa8 	bl	113aa <log_msg_get>
	log_output_msg_process(output, msg, flags);
    ae5a:	4805      	ldr	r0, [pc, #20]	; (ae70 <put+0x20>)
    ae5c:	4621      	mov	r1, r4
    ae5e:	220f      	movs	r2, #15
    ae60:	f7ff ff0c 	bl	ac7c <log_output_msg_process>
	log_msg_put(msg);
    ae64:	4620      	mov	r0, r4
}
    ae66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae6a:	f006 bacd 	b.w	11408 <log_msg_put>
    ae6e:	bf00      	nop
    ae70:	00012d84 	.word	0x00012d84

0000ae74 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    ae74:	4b01      	ldr	r3, [pc, #4]	; (ae7c <log_backend_rtt_init+0x8>)
    ae76:	2201      	movs	r2, #1
    ae78:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    ae7a:	4770      	bx	lr
    ae7c:	20001683 	.word	0x20001683

0000ae80 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    ae80:	4b02      	ldr	r3, [pc, #8]	; (ae8c <panic+0xc>)
	log_output_flush(output);
    ae82:	4803      	ldr	r0, [pc, #12]	; (ae90 <panic+0x10>)
    ae84:	2201      	movs	r2, #1
    ae86:	701a      	strb	r2, [r3, #0]
    ae88:	f006 bceb 	b.w	11862 <log_output_flush>
    ae8c:	20001684 	.word	0x20001684
    ae90:	00012db0 	.word	0x00012db0

0000ae94 <dropped>:
	log_output_dropped_process(output, cnt);
    ae94:	4801      	ldr	r0, [pc, #4]	; (ae9c <dropped+0x8>)
    ae96:	f7ff bf6d 	b.w	ad74 <log_output_dropped_process>
    ae9a:	bf00      	nop
    ae9c:	00012db0 	.word	0x00012db0

0000aea0 <put>:
{
    aea0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    aea2:	4608      	mov	r0, r1
    aea4:	460c      	mov	r4, r1
    aea6:	f006 fa80 	bl	113aa <log_msg_get>
	log_output_msg_process(output, msg, flags);
    aeaa:	4805      	ldr	r0, [pc, #20]	; (aec0 <put+0x20>)
    aeac:	4621      	mov	r1, r4
    aeae:	220f      	movs	r2, #15
    aeb0:	f7ff fee4 	bl	ac7c <log_output_msg_process>
	log_msg_put(msg);
    aeb4:	4620      	mov	r0, r4
}
    aeb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aeba:	f006 baa5 	b.w	11408 <log_msg_put>
    aebe:	bf00      	nop
    aec0:	00012db0 	.word	0x00012db0

0000aec4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    aec4:	4b05      	ldr	r3, [pc, #20]	; (aedc <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    aec6:	781b      	ldrb	r3, [r3, #0]
    aec8:	b11b      	cbz	r3, aed2 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    aeca:	f241 3088 	movw	r0, #5000	; 0x1388
    aece:	f007 bb8f 	b.w	125f0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    aed2:	20a4      	movs	r0, #164	; 0xa4
    aed4:	2100      	movs	r1, #0
    aed6:	f005 b9e5 	b.w	102a4 <z_impl_k_sleep>
    aeda:	bf00      	nop
    aedc:	20001684 	.word	0x20001684

0000aee0 <data_out_block_mode>:
{
    aee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    aee4:	f8df 9094 	ldr.w	r9, [pc, #148]	; af7c <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    aee8:	f8df a094 	ldr.w	sl, [pc, #148]	; af80 <data_out_block_mode+0xa0>
{
    aeec:	4680      	mov	r8, r0
    aeee:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    aef0:	2404      	movs	r4, #4
    aef2:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
    aef4:	f899 5000 	ldrb.w	r5, [r9]
    aef8:	b9cd      	cbnz	r5, af2e <data_out_block_mode+0x4e>
    aefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aefe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    af02:	4650      	mov	r0, sl
    af04:	f004 fc70 	bl	f7e8 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    af08:	463a      	mov	r2, r7
    af0a:	4641      	mov	r1, r8
    af0c:	4628      	mov	r0, r5
    af0e:	f004 f987 	bl	f220 <SEGGER_RTT_WriteSkipNoLock>
    af12:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    af14:	4650      	mov	r0, sl
    af16:	f004 fce5 	bl	f8e4 <z_impl_k_mutex_unlock>
		if (ret) {
    af1a:	4d17      	ldr	r5, [pc, #92]	; (af78 <data_out_block_mode+0x98>)
    af1c:	b1fe      	cbz	r6, af5e <data_out_block_mode+0x7e>
	host_present = true;
    af1e:	2301      	movs	r3, #1
    af20:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    af22:	f89b 3000 	ldrb.w	r3, [fp]
    af26:	b96b      	cbnz	r3, af44 <data_out_block_mode+0x64>
}
    af28:	4638      	mov	r0, r7
    af2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    af2e:	463a      	mov	r2, r7
    af30:	4641      	mov	r1, r8
    af32:	2000      	movs	r0, #0
    af34:	f004 f974 	bl	f220 <SEGGER_RTT_WriteSkipNoLock>
    af38:	4606      	mov	r6, r0
    af3a:	e7ee      	b.n	af1a <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
    af3c:	b95c      	cbnz	r4, af56 <data_out_block_mode+0x76>
		host_present = false;
    af3e:	702c      	strb	r4, [r5, #0]
    af40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    af44:	2000      	movs	r0, #0
    af46:	f004 f9b7 	bl	f2b8 <SEGGER_RTT_HasDataUp>
    af4a:	2800      	cmp	r0, #0
    af4c:	d0ec      	beq.n	af28 <data_out_block_mode+0x48>
    af4e:	782b      	ldrb	r3, [r5, #0]
    af50:	2b00      	cmp	r3, #0
    af52:	d1f3      	bne.n	af3c <data_out_block_mode+0x5c>
    af54:	e7e8      	b.n	af28 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
    af56:	3c01      	subs	r4, #1
    af58:	f7ff ffb4 	bl	aec4 <on_failed_write.part.0>
    af5c:	e7f2      	b.n	af44 <data_out_block_mode+0x64>
		} else if (host_present) {
    af5e:	782b      	ldrb	r3, [r5, #0]
    af60:	b113      	cbz	r3, af68 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
    af62:	3c01      	subs	r4, #1
    af64:	d104      	bne.n	af70 <data_out_block_mode+0x90>
		host_present = false;
    af66:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    af68:	782b      	ldrb	r3, [r5, #0]
    af6a:	2b00      	cmp	r3, #0
    af6c:	d1c2      	bne.n	aef4 <data_out_block_mode+0x14>
    af6e:	e7db      	b.n	af28 <data_out_block_mode+0x48>
    af70:	f7ff ffa8 	bl	aec4 <on_failed_write.part.0>
    af74:	e7f8      	b.n	af68 <data_out_block_mode+0x88>
    af76:	bf00      	nop
    af78:	20001683 	.word	0x20001683
    af7c:	20001684 	.word	0x20001684
    af80:	200002f0 	.word	0x200002f0

0000af84 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af86:	4605      	mov	r5, r0
	__asm__ volatile(
    af88:	f04f 0340 	mov.w	r3, #64	; 0x40
    af8c:	f3ef 8611 	mrs	r6, BASEPRI
    af90:	f383 8811 	msr	BASEPRI, r3
    af94:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    af98:	4b0b      	ldr	r3, [pc, #44]	; (afc8 <pm_state_notify+0x44>)
    af9a:	681c      	ldr	r4, [r3, #0]
    af9c:	2c00      	cmp	r4, #0
    af9e:	bf38      	it	cc
    afa0:	2400      	movcc	r4, #0
    afa2:	b15c      	cbz	r4, afbc <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    afa4:	4f09      	ldr	r7, [pc, #36]	; (afcc <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    afa6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    afaa:	2d00      	cmp	r5, #0
    afac:	bf08      	it	eq
    afae:	4613      	moveq	r3, r2
		if (callback) {
    afb0:	b10b      	cbz	r3, afb6 <pm_state_notify+0x32>
			callback(z_power_state.state);
    afb2:	7838      	ldrb	r0, [r7, #0]
    afb4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    afb6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    afb8:	2c00      	cmp	r4, #0
    afba:	d1f4      	bne.n	afa6 <pm_state_notify+0x22>
	__asm__ volatile(
    afbc:	f386 8811 	msr	BASEPRI, r6
    afc0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    afc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afc6:	bf00      	nop
    afc8:	200013e4 	.word	0x200013e4
    afcc:	200013ec 	.word	0x200013ec

0000afd0 <pm_system_resume>:

void pm_system_resume(void)
{
    afd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    afd2:	4b0f      	ldr	r3, [pc, #60]	; (b010 <pm_system_resume+0x40>)
    afd4:	681a      	ldr	r2, [r3, #0]
    afd6:	b9ba      	cbnz	r2, b008 <pm_system_resume+0x38>
		post_ops_done = 1;
    afd8:	2201      	movs	r2, #1
    afda:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    afdc:	4a0d      	ldr	r2, [pc, #52]	; (b014 <pm_system_resume+0x44>)
    afde:	ca07      	ldmia	r2, {r0, r1, r2}
    afe0:	ab01      	add	r3, sp, #4
    afe2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    afe6:	4a0c      	ldr	r2, [pc, #48]	; (b018 <pm_system_resume+0x48>)
    afe8:	b14a      	cbz	r2, affe <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    afea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    afee:	f006 fd79 	bl	11ae4 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    aff2:	2000      	movs	r0, #0
	}
}
    aff4:	b005      	add	sp, #20
    aff6:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    affa:	f7ff bfc3 	b.w	af84 <pm_state_notify>
    affe:	f382 8811 	msr	BASEPRI, r2
    b002:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b006:	e7f4      	b.n	aff2 <pm_system_resume+0x22>
}
    b008:	b005      	add	sp, #20
    b00a:	f85d fb04 	ldr.w	pc, [sp], #4
    b00e:	bf00      	nop
    b010:	20000280 	.word	0x20000280
    b014:	200013ec 	.word	0x200013ec
    b018:	00011ae5 	.word	0x00011ae5

0000b01c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    b01c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b01e:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    b020:	466e      	mov	r6, sp
    b022:	4601      	mov	r1, r0
{
    b024:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    b026:	4630      	mov	r0, r6
    b028:	f006 fc43 	bl	118b2 <pm_policy_next_state>
    b02c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    b030:	4c17      	ldr	r4, [pc, #92]	; (b090 <pm_system_suspend+0x74>)
    b032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    b036:	7820      	ldrb	r0, [r4, #0]
    b038:	b340      	cbz	r0, b08c <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    b03a:	4b16      	ldr	r3, [pc, #88]	; (b094 <pm_system_suspend+0x78>)
    b03c:	2100      	movs	r1, #0
    b03e:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    b040:	1c6b      	adds	r3, r5, #1
    b042:	d00e      	beq.n	b062 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    b044:	4814      	ldr	r0, [pc, #80]	; (b098 <pm_system_suspend+0x7c>)
    b046:	4617      	mov	r7, r2
    b048:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    b04c:	2100      	movs	r1, #0
    b04e:	4a13      	ldr	r2, [pc, #76]	; (b09c <pm_system_suspend+0x80>)
    b050:	2300      	movs	r3, #0
    b052:	fbe6 0107 	umlal	r0, r1, r6, r7
    b056:	f7f5 f841 	bl	dc <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    b05a:	2101      	movs	r1, #1
    b05c:	1a28      	subs	r0, r5, r0
    b05e:	f007 faa9 	bl	125b4 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    b062:	f004 fe8f 	bl	fd84 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    b066:	2001      	movs	r0, #1
    b068:	f7ff ff8c 	bl	af84 <pm_state_notify>
	pm_state_set(z_power_state);
    b06c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    b070:	ab05      	add	r3, sp, #20
    b072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    b076:	4a0a      	ldr	r2, [pc, #40]	; (b0a0 <pm_system_suspend+0x84>)
    b078:	b11a      	cbz	r2, b082 <pm_system_suspend+0x66>
		pm_power_state_set(info);
    b07a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    b07e:	f006 fd1e 	bl	11abe <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    b082:	f7ff ffa5 	bl	afd0 <pm_system_resume>
	k_sched_unlock();
    b086:	f004 ff35 	bl	fef4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    b08a:	7820      	ldrb	r0, [r4, #0]
}
    b08c:	b009      	add	sp, #36	; 0x24
    b08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b090:	200013ec 	.word	0x200013ec
    b094:	20000280 	.word	0x20000280
    b098:	000f423f 	.word	0x000f423f
    b09c:	000f4240 	.word	0x000f4240
    b0a0:	00011abf 	.word	0x00011abf

0000b0a4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    b0a4:	b510      	push	{r4, lr}
    b0a6:	4807      	ldr	r0, [pc, #28]	; (b0c4 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    b0a8:	4c07      	ldr	r4, [pc, #28]	; (b0c8 <uart_console_init+0x24>)
    b0aa:	f004 f92f 	bl	f30c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    b0ae:	4b07      	ldr	r3, [pc, #28]	; (b0cc <uart_console_init+0x28>)
    b0b0:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    b0b2:	4620      	mov	r0, r4
    b0b4:	f000 fffe 	bl	c0b4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    b0b8:	4620      	mov	r0, r4
    b0ba:	f7fe fcbd 	bl	9a38 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    b0be:	2000      	movs	r0, #0
    b0c0:	bd10      	pop	{r4, pc}
    b0c2:	bf00      	nop
    b0c4:	0001315d 	.word	0x0001315d
    b0c8:	0000b0d1 	.word	0x0000b0d1
    b0cc:	200013f8 	.word	0x200013f8

0000b0d0 <console_out>:
	if ('\n' == c) {
    b0d0:	280a      	cmp	r0, #10
{
    b0d2:	b538      	push	{r3, r4, r5, lr}
    b0d4:	4d07      	ldr	r5, [pc, #28]	; (b0f4 <console_out+0x24>)
    b0d6:	4604      	mov	r4, r0
	if ('\n' == c) {
    b0d8:	d104      	bne.n	b0e4 <console_out+0x14>
    b0da:	6828      	ldr	r0, [r5, #0]
    b0dc:	6883      	ldr	r3, [r0, #8]
    b0de:	210d      	movs	r1, #13
    b0e0:	685b      	ldr	r3, [r3, #4]
    b0e2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    b0e4:	6828      	ldr	r0, [r5, #0]
    b0e6:	6883      	ldr	r3, [r0, #8]
    b0e8:	b2e1      	uxtb	r1, r4
    b0ea:	685b      	ldr	r3, [r3, #4]
    b0ec:	4798      	blx	r3
}
    b0ee:	4620      	mov	r0, r4
    b0f0:	bd38      	pop	{r3, r4, r5, pc}
    b0f2:	bf00      	nop
    b0f4:	200013f8 	.word	0x200013f8

0000b0f8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b0f8:	b570      	push	{r4, r5, r6, lr}
    b0fa:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    b0fc:	480d      	ldr	r0, [pc, #52]	; (b134 <onoff_stop+0x3c>)
    b0fe:	1a23      	subs	r3, r4, r0
    b100:	109a      	asrs	r2, r3, #2
    b102:	4b0d      	ldr	r3, [pc, #52]	; (b138 <onoff_stop+0x40>)
    b104:	4353      	muls	r3, r2
    b106:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    b108:	250c      	movs	r5, #12
    b10a:	435d      	muls	r5, r3
    b10c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    b110:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    b112:	4418      	add	r0, r3
    b114:	2140      	movs	r1, #64	; 0x40
    b116:	f006 fbda 	bl	118ce <set_off_state>
	if (err < 0) {
    b11a:	1e01      	subs	r1, r0, #0
    b11c:	db04      	blt.n	b128 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    b11e:	4b07      	ldr	r3, [pc, #28]	; (b13c <onoff_stop+0x44>)
    b120:	442b      	add	r3, r5
    b122:	685b      	ldr	r3, [r3, #4]
    b124:	4798      	blx	r3
	return 0;
    b126:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    b128:	4620      	mov	r0, r4
    b12a:	4633      	mov	r3, r6
}
    b12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    b130:	4718      	bx	r3
    b132:	bf00      	nop
    b134:	20001410 	.word	0x20001410
    b138:	b6db6db7 	.word	0xb6db6db7
    b13c:	00012dd4 	.word	0x00012dd4

0000b140 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    b144:	4c0f      	ldr	r4, [pc, #60]	; (b184 <onoff_start+0x44>)
    b146:	4d10      	ldr	r5, [pc, #64]	; (b188 <onoff_start+0x48>)
    b148:	1b03      	subs	r3, r0, r4
    b14a:	109b      	asrs	r3, r3, #2
    b14c:	435d      	muls	r5, r3
    b14e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    b150:	250c      	movs	r5, #12
    b152:	435d      	muls	r5, r3
{
    b154:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    b156:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    b15a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    b15c:	4420      	add	r0, r4
    b15e:	2140      	movs	r1, #64	; 0x40
    b160:	f006 fbce 	bl	11900 <set_starting_state>
	if (err < 0) {
    b164:	1e01      	subs	r1, r0, #0
    b166:	db08      	blt.n	b17a <onoff_start+0x3a>
	subdata->cb = cb;
    b168:	4b08      	ldr	r3, [pc, #32]	; (b18c <onoff_start+0x4c>)
    b16a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    b16c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    b170:	4b07      	ldr	r3, [pc, #28]	; (b190 <onoff_start+0x50>)
    b172:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    b174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    b178:	4718      	bx	r3
		notify(mgr, err);
    b17a:	4638      	mov	r0, r7
    b17c:	4633      	mov	r3, r6
}
    b17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    b182:	4718      	bx	r3
    b184:	20001410 	.word	0x20001410
    b188:	b6db6db7 	.word	0xb6db6db7
    b18c:	00011963 	.word	0x00011963
    b190:	00012dd4 	.word	0x00012dd4

0000b194 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b194:	2200      	movs	r2, #0
{
    b196:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b198:	2101      	movs	r1, #1
{
    b19a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b19c:	4610      	mov	r0, r2
    b19e:	f000 fae3 	bl	b768 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    b1a2:	2000      	movs	r0, #0
    b1a4:	f000 faae 	bl	b704 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    b1a8:	480f      	ldr	r0, [pc, #60]	; (b1e8 <clk_init+0x54>)
    b1aa:	f003 fe09 	bl	edc0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    b1ae:	4b0f      	ldr	r3, [pc, #60]	; (b1ec <clk_init+0x58>)
    b1b0:	4298      	cmp	r0, r3
    b1b2:	d115      	bne.n	b1e0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    b1b4:	f006 fefa 	bl	11fac <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    b1b8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    b1ba:	490d      	ldr	r1, [pc, #52]	; (b1f0 <clk_init+0x5c>)
    b1bc:	4630      	mov	r0, r6
    b1be:	f005 fc7b 	bl	10ab8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    b1c2:	2800      	cmp	r0, #0
    b1c4:	db0b      	blt.n	b1de <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b1c6:	2501      	movs	r5, #1
    b1c8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    b1ca:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b1cc:	4908      	ldr	r1, [pc, #32]	; (b1f0 <clk_init+0x5c>)
    b1ce:	f104 001c 	add.w	r0, r4, #28
    b1d2:	f005 fc71 	bl	10ab8 <onoff_manager_init>
		if (err < 0) {
    b1d6:	2800      	cmp	r0, #0
    b1d8:	db01      	blt.n	b1de <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b1da:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    b1dc:	2000      	movs	r0, #0
}
    b1de:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    b1e0:	f06f 0004 	mvn.w	r0, #4
    b1e4:	e7fb      	b.n	b1de <clk_init+0x4a>
    b1e6:	bf00      	nop
    b1e8:	0000b229 	.word	0x0000b229
    b1ec:	0bad0000 	.word	0x0bad0000
    b1f0:	00012dec 	.word	0x00012dec

0000b1f4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    b1f4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    b1f6:	230c      	movs	r3, #12
    b1f8:	4809      	ldr	r0, [pc, #36]	; (b220 <clkstarted_handle.constprop.0+0x2c>)
    b1fa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    b1fc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    b1fe:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    b200:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    b204:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    b206:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    b208:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    b20a:	4418      	add	r0, r3
    b20c:	f006 fb96 	bl	1193c <set_on_state>
	if (callback) {
    b210:	b12d      	cbz	r5, b21e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b212:	4632      	mov	r2, r6
    b214:	462b      	mov	r3, r5
    b216:	4803      	ldr	r0, [pc, #12]	; (b224 <clkstarted_handle.constprop.0+0x30>)
}
    b218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    b21c:	4718      	bx	r3
}
    b21e:	bd70      	pop	{r4, r5, r6, pc}
    b220:	20001410 	.word	0x20001410
    b224:	000129b4 	.word	0x000129b4

0000b228 <clock_event_handler>:
	switch (event) {
    b228:	b110      	cbz	r0, b230 <clock_event_handler+0x8>
    b22a:	2801      	cmp	r0, #1
    b22c:	d004      	beq.n	b238 <clock_event_handler+0x10>
    b22e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    b230:	4b03      	ldr	r3, [pc, #12]	; (b240 <clock_event_handler+0x18>)
    b232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b234:	075b      	lsls	r3, r3, #29
    b236:	d101      	bne.n	b23c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    b238:	f7ff bfdc 	b.w	b1f4 <clkstarted_handle.constprop.0>
}
    b23c:	4770      	bx	lr
    b23e:	bf00      	nop
    b240:	20001410 	.word	0x20001410

0000b244 <generic_hfclk_start>:
{
    b244:	b508      	push	{r3, lr}
	__asm__ volatile(
    b246:	f04f 0340 	mov.w	r3, #64	; 0x40
    b24a:	f3ef 8111 	mrs	r1, BASEPRI
    b24e:	f383 8811 	msr	BASEPRI, r3
    b252:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    b256:	4a12      	ldr	r2, [pc, #72]	; (b2a0 <generic_hfclk_start+0x5c>)
    b258:	6813      	ldr	r3, [r2, #0]
    b25a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    b25e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    b262:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    b264:	d00c      	beq.n	b280 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b26a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b26e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    b272:	f013 0301 	ands.w	r3, r3, #1
    b276:	d003      	beq.n	b280 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    b278:	480a      	ldr	r0, [pc, #40]	; (b2a4 <generic_hfclk_start+0x60>)
    b27a:	f006 fb5f 	bl	1193c <set_on_state>
			already_started = true;
    b27e:	2301      	movs	r3, #1
	__asm__ volatile(
    b280:	f381 8811 	msr	BASEPRI, r1
    b284:	f3bf 8f6f 	isb	sy
	if (already_started) {
    b288:	b123      	cbz	r3, b294 <generic_hfclk_start+0x50>
}
    b28a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    b28e:	2000      	movs	r0, #0
    b290:	f7ff bfb0 	b.w	b1f4 <clkstarted_handle.constprop.0>
}
    b294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b298:	2001      	movs	r0, #1
    b29a:	f003 bd81 	b.w	eda0 <nrfx_clock_start>
    b29e:	bf00      	nop
    b2a0:	20001460 	.word	0x20001460
    b2a4:	20001450 	.word	0x20001450

0000b2a8 <lfclk_start>:
{
    b2a8:	b510      	push	{r4, lr}
	if (!once) {
    b2aa:	4c07      	ldr	r4, [pc, #28]	; (b2c8 <lfclk_start+0x20>)
    b2ac:	7823      	ldrb	r3, [r4, #0]
    b2ae:	b92b      	cbnz	r3, b2bc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    b2b0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    b2b4:	f007 f99c 	bl	125f0 <z_impl_k_busy_wait>
		once = true;
    b2b8:	2301      	movs	r3, #1
    b2ba:	7023      	strb	r3, [r4, #0]
}
    b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b2c0:	2000      	movs	r0, #0
    b2c2:	f003 bd6d 	b.w	eda0 <nrfx_clock_start>
    b2c6:	bf00      	nop
    b2c8:	20001685 	.word	0x20001685

0000b2cc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b2cc:	4b09      	ldr	r3, [pc, #36]	; (b2f4 <generic_hfclk_stop+0x28>)
    b2ce:	f3bf 8f5b 	dmb	ish
    b2d2:	e853 2f00 	ldrex	r2, [r3]
    b2d6:	f022 0102 	bic.w	r1, r2, #2
    b2da:	e843 1000 	strex	r0, r1, [r3]
    b2de:	2800      	cmp	r0, #0
    b2e0:	d1f7      	bne.n	b2d2 <generic_hfclk_stop+0x6>
    b2e2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    b2e6:	07d3      	lsls	r3, r2, #31
    b2e8:	d402      	bmi.n	b2f0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b2ea:	2001      	movs	r0, #1
    b2ec:	f006 be59 	b.w	11fa2 <nrfx_clock_stop>
}
    b2f0:	4770      	bx	lr
    b2f2:	bf00      	nop
    b2f4:	20001460 	.word	0x20001460

0000b2f8 <api_blocking_start>:
{
    b2f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b2fa:	2200      	movs	r2, #0
    b2fc:	2301      	movs	r3, #1
    b2fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b302:	ab04      	add	r3, sp, #16
    b304:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b308:	4a09      	ldr	r2, [pc, #36]	; (b330 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b30a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b30e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b310:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b314:	f006 fb48 	bl	119a8 <api_start>
	if (err < 0) {
    b318:	2800      	cmp	r0, #0
    b31a:	db05      	blt.n	b328 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    b31c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b320:	2300      	movs	r3, #0
    b322:	4668      	mov	r0, sp
    b324:	f004 fb7e 	bl	fa24 <z_impl_k_sem_take>
}
    b328:	b007      	add	sp, #28
    b32a:	f85d fb04 	ldr.w	pc, [sp], #4
    b32e:	bf00      	nop
    b330:	0001197b 	.word	0x0001197b

0000b334 <z_nrf_clock_control_lf_on>:
{
    b334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b338:	493a      	ldr	r1, [pc, #232]	; (b424 <z_nrf_clock_control_lf_on+0xf0>)
    b33a:	f3bf 8f5b 	dmb	ish
    b33e:	4606      	mov	r6, r0
    b340:	2201      	movs	r2, #1
    b342:	e851 3f00 	ldrex	r3, [r1]
    b346:	e841 2000 	strex	r0, r2, [r1]
    b34a:	2800      	cmp	r0, #0
    b34c:	d1f9      	bne.n	b342 <z_nrf_clock_control_lf_on+0xe>
    b34e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    b352:	b933      	cbnz	r3, b362 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    b354:	4934      	ldr	r1, [pc, #208]	; (b428 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    b356:	4835      	ldr	r0, [pc, #212]	; (b42c <z_nrf_clock_control_lf_on+0xf8>)
    b358:	604b      	str	r3, [r1, #4]
    b35a:	60cb      	str	r3, [r1, #12]
    b35c:	608a      	str	r2, [r1, #8]
    b35e:	f005 fbbe 	bl	10ade <onoff_request>
	switch (start_mode) {
    b362:	1e73      	subs	r3, r6, #1
    b364:	2b01      	cmp	r3, #1
    b366:	d832      	bhi.n	b3ce <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    b368:	2e01      	cmp	r6, #1
    b36a:	d107      	bne.n	b37c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b36c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b370:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    b374:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    b378:	2b01      	cmp	r3, #1
    b37a:	d028      	beq.n	b3ce <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b37c:	f006 fede 	bl	1213c <k_is_in_isr>
    b380:	4604      	mov	r4, r0
    b382:	b918      	cbnz	r0, b38c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    b384:	4b2a      	ldr	r3, [pc, #168]	; (b430 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    b386:	781b      	ldrb	r3, [r3, #0]
    b388:	2b00      	cmp	r3, #0
    b38a:	d144      	bne.n	b416 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    b38c:	f04f 0340 	mov.w	r3, #64	; 0x40
    b390:	f3ef 8511 	mrs	r5, BASEPRI
    b394:	f383 8811 	msr	BASEPRI, r3
    b398:	f3bf 8f6f 	isb	sy
    b39c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b39e:	4f25      	ldr	r7, [pc, #148]	; (b434 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b3a0:	f8df 8094 	ldr.w	r8, [pc, #148]	; b438 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3a4:	f8df 9094 	ldr.w	r9, [pc, #148]	; b43c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b3a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b3ac:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b3b0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    b3b4:	03d2      	lsls	r2, r2, #15
    b3b6:	d50c      	bpl.n	b3d2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    b3b8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    b3bc:	2b01      	cmp	r3, #1
    b3be:	d001      	beq.n	b3c4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    b3c0:	2e01      	cmp	r6, #1
    b3c2:	d106      	bne.n	b3d2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    b3c4:	b30c      	cbz	r4, b40a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    b3c6:	f385 8811 	msr	BASEPRI, r5
    b3ca:	f3bf 8f6f 	isb	sy
}
    b3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    b3d2:	b1ac      	cbz	r4, b400 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    b3d4:	4628      	mov	r0, r5
    b3d6:	f000 fa4f 	bl	b878 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    b3da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b3de:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    b3e2:	2b00      	cmp	r3, #0
    b3e4:	d1e0      	bne.n	b3a8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b3e6:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    b3e8:	2900      	cmp	r1, #0
    b3ea:	d0dd      	beq.n	b3a8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3ec:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    b3ee:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    b3f0:	2301      	movs	r3, #1
    b3f2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    b3f6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3fa:	f8c9 3000 	str.w	r3, [r9]
}
    b3fe:	e7d3      	b.n	b3a8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    b400:	2100      	movs	r1, #0
    b402:	2021      	movs	r0, #33	; 0x21
    b404:	f004 ff4e 	bl	102a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b408:	e7e7      	b.n	b3da <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    b40a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b40e:	2202      	movs	r2, #2
    b410:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b414:	e7db      	b.n	b3ce <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    b416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b41a:	2202      	movs	r2, #2
    b41c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    b420:	4605      	mov	r5, r0
}
    b422:	e7bc      	b.n	b39e <z_nrf_clock_control_lf_on+0x6a>
    b424:	20001464 	.word	0x20001464
    b428:	20001400 	.word	0x20001400
    b42c:	2000142c 	.word	0x2000142c
    b430:	20001f14 	.word	0x20001f14
    b434:	40000104 	.word	0x40000104
    b438:	e000e100 	.word	0xe000e100
    b43c:	40000008 	.word	0x40000008

0000b440 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    b440:	4a04      	ldr	r2, [pc, #16]	; (b454 <sys_clock_timeout_handler+0x14>)
    b442:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    b444:	1ac8      	subs	r0, r1, r3
    b446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    b44a:	4403      	add	r3, r0
    b44c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    b44e:	f005 b8af 	b.w	105b0 <sys_clock_announce>
    b452:	bf00      	nop
    b454:	20001478 	.word	0x20001478

0000b458 <set_absolute_alarm>:
{
    b458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b45c:	0086      	lsls	r6, r0, #2
    b45e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b462:	f100 0450 	add.w	r4, r0, #80	; 0x50
    b466:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    b46a:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    b46c:	f8df 807c 	ldr.w	r8, [pc, #124]	; b4ec <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    b470:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b474:	b2a4      	uxth	r4, r4
    b476:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b47a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    b47e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    b482:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    b486:	4087      	lsls	r7, r0
    b488:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    b48a:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    b48e:	eba3 030a 	sub.w	r3, r3, sl
    b492:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    b496:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    b49a:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    b49c:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    b4a0:	d102      	bne.n	b4a8 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    b4a2:	2013      	movs	r0, #19
    b4a4:	f007 f8a4 	bl	125f0 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    b4a8:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    b4ac:	1aab      	subs	r3, r5, r2
    b4ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    b4b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b4b6:	bf88      	it	hi
    b4b8:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b4ba:	2300      	movs	r3, #0
    b4bc:	6023      	str	r3, [r4, #0]
    b4be:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    b4c0:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    b4c4:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    b4c8:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    b4cc:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    b4d0:	459a      	cmp	sl, r3
    b4d2:	d006      	beq.n	b4e2 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    b4d4:	1aeb      	subs	r3, r5, r3
    b4d6:	3b02      	subs	r3, #2
    b4d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    b4dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b4e0:	d801      	bhi.n	b4e6 <set_absolute_alarm+0x8e>
}
    b4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    b4e6:	462b      	mov	r3, r5
    b4e8:	e7cf      	b.n	b48a <set_absolute_alarm+0x32>
    b4ea:	bf00      	nop
    b4ec:	40011000 	.word	0x40011000

0000b4f0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    b4f2:	4c15      	ldr	r4, [pc, #84]	; (b548 <rtc_nrf_isr+0x58>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4f4:	4f15      	ldr	r7, [pc, #84]	; (b54c <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    b4f6:	2600      	movs	r6, #0
    b4f8:	4b15      	ldr	r3, [pc, #84]	; (b550 <rtc_nrf_isr+0x60>)
    b4fa:	2000      	movs	r0, #0
    b4fc:	681d      	ldr	r5, [r3, #0]
    b4fe:	469c      	mov	ip, r3
    b500:	b106      	cbz	r6, b504 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    b502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    b504:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    b508:	03d2      	lsls	r2, r2, #15
    b50a:	d5fa      	bpl.n	b502 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b50c:	683a      	ldr	r2, [r7, #0]
    b50e:	2a00      	cmp	r2, #0
    b510:	d0f7      	beq.n	b502 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b512:	603e      	str	r6, [r7, #0]
    b514:	683a      	ldr	r2, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    b516:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b51a:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    b51e:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    b522:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    b526:	1a72      	subs	r2, r6, r1
    b528:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    b52c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    b530:	bf88      	it	hi
    b532:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    b534:	2601      	movs	r6, #1
			if (handler) {
    b536:	b11d      	cbz	r5, b540 <rtc_nrf_isr+0x50>
				handler(chan, cc_val,
    b538:	685a      	ldr	r2, [r3, #4]
    b53a:	6018      	str	r0, [r3, #0]
    b53c:	47a8      	blx	r5
    b53e:	e7db      	b.n	b4f8 <rtc_nrf_isr+0x8>
    b540:	f8cc 5000 	str.w	r5, [ip]
}
    b544:	e7dd      	b.n	b502 <rtc_nrf_isr+0x12>
    b546:	bf00      	nop
    b548:	40011000 	.word	0x40011000
    b54c:	40011140 	.word	0x40011140
    b550:	2000146c 	.word	0x2000146c

0000b554 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    b554:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    b556:	4d10      	ldr	r5, [pc, #64]	; (b598 <sys_clock_driver_init+0x44>)
    b558:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    b55a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    b55e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    b562:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    b566:	4b0d      	ldr	r3, [pc, #52]	; (b59c <sys_clock_driver_init+0x48>)
    b568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b56c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    b570:	2101      	movs	r1, #1
    b572:	4622      	mov	r2, r4
    b574:	2011      	movs	r0, #17
    b576:	f000 f8f7 	bl	b768 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    b57a:	2011      	movs	r0, #17
    b57c:	f000 f8c2 	bl	b704 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    b580:	4a07      	ldr	r2, [pc, #28]	; (b5a0 <sys_clock_driver_init+0x4c>)
    b582:	2301      	movs	r3, #1
    b584:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    b586:	4a07      	ldr	r2, [pc, #28]	; (b5a4 <sys_clock_driver_init+0x50>)
    b588:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    b58a:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    b58c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    b58e:	f7ff fed1 	bl	b334 <z_nrf_clock_control_lf_on>

	return 0;
}
    b592:	4620      	mov	r0, r4
    b594:	bd38      	pop	{r3, r4, r5, pc}
    b596:	bf00      	nop
    b598:	40011000 	.word	0x40011000
    b59c:	e000e100 	.word	0xe000e100
    b5a0:	40011008 	.word	0x40011008
    b5a4:	20001474 	.word	0x20001474

0000b5a8 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    b5a8:	4b13      	ldr	r3, [pc, #76]	; (b5f8 <sys_clock_set_timeout+0x50>)
    b5aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b5ae:	bf08      	it	eq
    b5b0:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    b5b2:	3801      	subs	r0, #1
    b5b4:	2800      	cmp	r0, #0
    b5b6:	dd1c      	ble.n	b5f2 <sys_clock_set_timeout+0x4a>
    b5b8:	4298      	cmp	r0, r3
    b5ba:	bfa8      	it	ge
    b5bc:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    b5be:	4b0f      	ldr	r3, [pc, #60]	; (b5fc <sys_clock_set_timeout+0x54>)
    b5c0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    b5c4:	4b0e      	ldr	r3, [pc, #56]	; (b600 <sys_clock_set_timeout+0x58>)
    b5c6:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    b5c8:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    b5ca:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    b5ce:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    b5d2:	bf18      	it	ne
    b5d4:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    b5d6:	4a0b      	ldr	r2, [pc, #44]	; (b604 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    b5d8:	3301      	adds	r3, #1
    b5da:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    b5dc:	480a      	ldr	r0, [pc, #40]	; (b608 <sys_clock_set_timeout+0x60>)
    b5de:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    b5e0:	2000      	movs	r0, #0
    b5e2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    b5e4:	4a04      	ldr	r2, [pc, #16]	; (b5f8 <sys_clock_set_timeout+0x50>)
    b5e6:	4293      	cmp	r3, r2
    b5e8:	bf94      	ite	ls
    b5ea:	18c9      	addls	r1, r1, r3
    b5ec:	1889      	addhi	r1, r1, r2
    b5ee:	f7ff bf33 	b.w	b458 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    b5f2:	2000      	movs	r0, #0
    b5f4:	e7e3      	b.n	b5be <sys_clock_set_timeout+0x16>
    b5f6:	bf00      	nop
    b5f8:	007fffff 	.word	0x007fffff
    b5fc:	40011000 	.word	0x40011000
    b600:	20001478 	.word	0x20001478
    b604:	2000146c 	.word	0x2000146c
    b608:	0000b441 	.word	0x0000b441

0000b60c <sys_clock_elapsed>:
    b60c:	4b04      	ldr	r3, [pc, #16]	; (b620 <sys_clock_elapsed+0x14>)
    b60e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    b612:	4b04      	ldr	r3, [pc, #16]	; (b624 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    b614:	681b      	ldr	r3, [r3, #0]
    b616:	1ac0      	subs	r0, r0, r3
}
    b618:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b61c:	4770      	bx	lr
    b61e:	bf00      	nop
    b620:	40011000 	.word	0x40011000
    b624:	20001478 	.word	0x20001478

0000b628 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    b628:	f04f 0340 	mov.w	r3, #64	; 0x40
    b62c:	f3ef 8211 	mrs	r2, BASEPRI
    b630:	f383 8811 	msr	BASEPRI, r3
    b634:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    b638:	4906      	ldr	r1, [pc, #24]	; (b654 <sys_clock_cycle_get_32+0x2c>)
    b63a:	4b07      	ldr	r3, [pc, #28]	; (b658 <sys_clock_cycle_get_32+0x30>)
    b63c:	6808      	ldr	r0, [r1, #0]
    b63e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    b642:	f382 8811 	msr	BASEPRI, r2
    b646:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    b64a:	1a1b      	subs	r3, r3, r0
    b64c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    b650:	4418      	add	r0, r3
    b652:	4770      	bx	lr
    b654:	20001478 	.word	0x20001478
    b658:	40011000 	.word	0x40011000

0000b65c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b65c:	4a09      	ldr	r2, [pc, #36]	; (b684 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b65e:	490a      	ldr	r1, [pc, #40]	; (b688 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    b660:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b662:	6809      	ldr	r1, [r1, #0]
    b664:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b666:	4909      	ldr	r1, [pc, #36]	; (b68c <arch_swap+0x30>)
	_current->arch.basepri = key;
    b668:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b66a:	684b      	ldr	r3, [r1, #4]
    b66c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b670:	604b      	str	r3, [r1, #4]
    b672:	2300      	movs	r3, #0
    b674:	f383 8811 	msr	BASEPRI, r3
    b678:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b67c:	6893      	ldr	r3, [r2, #8]
}
    b67e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    b680:	4770      	bx	lr
    b682:	bf00      	nop
    b684:	20001628 	.word	0x20001628
    b688:	00012f38 	.word	0x00012f38
    b68c:	e000ed00 	.word	0xe000ed00

0000b690 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b690:	4912      	ldr	r1, [pc, #72]	; (b6dc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b692:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b694:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b698:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b69a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b69e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b6a2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    b6a4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b6a8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b6ac:	4f0c      	ldr	r7, [pc, #48]	; (b6e0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b6ae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b6b2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    b6b4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b6b6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b6b8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    b6ba:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b6bc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b6be:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    b6c2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    b6c4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    b6c6:	f000 fc29 	bl	bf1c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    b6ca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b6ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b6d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b6d6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b6da:	4770      	bx	lr
    ldr r1, =_kernel
    b6dc:	20001628 	.word	0x20001628
    ldr v4, =_SCS_ICSR
    b6e0:	e000ed04 	.word	0xe000ed04

0000b6e4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    b6e4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b6e8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b6ea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b6ee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b6f2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b6f4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b6f8:	2902      	cmp	r1, #2
    beq _oops
    b6fa:	d0ff      	beq.n	b6fc <_oops>

0000b6fc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b6fc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    b6fe:	f006 f973 	bl	119e8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    b702:	bd01      	pop	{r0, pc}

0000b704 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b704:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    b706:	2b00      	cmp	r3, #0
    b708:	db08      	blt.n	b71c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b70a:	2201      	movs	r2, #1
    b70c:	f000 001f 	and.w	r0, r0, #31
    b710:	fa02 f000 	lsl.w	r0, r2, r0
    b714:	095b      	lsrs	r3, r3, #5
    b716:	4a02      	ldr	r2, [pc, #8]	; (b720 <arch_irq_enable+0x1c>)
    b718:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    b71c:	4770      	bx	lr
    b71e:	bf00      	nop
    b720:	e000e100 	.word	0xe000e100

0000b724 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b724:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    b726:	2b00      	cmp	r3, #0
    b728:	db0d      	blt.n	b746 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b72a:	2201      	movs	r2, #1
    b72c:	095b      	lsrs	r3, r3, #5
    b72e:	f000 001f 	and.w	r0, r0, #31
    b732:	fa02 f000 	lsl.w	r0, r2, r0
    b736:	3320      	adds	r3, #32
    b738:	4a03      	ldr	r2, [pc, #12]	; (b748 <arch_irq_disable+0x24>)
    b73a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b73e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b742:	f3bf 8f6f 	isb	sy
}
    b746:	4770      	bx	lr
    b748:	e000e100 	.word	0xe000e100

0000b74c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b74c:	4b05      	ldr	r3, [pc, #20]	; (b764 <arch_irq_is_enabled+0x18>)
    b74e:	0942      	lsrs	r2, r0, #5
    b750:	f000 001f 	and.w	r0, r0, #31
    b754:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b758:	2301      	movs	r3, #1
    b75a:	fa03 f000 	lsl.w	r0, r3, r0
}
    b75e:	4010      	ands	r0, r2
    b760:	4770      	bx	lr
    b762:	bf00      	nop
    b764:	e000e100 	.word	0xe000e100

0000b768 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    b768:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b76a:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
    b76c:	bf54      	ite	pl
    b76e:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    b770:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b772:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b774:	bfac      	ite	ge
    b776:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b77a:	4a07      	ldrlt	r2, [pc, #28]	; (b798 <z_arm_irq_priority_set+0x30>)
    b77c:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b780:	bfac      	ite	ge
    b782:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b786:	f000 000f 	andlt.w	r0, r0, #15
    b78a:	b2db      	uxtb	r3, r3
    b78c:	bfb4      	ite	lt
    b78e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b790:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
    b794:	4770      	bx	lr
    b796:	bf00      	nop
    b798:	e000ed14 	.word	0xe000ed14

0000b79c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    b79c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    b79e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    b7a0:	4b04      	ldr	r3, [pc, #16]	; (b7b4 <_arch_isr_direct_pm+0x18>)
    b7a2:	6a18      	ldr	r0, [r3, #32]
    b7a4:	b118      	cbz	r0, b7ae <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    b7a6:	2200      	movs	r2, #0
    b7a8:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    b7aa:	f006 fcd4 	bl	12156 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    b7ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    b7b0:	bd08      	pop	{r3, pc}
    b7b2:	bf00      	nop
    b7b4:	20001628 	.word	0x20001628

0000b7b8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b7b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b7bc:	9b00      	ldr	r3, [sp, #0]
    b7be:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    b7c2:	490a      	ldr	r1, [pc, #40]	; (b7ec <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    b7c4:	9b01      	ldr	r3, [sp, #4]
    b7c6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b7ca:	9b02      	ldr	r3, [sp, #8]
    b7cc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    b7d0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b7d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b7d8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    b7dc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b7e0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b7e2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b7e4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    b7e6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b7e8:	4770      	bx	lr
    b7ea:	bf00      	nop
    b7ec:	00010b71 	.word	0x00010b71

0000b7f0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    b7f0:	4a0b      	ldr	r2, [pc, #44]	; (b820 <z_check_thread_stack_fail+0x30>)
{
    b7f2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    b7f4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    b7f6:	b190      	cbz	r0, b81e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    b7f8:	f113 0f16 	cmn.w	r3, #22
    b7fc:	6e80      	ldr	r0, [r0, #104]	; 0x68
    b7fe:	d005      	beq.n	b80c <z_check_thread_stack_fail+0x1c>
    b800:	f1a0 0220 	sub.w	r2, r0, #32
    b804:	429a      	cmp	r2, r3
    b806:	d806      	bhi.n	b816 <z_check_thread_stack_fail+0x26>
    b808:	4283      	cmp	r3, r0
    b80a:	d204      	bcs.n	b816 <z_check_thread_stack_fail+0x26>
    b80c:	4281      	cmp	r1, r0
    b80e:	bf2c      	ite	cs
    b810:	2100      	movcs	r1, #0
    b812:	2101      	movcc	r1, #1
    b814:	e000      	b.n	b818 <z_check_thread_stack_fail+0x28>
    b816:	2100      	movs	r1, #0
    b818:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    b81a:	bf08      	it	eq
    b81c:	2000      	moveq	r0, #0
}
    b81e:	4770      	bx	lr
    b820:	20001628 	.word	0x20001628

0000b824 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    b824:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b826:	4b09      	ldr	r3, [pc, #36]	; (b84c <arch_switch_to_main_thread+0x28>)
    b828:	6098      	str	r0, [r3, #8]
{
    b82a:	460d      	mov	r5, r1
    b82c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    b82e:	f000 fb75 	bl	bf1c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b832:	4620      	mov	r0, r4
    b834:	f385 8809 	msr	PSP, r5
    b838:	2100      	movs	r1, #0
    b83a:	b663      	cpsie	if
    b83c:	f381 8811 	msr	BASEPRI, r1
    b840:	f3bf 8f6f 	isb	sy
    b844:	2200      	movs	r2, #0
    b846:	2300      	movs	r3, #0
    b848:	f005 f992 	bl	10b70 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b84c:	20001628 	.word	0x20001628

0000b850 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b850:	4901      	ldr	r1, [pc, #4]	; (b858 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b852:	2210      	movs	r2, #16
	str	r2, [r1]
    b854:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b856:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b858:	e000ed10 	.word	0xe000ed10

0000b85c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b85c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b85e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b860:	f380 8811 	msr	BASEPRI, r0
	isb
    b864:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    b868:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    b86c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b86e:	b662      	cpsie	i
	isb
    b870:	f3bf 8f6f 	isb	sy

	bx	lr
    b874:	4770      	bx	lr
    b876:	bf00      	nop

0000b878 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b878:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b87a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b87c:	f381 8811 	msr	BASEPRI, r1

	wfe
    b880:	bf20      	wfe

	msr	BASEPRI, r0
    b882:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b886:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b888:	4770      	bx	lr
    b88a:	bf00      	nop

0000b88c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b88c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b88e:	4606      	mov	r6, r0

	if (esf != NULL) {
    b890:	460c      	mov	r4, r1
    b892:	b301      	cbz	r1, b8d6 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    b894:	4b13      	ldr	r3, [pc, #76]	; (b8e4 <z_arm_fatal_error+0x58>)
    b896:	4d14      	ldr	r5, [pc, #80]	; (b8e8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    b898:	4814      	ldr	r0, [pc, #80]	; (b8ec <z_arm_fatal_error+0x60>)
    b89a:	1aed      	subs	r5, r5, r3
    b89c:	08ed      	lsrs	r5, r5, #3
    b89e:	01ad      	lsls	r5, r5, #6
    b8a0:	f045 0501 	orr.w	r5, r5, #1
    b8a4:	f8ad 5000 	strh.w	r5, [sp]
    b8a8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    b8ac:	6809      	ldr	r1, [r1, #0]
    b8ae:	f005 fcf4 	bl	1129a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    b8b2:	f8ad 5000 	strh.w	r5, [sp]
    b8b6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b8ba:	68e1      	ldr	r1, [r4, #12]
    b8bc:	480c      	ldr	r0, [pc, #48]	; (b8f0 <z_arm_fatal_error+0x64>)
    b8be:	f005 fcec 	bl	1129a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    b8c2:	69e1      	ldr	r1, [r4, #28]
    b8c4:	480b      	ldr	r0, [pc, #44]	; (b8f4 <z_arm_fatal_error+0x68>)
    b8c6:	462a      	mov	r2, r5
    b8c8:	f005 fcba 	bl	11240 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    b8cc:	69a1      	ldr	r1, [r4, #24]
    b8ce:	480a      	ldr	r0, [pc, #40]	; (b8f8 <z_arm_fatal_error+0x6c>)
    b8d0:	462a      	mov	r2, r5
    b8d2:	f005 fcb5 	bl	11240 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b8d6:	4621      	mov	r1, r4
    b8d8:	4630      	mov	r0, r6
}
    b8da:	b002      	add	sp, #8
    b8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    b8e0:	f003 bd40 	b.w	f364 <z_fatal_error>
    b8e4:	00012b64 	.word	0x00012b64
    b8e8:	00012bbc 	.word	0x00012bbc
    b8ec:	000131b5 	.word	0x000131b5
    b8f0:	000131e4 	.word	0x000131e4
    b8f4:	00013213 	.word	0x00013213
    b8f8:	00013222 	.word	0x00013222

0000b8fc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b8fc:	bf30      	wfi
    b z_SysNmiOnReset
    b8fe:	f7ff bffd 	b.w	b8fc <z_SysNmiOnReset>
    b902:	bf00      	nop

0000b904 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b904:	4a0b      	ldr	r2, [pc, #44]	; (b934 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    b906:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b908:	4b0b      	ldr	r3, [pc, #44]	; (b938 <z_arm_prep_c+0x34>)
    b90a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b90e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b914:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b918:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b91c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b924:	f003 fd7c 	bl	f420 <z_bss_zero>
	z_data_copy();
    b928:	f004 fd50 	bl	103cc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b92c:	f000 facc 	bl	bec8 <z_arm_interrupt_init>
	z_cstart();
    b930:	f003 fd9a 	bl	f468 <z_cstart>
    b934:	00000000 	.word	0x00000000
    b938:	e000ed00 	.word	0xe000ed00

0000b93c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b93c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b93e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b940:	4a0b      	ldr	r2, [pc, #44]	; (b970 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b942:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    b944:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b946:	bf1e      	ittt	ne
	movne	r1, #0
    b948:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b94a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    b94c:	f006 fc03 	blne	12156 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b950:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b952:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b956:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b95a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b95e:	4905      	ldr	r1, [pc, #20]	; (b974 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b960:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b962:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b964:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b966:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b96a:	4903      	ldr	r1, [pc, #12]	; (b978 <_isr_wrapper+0x3c>)
	bx r1
    b96c:	4708      	bx	r1
    b96e:	0000      	.short	0x0000
	ldr r2, =_kernel
    b970:	20001628 	.word	0x20001628
	ldr r1, =_sw_isr_table
    b974:	00012a2c 	.word	0x00012a2c
	ldr r1, =z_arm_int_exit
    b978:	0000be29 	.word	0x0000be29

0000b97c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    b97c:	2000      	movs	r0, #0
    msr CONTROL, r0
    b97e:	f380 8814 	msr	CONTROL, r0
    isb
    b982:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    b986:	f006 ffd3 	bl	12930 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    b98a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    b98c:	490d      	ldr	r1, [pc, #52]	; (b9c4 <__start+0x48>)
    str r0, [r1]
    b98e:	6008      	str	r0, [r1, #0]
    dsb
    b990:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b994:	480c      	ldr	r0, [pc, #48]	; (b9c8 <__start+0x4c>)
    msr msp, r0
    b996:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    b99a:	f000 fa63 	bl	be64 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b99e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    b9a0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    b9a4:	4809      	ldr	r0, [pc, #36]	; (b9cc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    b9a6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    b9aa:	1840      	adds	r0, r0, r1
    msr PSP, r0
    b9ac:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    b9b0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    b9b4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    b9b6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    b9b8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    b9bc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    b9c0:	f7ff ffa0 	bl	b904 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    b9c4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b9c8:	200038c0 	.word	0x200038c0
    ldr r0, =z_interrupt_stacks
    b9cc:	20003a40 	.word	0x20003a40

0000b9d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    b9d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    b9d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    b9d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    b9da:	4672      	mov	r2, lr
	bl z_arm_fault
    b9dc:	f000 f94e 	bl	bc7c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    b9e0:	bd01      	pop	{r0, pc}
    b9e2:	bf00      	nop

0000b9e4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9e8:	4b35      	ldr	r3, [pc, #212]	; (bac0 <mem_manage_fault+0xdc>)
    b9ea:	4c36      	ldr	r4, [pc, #216]	; (bac4 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b9ec:	4d36      	ldr	r5, [pc, #216]	; (bac8 <mem_manage_fault+0xe4>)
    b9ee:	1ae4      	subs	r4, r4, r3
    b9f0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    b9f2:	01a4      	lsls	r4, r4, #6
    b9f4:	f044 0901 	orr.w	r9, r4, #1
{
    b9f8:	4607      	mov	r7, r0
    b9fa:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    b9fc:	4833      	ldr	r0, [pc, #204]	; (bacc <mem_manage_fault+0xe8>)
    b9fe:	4649      	mov	r1, r9
{
    ba00:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    ba02:	f005 fc10 	bl	11226 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ba06:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ba08:	06d3      	lsls	r3, r2, #27
    ba0a:	d503      	bpl.n	ba14 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ba0c:	4830      	ldr	r0, [pc, #192]	; (bad0 <mem_manage_fault+0xec>)
    ba0e:	4649      	mov	r1, r9
    ba10:	f005 fc09 	bl	11226 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ba14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ba16:	0718      	lsls	r0, r3, #28
    ba18:	d504      	bpl.n	ba24 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    ba1a:	482e      	ldr	r0, [pc, #184]	; (bad4 <mem_manage_fault+0xf0>)
    ba1c:	f044 0101 	orr.w	r1, r4, #1
    ba20:	f005 fc01 	bl	11226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    ba24:	4d28      	ldr	r5, [pc, #160]	; (bac8 <mem_manage_fault+0xe4>)
    ba26:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ba28:	0799      	lsls	r1, r3, #30
    ba2a:	d423      	bmi.n	ba74 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    ba2c:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ba30:	4d25      	ldr	r5, [pc, #148]	; (bac8 <mem_manage_fault+0xe4>)
    ba32:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ba34:	07d3      	lsls	r3, r2, #31
    ba36:	d504      	bpl.n	ba42 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    ba38:	4827      	ldr	r0, [pc, #156]	; (bad8 <mem_manage_fault+0xf4>)
    ba3a:	f044 0101 	orr.w	r1, r4, #1
    ba3e:	f005 fbf2 	bl	11226 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ba42:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ba44:	0698      	lsls	r0, r3, #26
    ba46:	d504      	bpl.n	ba52 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    ba48:	4824      	ldr	r0, [pc, #144]	; (badc <mem_manage_fault+0xf8>)
    ba4a:	f044 0101 	orr.w	r1, r4, #1
    ba4e:	f005 fbea 	bl	11226 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    ba52:	4b1d      	ldr	r3, [pc, #116]	; (bac8 <mem_manage_fault+0xe4>)
    ba54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ba56:	06d1      	lsls	r1, r2, #27
    ba58:	d424      	bmi.n	baa4 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    ba5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    ba5c:	0792      	lsls	r2, r2, #30
    ba5e:	d421      	bmi.n	baa4 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ba60:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    ba62:	4a19      	ldr	r2, [pc, #100]	; (bac8 <mem_manage_fault+0xe4>)
    ba64:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ba66:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    ba6a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    ba6c:	2300      	movs	r3, #0
    ba6e:	7033      	strb	r3, [r6, #0]

	return reason;
}
    ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    ba74:	f044 0a01 	orr.w	sl, r4, #1
    ba78:	4819      	ldr	r0, [pc, #100]	; (bae0 <mem_manage_fault+0xfc>)
    ba7a:	4651      	mov	r1, sl
    ba7c:	f005 fbd3 	bl	11226 <log_0>
		uint32_t temp = SCB->MMFAR;
    ba80:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ba84:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ba86:	061a      	lsls	r2, r3, #24
    ba88:	d5d0      	bpl.n	ba2c <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ba8a:	4816      	ldr	r0, [pc, #88]	; (bae4 <mem_manage_fault+0x100>)
    ba8c:	4652      	mov	r2, sl
    ba8e:	4649      	mov	r1, r9
    ba90:	f005 fbd6 	bl	11240 <log_1>
			if (from_hard_fault != 0) {
    ba94:	f1b8 0f00 	cmp.w	r8, #0
    ba98:	d0ca      	beq.n	ba30 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ba9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ba9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    baa0:	62ab      	str	r3, [r5, #40]	; 0x28
    baa2:	e7c5      	b.n	ba30 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    baa4:	685b      	ldr	r3, [r3, #4]
    baa6:	051b      	lsls	r3, r3, #20
    baa8:	d5da      	bpl.n	ba60 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    baaa:	4639      	mov	r1, r7
    baac:	4648      	mov	r0, r9
    baae:	f7ff fe9f 	bl	b7f0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    bab2:	2800      	cmp	r0, #0
    bab4:	d0d4      	beq.n	ba60 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    bab6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    baba:	2002      	movs	r0, #2
    babc:	e7d1      	b.n	ba62 <mem_manage_fault+0x7e>
    babe:	bf00      	nop
    bac0:	00012b64 	.word	0x00012b64
    bac4:	00012bbc 	.word	0x00012bbc
    bac8:	e000ed00 	.word	0xe000ed00
    bacc:	00013250 	.word	0x00013250
    bad0:	00013266 	.word	0x00013266
    bad4:	00013299 	.word	0x00013299
    bad8:	000132da 	.word	0x000132da
    badc:	000132f9 	.word	0x000132f9
    bae0:	000132ac 	.word	0x000132ac
    bae4:	000132c4 	.word	0x000132c4

0000bae8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    bae8:	b570      	push	{r4, r5, r6, lr}
    baea:	4b23      	ldr	r3, [pc, #140]	; (bb78 <usage_fault.isra.0+0x90>)
    baec:	4c23      	ldr	r4, [pc, #140]	; (bb7c <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    baee:	4d24      	ldr	r5, [pc, #144]	; (bb80 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    baf0:	4824      	ldr	r0, [pc, #144]	; (bb84 <usage_fault.isra.0+0x9c>)
    baf2:	1ae4      	subs	r4, r4, r3
    baf4:	08e4      	lsrs	r4, r4, #3
    baf6:	01a4      	lsls	r4, r4, #6
    baf8:	f044 0601 	orr.w	r6, r4, #1
    bafc:	4631      	mov	r1, r6
    bafe:	f005 fb92 	bl	11226 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    bb02:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    bb04:	0193      	lsls	r3, r2, #6
    bb06:	d503      	bpl.n	bb10 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    bb08:	481f      	ldr	r0, [pc, #124]	; (bb88 <usage_fault.isra.0+0xa0>)
    bb0a:	4631      	mov	r1, r6
    bb0c:	f005 fb8b 	bl	11226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    bb10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bb12:	01dd      	lsls	r5, r3, #7
    bb14:	d504      	bpl.n	bb20 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    bb16:	481d      	ldr	r0, [pc, #116]	; (bb8c <usage_fault.isra.0+0xa4>)
    bb18:	f044 0101 	orr.w	r1, r4, #1
    bb1c:	f005 fb83 	bl	11226 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    bb20:	4d17      	ldr	r5, [pc, #92]	; (bb80 <usage_fault.isra.0+0x98>)
    bb22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    bb24:	0310      	lsls	r0, r2, #12
    bb26:	d504      	bpl.n	bb32 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    bb28:	4819      	ldr	r0, [pc, #100]	; (bb90 <usage_fault.isra.0+0xa8>)
    bb2a:	f044 0101 	orr.w	r1, r4, #1
    bb2e:	f005 fb7a 	bl	11226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    bb32:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bb34:	0359      	lsls	r1, r3, #13
    bb36:	d504      	bpl.n	bb42 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    bb38:	4816      	ldr	r0, [pc, #88]	; (bb94 <usage_fault.isra.0+0xac>)
    bb3a:	f044 0101 	orr.w	r1, r4, #1
    bb3e:	f005 fb72 	bl	11226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    bb42:	4d0f      	ldr	r5, [pc, #60]	; (bb80 <usage_fault.isra.0+0x98>)
    bb44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    bb46:	0392      	lsls	r2, r2, #14
    bb48:	d504      	bpl.n	bb54 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    bb4a:	4813      	ldr	r0, [pc, #76]	; (bb98 <usage_fault.isra.0+0xb0>)
    bb4c:	f044 0101 	orr.w	r1, r4, #1
    bb50:	f005 fb69 	bl	11226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    bb54:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bb56:	03db      	lsls	r3, r3, #15
    bb58:	d504      	bpl.n	bb64 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    bb5a:	4810      	ldr	r0, [pc, #64]	; (bb9c <usage_fault.isra.0+0xb4>)
    bb5c:	f044 0101 	orr.w	r1, r4, #1
    bb60:	f005 fb61 	bl	11226 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    bb64:	4a06      	ldr	r2, [pc, #24]	; (bb80 <usage_fault.isra.0+0x98>)
    bb66:	6a93      	ldr	r3, [r2, #40]	; 0x28
    bb68:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    bb6c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    bb70:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    bb72:	2000      	movs	r0, #0
    bb74:	bd70      	pop	{r4, r5, r6, pc}
    bb76:	bf00      	nop
    bb78:	00012b64 	.word	0x00012b64
    bb7c:	00012bbc 	.word	0x00012bbc
    bb80:	e000ed00 	.word	0xe000ed00
    bb84:	00013328 	.word	0x00013328
    bb88:	00013340 	.word	0x00013340
    bb8c:	00013353 	.word	0x00013353
    bb90:	0001336d 	.word	0x0001336d
    bb94:	0001338b 	.word	0x0001338b
    bb98:	000133b0 	.word	0x000133b0
    bb9c:	000133ca 	.word	0x000133ca

0000bba0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bba4:	4b2a      	ldr	r3, [pc, #168]	; (bc50 <bus_fault.isra.0+0xb0>)
    bba6:	4c2b      	ldr	r4, [pc, #172]	; (bc54 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    bba8:	4d2b      	ldr	r5, [pc, #172]	; (bc58 <bus_fault.isra.0+0xb8>)
    bbaa:	1ae4      	subs	r4, r4, r3
    bbac:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    bbae:	01a4      	lsls	r4, r4, #6
    bbb0:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    bbb4:	4607      	mov	r7, r0
    bbb6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    bbb8:	4828      	ldr	r0, [pc, #160]	; (bc5c <bus_fault.isra.0+0xbc>)
    bbba:	4641      	mov	r1, r8
    bbbc:	f005 fb33 	bl	11226 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    bbc0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    bbc2:	04d1      	lsls	r1, r2, #19
    bbc4:	d503      	bpl.n	bbce <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    bbc6:	4826      	ldr	r0, [pc, #152]	; (bc60 <bus_fault.isra.0+0xc0>)
    bbc8:	4641      	mov	r1, r8
    bbca:	f005 fb2c 	bl	11226 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    bbce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bbd0:	051a      	lsls	r2, r3, #20
    bbd2:	d504      	bpl.n	bbde <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    bbd4:	4823      	ldr	r0, [pc, #140]	; (bc64 <bus_fault.isra.0+0xc4>)
    bbd6:	f044 0101 	orr.w	r1, r4, #1
    bbda:	f005 fb24 	bl	11226 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    bbde:	4d1e      	ldr	r5, [pc, #120]	; (bc58 <bus_fault.isra.0+0xb8>)
    bbe0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bbe2:	059b      	lsls	r3, r3, #22
    bbe4:	d512      	bpl.n	bc0c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    bbe6:	f044 0801 	orr.w	r8, r4, #1
    bbea:	481f      	ldr	r0, [pc, #124]	; (bc68 <bus_fault.isra.0+0xc8>)
    bbec:	4641      	mov	r1, r8
    bbee:	f005 fb1a 	bl	11226 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    bbf2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    bbf4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bbf6:	0418      	lsls	r0, r3, #16
    bbf8:	d508      	bpl.n	bc0c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    bbfa:	481c      	ldr	r0, [pc, #112]	; (bc6c <bus_fault.isra.0+0xcc>)
    bbfc:	4642      	mov	r2, r8
    bbfe:	f005 fb1f 	bl	11240 <log_1>
			if (from_hard_fault != 0) {
    bc02:	b11f      	cbz	r7, bc0c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    bc04:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bc06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    bc0a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    bc0c:	4d12      	ldr	r5, [pc, #72]	; (bc58 <bus_fault.isra.0+0xb8>)
    bc0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bc10:	0559      	lsls	r1, r3, #21
    bc12:	d504      	bpl.n	bc1e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    bc14:	4816      	ldr	r0, [pc, #88]	; (bc70 <bus_fault.isra.0+0xd0>)
    bc16:	f044 0101 	orr.w	r1, r4, #1
    bc1a:	f005 fb04 	bl	11226 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    bc1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bc20:	05da      	lsls	r2, r3, #23
    bc22:	d50d      	bpl.n	bc40 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    bc24:	4813      	ldr	r0, [pc, #76]	; (bc74 <bus_fault.isra.0+0xd4>)
    bc26:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    bc2a:	f005 fafc 	bl	11226 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bc2e:	4a0a      	ldr	r2, [pc, #40]	; (bc58 <bus_fault.isra.0+0xb8>)
    bc30:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    bc32:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bc34:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    bc38:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    bc3a:	7030      	strb	r0, [r6, #0]
}
    bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    bc40:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bc42:	049b      	lsls	r3, r3, #18
    bc44:	d5f3      	bpl.n	bc2e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    bc46:	480c      	ldr	r0, [pc, #48]	; (bc78 <bus_fault.isra.0+0xd8>)
    bc48:	f044 0101 	orr.w	r1, r4, #1
    bc4c:	e7ed      	b.n	bc2a <bus_fault.isra.0+0x8a>
    bc4e:	bf00      	nop
    bc50:	00012b64 	.word	0x00012b64
    bc54:	00012bbc 	.word	0x00012bbc
    bc58:	e000ed00 	.word	0xe000ed00
    bc5c:	000133f5 	.word	0x000133f5
    bc60:	0001340b 	.word	0x0001340b
    bc64:	00013299 	.word	0x00013299
    bc68:	0001341c 	.word	0x0001341c
    bc6c:	00013435 	.word	0x00013435
    bc70:	0001344a 	.word	0x0001344a
    bc74:	00013465 	.word	0x00013465
    bc78:	000132f9 	.word	0x000132f9

0000bc7c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    bc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bc80:	4b57      	ldr	r3, [pc, #348]	; (bde0 <z_arm_fault+0x164>)
    bc82:	685e      	ldr	r6, [r3, #4]
{
    bc84:	b08a      	sub	sp, #40	; 0x28
    bc86:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bc88:	f3c6 0408 	ubfx	r4, r6, #0, #9
    bc8c:	2500      	movs	r5, #0
    bc8e:	f385 8811 	msr	BASEPRI, r5
    bc92:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    bc96:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    bc9a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    bc9e:	d10d      	bne.n	bcbc <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    bca0:	f002 030c 	and.w	r3, r2, #12
    bca4:	2b08      	cmp	r3, #8
    bca6:	d10b      	bne.n	bcc0 <z_arm_fault+0x44>
    bca8:	494e      	ldr	r1, [pc, #312]	; (bde4 <z_arm_fault+0x168>)
    bcaa:	4b4f      	ldr	r3, [pc, #316]	; (bde8 <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    bcac:	484f      	ldr	r0, [pc, #316]	; (bdec <z_arm_fault+0x170>)
    bcae:	1ac9      	subs	r1, r1, r3
    bcb0:	08c9      	lsrs	r1, r1, #3
    bcb2:	0189      	lsls	r1, r1, #6
    bcb4:	f041 0101 	orr.w	r1, r1, #1
    bcb8:	f005 fab5 	bl	11226 <log_0>
		return NULL;
    bcbc:	462f      	mov	r7, r5
    bcbe:	e003      	b.n	bcc8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    bcc0:	0712      	lsls	r2, r2, #28
    bcc2:	d401      	bmi.n	bcc8 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    bcc4:	4607      	mov	r7, r0
			*nested_exc = true;
    bcc6:	2501      	movs	r5, #1
	*recoverable = false;
    bcc8:	2300      	movs	r3, #0
    bcca:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    bcce:	1ee3      	subs	r3, r4, #3
    bcd0:	2b09      	cmp	r3, #9
    bcd2:	d86b      	bhi.n	bdac <z_arm_fault+0x130>
    bcd4:	e8df f003 	tbb	[pc, r3]
    bcd8:	3d5d5905 	.word	0x3d5d5905
    bcdc:	6a6a6a6a 	.word	0x6a6a6a6a
    bce0:	616a      	.short	0x616a
    bce2:	4b41      	ldr	r3, [pc, #260]	; (bde8 <z_arm_fault+0x16c>)
    bce4:	4e3f      	ldr	r6, [pc, #252]	; (bde4 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    bce6:	4842      	ldr	r0, [pc, #264]	; (bdf0 <z_arm_fault+0x174>)
    bce8:	1af6      	subs	r6, r6, r3
    bcea:	08f6      	lsrs	r6, r6, #3
    bcec:	01b6      	lsls	r6, r6, #6
    bcee:	f046 0601 	orr.w	r6, r6, #1
    bcf2:	4631      	mov	r1, r6
    bcf4:	f005 fa97 	bl	11226 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bcf8:	4b39      	ldr	r3, [pc, #228]	; (bde0 <z_arm_fault+0x164>)
    bcfa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    bcfc:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bd00:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    bd04:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bd08:	d005      	beq.n	bd16 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    bd0a:	483a      	ldr	r0, [pc, #232]	; (bdf4 <z_arm_fault+0x178>)
    bd0c:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    bd0e:	f005 fa8a 	bl	11226 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    bd12:	2400      	movs	r4, #0
}
    bd14:	e020      	b.n	bd58 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    bd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bd18:	005b      	lsls	r3, r3, #1
    bd1a:	d51d      	bpl.n	bd58 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
    bd1c:	4836      	ldr	r0, [pc, #216]	; (bdf8 <z_arm_fault+0x17c>)
    bd1e:	4631      	mov	r1, r6
    bd20:	f005 fa81 	bl	11226 <log_0>
		if (SCB_MMFSR != 0) {
    bd24:	4b35      	ldr	r3, [pc, #212]	; (bdfc <z_arm_fault+0x180>)
    bd26:	781b      	ldrb	r3, [r3, #0]
    bd28:	b133      	cbz	r3, bd38 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    bd2a:	f10d 0207 	add.w	r2, sp, #7
    bd2e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    bd30:	4638      	mov	r0, r7
    bd32:	f7ff fe57 	bl	b9e4 <mem_manage_fault>
    bd36:	e00e      	b.n	bd56 <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
    bd38:	4b31      	ldr	r3, [pc, #196]	; (be00 <z_arm_fault+0x184>)
    bd3a:	781b      	ldrb	r3, [r3, #0]
    bd3c:	b12b      	cbz	r3, bd4a <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    bd3e:	f10d 0107 	add.w	r1, sp, #7
    bd42:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    bd44:	f7ff ff2c 	bl	bba0 <bus_fault.isra.0>
    bd48:	e005      	b.n	bd56 <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
    bd4a:	4b2e      	ldr	r3, [pc, #184]	; (be04 <z_arm_fault+0x188>)
    bd4c:	881b      	ldrh	r3, [r3, #0]
    bd4e:	b29b      	uxth	r3, r3
    bd50:	b113      	cbz	r3, bd58 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
    bd52:	f7ff fec9 	bl	bae8 <usage_fault.isra.0>
    bd56:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    bd58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd5c:	b993      	cbnz	r3, bd84 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    bd5e:	2220      	movs	r2, #32
    bd60:	4639      	mov	r1, r7
    bd62:	a802      	add	r0, sp, #8
    bd64:	f005 fe94 	bl	11a90 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    bd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd6a:	b39d      	cbz	r5, bdd4 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    bd6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    bd70:	b922      	cbnz	r2, bd7c <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    bd72:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    bd76:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bd7a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    bd7c:	a902      	add	r1, sp, #8
    bd7e:	4620      	mov	r0, r4
    bd80:	f7ff fd84 	bl	b88c <z_arm_fatal_error>
}
    bd84:	b00a      	add	sp, #40	; 0x28
    bd86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    bd8a:	f10d 0207 	add.w	r2, sp, #7
    bd8e:	2100      	movs	r1, #0
    bd90:	e7ce      	b.n	bd30 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    bd92:	f10d 0107 	add.w	r1, sp, #7
    bd96:	2000      	movs	r0, #0
    bd98:	e7d4      	b.n	bd44 <z_arm_fault+0xc8>
    bd9a:	4912      	ldr	r1, [pc, #72]	; (bde4 <z_arm_fault+0x168>)
    bd9c:	4b12      	ldr	r3, [pc, #72]	; (bde8 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    bd9e:	481a      	ldr	r0, [pc, #104]	; (be08 <z_arm_fault+0x18c>)
    bda0:	1ac9      	subs	r1, r1, r3
    bda2:	08c9      	lsrs	r1, r1, #3
    bda4:	0189      	lsls	r1, r1, #6
    bda6:	f041 0101 	orr.w	r1, r1, #1
    bdaa:	e7b0      	b.n	bd0e <z_arm_fault+0x92>
    bdac:	4a0e      	ldr	r2, [pc, #56]	; (bde8 <z_arm_fault+0x16c>)
    bdae:	4b0d      	ldr	r3, [pc, #52]	; (bde4 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
    bdb0:	4816      	ldr	r0, [pc, #88]	; (be0c <z_arm_fault+0x190>)
    bdb2:	4917      	ldr	r1, [pc, #92]	; (be10 <z_arm_fault+0x194>)
    bdb4:	1a9b      	subs	r3, r3, r2
    bdb6:	08db      	lsrs	r3, r3, #3
    bdb8:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    bdbc:	ea4f 1383 	mov.w	r3, r3, lsl #6
    bdc0:	bf18      	it	ne
    bdc2:	4601      	movne	r1, r0
    bdc4:	f043 0301 	orr.w	r3, r3, #1
    bdc8:	4812      	ldr	r0, [pc, #72]	; (be14 <z_arm_fault+0x198>)
    bdca:	f1a4 0210 	sub.w	r2, r4, #16
    bdce:	f005 fa4b 	bl	11268 <log_2>
    bdd2:	e79e      	b.n	bd12 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bdd4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    bdd8:	f023 0301 	bic.w	r3, r3, #1
    bddc:	e7cd      	b.n	bd7a <z_arm_fault+0xfe>
    bdde:	bf00      	nop
    bde0:	e000ed00 	.word	0xe000ed00
    bde4:	00012bbc 	.word	0x00012bbc
    bde8:	00012b64 	.word	0x00012b64
    bdec:	0001347d 	.word	0x0001347d
    bdf0:	000134a8 	.word	0x000134a8
    bdf4:	000134bf 	.word	0x000134bf
    bdf8:	000134e0 	.word	0x000134e0
    bdfc:	e000ed28 	.word	0xe000ed28
    be00:	e000ed29 	.word	0xe000ed29
    be04:	e000ed2a 	.word	0xe000ed2a
    be08:	000134ff 	.word	0x000134ff
    be0c:	00013538 	.word	0x00013538
    be10:	00013523 	.word	0x00013523
    be14:	00013551 	.word	0x00013551

0000be18 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    be18:	4a02      	ldr	r2, [pc, #8]	; (be24 <z_arm_fault_init+0xc>)
    be1a:	6953      	ldr	r3, [r2, #20]
    be1c:	f043 0310 	orr.w	r3, r3, #16
    be20:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    be22:	4770      	bx	lr
    be24:	e000ed00 	.word	0xe000ed00

0000be28 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    be28:	4b04      	ldr	r3, [pc, #16]	; (be3c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    be2a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    be2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    be2e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    be30:	d003      	beq.n	be3a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    be32:	4903      	ldr	r1, [pc, #12]	; (be40 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    be34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    be38:	600a      	str	r2, [r1, #0]

0000be3a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    be3a:	4770      	bx	lr
	ldr r3, =_kernel
    be3c:	20001628 	.word	0x20001628
	ldr r1, =_SCS_ICSR
    be40:	e000ed04 	.word	0xe000ed04

0000be44 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    be44:	4a06      	ldr	r2, [pc, #24]	; (be60 <z_arm_clear_arm_mpu_config+0x1c>)
    be46:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    be48:	2300      	movs	r3, #0
	int num_regions =
    be4a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    be4e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    be50:	428b      	cmp	r3, r1
    be52:	d100      	bne.n	be56 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    be54:	4770      	bx	lr
  MPU->RNR = rnr;
    be56:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    be58:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    be5a:	3301      	adds	r3, #1
    be5c:	e7f8      	b.n	be50 <z_arm_clear_arm_mpu_config+0xc>
    be5e:	bf00      	nop
    be60:	e000ed90 	.word	0xe000ed90

0000be64 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    be64:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    be66:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    be68:	2300      	movs	r3, #0
    be6a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    be6e:	f7ff ffe9 	bl	be44 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    be72:	4b14      	ldr	r3, [pc, #80]	; (bec4 <z_arm_init_arch_hw_at_boot+0x60>)
    be74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    be78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    be7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    be80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    be84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    be88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    be8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    be90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    be94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    be98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    be9c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    bea0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    bea4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    bea8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    beac:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    beb0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    beb4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    beb8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    beba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bebe:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    bec2:	bd08      	pop	{r3, pc}
    bec4:	e000e100 	.word	0xe000e100

0000bec8 <z_arm_interrupt_init>:
    bec8:	4804      	ldr	r0, [pc, #16]	; (bedc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    beca:	2300      	movs	r3, #0
    becc:	2140      	movs	r1, #64	; 0x40
    bece:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    bed0:	3301      	adds	r3, #1
    bed2:	2b27      	cmp	r3, #39	; 0x27
    bed4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    bed8:	d1f9      	bne.n	bece <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    beda:	4770      	bx	lr
    bedc:	e000e100 	.word	0xe000e100

0000bee0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    bee0:	4b06      	ldr	r3, [pc, #24]	; (befc <z_impl_k_thread_abort+0x1c>)
    bee2:	689b      	ldr	r3, [r3, #8]
    bee4:	4283      	cmp	r3, r0
    bee6:	d107      	bne.n	bef8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bee8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    beec:	b123      	cbz	r3, bef8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    beee:	4a04      	ldr	r2, [pc, #16]	; (bf00 <z_impl_k_thread_abort+0x20>)
    bef0:	6853      	ldr	r3, [r2, #4]
    bef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    bef6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    bef8:	f004 ba04 	b.w	10304 <z_thread_abort>
    befc:	20001628 	.word	0x20001628
    bf00:	e000ed00 	.word	0xe000ed00

0000bf04 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    bf04:	4b02      	ldr	r3, [pc, #8]	; (bf10 <z_arm_configure_static_mpu_regions+0xc>)
    bf06:	4a03      	ldr	r2, [pc, #12]	; (bf14 <z_arm_configure_static_mpu_regions+0x10>)
    bf08:	4803      	ldr	r0, [pc, #12]	; (bf18 <z_arm_configure_static_mpu_regions+0x14>)
    bf0a:	2101      	movs	r1, #1
    bf0c:	f000 b884 	b.w	c018 <arm_core_mpu_configure_static_mpu_regions>
    bf10:	20010000 	.word	0x20010000
    bf14:	20000000 	.word	0x20000000
    bf18:	00012df8 	.word	0x00012df8

0000bf1c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    bf1c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    bf1e:	4b05      	ldr	r3, [pc, #20]	; (bf34 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    bf20:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    bf22:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    bf24:	4a04      	ldr	r2, [pc, #16]	; (bf38 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    bf26:	2120      	movs	r1, #32
    bf28:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    bf2c:	4618      	mov	r0, r3
    bf2e:	2101      	movs	r1, #1
    bf30:	f000 b87c 	b.w	c02c <arm_core_mpu_configure_dynamic_mpu_regions>
    bf34:	2000147c 	.word	0x2000147c
    bf38:	150b0000 	.word	0x150b0000

0000bf3c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    bf3e:	4f28      	ldr	r7, [pc, #160]	; (bfe0 <mpu_configure_regions+0xa4>)
    bf40:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    bf42:	2100      	movs	r1, #0
    bf44:	42b1      	cmp	r1, r6
    bf46:	da14      	bge.n	bf72 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    bf48:	6844      	ldr	r4, [r0, #4]
    bf4a:	2c00      	cmp	r4, #0
    bf4c:	d045      	beq.n	bfda <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    bf4e:	b1c3      	cbz	r3, bf82 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    bf50:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    bf54:	ea14 0f0c 	tst.w	r4, ip
    bf58:	d00d      	beq.n	bf76 <mpu_configure_regions+0x3a>
    bf5a:	4a22      	ldr	r2, [pc, #136]	; (bfe4 <mpu_configure_regions+0xa8>)
    bf5c:	4b22      	ldr	r3, [pc, #136]	; (bfe8 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    bf5e:	4823      	ldr	r0, [pc, #140]	; (bfec <mpu_configure_regions+0xb0>)
    bf60:	1ad2      	subs	r2, r2, r3
    bf62:	08d2      	lsrs	r2, r2, #3
    bf64:	0192      	lsls	r2, r2, #6
    bf66:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    bf6a:	f005 f969 	bl	11240 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    bf6e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    bf72:	4610      	mov	r0, r2
    bf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    bf76:	2c1f      	cmp	r4, #31
    bf78:	d9ef      	bls.n	bf5a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    bf7a:	6805      	ldr	r5, [r0, #0]
		&&
    bf7c:	ea1c 0f05 	tst.w	ip, r5
    bf80:	d1eb      	bne.n	bf5a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    bf82:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    bf84:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    bf86:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    bf8a:	6802      	ldr	r2, [r0, #0]
    bf8c:	d916      	bls.n	bfbc <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    bf8e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    bf92:	d815      	bhi.n	bfc0 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    bf94:	3c01      	subs	r4, #1
    bf96:	fab4 f484 	clz	r4, r4
    bf9a:	f1c4 041f 	rsb	r4, r4, #31
    bf9e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    bfa0:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    bfa2:	ea4c 0404 	orr.w	r4, ip, r4
    bfa6:	d90d      	bls.n	bfc4 <mpu_configure_regions+0x88>
    bfa8:	4a0e      	ldr	r2, [pc, #56]	; (bfe4 <mpu_configure_regions+0xa8>)
    bfaa:	4b0f      	ldr	r3, [pc, #60]	; (bfe8 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    bfac:	4810      	ldr	r0, [pc, #64]	; (bff0 <mpu_configure_regions+0xb4>)
    bfae:	1ad2      	subs	r2, r2, r3
    bfb0:	08d2      	lsrs	r2, r2, #3
    bfb2:	0192      	lsls	r2, r2, #6
    bfb4:	f042 0201 	orr.w	r2, r2, #1
    bfb8:	4629      	mov	r1, r5
    bfba:	e7d6      	b.n	bf6a <mpu_configure_regions+0x2e>
		return REGION_32B;
    bfbc:	2408      	movs	r4, #8
    bfbe:	e7ef      	b.n	bfa0 <mpu_configure_regions+0x64>
		return REGION_4G;
    bfc0:	243e      	movs	r4, #62	; 0x3e
    bfc2:	e7ed      	b.n	bfa0 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    bfc4:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    bfc8:	432a      	orrs	r2, r5
    bfca:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    bfce:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    bfd2:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    bfd4:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    bfd6:	613c      	str	r4, [r7, #16]
		reg_index++;
    bfd8:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    bfda:	3101      	adds	r1, #1
    bfdc:	300c      	adds	r0, #12
    bfde:	e7b1      	b.n	bf44 <mpu_configure_regions+0x8>
    bfe0:	e000ed90 	.word	0xe000ed90
    bfe4:	00012bac 	.word	0x00012bac
    bfe8:	00012b64 	.word	0x00012b64
    bfec:	00013568 	.word	0x00013568
    bff0:	0001358b 	.word	0x0001358b

0000bff4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    bff4:	4b03      	ldr	r3, [pc, #12]	; (c004 <arm_core_mpu_enable+0x10>)
    bff6:	2205      	movs	r2, #5
    bff8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    bffa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bffe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c002:	4770      	bx	lr
    c004:	e000ed90 	.word	0xe000ed90

0000c008 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    c008:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c00c:	4b01      	ldr	r3, [pc, #4]	; (c014 <arm_core_mpu_disable+0xc>)
    c00e:	2200      	movs	r2, #0
    c010:	605a      	str	r2, [r3, #4]
}
    c012:	4770      	bx	lr
    c014:	e000ed90 	.word	0xe000ed90

0000c018 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    c018:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    c01a:	4c03      	ldr	r4, [pc, #12]	; (c028 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    c01c:	2301      	movs	r3, #1
    c01e:	7822      	ldrb	r2, [r4, #0]
    c020:	f7ff ff8c 	bl	bf3c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c024:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    c026:	bd10      	pop	{r4, pc}
    c028:	20001686 	.word	0x20001686

0000c02c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    c02c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    c02e:	4a08      	ldr	r2, [pc, #32]	; (c050 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    c030:	2300      	movs	r3, #0
    c032:	7812      	ldrb	r2, [r2, #0]
    c034:	f7ff ff82 	bl	bf3c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    c038:	f110 0f16 	cmn.w	r0, #22
    c03c:	d003      	beq.n	c046 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    c03e:	4b05      	ldr	r3, [pc, #20]	; (c054 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    c040:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    c042:	2807      	cmp	r0, #7
    c044:	dd00      	ble.n	c048 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    c046:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    c048:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    c04a:	611a      	str	r2, [r3, #16]
    c04c:	3001      	adds	r0, #1
    c04e:	e7f8      	b.n	c042 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    c050:	20001686 	.word	0x20001686
    c054:	e000ed90 	.word	0xe000ed90

0000c058 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c058:	4913      	ldr	r1, [pc, #76]	; (c0a8 <z_arm_mpu_init+0x50>)
    c05a:	6808      	ldr	r0, [r1, #0]
    c05c:	2808      	cmp	r0, #8
{
    c05e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    c060:	d81e      	bhi.n	c0a0 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    c062:	f7ff ffd1 	bl	c008 <arm_core_mpu_disable>
	MPU->RNR = index;
    c066:	4c11      	ldr	r4, [pc, #68]	; (c0ac <z_arm_mpu_init+0x54>)
    c068:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c06a:	2200      	movs	r2, #0
    c06c:	4290      	cmp	r0, r2
    c06e:	f101 010c 	add.w	r1, r1, #12
    c072:	d105      	bne.n	c080 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c074:	4b0e      	ldr	r3, [pc, #56]	; (c0b0 <z_arm_mpu_init+0x58>)
    c076:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    c078:	f7ff ffbc 	bl	bff4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c07c:	2000      	movs	r0, #0
}
    c07e:	bd10      	pop	{r4, pc}
    c080:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c082:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    c086:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    c08a:	4313      	orrs	r3, r2
    c08c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c090:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c092:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c096:	f043 0301 	orr.w	r3, r3, #1
    c09a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c09c:	3201      	adds	r2, #1
    c09e:	e7e5      	b.n	c06c <z_arm_mpu_init+0x14>
		return -1;
    c0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0a4:	e7eb      	b.n	c07e <z_arm_mpu_init+0x26>
    c0a6:	bf00      	nop
    c0a8:	00012e04 	.word	0x00012e04
    c0ac:	e000ed90 	.word	0xe000ed90
    c0b0:	20001686 	.word	0x20001686

0000c0b4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    c0b4:	4b01      	ldr	r3, [pc, #4]	; (c0bc <__stdout_hook_install+0x8>)
    c0b6:	6018      	str	r0, [r3, #0]
}
    c0b8:	4770      	bx	lr
    c0ba:	bf00      	nop
    c0bc:	20000284 	.word	0x20000284

0000c0c0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    c0c0:	f04f 0340 	mov.w	r3, #64	; 0x40
    c0c4:	f3ef 8211 	mrs	r2, BASEPRI
    c0c8:	f383 8811 	msr	BASEPRI, r3
    c0cc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c0d0:	4906      	ldr	r1, [pc, #24]	; (c0ec <nordicsemi_nrf52_init+0x2c>)
    c0d2:	2301      	movs	r3, #1
    c0d4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    c0d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c0dc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    c0e0:	f382 8811 	msr	BASEPRI, r2
    c0e4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c0e8:	2000      	movs	r0, #0
    c0ea:	4770      	bx	lr
    c0ec:	4001e000 	.word	0x4001e000

0000c0f0 <sys_arch_reboot>:
    *p_gpregret = val;
    c0f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c0f4:	b2c0      	uxtb	r0, r0
    c0f6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    c0fa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c0fe:	4905      	ldr	r1, [pc, #20]	; (c114 <sys_arch_reboot+0x24>)
    c100:	4b05      	ldr	r3, [pc, #20]	; (c118 <sys_arch_reboot+0x28>)
    c102:	68ca      	ldr	r2, [r1, #12]
    c104:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c108:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c10a:	60cb      	str	r3, [r1, #12]
    c10c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c110:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c112:	e7fd      	b.n	c110 <sys_arch_reboot+0x20>
    c114:	e000ed00 	.word	0xe000ed00
    c118:	05fa0004 	.word	0x05fa0004

0000c11c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c11c:	b120      	cbz	r0, c128 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c11e:	4b03      	ldr	r3, [pc, #12]	; (c12c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c120:	0180      	lsls	r0, r0, #6
    c122:	f043 0301 	orr.w	r3, r3, #1
    c126:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    c128:	4770      	bx	lr
    c12a:	bf00      	nop
    c12c:	00012d20 	.word	0x00012d20

0000c130 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    c130:	4b0e      	ldr	r3, [pc, #56]	; (c16c <bt_hex_real+0x3c>)
    c132:	2940      	cmp	r1, #64	; 0x40
{
    c134:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    c136:	bf28      	it	cs
    c138:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    c13a:	4c0d      	ldr	r4, [pc, #52]	; (c170 <bt_hex_real+0x40>)
    c13c:	1846      	adds	r6, r0, r1
    c13e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    c140:	42b0      	cmp	r0, r6
    c142:	f103 0302 	add.w	r3, r3, #2
    c146:	d104      	bne.n	c152 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    c148:	2300      	movs	r3, #0
    c14a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    c14e:	4807      	ldr	r0, [pc, #28]	; (c16c <bt_hex_real+0x3c>)
    c150:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    c152:	7802      	ldrb	r2, [r0, #0]
    c154:	0912      	lsrs	r2, r2, #4
    c156:	5ca2      	ldrb	r2, [r4, r2]
    c158:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    c15c:	f810 2b01 	ldrb.w	r2, [r0], #1
    c160:	f002 020f 	and.w	r2, r2, #15
    c164:	5ca2      	ldrb	r2, [r4, r2]
    c166:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    c16a:	e7e9      	b.n	c140 <bt_hex_real+0x10>
    c16c:	20001687 	.word	0x20001687
    c170:	000135c4 	.word	0x000135c4

0000c174 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    c174:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    c176:	7803      	ldrb	r3, [r0, #0]
    c178:	b08b      	sub	sp, #44	; 0x2c
    c17a:	4604      	mov	r4, r0
    c17c:	ad07      	add	r5, sp, #28
    c17e:	2b03      	cmp	r3, #3
    c180:	d821      	bhi.n	c1c6 <bt_addr_le_str_real+0x52>
    c182:	e8df f003 	tbb	[pc, r3]
    c186:	1a02      	.short	0x1a02
    c188:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    c18a:	4912      	ldr	r1, [pc, #72]	; (c1d4 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    c18c:	4628      	mov	r0, r5
    c18e:	f005 fc36 	bl	119fe <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c192:	7863      	ldrb	r3, [r4, #1]
    c194:	9304      	str	r3, [sp, #16]
    c196:	78a3      	ldrb	r3, [r4, #2]
    c198:	9303      	str	r3, [sp, #12]
    c19a:	78e3      	ldrb	r3, [r4, #3]
    c19c:	9302      	str	r3, [sp, #8]
    c19e:	7923      	ldrb	r3, [r4, #4]
    c1a0:	9301      	str	r3, [sp, #4]
    c1a2:	7963      	ldrb	r3, [r4, #5]
    c1a4:	9300      	str	r3, [sp, #0]
    c1a6:	4a0c      	ldr	r2, [pc, #48]	; (c1d8 <bt_addr_le_str_real+0x64>)
    c1a8:	79a3      	ldrb	r3, [r4, #6]
    c1aa:	9505      	str	r5, [sp, #20]
    c1ac:	211e      	movs	r1, #30
    c1ae:	480b      	ldr	r0, [pc, #44]	; (c1dc <bt_addr_le_str_real+0x68>)
    c1b0:	f004 fc26 	bl	10a00 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    c1b4:	4809      	ldr	r0, [pc, #36]	; (c1dc <bt_addr_le_str_real+0x68>)
    c1b6:	b00b      	add	sp, #44	; 0x2c
    c1b8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    c1ba:	4909      	ldr	r1, [pc, #36]	; (c1e0 <bt_addr_le_str_real+0x6c>)
    c1bc:	e7e6      	b.n	c18c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    c1be:	4909      	ldr	r1, [pc, #36]	; (c1e4 <bt_addr_le_str_real+0x70>)
    c1c0:	e7e4      	b.n	c18c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    c1c2:	4909      	ldr	r1, [pc, #36]	; (c1e8 <bt_addr_le_str_real+0x74>)
    c1c4:	e7e2      	b.n	c18c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c1c6:	4a09      	ldr	r2, [pc, #36]	; (c1ec <bt_addr_le_str_real+0x78>)
    c1c8:	210a      	movs	r1, #10
    c1ca:	4628      	mov	r0, r5
    c1cc:	f004 fc18 	bl	10a00 <snprintk>
		break;
    c1d0:	e7df      	b.n	c192 <bt_addr_le_str_real+0x1e>
    c1d2:	bf00      	nop
    c1d4:	00012ff5 	.word	0x00012ff5
    c1d8:	00013017 	.word	0x00013017
    c1dc:	20001708 	.word	0x20001708
    c1e0:	00012ffc 	.word	0x00012ffc
    c1e4:	00013003 	.word	0x00013003
    c1e8:	0001300d 	.word	0x0001300d
    c1ec:	000138b6 	.word	0x000138b6

0000c1f0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    c1f0:	b538      	push	{r3, r4, r5, lr}
    c1f2:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    c1f4:	4805      	ldr	r0, [pc, #20]	; (c20c <bt_buf_get_rx+0x1c>)
    c1f6:	f005 fd84 	bl	11d02 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c1fa:	4604      	mov	r4, r0
    c1fc:	b120      	cbz	r0, c208 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    c1fe:	2100      	movs	r1, #0
    c200:	3008      	adds	r0, #8
    c202:	f005 fd9d 	bl	11d40 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c206:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c208:	4620      	mov	r0, r4
    c20a:	bd38      	pop	{r3, r4, r5, pc}
    c20c:	2000039c 	.word	0x2000039c

0000c210 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c210:	b570      	push	{r4, r5, r6, lr}
    c212:	4602      	mov	r2, r0
    c214:	460b      	mov	r3, r1
	__asm__ volatile(
    c216:	f04f 0140 	mov.w	r1, #64	; 0x40
    c21a:	f3ef 8511 	mrs	r5, BASEPRI
    c21e:	f381 8811 	msr	BASEPRI, r1
    c222:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    c226:	480c      	ldr	r0, [pc, #48]	; (c258 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    c228:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    c22a:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
	bt_dev.sent_cmd = NULL;
    c22e:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
	__asm__ volatile(
    c232:	f385 8811 	msr	BASEPRI, r5
    c236:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    c23a:	b924      	cbnz	r4, c246 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    c23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c240:	2001      	movs	r0, #1
    c242:	f7ff bfd5 	b.w	c1f0 <bt_buf_get_rx>
    c246:	2301      	movs	r3, #1
    c248:	f104 0008 	add.w	r0, r4, #8
    c24c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    c24e:	81a1      	strh	r1, [r4, #12]
    c250:	f005 fd76 	bl	11d40 <net_buf_simple_reserve>
}
    c254:	4620      	mov	r0, r4
    c256:	bd70      	pop	{r4, r5, r6, pc}
    c258:	20000178 	.word	0x20000178

0000c25c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
	switch (evt) {
    c25c:	380e      	subs	r0, #14
    c25e:	2801      	cmp	r0, #1
{
    c260:	b570      	push	{r4, r5, r6, lr}
    c262:	460c      	mov	r4, r1
    c264:	4619      	mov	r1, r3
	switch (evt) {
    c266:	d804      	bhi.n	c272 <bt_buf_get_evt+0x16>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    c268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    c26c:	4610      	mov	r0, r2
    c26e:	f7ff bfcf 	b.w	c210 <bt_buf_get_cmd_complete>
		if (discardable) {
    c272:	b164      	cbz	r4, c28e <bt_buf_get_evt+0x32>
	return net_buf_alloc_fixed(pool, timeout);
    c274:	4808      	ldr	r0, [pc, #32]	; (c298 <bt_buf_get_evt+0x3c>)
    c276:	f005 fd44 	bl	11d02 <net_buf_alloc_fixed>
			if (buf) {
    c27a:	4604      	mov	r4, r0
    c27c:	b128      	cbz	r0, c28a <bt_buf_get_evt+0x2e>
	net_buf_simple_reserve(&buf->b, reserve);
    c27e:	2100      	movs	r1, #0
    c280:	3008      	adds	r0, #8
    c282:	f005 fd5d 	bl	11d40 <net_buf_simple_reserve>
    c286:	2301      	movs	r3, #1
    c288:	7523      	strb	r3, [r4, #20]
}
    c28a:	4620      	mov	r0, r4
    c28c:	bd70      	pop	{r4, r5, r6, pc}
    c28e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c292:	2001      	movs	r0, #1
    c294:	f7ff bfac 	b.w	c1f0 <bt_buf_get_rx>
    c298:	2000034c 	.word	0x2000034c

0000c29c <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    c29c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    c29e:	4d0b      	ldr	r5, [pc, #44]	; (c2cc <ver_str+0x30>)
{
    c2a0:	4606      	mov	r6, r0
	const char * const str[] = {
    c2a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    c2a4:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    c2a6:	ac01      	add	r4, sp, #4
    c2a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c2aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c2ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c2ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c2b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
    c2b2:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    c2b4:	682b      	ldr	r3, [r5, #0]
    c2b6:	6023      	str	r3, [r4, #0]
		return str[ver];
    c2b8:	bf9b      	ittet	ls
    c2ba:	ab0e      	addls	r3, sp, #56	; 0x38
    c2bc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    c2c0:	4803      	ldrhi	r0, [pc, #12]	; (c2d0 <ver_str+0x34>)
		return str[ver];
    c2c2:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
    c2c6:	b00e      	add	sp, #56	; 0x38
    c2c8:	bd70      	pop	{r4, r5, r6, pc}
    c2ca:	bf00      	nop
    c2cc:	00012cd4 	.word	0x00012cd4
    c2d0:	000136d2 	.word	0x000136d2

0000c2d4 <hci_hardware_error>:
{
    c2d4:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    c2d6:	2101      	movs	r1, #1
    c2d8:	3008      	adds	r0, #8
    c2da:	f005 fd5d 	bl	11d98 <net_buf_simple_pull_mem>
    c2de:	4b06      	ldr	r3, [pc, #24]	; (c2f8 <hci_hardware_error+0x24>)
    c2e0:	4a06      	ldr	r2, [pc, #24]	; (c2fc <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    c2e2:	7801      	ldrb	r1, [r0, #0]
    c2e4:	4806      	ldr	r0, [pc, #24]	; (c300 <hci_hardware_error+0x2c>)
    c2e6:	1ad2      	subs	r2, r2, r3
    c2e8:	08d2      	lsrs	r2, r2, #3
    c2ea:	0192      	lsls	r2, r2, #6
}
    c2ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    c2f0:	f042 0201 	orr.w	r2, r2, #1
    c2f4:	f004 bfa4 	b.w	11240 <log_1>
    c2f8:	00012b64 	.word	0x00012b64
    c2fc:	00012b74 	.word	0x00012b74
    c300:	000136da 	.word	0x000136da

0000c304 <hci_vendor_event>:
{
    c304:	b510      	push	{r4, lr}
    c306:	4a0a      	ldr	r2, [pc, #40]	; (c330 <hci_vendor_event+0x2c>)
    c308:	4c0a      	ldr	r4, [pc, #40]	; (c334 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    c30a:	8981      	ldrh	r1, [r0, #12]
    c30c:	6880      	ldr	r0, [r0, #8]
    c30e:	1aa4      	subs	r4, r4, r2
    c310:	f7ff ff0e 	bl	c130 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    c314:	f7fe f95a 	bl	a5cc <z_log_strdup>
    c318:	08e4      	lsrs	r4, r4, #3
    c31a:	01a4      	lsls	r4, r4, #6
    c31c:	f044 0402 	orr.w	r4, r4, #2
    c320:	4601      	mov	r1, r0
    c322:	4622      	mov	r2, r4
    c324:	4804      	ldr	r0, [pc, #16]	; (c338 <hci_vendor_event+0x34>)
}
    c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    c32a:	f004 bf89 	b.w	11240 <log_1>
    c32e:	bf00      	nop
    c330:	00012b64 	.word	0x00012b64
    c334:	00012b74 	.word	0x00012b74
    c338:	000136fc 	.word	0x000136fc

0000c33c <hci_cmd_done>:
{
    c33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c340:	4607      	mov	r7, r0
    c342:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c344:	7990      	ldrb	r0, [r2, #6]
    c346:	4e43      	ldr	r6, [pc, #268]	; (c454 <hci_cmd_done+0x118>)
{
    c348:	4688      	mov	r8, r1
    c34a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c34c:	f001 fa8e 	bl	d86c <net_buf_pool_get>
    c350:	4286      	cmp	r6, r0
    c352:	d016      	beq.n	c382 <hci_cmd_done+0x46>
    c354:	4b40      	ldr	r3, [pc, #256]	; (c458 <hci_cmd_done+0x11c>)
    c356:	4d41      	ldr	r5, [pc, #260]	; (c45c <hci_cmd_done+0x120>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    c358:	79a0      	ldrb	r0, [r4, #6]
    c35a:	9700      	str	r7, [sp, #0]
    c35c:	1aed      	subs	r5, r5, r3
    c35e:	08ed      	lsrs	r5, r5, #3
    c360:	9001      	str	r0, [sp, #4]
    c362:	f001 fa83 	bl	d86c <net_buf_pool_get>
    c366:	01ad      	lsls	r5, r5, #6
    c368:	f045 0502 	orr.w	r5, r5, #2
    c36c:	e9cd 0602 	strd	r0, r6, [sp, #8]
    c370:	462b      	mov	r3, r5
    c372:	483b      	ldr	r0, [pc, #236]	; (c460 <hci_cmd_done+0x124>)
    c374:	2204      	movs	r2, #4
    c376:	4669      	mov	r1, sp
    c378:	f004 ffab 	bl	112d2 <log_n>
}
    c37c:	b005      	add	sp, #20
    c37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    c382:	4620      	mov	r0, r4
    c384:	f001 fa7a 	bl	d87c <net_buf_id>
    c388:	4d36      	ldr	r5, [pc, #216]	; (c464 <hci_cmd_done+0x128>)
    c38a:	f04f 090c 	mov.w	r9, #12
    c38e:	fb09 5300 	mla	r3, r9, r0, r5
    c392:	885b      	ldrh	r3, [r3, #2]
    c394:	42bb      	cmp	r3, r7
    c396:	d011      	beq.n	c3bc <hci_cmd_done+0x80>
    c398:	4b2f      	ldr	r3, [pc, #188]	; (c458 <hci_cmd_done+0x11c>)
    c39a:	4e30      	ldr	r6, [pc, #192]	; (c45c <hci_cmd_done+0x120>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    c39c:	4620      	mov	r0, r4
    c39e:	1af6      	subs	r6, r6, r3
    c3a0:	f001 fa6c 	bl	d87c <net_buf_id>
    c3a4:	08f6      	lsrs	r6, r6, #3
    c3a6:	fb09 5000 	mla	r0, r9, r0, r5
    c3aa:	01b6      	lsls	r6, r6, #6
    c3ac:	f046 0602 	orr.w	r6, r6, #2
    c3b0:	8842      	ldrh	r2, [r0, #2]
    c3b2:	482d      	ldr	r0, [pc, #180]	; (c468 <hci_cmd_done+0x12c>)
    c3b4:	4633      	mov	r3, r6
    c3b6:	4639      	mov	r1, r7
    c3b8:	f004 ff56 	bl	11268 <log_2>
	if (cmd(buf)->state && !status) {
    c3bc:	4620      	mov	r0, r4
    c3be:	f001 fa5d 	bl	d87c <net_buf_id>
    c3c2:	260c      	movs	r6, #12
    c3c4:	fb06 5000 	mla	r0, r6, r0, r5
    c3c8:	6843      	ldr	r3, [r0, #4]
    c3ca:	b1f3      	cbz	r3, c40a <hci_cmd_done+0xce>
    c3cc:	f1b8 0f00 	cmp.w	r8, #0
    c3d0:	d11b      	bne.n	c40a <hci_cmd_done+0xce>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    c3d2:	4620      	mov	r0, r4
    c3d4:	f001 fa52 	bl	d87c <net_buf_id>
    c3d8:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c3dc:	2201      	movs	r2, #1
    c3de:	6840      	ldr	r0, [r0, #4]
    c3e0:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    c3e4:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    c3e6:	f001 061f 	and.w	r6, r1, #31
    c3ea:	40b2      	lsls	r2, r6
	if (val) {
    c3ec:	0949      	lsrs	r1, r1, #5
    c3ee:	b320      	cbz	r0, c43a <hci_cmd_done+0xfe>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c3f0:	f3bf 8f5b 	dmb	ish
    c3f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c3f8:	e853 1f00 	ldrex	r1, [r3]
    c3fc:	4311      	orrs	r1, r2
    c3fe:	e843 1000 	strex	r0, r1, [r3]
    c402:	2800      	cmp	r0, #0
    c404:	d1f8      	bne.n	c3f8 <hci_cmd_done+0xbc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c406:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    c40a:	4620      	mov	r0, r4
    c40c:	f001 fa36 	bl	d87c <net_buf_id>
    c410:	260c      	movs	r6, #12
    c412:	fb06 5000 	mla	r0, r6, r0, r5
    c416:	6883      	ldr	r3, [r0, #8]
    c418:	2b00      	cmp	r3, #0
    c41a:	d0af      	beq.n	c37c <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    c41c:	4620      	mov	r0, r4
    c41e:	f001 fa2d 	bl	d87c <net_buf_id>
    c422:	4370      	muls	r0, r6
    c424:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    c428:	4620      	mov	r0, r4
    c42a:	f001 fa27 	bl	d87c <net_buf_id>
    c42e:	fb06 5500 	mla	r5, r6, r0, r5
    c432:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    c434:	f003 fad0 	bl	f9d8 <z_impl_k_sem_give>
}
    c438:	e7a0      	b.n	c37c <hci_cmd_done+0x40>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c43a:	43d2      	mvns	r2, r2
    c43c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c440:	f3bf 8f5b 	dmb	ish
    c444:	e853 1f00 	ldrex	r1, [r3]
    c448:	4011      	ands	r1, r2
    c44a:	e843 1000 	strex	r0, r1, [r3]
    c44e:	2800      	cmp	r0, #0
    c450:	d0d9      	beq.n	c406 <hci_cmd_done+0xca>
    c452:	e7f7      	b.n	c444 <hci_cmd_done+0x108>
    c454:	20000374 	.word	0x20000374
    c458:	00012b64 	.word	0x00012b64
    c45c:	00012b74 	.word	0x00012b74
    c460:	00013720 	.word	0x00013720
    c464:	20001488 	.word	0x20001488
    c468:	00013755 	.word	0x00013755

0000c46c <handle_event>:
{
    c46c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c46e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c472:	4605      	mov	r5, r0
    c474:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    c476:	4293      	cmp	r3, r2
    c478:	d117      	bne.n	c4aa <handle_event+0x3e>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    c47a:	8986      	ldrh	r6, [r0, #12]
    c47c:	4b19      	ldr	r3, [pc, #100]	; (c4e4 <handle_event+0x78>)
    c47e:	4c1a      	ldr	r4, [pc, #104]	; (c4e8 <handle_event+0x7c>)
    c480:	6880      	ldr	r0, [r0, #8]
    c482:	4631      	mov	r1, r6
    c484:	1ae4      	subs	r4, r4, r3
    c486:	f7ff fe53 	bl	c130 <bt_hex_real>
    c48a:	f7fe f89f 	bl	a5cc <z_log_strdup>
    c48e:	08e4      	lsrs	r4, r4, #3
    c490:	01a4      	lsls	r4, r4, #6
    c492:	f044 0402 	orr.w	r4, r4, #2
    c496:	4603      	mov	r3, r0
    c498:	f8ad 4000 	strh.w	r4, [sp]
    c49c:	4813      	ldr	r0, [pc, #76]	; (c4ec <handle_event+0x80>)
    c49e:	4632      	mov	r2, r6
    c4a0:	4629      	mov	r1, r5
    c4a2:	f004 fefa 	bl	1129a <log_3>
}
    c4a6:	b002      	add	sp, #8
    c4a8:	bd70      	pop	{r4, r5, r6, pc}
		const struct event_handler *handler = &handlers[i];
    c4aa:	4614      	mov	r4, r2
		if (handler->event != event) {
    c4ac:	f812 1b08 	ldrb.w	r1, [r2], #8
    c4b0:	42a9      	cmp	r1, r5
    c4b2:	d1e0      	bne.n	c476 <handle_event+0xa>
		if (buf->len < handler->min_len) {
    c4b4:	8981      	ldrh	r1, [r0, #12]
    c4b6:	7863      	ldrb	r3, [r4, #1]
    c4b8:	428b      	cmp	r3, r1
    c4ba:	d90d      	bls.n	c4d8 <handle_event+0x6c>
    c4bc:	4a09      	ldr	r2, [pc, #36]	; (c4e4 <handle_event+0x78>)
    c4be:	4b0a      	ldr	r3, [pc, #40]	; (c4e8 <handle_event+0x7c>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    c4c0:	480b      	ldr	r0, [pc, #44]	; (c4f0 <handle_event+0x84>)
    c4c2:	1a9b      	subs	r3, r3, r2
    c4c4:	08db      	lsrs	r3, r3, #3
    c4c6:	019b      	lsls	r3, r3, #6
    c4c8:	f043 0301 	orr.w	r3, r3, #1
    c4cc:	462a      	mov	r2, r5
}
    c4ce:	b002      	add	sp, #8
    c4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    c4d4:	f004 bec8 	b.w	11268 <log_2>
		handler->handler(buf);
    c4d8:	6863      	ldr	r3, [r4, #4]
}
    c4da:	b002      	add	sp, #8
    c4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    c4e0:	4718      	bx	r3
    c4e2:	bf00      	nop
    c4e4:	00012b64 	.word	0x00012b64
    c4e8:	00012b74 	.word	0x00012b74
    c4ec:	000137aa 	.word	0x000137aa
    c4f0:	00013788 	.word	0x00013788

0000c4f4 <hci_le_meta_event>:
{
    c4f4:	b510      	push	{r4, lr}
    c4f6:	2101      	movs	r1, #1
    c4f8:	4604      	mov	r4, r0
    c4fa:	3008      	adds	r0, #8
    c4fc:	f005 fc4c 	bl	11d98 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c500:	4621      	mov	r1, r4
    c502:	4a03      	ldr	r2, [pc, #12]	; (c510 <hci_le_meta_event+0x1c>)
    c504:	7800      	ldrb	r0, [r0, #0]
}
    c506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c50a:	2300      	movs	r3, #0
    c50c:	f7ff bfae 	b.w	c46c <handle_event>
    c510:	00012e44 	.word	0x00012e44

0000c514 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
    c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c518:	4b29      	ldr	r3, [pc, #164]	; (c5c0 <hci_rx_thread+0xac>)
    c51a:	4c2a      	ldr	r4, [pc, #168]	; (c5c4 <hci_rx_thread+0xb0>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    c51c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; c5e0 <hci_rx_thread+0xcc>
    c520:	1ae4      	subs	r4, r4, r3
    c522:	08e4      	lsrs	r4, r4, #3
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c524:	01a4      	lsls	r4, r4, #6
    c526:	f044 0401 	orr.w	r4, r4, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    c52a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c532:	4640      	mov	r0, r8
    c534:	f005 fbea 	bl	11d0c <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c538:	7d06      	ldrb	r6, [r0, #20]
		switch (bt_buf_get_type(buf)) {
    c53a:	2e01      	cmp	r6, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    c53c:	4605      	mov	r5, r0
		switch (bt_buf_get_type(buf)) {
    c53e:	d139      	bne.n	c5b4 <hci_rx_thread+0xa0>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c540:	8983      	ldrh	r3, [r0, #12]
    c542:	2b01      	cmp	r3, #1
    c544:	d80c      	bhi.n	c560 <hci_rx_thread+0x4c>
    c546:	4a20      	ldr	r2, [pc, #128]	; (c5c8 <hci_rx_thread+0xb4>)
    c548:	4920      	ldr	r1, [pc, #128]	; (c5cc <hci_rx_thread+0xb8>)
    c54a:	4821      	ldr	r0, [pc, #132]	; (c5d0 <hci_rx_thread+0xbc>)
    c54c:	f640 1303 	movw	r3, #2307	; 0x903
    c550:	f004 fa49 	bl	109e6 <printk>
    c554:	4040      	eors	r0, r0
    c556:	f380 8811 	msr	BASEPRI, r0
    c55a:	f04f 0003 	mov.w	r0, #3
    c55e:	df02      	svc	2
    c560:	2102      	movs	r1, #2
    c562:	f105 0008 	add.w	r0, r5, #8
    c566:	f005 fc17 	bl	11d98 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    c56a:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    c56c:	2b05      	cmp	r3, #5
    c56e:	4607      	mov	r7, r0
    c570:	d01e      	beq.n	c5b0 <hci_rx_thread+0x9c>
    c572:	3b0e      	subs	r3, #14
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    c574:	2b01      	cmp	r3, #1
    c576:	bf88      	it	hi
    c578:	2602      	movhi	r6, #2
    c57a:	07b3      	lsls	r3, r6, #30
    c57c:	d40c      	bmi.n	c598 <hci_rx_thread+0x84>
    c57e:	4a12      	ldr	r2, [pc, #72]	; (c5c8 <hci_rx_thread+0xb4>)
    c580:	4914      	ldr	r1, [pc, #80]	; (c5d4 <hci_rx_thread+0xc0>)
    c582:	4813      	ldr	r0, [pc, #76]	; (c5d0 <hci_rx_thread+0xbc>)
    c584:	f640 1307 	movw	r3, #2311	; 0x907
    c588:	f004 fa2d 	bl	109e6 <printk>
    c58c:	4040      	eors	r0, r0
    c58e:	f380 8811 	msr	BASEPRI, r0
    c592:	f04f 0003 	mov.w	r0, #3
    c596:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    c598:	4a0f      	ldr	r2, [pc, #60]	; (c5d8 <hci_rx_thread+0xc4>)
    c59a:	7838      	ldrb	r0, [r7, #0]
    c59c:	2303      	movs	r3, #3
    c59e:	4629      	mov	r1, r5
    c5a0:	f7ff ff64 	bl	c46c <handle_event>
			net_buf_unref(buf);
    c5a4:	4628      	mov	r0, r5
    c5a6:	f001 fa1d 	bl	d9e4 <net_buf_unref>
	z_impl_k_yield();
    c5aa:	f003 fded 	bl	10188 <z_impl_k_yield>
	while (1) {
    c5ae:	e7bc      	b.n	c52a <hci_rx_thread+0x16>
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    c5b0:	2603      	movs	r6, #3
    c5b2:	e7e2      	b.n	c57a <hci_rx_thread+0x66>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c5b4:	4809      	ldr	r0, [pc, #36]	; (c5dc <hci_rx_thread+0xc8>)
    c5b6:	4622      	mov	r2, r4
    c5b8:	4631      	mov	r1, r6
    c5ba:	f004 fe41 	bl	11240 <log_1>
    c5be:	e7f1      	b.n	c5a4 <hci_rx_thread+0x90>
    c5c0:	00012b64 	.word	0x00012b64
    c5c4:	00012b74 	.word	0x00012b74
    c5c8:	000137cc 	.word	0x000137cc
    c5cc:	00013800 	.word	0x00013800
    c5d0:	00013819 	.word	0x00013819
    c5d4:	00013836 	.word	0x00013836
    c5d8:	00012e64 	.word	0x00012e64
    c5dc:	00013864 	.word	0x00013864
    c5e0:	20000244 	.word	0x20000244

0000c5e4 <hci_cmd_status>:
{
    c5e4:	b538      	push	{r3, r4, r5, lr}
    c5e6:	2104      	movs	r1, #4
    c5e8:	4604      	mov	r4, r0
    c5ea:	3008      	adds	r0, #8
    c5ec:	f005 fbd4 	bl	11d98 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    c5f0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    c5f2:	7801      	ldrb	r1, [r0, #0]
    c5f4:	8840      	ldrh	r0, [r0, #2]
    c5f6:	4622      	mov	r2, r4
    c5f8:	f7ff fea0 	bl	c33c <hci_cmd_done>
	if (ncmd) {
    c5fc:	b125      	cbz	r5, c608 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    c5fe:	4803      	ldr	r0, [pc, #12]	; (c60c <hci_cmd_status+0x28>)
}
    c600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c604:	f003 b9e8 	b.w	f9d8 <z_impl_k_sem_give>
    c608:	bd38      	pop	{r3, r4, r5, pc}
    c60a:	bf00      	nop
    c60c:	20000228 	.word	0x20000228

0000c610 <hci_cmd_complete>:
{
    c610:	b538      	push	{r3, r4, r5, lr}
    c612:	2103      	movs	r1, #3
    c614:	4604      	mov	r4, r0
    c616:	3008      	adds	r0, #8
    c618:	f005 fbbe 	bl	11d98 <net_buf_simple_pull_mem>
	status = buf->data[0];
    c61c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    c61e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    c620:	7819      	ldrb	r1, [r3, #0]
    c622:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    c626:	4622      	mov	r2, r4
    c628:	f7ff fe88 	bl	c33c <hci_cmd_done>
	if (ncmd) {
    c62c:	b125      	cbz	r5, c638 <hci_cmd_complete+0x28>
    c62e:	4803      	ldr	r0, [pc, #12]	; (c63c <hci_cmd_complete+0x2c>)
}
    c630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c634:	f003 b9d0 	b.w	f9d8 <z_impl_k_sem_give>
    c638:	bd38      	pop	{r3, r4, r5, pc}
    c63a:	bf00      	nop
    c63c:	20000228 	.word	0x20000228

0000c640 <bt_hci_cmd_state_set_init>:
{
    c640:	b510      	push	{r4, lr}
	state->bit = bit;
    c642:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    c646:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c64a:	720b      	strb	r3, [r1, #8]
{
    c64c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    c64e:	f001 f915 	bl	d87c <net_buf_id>
    c652:	4b03      	ldr	r3, [pc, #12]	; (c660 <bt_hci_cmd_state_set_init+0x20>)
    c654:	220c      	movs	r2, #12
    c656:	fb02 3000 	mla	r0, r2, r0, r3
    c65a:	6044      	str	r4, [r0, #4]
}
    c65c:	bd10      	pop	{r4, pc}
    c65e:	bf00      	nop
    c660:	20001488 	.word	0x20001488

0000c664 <bt_hci_cmd_create>:
{
    c664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    c668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c66c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c670:	4605      	mov	r5, r0
    c672:	4816      	ldr	r0, [pc, #88]	; (c6cc <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    c674:	f8df 8058 	ldr.w	r8, [pc, #88]	; c6d0 <bt_hci_cmd_create+0x6c>
{
    c678:	460e      	mov	r6, r1
    c67a:	f005 fb42 	bl	11d02 <net_buf_alloc_fixed>
    c67e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    c680:	f100 0b08 	add.w	fp, r0, #8
    c684:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c686:	2700      	movs	r7, #0
    c688:	4658      	mov	r0, fp
    c68a:	f005 fb59 	bl	11d40 <net_buf_simple_reserve>
    c68e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    c690:	4620      	mov	r0, r4
    c692:	f001 f8f3 	bl	d87c <net_buf_id>
    c696:	f04f 0a0c 	mov.w	sl, #12
    c69a:	fb0a 8000 	mla	r0, sl, r0, r8
    c69e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    c6a0:	4620      	mov	r0, r4
    c6a2:	f001 f8eb 	bl	d87c <net_buf_id>
    c6a6:	fb0a 8000 	mla	r0, sl, r0, r8
    c6aa:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    c6ac:	4620      	mov	r0, r4
    c6ae:	f001 f8e5 	bl	d87c <net_buf_id>
    c6b2:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    c6b6:	2103      	movs	r1, #3
    c6b8:	6047      	str	r7, [r0, #4]
    c6ba:	4658      	mov	r0, fp
    c6bc:	f005 fb55 	bl	11d6a <net_buf_simple_add>
	hdr->param_len = param_len;
    c6c0:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    c6c2:	8005      	strh	r5, [r0, #0]
}
    c6c4:	4620      	mov	r0, r4
    c6c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6ca:	bf00      	nop
    c6cc:	20000374 	.word	0x20000374
    c6d0:	20001488 	.word	0x20001488

0000c6d4 <bt_hci_cmd_send_sync>:
{
    c6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6d8:	4607      	mov	r7, r0
    c6da:	b086      	sub	sp, #24
    c6dc:	4615      	mov	r5, r2
	if (!buf) {
    c6de:	460c      	mov	r4, r1
    c6e0:	b921      	cbnz	r1, c6ec <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    c6e2:	f7ff ffbf 	bl	c664 <bt_hci_cmd_create>
		if (!buf) {
    c6e6:	4604      	mov	r4, r0
    c6e8:	2800      	cmp	r0, #0
    c6ea:	d055      	beq.n	c798 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    c6ec:	2201      	movs	r2, #1
    c6ee:	2100      	movs	r1, #0
    c6f0:	4668      	mov	r0, sp
    c6f2:	f005 fded 	bl	122d0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    c6f6:	4620      	mov	r0, r4
    c6f8:	f001 f8c0 	bl	d87c <net_buf_id>
    c6fc:	4e28      	ldr	r6, [pc, #160]	; (c7a0 <bt_hci_cmd_send_sync+0xcc>)
    c6fe:	230c      	movs	r3, #12
    c700:	fb03 6000 	mla	r0, r3, r0, r6
    c704:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    c708:	4620      	mov	r0, r4
    c70a:	f005 fb2a 	bl	11d62 <net_buf_ref>
    c70e:	4601      	mov	r1, r0
    c710:	4824      	ldr	r0, [pc, #144]	; (c7a4 <bt_hci_cmd_send_sync+0xd0>)
    c712:	f005 fb19 	bl	11d48 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    c716:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    c71a:	2300      	movs	r3, #0
    c71c:	4668      	mov	r0, sp
    c71e:	f003 f981 	bl	fa24 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    c722:	4680      	mov	r8, r0
    c724:	b180      	cbz	r0, c748 <bt_hci_cmd_send_sync+0x74>
    c726:	4a20      	ldr	r2, [pc, #128]	; (c7a8 <bt_hci_cmd_send_sync+0xd4>)
    c728:	4920      	ldr	r1, [pc, #128]	; (c7ac <bt_hci_cmd_send_sync+0xd8>)
    c72a:	4821      	ldr	r0, [pc, #132]	; (c7b0 <bt_hci_cmd_send_sync+0xdc>)
    c72c:	f240 1331 	movw	r3, #305	; 0x131
    c730:	f004 f959 	bl	109e6 <printk>
    c734:	481f      	ldr	r0, [pc, #124]	; (c7b4 <bt_hci_cmd_send_sync+0xe0>)
    c736:	4641      	mov	r1, r8
    c738:	f004 f955 	bl	109e6 <printk>
    c73c:	4040      	eors	r0, r0
    c73e:	f380 8811 	msr	BASEPRI, r0
    c742:	f04f 0003 	mov.w	r0, #3
    c746:	df02      	svc	2
	status = cmd(buf)->status;
    c748:	4620      	mov	r0, r4
    c74a:	f001 f897 	bl	d87c <net_buf_id>
    c74e:	230c      	movs	r3, #12
    c750:	4343      	muls	r3, r0
    c752:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    c754:	b1be      	cbz	r6, c786 <bt_hci_cmd_send_sync+0xb2>
    c756:	4a18      	ldr	r2, [pc, #96]	; (c7b8 <bt_hci_cmd_send_sync+0xe4>)
    c758:	4b18      	ldr	r3, [pc, #96]	; (c7bc <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    c75a:	4819      	ldr	r0, [pc, #100]	; (c7c0 <bt_hci_cmd_send_sync+0xec>)
    c75c:	1a9b      	subs	r3, r3, r2
    c75e:	08db      	lsrs	r3, r3, #3
    c760:	019b      	lsls	r3, r3, #6
    c762:	f043 0302 	orr.w	r3, r3, #2
    c766:	4632      	mov	r2, r6
    c768:	4639      	mov	r1, r7
    c76a:	f004 fd7d 	bl	11268 <log_2>
		net_buf_unref(buf);
    c76e:	4620      	mov	r0, r4
    c770:	f001 f938 	bl	d9e4 <net_buf_unref>
			return -EIO;
    c774:	2e09      	cmp	r6, #9
    c776:	bf0c      	ite	eq
    c778:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    c77c:	f06f 0004 	mvnne.w	r0, #4
}
    c780:	b006      	add	sp, #24
    c782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    c786:	b115      	cbz	r5, c78e <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    c788:	602c      	str	r4, [r5, #0]
	return 0;
    c78a:	4630      	mov	r0, r6
    c78c:	e7f8      	b.n	c780 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    c78e:	4620      	mov	r0, r4
    c790:	f001 f928 	bl	d9e4 <net_buf_unref>
	return 0;
    c794:	4628      	mov	r0, r5
    c796:	e7f3      	b.n	c780 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    c798:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c79c:	e7f0      	b.n	c780 <bt_hci_cmd_send_sync+0xac>
    c79e:	bf00      	nop
    c7a0:	20001488 	.word	0x20001488
    c7a4:	2000025c 	.word	0x2000025c
    c7a8:	000137cc 	.word	0x000137cc
    c7ac:	00013878 	.word	0x00013878
    c7b0:	00013819 	.word	0x00013819
    c7b4:	00013881 	.word	0x00013881
    c7b8:	00012b64 	.word	0x00012b64
    c7bc:	00012b74 	.word	0x00012b74
    c7c0:	000138a1 	.word	0x000138a1

0000c7c4 <hci_init>:
{
    c7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c7c6:	4db3      	ldr	r5, [pc, #716]	; (ca94 <hci_init+0x2d0>)
    c7c8:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
    c7cc:	6899      	ldr	r1, [r3, #8]
    c7ce:	f011 0101 	ands.w	r1, r1, #1
{
    c7d2:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c7d4:	d121      	bne.n	c81a <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    c7d6:	aa01      	add	r2, sp, #4
    c7d8:	f640 4003 	movw	r0, #3075	; 0xc03
    c7dc:	f7ff ff7a 	bl	c6d4 <bt_hci_cmd_send_sync>
		if (err) {
    c7e0:	4604      	mov	r4, r0
    c7e2:	2800      	cmp	r0, #0
    c7e4:	d170      	bne.n	c8c8 <hci_init+0x104>
		hci_reset_complete(rsp);
    c7e6:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    c7e8:	689b      	ldr	r3, [r3, #8]
	if (status) {
    c7ea:	781b      	ldrb	r3, [r3, #0]
    c7ec:	b993      	cbnz	r3, c814 <hci_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c7ee:	f3bf 8f5b 	dmb	ish
    c7f2:	462b      	mov	r3, r5
    c7f4:	f853 2f98 	ldr.w	r2, [r3, #152]!
    c7f8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    c7fc:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c800:	f3bf 8f5b 	dmb	ish
    c804:	e853 1f00 	ldrex	r1, [r3]
    c808:	e843 2000 	strex	r0, r2, [r3]
    c80c:	2800      	cmp	r0, #0
    c80e:	d1f9      	bne.n	c804 <hci_init+0x40>
    c810:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    c814:	9801      	ldr	r0, [sp, #4]
    c816:	f001 f8e5 	bl	d9e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    c81a:	aa01      	add	r2, sp, #4
    c81c:	2100      	movs	r1, #0
    c81e:	f241 0003 	movw	r0, #4099	; 0x1003
    c822:	f7ff ff57 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    c826:	4604      	mov	r4, r0
    c828:	2800      	cmp	r0, #0
    c82a:	d14d      	bne.n	c8c8 <hci_init+0x104>
	read_local_features_complete(rsp);
    c82c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c82e:	489a      	ldr	r0, [pc, #616]	; (ca98 <hci_init+0x2d4>)
    c830:	6899      	ldr	r1, [r3, #8]
    c832:	2208      	movs	r2, #8
    c834:	3101      	adds	r1, #1
    c836:	f005 f92b 	bl	11a90 <memcpy>
	net_buf_unref(rsp);
    c83a:	9801      	ldr	r0, [sp, #4]
    c83c:	f001 f8d2 	bl	d9e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    c840:	4621      	mov	r1, r4
    c842:	aa01      	add	r2, sp, #4
    c844:	f241 0001 	movw	r0, #4097	; 0x1001
    c848:	f7ff ff44 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    c84c:	4604      	mov	r4, r0
    c84e:	2800      	cmp	r0, #0
    c850:	d13a      	bne.n	c8c8 <hci_init+0x104>
	read_local_ver_complete(rsp);
    c852:	9801      	ldr	r0, [sp, #4]
    c854:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    c856:	785a      	ldrb	r2, [r3, #1]
    c858:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c85c:	78d9      	ldrb	r1, [r3, #3]
    c85e:	789a      	ldrb	r2, [r3, #2]
    c860:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c864:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    c866:	791a      	ldrb	r2, [r3, #4]
    c868:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c86c:	7a19      	ldrb	r1, [r3, #8]
    c86e:	79da      	ldrb	r2, [r3, #7]
    c870:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c874:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c876:	795a      	ldrb	r2, [r3, #5]
    c878:	799b      	ldrb	r3, [r3, #6]
    c87a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    c87e:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    c880:	f001 f8b0 	bl	d9e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    c884:	4621      	mov	r1, r4
    c886:	aa01      	add	r2, sp, #4
    c888:	f241 0002 	movw	r0, #4098	; 0x1002
    c88c:	f7ff ff22 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    c890:	4604      	mov	r4, r0
    c892:	b9c8      	cbnz	r0, c8c8 <hci_init+0x104>
	read_supported_commands_complete(rsp);
    c894:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    c896:	4881      	ldr	r0, [pc, #516]	; (ca9c <hci_init+0x2d8>)
    c898:	6899      	ldr	r1, [r3, #8]
    c89a:	2240      	movs	r2, #64	; 0x40
    c89c:	3101      	adds	r1, #1
    c89e:	f005 f8f7 	bl	11a90 <memcpy>
	net_buf_unref(rsp);
    c8a2:	9801      	ldr	r0, [sp, #4]
    c8a4:	f001 f89e 	bl	d9e4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    c8a8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    c8ac:	0658      	lsls	r0, r3, #25
    c8ae:	d40e      	bmi.n	c8ce <hci_init+0x10a>
    c8b0:	4b7b      	ldr	r3, [pc, #492]	; (caa0 <hci_init+0x2dc>)
    c8b2:	497c      	ldr	r1, [pc, #496]	; (caa4 <hci_init+0x2e0>)
		BT_ERR("Non-LE capable controller detected!");
    c8b4:	487c      	ldr	r0, [pc, #496]	; (caa8 <hci_init+0x2e4>)
    c8b6:	1ac9      	subs	r1, r1, r3
    c8b8:	08c9      	lsrs	r1, r1, #3
    c8ba:	0189      	lsls	r1, r1, #6
    c8bc:	f041 0101 	orr.w	r1, r1, #1
    c8c0:	f004 fcb1 	bl	11226 <log_0>
		return -ENODEV;
    c8c4:	f06f 0412 	mvn.w	r4, #18
}
    c8c8:	4620      	mov	r0, r4
    c8ca:	b007      	add	sp, #28
    c8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    c8ce:	4621      	mov	r1, r4
    c8d0:	aa01      	add	r2, sp, #4
    c8d2:	f242 0003 	movw	r0, #8195	; 0x2003
    c8d6:	f7ff fefd 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    c8da:	4604      	mov	r4, r0
    c8dc:	2800      	cmp	r0, #0
    c8de:	d1f3      	bne.n	c8c8 <hci_init+0x104>
	read_le_features_complete(rsp);
    c8e0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c8e2:	4872      	ldr	r0, [pc, #456]	; (caac <hci_init+0x2e8>)
    c8e4:	6899      	ldr	r1, [r3, #8]
    c8e6:	2208      	movs	r2, #8
    c8e8:	3101      	adds	r1, #1
    c8ea:	f005 f8d1 	bl	11a90 <memcpy>
	net_buf_unref(rsp);
    c8ee:	9801      	ldr	r0, [sp, #4]
    c8f0:	f001 f878 	bl	d9e4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c8f4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    c8f8:	0699      	lsls	r1, r3, #26
    c8fa:	d554      	bpl.n	c9a6 <hci_init+0x1e2>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    c8fc:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    c900:	071a      	lsls	r2, r3, #28
    c902:	d46b      	bmi.n	c9dc <hci_init+0x218>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    c904:	2108      	movs	r1, #8
    c906:	f242 0001 	movw	r0, #8193	; 0x2001
    c90a:	f7ff feab 	bl	c664 <bt_hci_cmd_create>
	if (!buf) {
    c90e:	4604      	mov	r4, r0
    c910:	2800      	cmp	r0, #0
    c912:	d04f      	beq.n	c9b4 <hci_init+0x1f0>
    c914:	2108      	movs	r1, #8
    c916:	4408      	add	r0, r1
    c918:	f005 fa27 	bl	11d6a <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    c91c:	2702      	movs	r7, #2
	dst[1] = val >> 8;
    c91e:	2200      	movs	r2, #0
	dst[0] = val;
    c920:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
    c922:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    c924:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    c926:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    c928:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    c92a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    c92c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    c92e:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    c930:	4621      	mov	r1, r4
    c932:	f242 0001 	movw	r0, #8193	; 0x2001
    c936:	f7ff fecd 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    c93a:	4604      	mov	r4, r0
    c93c:	2800      	cmp	r0, #0
    c93e:	d1c3      	bne.n	c8c8 <hci_init+0x104>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    c940:	2108      	movs	r1, #8
    c942:	f640 4001 	movw	r0, #3073	; 0xc01
    c946:	f7ff fe8d 	bl	c664 <bt_hci_cmd_create>
	if (!buf) {
    c94a:	4606      	mov	r6, r0
    c94c:	b390      	cbz	r0, c9b4 <hci_init+0x1f0>
    c94e:	2108      	movs	r1, #8
    c950:	4408      	add	r0, r1
    c952:	f005 fa0a 	bl	11d6a <net_buf_simple_add>
    c956:	2380      	movs	r3, #128	; 0x80
    c958:	7043      	strb	r3, [r0, #1]
    c95a:	2320      	movs	r3, #32
	dst[0] = val;
    c95c:	7004      	strb	r4, [r0, #0]
    c95e:	7084      	strb	r4, [r0, #2]
    c960:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    c962:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    c964:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    c966:	70c7      	strb	r7, [r0, #3]
    c968:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    c96a:	4622      	mov	r2, r4
    c96c:	4631      	mov	r1, r6
    c96e:	f640 4001 	movw	r0, #3073	; 0xc01
    c972:	f7ff feaf 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    c976:	4604      	mov	r4, r0
    c978:	2800      	cmp	r0, #0
    c97a:	d1a5      	bne.n	c8c8 <hci_init+0x104>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    c97c:	4601      	mov	r1, r0
    c97e:	466a      	mov	r2, sp
    c980:	f64f 4001 	movw	r0, #64513	; 0xfc01
    c984:	f7ff fea6 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    c988:	4c46      	ldr	r4, [pc, #280]	; (caa4 <hci_init+0x2e0>)
    c98a:	4b45      	ldr	r3, [pc, #276]	; (caa0 <hci_init+0x2dc>)
    c98c:	1ae4      	subs	r4, r4, r3
    c98e:	08e4      	lsrs	r4, r4, #3
    c990:	01a4      	lsls	r4, r4, #6
    c992:	b3b8      	cbz	r0, ca04 <hci_init+0x240>
		BT_WARN("Vendor HCI extensions not available");
    c994:	4846      	ldr	r0, [pc, #280]	; (cab0 <hci_init+0x2ec>)
    c996:	ea44 0107 	orr.w	r1, r4, r7
			BT_WARN("Failed to read supported vendor features");
    c99a:	f004 fc44 	bl	11226 <log_0>
	err = bt_id_init();
    c99e:	f000 fd4d 	bl	d43c <bt_id_init>
    c9a2:	4604      	mov	r4, r0
	if (err) {
    c9a4:	e790      	b.n	c8c8 <hci_init+0x104>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    c9a6:	2102      	movs	r1, #2
    c9a8:	f640 406d 	movw	r0, #3181	; 0xc6d
    c9ac:	f7ff fe5a 	bl	c664 <bt_hci_cmd_create>
		if (!buf) {
    c9b0:	4606      	mov	r6, r0
    c9b2:	b910      	cbnz	r0, c9ba <hci_init+0x1f6>
		return -ENOBUFS;
    c9b4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    c9b8:	e786      	b.n	c8c8 <hci_init+0x104>
    c9ba:	2102      	movs	r1, #2
    c9bc:	3008      	adds	r0, #8
    c9be:	f005 f9d4 	bl	11d6a <net_buf_simple_add>
		cp_le->le = 0x01;
    c9c2:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    c9c4:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    c9c6:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    c9c8:	4622      	mov	r2, r4
    c9ca:	4631      	mov	r1, r6
    c9cc:	f640 406d 	movw	r0, #3181	; 0xc6d
    c9d0:	f7ff fe80 	bl	c6d4 <bt_hci_cmd_send_sync>
		if (err) {
    c9d4:	4604      	mov	r4, r0
    c9d6:	2800      	cmp	r0, #0
    c9d8:	d090      	beq.n	c8fc <hci_init+0x138>
    c9da:	e775      	b.n	c8c8 <hci_init+0x104>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    c9dc:	aa01      	add	r2, sp, #4
    c9de:	2100      	movs	r1, #0
    c9e0:	f242 001c 	movw	r0, #8220	; 0x201c
    c9e4:	f7ff fe76 	bl	c6d4 <bt_hci_cmd_send_sync>
		if (err) {
    c9e8:	4604      	mov	r4, r0
    c9ea:	2800      	cmp	r0, #0
    c9ec:	f47f af6c 	bne.w	c8c8 <hci_init+0x104>
		le_read_supp_states_complete(rsp);
    c9f0:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c9f2:	6883      	ldr	r3, [r0, #8]
    c9f4:	f853 2f01 	ldr.w	r2, [r3, #1]!
    c9f8:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    c9fa:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    c9fe:	f000 fff1 	bl	d9e4 <net_buf_unref>
    ca02:	e77f      	b.n	c904 <hci_init+0x140>
	rp.info = (void *)rsp->data;
    ca04:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    ca06:	482b      	ldr	r0, [pc, #172]	; (cab4 <hci_init+0x2f0>)
	rp.info = (void *)rsp->data;
    ca08:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    ca0a:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    ca0e:	2a03      	cmp	r2, #3
		return plat_str[platform];
    ca10:	bf96      	itet	ls
    ca12:	4929      	ldrls	r1, [pc, #164]	; (cab8 <hci_init+0x2f4>)
	return "unknown";
    ca14:	4929      	ldrhi	r1, [pc, #164]	; (cabc <hci_init+0x2f8>)
		return plat_str[platform];
    ca16:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    ca1a:	f044 0303 	orr.w	r3, r4, #3
    ca1e:	f004 fc23 	bl	11268 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    ca22:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    ca26:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    ca2a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    ca2c:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    ca30:	d12e      	bne.n	ca90 <hci_init+0x2cc>
	if (variant < ARRAY_SIZE(nordic_str)) {
    ca32:	2a03      	cmp	r2, #3
    ca34:	d82c      	bhi.n	ca90 <hci_init+0x2cc>
		return nordic_str[variant];
    ca36:	4922      	ldr	r1, [pc, #136]	; (cac0 <hci_init+0x2fc>)
    ca38:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    ca3c:	4821      	ldr	r0, [pc, #132]	; (cac4 <hci_init+0x300>)
    ca3e:	f004 fc13 	bl	11268 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    ca42:	7972      	ldrb	r2, [r6, #5]
    ca44:	4820      	ldr	r0, [pc, #128]	; (cac8 <hci_init+0x304>)
	if (variant < ARRAY_SIZE(var_str)) {
    ca46:	2a03      	cmp	r2, #3
		return var_str[variant];
    ca48:	bf96      	itet	ls
    ca4a:	4920      	ldrls	r1, [pc, #128]	; (cacc <hci_init+0x308>)
	return "unknown";
    ca4c:	491b      	ldrhi	r1, [pc, #108]	; (cabc <hci_init+0x2f8>)
		return var_str[variant];
    ca4e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    ca52:	e9cd 1201 	strd	r1, r2, [sp, #4]
    ca56:	79b2      	ldrb	r2, [r6, #6]
    ca58:	9203      	str	r2, [sp, #12]
    ca5a:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    ca5e:	9204      	str	r2, [sp, #16]
    ca60:	f8d6 2009 	ldr.w	r2, [r6, #9]
    ca64:	9205      	str	r2, [sp, #20]
    ca66:	f044 0303 	orr.w	r3, r4, #3
    ca6a:	2205      	movs	r2, #5
    ca6c:	a901      	add	r1, sp, #4
    ca6e:	f004 fc30 	bl	112d2 <log_n>
	net_buf_unref(rsp);
    ca72:	9800      	ldr	r0, [sp, #0]
    ca74:	f000 ffb6 	bl	d9e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    ca78:	466a      	mov	r2, sp
    ca7a:	2100      	movs	r1, #0
    ca7c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    ca80:	f7ff fe28 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    ca84:	4606      	mov	r6, r0
    ca86:	b328      	cbz	r0, cad4 <hci_init+0x310>
		BT_WARN("Failed to read supported vendor commands");
    ca88:	4811      	ldr	r0, [pc, #68]	; (cad0 <hci_init+0x30c>)
    ca8a:	f044 0102 	orr.w	r1, r4, #2
    ca8e:	e784      	b.n	c99a <hci_init+0x1d6>
		return "unknown";
    ca90:	490a      	ldr	r1, [pc, #40]	; (cabc <hci_init+0x2f8>)
    ca92:	e7d3      	b.n	ca3c <hci_init+0x278>
    ca94:	20000178 	.word	0x20000178
    ca98:	200001b4 	.word	0x200001b4
    ca9c:	200001bc 	.word	0x200001bc
    caa0:	00012b64 	.word	0x00012b64
    caa4:	00012b74 	.word	0x00012b74
    caa8:	000138bd 	.word	0x000138bd
    caac:	20000218 	.word	0x20000218
    cab0:	000138e1 	.word	0x000138e1
    cab4:	00013905 	.word	0x00013905
    cab8:	00012e7c 	.word	0x00012e7c
    cabc:	000136d2 	.word	0x000136d2
    cac0:	00012e54 	.word	0x00012e54
    cac4:	0001391e 	.word	0x0001391e
    cac8:	00013936 	.word	0x00013936
    cacc:	00012e9c 	.word	0x00012e9c
    cad0:	00013963 	.word	0x00013963
	rp.cmds = (void *)rsp->data;
    cad4:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    cad6:	4812      	ldr	r0, [pc, #72]	; (cb20 <hci_init+0x35c>)
    cad8:	6899      	ldr	r1, [r3, #8]
    cada:	2202      	movs	r2, #2
    cadc:	3101      	adds	r1, #1
    cade:	f004 ffd7 	bl	11a90 <memcpy>
	net_buf_unref(rsp);
    cae2:	9800      	ldr	r0, [sp, #0]
    cae4:	f000 ff7e 	bl	d9e4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    cae8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    caec:	075b      	lsls	r3, r3, #29
    caee:	f57f af56 	bpl.w	c99e <hci_init+0x1da>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    caf2:	466a      	mov	r2, sp
    caf4:	4631      	mov	r1, r6
    caf6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    cafa:	f7ff fdeb 	bl	c6d4 <bt_hci_cmd_send_sync>
		if (err) {
    cafe:	b118      	cbz	r0, cb08 <hci_init+0x344>
			BT_WARN("Failed to read supported vendor features");
    cb00:	4808      	ldr	r0, [pc, #32]	; (cb24 <hci_init+0x360>)
    cb02:	f044 0102 	orr.w	r1, r4, #2
    cb06:	e748      	b.n	c99a <hci_init+0x1d6>
		rp.feat = (void *)rsp->data;
    cb08:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    cb0a:	4807      	ldr	r0, [pc, #28]	; (cb28 <hci_init+0x364>)
    cb0c:	6899      	ldr	r1, [r3, #8]
    cb0e:	2201      	movs	r2, #1
    cb10:	4411      	add	r1, r2
    cb12:	f004 ffbd 	bl	11a90 <memcpy>
		net_buf_unref(rsp);
    cb16:	9800      	ldr	r0, [sp, #0]
    cb18:	f000 ff64 	bl	d9e4 <net_buf_unref>
    cb1c:	e73f      	b.n	c99e <hci_init+0x1da>
    cb1e:	bf00      	nop
    cb20:	200001fd 	.word	0x200001fd
    cb24:	0001398c 	.word	0x0001398c
    cb28:	200001fc 	.word	0x200001fc

0000cb2c <bt_send>:
	return bt_dev.drv->send(buf);
    cb2c:	4b02      	ldr	r3, [pc, #8]	; (cb38 <bt_send+0xc>)
    cb2e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    cb32:	691b      	ldr	r3, [r3, #16]
    cb34:	4718      	bx	r3
    cb36:	bf00      	nop
    cb38:	20000178 	.word	0x20000178

0000cb3c <hci_tx_thread>:
{
    cb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb40:	4b46      	ldr	r3, [pc, #280]	; (cc5c <hci_tx_thread+0x120>)
    cb42:	4d47      	ldr	r5, [pc, #284]	; (cc60 <hci_tx_thread+0x124>)
    cb44:	4e47      	ldr	r6, [pc, #284]	; (cc64 <hci_tx_thread+0x128>)
		events[0].state = K_POLL_STATE_NOT_READY;
    cb46:	4f48      	ldr	r7, [pc, #288]	; (cc68 <hci_tx_thread+0x12c>)
    cb48:	1aed      	subs	r5, r5, r3
    cb4a:	08ed      	lsrs	r5, r5, #3
    cb4c:	f106 08b0 	add.w	r8, r6, #176	; 0xb0
    cb50:	68fb      	ldr	r3, [r7, #12]
    cb52:	f36f 3352 	bfc	r3, #13, #6
    cb56:	60fb      	str	r3, [r7, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    cb58:	4843      	ldr	r0, [pc, #268]	; (cc68 <hci_tx_thread+0x12c>)
    cb5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cb5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cb62:	2101      	movs	r1, #1
    cb64:	f003 fe32 	bl	107cc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    cb68:	b160      	cbz	r0, cb84 <hci_tx_thread+0x48>
    cb6a:	4a40      	ldr	r2, [pc, #256]	; (cc6c <hci_tx_thread+0x130>)
    cb6c:	4940      	ldr	r1, [pc, #256]	; (cc70 <hci_tx_thread+0x134>)
    cb6e:	4841      	ldr	r0, [pc, #260]	; (cc74 <hci_tx_thread+0x138>)
    cb70:	f640 1379 	movw	r3, #2425	; 0x979
    cb74:	f003 ff37 	bl	109e6 <printk>
    cb78:	4040      	eors	r0, r0
    cb7a:	f380 8811 	msr	BASEPRI, r0
    cb7e:	f04f 0003 	mov.w	r0, #3
    cb82:	df02      	svc	2
		switch (ev->state) {
    cb84:	68f9      	ldr	r1, [r7, #12]
    cb86:	f3c1 3145 	ubfx	r1, r1, #13, #6
    cb8a:	2901      	cmp	r1, #1
    cb8c:	d907      	bls.n	cb9e <hci_tx_thread+0x62>
    cb8e:	2904      	cmp	r1, #4
    cb90:	d008      	beq.n	cba4 <hci_tx_thread+0x68>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    cb92:	01aa      	lsls	r2, r5, #6
    cb94:	4838      	ldr	r0, [pc, #224]	; (cc78 <hci_tx_thread+0x13c>)
    cb96:	f042 0202 	orr.w	r2, r2, #2
    cb9a:	f004 fb51 	bl	11240 <log_1>
	z_impl_k_yield();
    cb9e:	f003 faf3 	bl	10188 <z_impl_k_yield>
	while (1) {
    cba2:	e7d5      	b.n	cb50 <hci_tx_thread+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
    cba4:	7b3b      	ldrb	r3, [r7, #12]
    cba6:	2b00      	cmp	r3, #0
    cba8:	d1f9      	bne.n	cb9e <hci_tx_thread+0x62>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    cbaa:	4834      	ldr	r0, [pc, #208]	; (cc7c <hci_tx_thread+0x140>)
    cbac:	2200      	movs	r2, #0
    cbae:	2300      	movs	r3, #0
    cbb0:	f005 f8ac 	bl	11d0c <net_buf_get>
	BT_ASSERT(buf);
    cbb4:	4604      	mov	r4, r0
    cbb6:	2800      	cmp	r0, #0
    cbb8:	d042      	beq.n	cc40 <hci_tx_thread+0x104>
	return z_impl_k_sem_take(sem, timeout);
    cbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cbc2:	4640      	mov	r0, r8
    cbc4:	f002 ff2e 	bl	fa24 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    cbc8:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    cbcc:	bb53      	cbnz	r3, cc24 <hci_tx_thread+0xe8>
	bt_dev.sent_cmd = net_buf_ref(buf);
    cbce:	4620      	mov	r0, r4
    cbd0:	f005 f8c7 	bl	11d62 <net_buf_ref>
    cbd4:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
	err = bt_send(buf);
    cbd8:	4620      	mov	r0, r4
    cbda:	f7ff ffa7 	bl	cb2c <bt_send>
	if (err) {
    cbde:	4601      	mov	r1, r0
    cbe0:	2800      	cmp	r0, #0
    cbe2:	d0dc      	beq.n	cb9e <hci_tx_thread+0x62>
		BT_ERR("Unable to send to driver (err %d)", err);
    cbe4:	01aa      	lsls	r2, r5, #6
    cbe6:	4826      	ldr	r0, [pc, #152]	; (cc80 <hci_tx_thread+0x144>)
    cbe8:	f042 0201 	orr.w	r2, r2, #1
    cbec:	f004 fb28 	bl	11240 <log_1>
	z_impl_k_sem_give(sem);
    cbf0:	4824      	ldr	r0, [pc, #144]	; (cc84 <hci_tx_thread+0x148>)
    cbf2:	f002 fef1 	bl	f9d8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    cbf6:	4620      	mov	r0, r4
    cbf8:	f000 fe40 	bl	d87c <net_buf_id>
    cbfc:	4b22      	ldr	r3, [pc, #136]	; (cc88 <hci_tx_thread+0x14c>)
    cbfe:	220c      	movs	r2, #12
    cc00:	fb02 3000 	mla	r0, r2, r0, r3
    cc04:	211f      	movs	r1, #31
    cc06:	4622      	mov	r2, r4
    cc08:	8840      	ldrh	r0, [r0, #2]
    cc0a:	f7ff fb97 	bl	c33c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    cc0e:	f8d6 00c8 	ldr.w	r0, [r6, #200]	; 0xc8
    cc12:	f000 fee7 	bl	d9e4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    cc16:	2300      	movs	r3, #0
		net_buf_unref(buf);
    cc18:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    cc1a:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		net_buf_unref(buf);
    cc1e:	f000 fee1 	bl	d9e4 <net_buf_unref>
    cc22:	e7bc      	b.n	cb9e <hci_tx_thread+0x62>
		BT_ERR("Uncleared pending sent_cmd");
    cc24:	01a9      	lsls	r1, r5, #6
    cc26:	4819      	ldr	r0, [pc, #100]	; (cc8c <hci_tx_thread+0x150>)
    cc28:	f041 0101 	orr.w	r1, r1, #1
    cc2c:	f004 fafb 	bl	11226 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    cc30:	f8d6 00c8 	ldr.w	r0, [r6, #200]	; 0xc8
    cc34:	f000 fed6 	bl	d9e4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    cc38:	2300      	movs	r3, #0
    cc3a:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
    cc3e:	e7c6      	b.n	cbce <hci_tx_thread+0x92>
	BT_ASSERT(buf);
    cc40:	4a0a      	ldr	r2, [pc, #40]	; (cc6c <hci_tx_thread+0x130>)
    cc42:	4913      	ldr	r1, [pc, #76]	; (cc90 <hci_tx_thread+0x154>)
    cc44:	480b      	ldr	r0, [pc, #44]	; (cc74 <hci_tx_thread+0x138>)
    cc46:	f640 1316 	movw	r3, #2326	; 0x916
    cc4a:	f003 fecc 	bl	109e6 <printk>
    cc4e:	4040      	eors	r0, r0
    cc50:	f380 8811 	msr	BASEPRI, r0
    cc54:	f04f 0003 	mov.w	r0, #3
    cc58:	df02      	svc	2
    cc5a:	e7ae      	b.n	cbba <hci_tx_thread+0x7e>
    cc5c:	00012b64 	.word	0x00012b64
    cc60:	00012b74 	.word	0x00012b74
    cc64:	20000178 	.word	0x20000178
    cc68:	20000288 	.word	0x20000288
    cc6c:	000137cc 	.word	0x000137cc
    cc70:	00013878 	.word	0x00013878
    cc74:	00013819 	.word	0x00013819
    cc78:	000139d7 	.word	0x000139d7
    cc7c:	2000025c 	.word	0x2000025c
    cc80:	000139b5 	.word	0x000139b5
    cc84:	20000228 	.word	0x20000228
    cc88:	20001488 	.word	0x20001488
    cc8c:	000139f8 	.word	0x000139f8
    cc90:	000135df 	.word	0x000135df

0000cc94 <hci_event_prio>:
{
    cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc98:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    cc9a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    cc9e:	4630      	mov	r0, r6
    cca0:	f005 f882 	bl	11da8 <net_buf_simple_headroom>
	state->len = buf->len;
    cca4:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cca6:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    cca8:	4605      	mov	r5, r0
    ccaa:	d80c      	bhi.n	ccc6 <hci_event_prio+0x32>
    ccac:	4a21      	ldr	r2, [pc, #132]	; (cd34 <hci_event_prio+0xa0>)
    ccae:	4922      	ldr	r1, [pc, #136]	; (cd38 <hci_event_prio+0xa4>)
    ccb0:	4822      	ldr	r0, [pc, #136]	; (cd3c <hci_event_prio+0xa8>)
    ccb2:	f640 5306 	movw	r3, #3334	; 0xd06
    ccb6:	f003 fe96 	bl	109e6 <printk>
    ccba:	4040      	eors	r0, r0
    ccbc:	f380 8811 	msr	BASEPRI, r0
    ccc0:	f04f 0003 	mov.w	r0, #3
    ccc4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    ccc6:	4630      	mov	r0, r6
    ccc8:	2102      	movs	r1, #2
    ccca:	f005 f865 	bl	11d98 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ccce:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
    ccd0:	2b05      	cmp	r3, #5
    ccd2:	4606      	mov	r6, r0
    ccd4:	d026      	beq.n	cd24 <hci_event_prio+0x90>
    ccd6:	3b0e      	subs	r3, #14
		return BT_HCI_EVT_FLAG_RECV;
    ccd8:	2b01      	cmp	r3, #1
    ccda:	bf94      	ite	ls
    ccdc:	f04f 0801 	movls.w	r8, #1
    cce0:	f04f 0802 	movhi.w	r8, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    cce4:	f018 0f01 	tst.w	r8, #1
    cce8:	d10c      	bne.n	cd04 <hci_event_prio+0x70>
    ccea:	4a12      	ldr	r2, [pc, #72]	; (cd34 <hci_event_prio+0xa0>)
    ccec:	4914      	ldr	r1, [pc, #80]	; (cd40 <hci_event_prio+0xac>)
    ccee:	4813      	ldr	r0, [pc, #76]	; (cd3c <hci_event_prio+0xa8>)
    ccf0:	f640 530a 	movw	r3, #3338	; 0xd0a
    ccf4:	f003 fe77 	bl	109e6 <printk>
    ccf8:	4040      	eors	r0, r0
    ccfa:	f380 8811 	msr	BASEPRI, r0
    ccfe:	f04f 0003 	mov.w	r0, #3
    cd02:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    cd04:	4a0f      	ldr	r2, [pc, #60]	; (cd44 <hci_event_prio+0xb0>)
    cd06:	7830      	ldrb	r0, [r6, #0]
    cd08:	2302      	movs	r3, #2
    cd0a:	4621      	mov	r1, r4
    cd0c:	f7ff fbae 	bl	c46c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    cd10:	f018 0f02 	tst.w	r8, #2
    cd14:	d009      	beq.n	cd2a <hci_event_prio+0x96>
	buf->data = buf->__buf + state->offset;
    cd16:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    cd18:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    cd1a:	fa10 f585 	uxtah	r5, r0, r5
    cd1e:	60a5      	str	r5, [r4, #8]
}
    cd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    cd24:	f04f 0803 	mov.w	r8, #3
    cd28:	e7dc      	b.n	cce4 <hci_event_prio+0x50>
		net_buf_unref(buf);
    cd2a:	4620      	mov	r0, r4
}
    cd2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    cd30:	f000 be58 	b.w	d9e4 <net_buf_unref>
    cd34:	000137cc 	.word	0x000137cc
    cd38:	00013800 	.word	0x00013800
    cd3c:	00013819 	.word	0x00013819
    cd40:	00013a13 	.word	0x00013a13
    cd44:	00012e8c 	.word	0x00012e8c

0000cd48 <bt_recv>:
{
    cd48:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    cd4a:	7d04      	ldrb	r4, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    cd4c:	2c01      	cmp	r4, #1
{
    cd4e:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    cd50:	d117      	bne.n	cd82 <bt_recv+0x3a>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    cd52:	6883      	ldr	r3, [r0, #8]
    cd54:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
    cd56:	2b05      	cmp	r3, #5
    cd58:	d011      	beq.n	cd7e <bt_recv+0x36>
    cd5a:	3b0e      	subs	r3, #14
		return BT_HCI_EVT_FLAG_RECV;
    cd5c:	2b01      	cmp	r3, #1
    cd5e:	bf88      	it	hi
    cd60:	2402      	movhi	r4, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    cd62:	07e3      	lsls	r3, r4, #31
    cd64:	d502      	bpl.n	cd6c <bt_recv+0x24>
			hci_event_prio(buf);
    cd66:	4628      	mov	r0, r5
    cd68:	f7ff ff94 	bl	cc94 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    cd6c:	f014 0002 	ands.w	r0, r4, #2
    cd70:	d004      	beq.n	cd7c <bt_recv+0x34>
			net_buf_put(&bt_dev.rx_queue, buf);
    cd72:	480c      	ldr	r0, [pc, #48]	; (cda4 <bt_recv+0x5c>)
    cd74:	4629      	mov	r1, r5
    cd76:	f004 ffe7 	bl	11d48 <net_buf_put>
		return 0;
    cd7a:	2000      	movs	r0, #0
}
    cd7c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    cd7e:	2403      	movs	r4, #3
    cd80:	e7ef      	b.n	cd62 <bt_recv+0x1a>
    cd82:	4b09      	ldr	r3, [pc, #36]	; (cda8 <bt_recv+0x60>)
    cd84:	4a09      	ldr	r2, [pc, #36]	; (cdac <bt_recv+0x64>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    cd86:	480a      	ldr	r0, [pc, #40]	; (cdb0 <bt_recv+0x68>)
    cd88:	1ad2      	subs	r2, r2, r3
    cd8a:	08d2      	lsrs	r2, r2, #3
    cd8c:	0192      	lsls	r2, r2, #6
    cd8e:	f042 0201 	orr.w	r2, r2, #1
    cd92:	4621      	mov	r1, r4
    cd94:	f004 fa54 	bl	11240 <log_1>
		net_buf_unref(buf);
    cd98:	4628      	mov	r0, r5
    cd9a:	f000 fe23 	bl	d9e4 <net_buf_unref>
		return -EINVAL;
    cd9e:	f06f 0015 	mvn.w	r0, #21
    cda2:	e7eb      	b.n	cd7c <bt_recv+0x34>
    cda4:	20000244 	.word	0x20000244
    cda8:	00012b64 	.word	0x00012b64
    cdac:	00012b74 	.word	0x00012b74
    cdb0:	00013a2c 	.word	0x00013a2c

0000cdb4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    cdb4:	4a08      	ldr	r2, [pc, #32]	; (cdd8 <bt_hci_driver_register+0x24>)
{
    cdb6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    cdb8:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    cdbc:	b930      	cbnz	r0, cdcc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    cdbe:	68d9      	ldr	r1, [r3, #12]
    cdc0:	b139      	cbz	r1, cdd2 <bt_hci_driver_register+0x1e>
    cdc2:	6919      	ldr	r1, [r3, #16]
    cdc4:	b129      	cbz	r1, cdd2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    cdc6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
    cdca:	4770      	bx	lr
		return -EALREADY;
    cdcc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cdd0:	4770      	bx	lr
		return -EINVAL;
    cdd2:	f06f 0015 	mvn.w	r0, #21
}
    cdd6:	4770      	bx	lr
    cdd8:	20000178 	.word	0x20000178

0000cddc <bt_finalize_init>:
{
    cddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cde0:	4c30      	ldr	r4, [pc, #192]	; (cea4 <bt_finalize_init+0xc8>)
    cde2:	f3bf 8f5b 	dmb	ish
    cde6:	b087      	sub	sp, #28
    cde8:	f104 0398 	add.w	r3, r4, #152	; 0x98
    cdec:	e853 2f00 	ldrex	r2, [r3]
    cdf0:	f042 0202 	orr.w	r2, r2, #2
    cdf4:	e843 2100 	strex	r1, r2, [r3]
    cdf8:	2900      	cmp	r1, #0
    cdfa:	d1f7      	bne.n	cdec <bt_finalize_init+0x10>
    cdfc:	f3bf 8f5b 	dmb	ish
    ce00:	4b29      	ldr	r3, [pc, #164]	; (cea8 <bt_finalize_init+0xcc>)
    ce02:	4d2a      	ldr	r5, [pc, #168]	; (ceac <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    ce04:	492a      	ldr	r1, [pc, #168]	; (ceb0 <bt_finalize_init+0xd4>)
    ce06:	4e2b      	ldr	r6, [pc, #172]	; (ceb4 <bt_finalize_init+0xd8>)
		BT_INFO("Identity[%d]: %s",
    ce08:	f8df 90b8 	ldr.w	r9, [pc, #184]	; cec4 <bt_finalize_init+0xe8>
    ce0c:	1aed      	subs	r5, r5, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    ce0e:	79e3      	ldrb	r3, [r4, #7]
    ce10:	4620      	mov	r0, r4
    ce12:	2b01      	cmp	r3, #1
    ce14:	bf88      	it	hi
    ce16:	460e      	movhi	r6, r1
    ce18:	f7ff f9ac 	bl	c174 <bt_addr_le_str_real>
    ce1c:	f7fd fbd6 	bl	a5cc <z_log_strdup>
    ce20:	08ed      	lsrs	r5, r5, #3
    ce22:	01ad      	lsls	r5, r5, #6
    ce24:	f045 0703 	orr.w	r7, r5, #3
    ce28:	4602      	mov	r2, r0
    ce2a:	4631      	mov	r1, r6
    ce2c:	4822      	ldr	r0, [pc, #136]	; (ceb8 <bt_finalize_init+0xdc>)
    ce2e:	463b      	mov	r3, r7
    ce30:	f004 fa1a 	bl	11268 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    ce34:	46a0      	mov	r8, r4
    ce36:	2601      	movs	r6, #1
    ce38:	79e3      	ldrb	r3, [r4, #7]
    ce3a:	429e      	cmp	r6, r3
    ce3c:	f108 0807 	add.w	r8, r8, #7
    ce40:	db22      	blt.n	ce88 <bt_finalize_init+0xac>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    ce42:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    ce46:	4630      	mov	r0, r6
    ce48:	f7ff fa28 	bl	c29c <ver_str>
    ce4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    ce4e:	9304      	str	r3, [sp, #16]
    ce50:	f045 0503 	orr.w	r5, r5, #3
    ce54:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    ce56:	9305      	str	r3, [sp, #20]
    ce58:	e9cd 0602 	strd	r0, r6, [sp, #8]
    ce5c:	462b      	mov	r3, r5
    ce5e:	a902      	add	r1, sp, #8
    ce60:	2204      	movs	r2, #4
    ce62:	4816      	ldr	r0, [pc, #88]	; (cebc <bt_finalize_init+0xe0>)
    ce64:	f004 fa35 	bl	112d2 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    ce68:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    ce6c:	4630      	mov	r0, r6
    ce6e:	f7ff fa15 	bl	c29c <ver_str>
    ce72:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    ce74:	f8ad 5000 	strh.w	r5, [sp]
    ce78:	4601      	mov	r1, r0
    ce7a:	4632      	mov	r2, r6
    ce7c:	4810      	ldr	r0, [pc, #64]	; (cec0 <bt_finalize_init+0xe4>)
    ce7e:	f004 fa0c 	bl	1129a <log_3>
}
    ce82:	b007      	add	sp, #28
    ce84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    ce88:	4640      	mov	r0, r8
    ce8a:	f7ff f973 	bl	c174 <bt_addr_le_str_real>
    ce8e:	f7fd fb9d 	bl	a5cc <z_log_strdup>
    ce92:	4631      	mov	r1, r6
    ce94:	4602      	mov	r2, r0
    ce96:	463b      	mov	r3, r7
    ce98:	4648      	mov	r0, r9
    ce9a:	f004 f9e5 	bl	11268 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    ce9e:	3601      	adds	r6, #1
    cea0:	e7ca      	b.n	ce38 <bt_finalize_init+0x5c>
    cea2:	bf00      	nop
    cea4:	20000178 	.word	0x20000178
    cea8:	00012b64 	.word	0x00012b64
    ceac:	00012b74 	.word	0x00012b74
    ceb0:	00013a40 	.word	0x00013a40
    ceb4:	00013103 	.word	0x00013103
    ceb8:	00013a44 	.word	0x00013a44
    cebc:	00013a64 	.word	0x00013a64
    cec0:	00013aa2 	.word	0x00013aa2
    cec4:	00013a53 	.word	0x00013a53

0000cec8 <init_work>:
{
    cec8:	b510      	push	{r4, lr}
	err = hci_init();
    ceca:	f7ff fc7b 	bl	c7c4 <hci_init>
	if (err) {
    cece:	4604      	mov	r4, r0
    ced0:	b908      	cbnz	r0, ced6 <init_work+0xe>
	bt_finalize_init();
    ced2:	f7ff ff83 	bl	cddc <bt_finalize_init>
	if (ready_cb) {
    ced6:	4b04      	ldr	r3, [pc, #16]	; (cee8 <init_work+0x20>)
    ced8:	681b      	ldr	r3, [r3, #0]
    ceda:	b11b      	cbz	r3, cee4 <init_work+0x1c>
		ready_cb(err);
    cedc:	4620      	mov	r0, r4
}
    cede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    cee2:	4718      	bx	r3
}
    cee4:	bd10      	pop	{r4, pc}
    cee6:	bf00      	nop
    cee8:	200014a0 	.word	0x200014a0

0000ceec <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    ceec:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
    cef0:	4d3b      	ldr	r5, [pc, #236]	; (cfe0 <bt_enable+0xf4>)
    cef2:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
{
    cef6:	b088      	sub	sp, #32
    cef8:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    cefa:	b97b      	cbnz	r3, cf1c <bt_enable+0x30>
    cefc:	4b39      	ldr	r3, [pc, #228]	; (cfe4 <bt_enable+0xf8>)
    cefe:	493a      	ldr	r1, [pc, #232]	; (cfe8 <bt_enable+0xfc>)
		BT_ERR("No HCI driver registered");
    cf00:	483a      	ldr	r0, [pc, #232]	; (cfec <bt_enable+0x100>)
    cf02:	1ac9      	subs	r1, r1, r3
    cf04:	08c9      	lsrs	r1, r1, #3
    cf06:	0189      	lsls	r1, r1, #6
    cf08:	f041 0101 	orr.w	r1, r1, #1
    cf0c:	f004 f98b 	bl	11226 <log_0>
		return -ENODEV;
    cf10:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    cf14:	4620      	mov	r0, r4
    cf16:	b008      	add	sp, #32
    cf18:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    cf1c:	f105 0398 	add.w	r3, r5, #152	; 0x98
    cf20:	f3bf 8f5b 	dmb	ish
    cf24:	e853 4f00 	ldrex	r4, [r3]
    cf28:	f044 0201 	orr.w	r2, r4, #1
    cf2c:	e843 2100 	strex	r1, r2, [r3]
    cf30:	2900      	cmp	r1, #0
    cf32:	d1f7      	bne.n	cf24 <bt_enable+0x38>
    cf34:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    cf38:	f014 0401 	ands.w	r4, r4, #1
    cf3c:	d14d      	bne.n	cfda <bt_enable+0xee>
	ready_cb = cb;
    cf3e:	4b2c      	ldr	r3, [pc, #176]	; (cff0 <bt_enable+0x104>)
    cf40:	f04f 0800 	mov.w	r8, #0
    cf44:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
    cf46:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cf4a:	f06f 0308 	mvn.w	r3, #8
    cf4e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    cf52:	e9cd 8906 	strd	r8, r9, [sp, #24]
    cf56:	e9cd 4400 	strd	r4, r4, [sp]
    cf5a:	4b26      	ldr	r3, [pc, #152]	; (cff4 <bt_enable+0x108>)
    cf5c:	4926      	ldr	r1, [pc, #152]	; (cff8 <bt_enable+0x10c>)
    cf5e:	9404      	str	r4, [sp, #16]
    cf60:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    cf64:	4825      	ldr	r0, [pc, #148]	; (cffc <bt_enable+0x110>)
    cf66:	f002 fb9f 	bl	f6a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    cf6a:	4925      	ldr	r1, [pc, #148]	; (d000 <bt_enable+0x114>)
    cf6c:	4823      	ldr	r0, [pc, #140]	; (cffc <bt_enable+0x110>)
    cf6e:	f005 f8eb 	bl	12148 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cf72:	f06f 0307 	mvn.w	r3, #7
    cf76:	e9cd 4302 	strd	r4, r3, [sp, #8]
    cf7a:	e9cd 8906 	strd	r8, r9, [sp, #24]
    cf7e:	e9cd 4400 	strd	r4, r4, [sp]
    cf82:	4b20      	ldr	r3, [pc, #128]	; (d004 <bt_enable+0x118>)
    cf84:	4920      	ldr	r1, [pc, #128]	; (d008 <bt_enable+0x11c>)
    cf86:	9404      	str	r4, [sp, #16]
    cf88:	f44f 6280 	mov.w	r2, #1024	; 0x400
    cf8c:	481f      	ldr	r0, [pc, #124]	; (d00c <bt_enable+0x120>)
    cf8e:	f002 fb8b 	bl	f6a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    cf92:	491f      	ldr	r1, [pc, #124]	; (d010 <bt_enable+0x124>)
    cf94:	481d      	ldr	r0, [pc, #116]	; (d00c <bt_enable+0x120>)
    cf96:	f005 f8d7 	bl	12148 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    cf9a:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
    cf9e:	68db      	ldr	r3, [r3, #12]
    cfa0:	4798      	blx	r3
	if (err) {
    cfa2:	4604      	mov	r4, r0
    cfa4:	b158      	cbz	r0, cfbe <bt_enable+0xd2>
    cfa6:	4b0f      	ldr	r3, [pc, #60]	; (cfe4 <bt_enable+0xf8>)
    cfa8:	4a0f      	ldr	r2, [pc, #60]	; (cfe8 <bt_enable+0xfc>)
    cfaa:	1ad2      	subs	r2, r2, r3
    cfac:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    cfae:	0192      	lsls	r2, r2, #6
    cfb0:	4601      	mov	r1, r0
    cfb2:	f042 0201 	orr.w	r2, r2, #1
    cfb6:	4817      	ldr	r0, [pc, #92]	; (d014 <bt_enable+0x128>)
    cfb8:	f004 f942 	bl	11240 <log_1>
		return err;
    cfbc:	e7aa      	b.n	cf14 <bt_enable+0x28>
	if (!cb) {
    cfbe:	b93e      	cbnz	r6, cfd0 <bt_enable+0xe4>
	err = hci_init();
    cfc0:	f7ff fc00 	bl	c7c4 <hci_init>
	if (err) {
    cfc4:	4604      	mov	r4, r0
    cfc6:	2800      	cmp	r0, #0
    cfc8:	d1a4      	bne.n	cf14 <bt_enable+0x28>
	bt_finalize_init();
    cfca:	f7ff ff07 	bl	cddc <bt_finalize_init>
	return 0;
    cfce:	e7a1      	b.n	cf14 <bt_enable+0x28>
	k_work_submit(&bt_dev.init);
    cfd0:	f105 0088 	add.w	r0, r5, #136	; 0x88
    cfd4:	f002 fe3e 	bl	fc54 <k_work_submit>
	return 0;
    cfd8:	e79c      	b.n	cf14 <bt_enable+0x28>
		return -EALREADY;
    cfda:	f06f 0477 	mvn.w	r4, #119	; 0x77
    cfde:	e799      	b.n	cf14 <bt_enable+0x28>
    cfe0:	20000178 	.word	0x20000178
    cfe4:	00012b64 	.word	0x00012b64
    cfe8:	00012b74 	.word	0x00012b74
    cfec:	00013ac9 	.word	0x00013ac9
    cff0:	200014a0 	.word	0x200014a0
    cff4:	0000cb3d 	.word	0x0000cb3d
    cff8:	20002660 	.word	0x20002660
    cffc:	20001038 	.word	0x20001038
    d000:	00013ae2 	.word	0x00013ae2
    d004:	0000c515 	.word	0x0000c515
    d008:	20002240 	.word	0x20002240
    d00c:	20000fb8 	.word	0x20000fb8
    d010:	00013ae8 	.word	0x00013ae8
    d014:	00013aee 	.word	0x00013aee

0000d018 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    d018:	4800      	ldr	r0, [pc, #0]	; (d01c <bt_get_name+0x4>)
    d01a:	4770      	bx	lr
    d01c:	00013b0a 	.word	0x00013b0a

0000d020 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    d022:	4f0b      	ldr	r7, [pc, #44]	; (d050 <id_find+0x30>)
{
    d024:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    d026:	2500      	movs	r5, #0
    d028:	79fb      	ldrb	r3, [r7, #7]
    d02a:	b2ec      	uxtb	r4, r5
    d02c:	42a3      	cmp	r3, r4
    d02e:	d802      	bhi.n	d036 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    d030:	f06f 0401 	mvn.w	r4, #1
    d034:	e009      	b.n	d04a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    d036:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    d03a:	2207      	movs	r2, #7
    d03c:	4439      	add	r1, r7
    d03e:	4630      	mov	r0, r6
    d040:	f004 fd16 	bl	11a70 <memcmp>
    d044:	3501      	adds	r5, #1
    d046:	2800      	cmp	r0, #0
    d048:	d1ee      	bne.n	d028 <id_find+0x8>
}
    d04a:	4620      	mov	r0, r4
    d04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d04e:	bf00      	nop
    d050:	20000178 	.word	0x20000178

0000d054 <set_random_address>:
{
    d054:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    d056:	4914      	ldr	r1, [pc, #80]	; (d0a8 <set_random_address+0x54>)
    d058:	2206      	movs	r2, #6
    d05a:	4605      	mov	r5, r0
    d05c:	f004 fd08 	bl	11a70 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    d060:	4604      	mov	r4, r0
    d062:	b1e0      	cbz	r0, d09e <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    d064:	2106      	movs	r1, #6
    d066:	f242 0005 	movw	r0, #8197	; 0x2005
    d06a:	f7ff fafb 	bl	c664 <bt_hci_cmd_create>
	if (!buf) {
    d06e:	4604      	mov	r4, r0
    d070:	b1b8      	cbz	r0, d0a2 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d072:	2206      	movs	r2, #6
    d074:	4629      	mov	r1, r5
    d076:	3008      	adds	r0, #8
    d078:	f004 fe7d 	bl	11d76 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    d07c:	4621      	mov	r1, r4
    d07e:	2200      	movs	r2, #0
    d080:	f242 0005 	movw	r0, #8197	; 0x2005
    d084:	f7ff fb26 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    d088:	4604      	mov	r4, r0
    d08a:	b940      	cbnz	r0, d09e <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    d08c:	2206      	movs	r2, #6
    d08e:	4806      	ldr	r0, [pc, #24]	; (d0a8 <set_random_address+0x54>)
    d090:	4629      	mov	r1, r5
    d092:	f004 fcfd 	bl	11a90 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    d096:	4b05      	ldr	r3, [pc, #20]	; (d0ac <set_random_address+0x58>)
    d098:	2201      	movs	r2, #1
    d09a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    d09e:	4620      	mov	r0, r4
    d0a0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    d0a2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    d0a6:	e7fa      	b.n	d09e <set_random_address+0x4a>
    d0a8:	200001a5 	.word	0x200001a5
    d0ac:	20000178 	.word	0x20000178

0000d0b0 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    d0b0:	b530      	push	{r4, r5, lr}
    d0b2:	4c15      	ldr	r4, [pc, #84]	; (d108 <id_create.isra.0+0x58>)
    d0b4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    d0b8:	b085      	sub	sp, #20
    d0ba:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    d0bc:	460d      	mov	r5, r1
    d0be:	b181      	cbz	r1, d0e2 <id_create.isra.0+0x32>
    d0c0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    d0c2:	2207      	movs	r2, #7
    d0c4:	4669      	mov	r1, sp
    d0c6:	4628      	mov	r0, r5
    d0c8:	9300      	str	r3, [sp, #0]
    d0ca:	f8cd 3003 	str.w	r3, [sp, #3]
    d0ce:	f004 fccf 	bl	11a70 <memcmp>
    d0d2:	b130      	cbz	r0, d0e2 <id_create.isra.0+0x32>
	memcpy(dst, src, sizeof(*dst));
    d0d4:	2207      	movs	r2, #7
    d0d6:	4629      	mov	r1, r5
    d0d8:	4620      	mov	r0, r4
    d0da:	f004 fcd9 	bl	11a90 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    d0de:	b005      	add	sp, #20
    d0e0:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    d0e2:	a802      	add	r0, sp, #8
    d0e4:	f004 fd09 	bl	11afa <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    d0e8:	a802      	add	r0, sp, #8
    d0ea:	f7ff ff99 	bl	d020 <id_find>
    d0ee:	2800      	cmp	r0, #0
    d0f0:	daf7      	bge.n	d0e2 <id_create.isra.0+0x32>
    d0f2:	2207      	movs	r2, #7
    d0f4:	a902      	add	r1, sp, #8
    d0f6:	4620      	mov	r0, r4
    d0f8:	f004 fcca 	bl	11a90 <memcpy>
		if (addr) {
    d0fc:	2d00      	cmp	r5, #0
    d0fe:	d0ee      	beq.n	d0de <id_create.isra.0+0x2e>
    d100:	2207      	movs	r2, #7
    d102:	4621      	mov	r1, r4
    d104:	4628      	mov	r0, r5
    d106:	e7e8      	b.n	d0da <id_create.isra.0+0x2a>
    d108:	20000178 	.word	0x20000178

0000d10c <bt_id_get>:
{
    d10c:	b538      	push	{r3, r4, r5, lr}
    d10e:	460d      	mov	r5, r1
    d110:	4906      	ldr	r1, [pc, #24]	; (d12c <bt_id_get+0x20>)
    d112:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
    d114:	b138      	cbz	r0, d126 <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
    d116:	682b      	ldr	r3, [r5, #0]
    d118:	429c      	cmp	r4, r3
    d11a:	bf28      	it	cs
    d11c:	461c      	movcs	r4, r3
		memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
    d11e:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    d122:	f004 fcb5 	bl	11a90 <memcpy>
		*count = bt_dev.id_count;
    d126:	602c      	str	r4, [r5, #0]
}
    d128:	bd38      	pop	{r3, r4, r5, pc}
    d12a:	bf00      	nop
    d12c:	20000178 	.word	0x20000178

0000d130 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    d130:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d132:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    d134:	4605      	mov	r5, r0
    d136:	b918      	cbnz	r0, d140 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    d138:	b34c      	cbz	r4, d18e <bt_id_create+0x5e>
		return -EINVAL;
    d13a:	f06f 0415 	mvn.w	r4, #21
    d13e:	e023      	b.n	d188 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    d140:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    d142:	2207      	movs	r2, #7
    d144:	4669      	mov	r1, sp
    d146:	9300      	str	r3, [sp, #0]
    d148:	f8cd 3003 	str.w	r3, [sp, #3]
    d14c:	f004 fc90 	bl	11a70 <memcmp>
    d150:	2800      	cmp	r0, #0
    d152:	d0f1      	beq.n	d138 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    d154:	782b      	ldrb	r3, [r5, #0]
    d156:	2b01      	cmp	r3, #1
    d158:	d104      	bne.n	d164 <bt_id_create+0x34>
    d15a:	79ab      	ldrb	r3, [r5, #6]
    d15c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d160:	2bc0      	cmp	r3, #192	; 0xc0
    d162:	d00a      	beq.n	d17a <bt_id_create+0x4a>
    d164:	4b1b      	ldr	r3, [pc, #108]	; (d1d4 <bt_id_create+0xa4>)
    d166:	491c      	ldr	r1, [pc, #112]	; (d1d8 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
    d168:	481c      	ldr	r0, [pc, #112]	; (d1dc <bt_id_create+0xac>)
    d16a:	1ac9      	subs	r1, r1, r3
    d16c:	08c9      	lsrs	r1, r1, #3
    d16e:	0189      	lsls	r1, r1, #6
    d170:	f041 0101 	orr.w	r1, r1, #1
    d174:	f004 f857 	bl	11226 <log_0>
			return -EINVAL;
    d178:	e7df      	b.n	d13a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    d17a:	4628      	mov	r0, r5
    d17c:	f7ff ff50 	bl	d020 <id_find>
    d180:	2800      	cmp	r0, #0
    d182:	dbd9      	blt.n	d138 <bt_id_create+0x8>
			return -EALREADY;
    d184:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    d188:	4620      	mov	r0, r4
    d18a:	b002      	add	sp, #8
    d18c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    d18e:	4e14      	ldr	r6, [pc, #80]	; (d1e0 <bt_id_create+0xb0>)
    d190:	79f3      	ldrb	r3, [r6, #7]
    d192:	2b01      	cmp	r3, #1
    d194:	d01b      	beq.n	d1ce <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d196:	f3bf 8f5b 	dmb	ish
    d19a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
    d19e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    d1a2:	07db      	lsls	r3, r3, #31
    d1a4:	d40b      	bmi.n	d1be <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    d1a6:	2d00      	cmp	r5, #0
    d1a8:	d0c7      	beq.n	d13a <bt_id_create+0xa>
    d1aa:	2207      	movs	r2, #7
    d1ac:	4669      	mov	r1, sp
    d1ae:	4628      	mov	r0, r5
    d1b0:	9400      	str	r4, [sp, #0]
    d1b2:	f8cd 4003 	str.w	r4, [sp, #3]
    d1b6:	f004 fc5b 	bl	11a70 <memcmp>
    d1ba:	2800      	cmp	r0, #0
    d1bc:	d0bd      	beq.n	d13a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    d1be:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    d1c0:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    d1c2:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    d1c4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    d1c6:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    d1c8:	f7ff ff72 	bl	d0b0 <id_create.isra.0>
	return new_id;
    d1cc:	e7dc      	b.n	d188 <bt_id_create+0x58>
		return -ENOMEM;
    d1ce:	f06f 040b 	mvn.w	r4, #11
    d1d2:	e7d9      	b.n	d188 <bt_id_create+0x58>
    d1d4:	00012b64 	.word	0x00012b64
    d1d8:	00012b7c 	.word	0x00012b7c
    d1dc:	00013b16 	.word	0x00013b16
    d1e0:	20000178 	.word	0x20000178

0000d1e4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    d1e4:	b570      	push	{r4, r5, r6, lr}
    d1e6:	b086      	sub	sp, #24
    d1e8:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    d1ea:	aa01      	add	r2, sp, #4
    d1ec:	2100      	movs	r1, #0
    d1ee:	f241 0009 	movw	r0, #4105	; 0x1009
    d1f2:	f7ff fa6f 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    d1f6:	4604      	mov	r4, r0
    d1f8:	b160      	cbz	r0, d214 <bt_id_read_public_addr+0x30>
    d1fa:	491a      	ldr	r1, [pc, #104]	; (d264 <bt_id_read_public_addr+0x80>)
    d1fc:	4b1a      	ldr	r3, [pc, #104]	; (d268 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
    d1fe:	481b      	ldr	r0, [pc, #108]	; (d26c <bt_id_read_public_addr+0x88>)
    d200:	1ac9      	subs	r1, r1, r3
    d202:	08c9      	lsrs	r1, r1, #3
    d204:	0189      	lsls	r1, r1, #6
    d206:	f041 0102 	orr.w	r1, r1, #2
    d20a:	f004 f80c 	bl	11226 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    d20e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    d210:	b006      	add	sp, #24
    d212:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    d214:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d216:	9002      	str	r0, [sp, #8]
    d218:	689d      	ldr	r5, [r3, #8]
    d21a:	f8ad 000c 	strh.w	r0, [sp, #12]
    d21e:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    d220:	2206      	movs	r2, #6
    d222:	a902      	add	r1, sp, #8
    d224:	4628      	mov	r0, r5
    d226:	f004 fc23 	bl	11a70 <memcmp>
    d22a:	b918      	cbnz	r0, d234 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    d22c:	9801      	ldr	r0, [sp, #4]
    d22e:	f000 fbd9 	bl	d9e4 <net_buf_unref>
    d232:	e7ec      	b.n	d20e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    d234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d238:	2206      	movs	r2, #6
    d23a:	a904      	add	r1, sp, #16
    d23c:	4628      	mov	r0, r5
    d23e:	9304      	str	r3, [sp, #16]
    d240:	f8ad 3014 	strh.w	r3, [sp, #20]
    d244:	f004 fc14 	bl	11a70 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d248:	2800      	cmp	r0, #0
    d24a:	d0ef      	beq.n	d22c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    d24c:	2206      	movs	r2, #6
    d24e:	4629      	mov	r1, r5
    d250:	1c70      	adds	r0, r6, #1
    d252:	f004 fc1d 	bl	11a90 <memcpy>
	net_buf_unref(rsp);
    d256:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    d258:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    d25a:	f000 fbc3 	bl	d9e4 <net_buf_unref>
	return 1U;
    d25e:	2001      	movs	r0, #1
    d260:	e7d6      	b.n	d210 <bt_id_read_public_addr+0x2c>
    d262:	bf00      	nop
    d264:	00012b7c 	.word	0x00012b7c
    d268:	00012b64 	.word	0x00012b64
    d26c:	00013b44 	.word	0x00013b44

0000d270 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    d270:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    d272:	4668      	mov	r0, sp
    d274:	f7ff ffb6 	bl	d1e4 <bt_id_read_public_addr>
    d278:	4b04      	ldr	r3, [pc, #16]	; (d28c <bt_setup_public_id_addr+0x1c>)
    d27a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    d27c:	b118      	cbz	r0, d286 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    d27e:	4669      	mov	r1, sp
    d280:	2000      	movs	r0, #0
    d282:	f7ff ff15 	bl	d0b0 <id_create.isra.0>
}
    d286:	b003      	add	sp, #12
    d288:	f85d fb04 	ldr.w	pc, [sp], #4
    d28c:	20000178 	.word	0x20000178

0000d290 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    d290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d294:	4b25      	ldr	r3, [pc, #148]	; (d32c <bt_read_static_addr+0x9c>)
    d296:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    d29a:	f014 0401 	ands.w	r4, r4, #1
{
    d29e:	4607      	mov	r7, r0
    d2a0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d2a2:	d10a      	bne.n	d2ba <bt_read_static_addr+0x2a>
    d2a4:	4922      	ldr	r1, [pc, #136]	; (d330 <bt_read_static_addr+0xa0>)
    d2a6:	4b23      	ldr	r3, [pc, #140]	; (d334 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    d2a8:	4823      	ldr	r0, [pc, #140]	; (d338 <bt_read_static_addr+0xa8>)
    d2aa:	1ac9      	subs	r1, r1, r3
    d2ac:	08c9      	lsrs	r1, r1, #3
    d2ae:	0189      	lsls	r1, r1, #6
    d2b0:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    d2b4:	f003 ffb7 	bl	11226 <log_0>
    d2b8:	e012      	b.n	d2e0 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    d2ba:	aa01      	add	r2, sp, #4
    d2bc:	2100      	movs	r1, #0
    d2be:	f64f 4009 	movw	r0, #64521	; 0xfc09
    d2c2:	f7ff fa07 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    d2c6:	4605      	mov	r5, r0
    d2c8:	b170      	cbz	r0, d2e8 <bt_read_static_addr+0x58>
    d2ca:	4b1a      	ldr	r3, [pc, #104]	; (d334 <bt_read_static_addr+0xa4>)
    d2cc:	4918      	ldr	r1, [pc, #96]	; (d330 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    d2ce:	481b      	ldr	r0, [pc, #108]	; (d33c <bt_read_static_addr+0xac>)
    d2d0:	1ac9      	subs	r1, r1, r3
    d2d2:	08c9      	lsrs	r1, r1, #3
    d2d4:	0189      	lsls	r1, r1, #6
    d2d6:	f041 0102 	orr.w	r1, r1, #2
    d2da:	f003 ffa4 	bl	11226 <log_0>
		return 0;
    d2de:	2400      	movs	r4, #0
	}

	return cnt;
}
    d2e0:	4620      	mov	r0, r4
    d2e2:	b002      	add	sp, #8
    d2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    d2e8:	9b01      	ldr	r3, [sp, #4]
    d2ea:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    d2ec:	785c      	ldrb	r4, [r3, #1]
    d2ee:	42b4      	cmp	r4, r6
    d2f0:	bf28      	it	cs
    d2f2:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    d2f4:	f04f 0816 	mov.w	r8, #22
    d2f8:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    d2fa:	42a5      	cmp	r5, r4
    d2fc:	db0d      	blt.n	d31a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    d2fe:	9801      	ldr	r0, [sp, #4]
    d300:	f000 fb70 	bl	d9e4 <net_buf_unref>
	if (!cnt) {
    d304:	2c00      	cmp	r4, #0
    d306:	d1eb      	bne.n	d2e0 <bt_read_static_addr+0x50>
    d308:	4909      	ldr	r1, [pc, #36]	; (d330 <bt_read_static_addr+0xa0>)
    d30a:	4b0a      	ldr	r3, [pc, #40]	; (d334 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    d30c:	480c      	ldr	r0, [pc, #48]	; (d340 <bt_read_static_addr+0xb0>)
    d30e:	1ac9      	subs	r1, r1, r3
    d310:	08c9      	lsrs	r1, r1, #3
    d312:	0189      	lsls	r1, r1, #6
    d314:	f041 0102 	orr.w	r1, r1, #2
    d318:	e7cc      	b.n	d2b4 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    d31a:	fb08 7005 	mla	r0, r8, r5, r7
    d31e:	2216      	movs	r2, #22
    d320:	4631      	mov	r1, r6
    d322:	f004 fbb5 	bl	11a90 <memcpy>
	for (i = 0; i < cnt; i++) {
    d326:	3501      	adds	r5, #1
    d328:	e7e7      	b.n	d2fa <bt_read_static_addr+0x6a>
    d32a:	bf00      	nop
    d32c:	20000178 	.word	0x20000178
    d330:	00012b7c 	.word	0x00012b7c
    d334:	00012b64 	.word	0x00012b64
    d338:	00013b62 	.word	0x00013b62
    d33c:	00013b8e 	.word	0x00013b8e
    d340:	00013bae 	.word	0x00013bae

0000d344 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    d344:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    d346:	4d14      	ldr	r5, [pc, #80]	; (d398 <bt_setup_random_id_addr+0x54>)
    d348:	79ec      	ldrb	r4, [r5, #7]
{
    d34a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    d34c:	b9f4      	cbnz	r4, d38c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    d34e:	2101      	movs	r1, #1
    d350:	a802      	add	r0, sp, #8
    d352:	f7ff ff9d 	bl	d290 <bt_read_static_addr>
    d356:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    d358:	b1c0      	cbz	r0, d38c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    d35a:	2716      	movs	r7, #22
    d35c:	e00f      	b.n	d37e <bt_setup_random_id_addr+0x3a>
    d35e:	ab02      	add	r3, sp, #8
    d360:	fb07 3106 	mla	r1, r7, r6, r3
    d364:	2206      	movs	r2, #6
    d366:	f10d 0001 	add.w	r0, sp, #1
    d36a:	f004 fb91 	bl	11a90 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    d36e:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    d370:	4669      	mov	r1, sp
    d372:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    d374:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    d378:	f7ff fe9a 	bl	d0b0 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    d37c:	3401      	adds	r4, #1
    d37e:	79eb      	ldrb	r3, [r5, #7]
    d380:	b2e6      	uxtb	r6, r4
    d382:	42b3      	cmp	r3, r6
    d384:	d8eb      	bhi.n	d35e <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    d386:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    d388:	b009      	add	sp, #36	; 0x24
    d38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    d38c:	2100      	movs	r1, #0
    d38e:	4608      	mov	r0, r1
    d390:	f7ff fece 	bl	d130 <bt_id_create>
    d394:	e7f8      	b.n	d388 <bt_setup_random_id_addr+0x44>
    d396:	bf00      	nop
    d398:	20000178 	.word	0x20000178

0000d39c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    d39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    d3a0:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    d3a4:	7805      	ldrb	r5, [r0, #0]
{
    d3a6:	460e      	mov	r6, r1
    d3a8:	4690      	mov	r8, r2
    d3aa:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    d3ac:	d026      	beq.n	d3fc <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    d3ae:	4c22      	ldr	r4, [pc, #136]	; (d438 <bt_id_set_adv_own_addr+0x9c>)
    d3b0:	b12a      	cbz	r2, d3be <bt_id_set_adv_own_addr+0x22>
    d3b2:	0688      	lsls	r0, r1, #26
    d3b4:	d503      	bpl.n	d3be <bt_id_set_adv_own_addr+0x22>
    d3b6:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    d3ba:	0659      	lsls	r1, r3, #25
    d3bc:	d539      	bpl.n	d432 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    d3be:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    d3c2:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    d3c6:	5ce3      	ldrb	r3, [r4, r3]
    d3c8:	2b01      	cmp	r3, #1
    d3ca:	d008      	beq.n	d3de <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    d3cc:	eba9 0505 	sub.w	r5, r9, r5
    d3d0:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    d3d2:	f1b8 0f00 	cmp.w	r8, #0
    d3d6:	d10c      	bne.n	d3f2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    d3d8:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    d3da:	2000      	movs	r0, #0
    d3dc:	e007      	b.n	d3ee <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    d3de:	2007      	movs	r0, #7
    d3e0:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    d3e4:	4420      	add	r0, r4
    d3e6:	f7ff fe35 	bl	d054 <set_random_address>
				if (err) {
    d3ea:	2800      	cmp	r0, #0
    d3ec:	d0ee      	beq.n	d3cc <bt_id_set_adv_own_addr+0x30>
}
    d3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    d3f2:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    d3f4:	bf48      	it	mi
    d3f6:	f043 0302 	orrmi.w	r3, r3, #2
    d3fa:	e7ed      	b.n	d3d8 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    d3fc:	074b      	lsls	r3, r1, #29
    d3fe:	d514      	bpl.n	d42a <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    d400:	4e0d      	ldr	r6, [pc, #52]	; (d438 <bt_id_set_adv_own_addr+0x9c>)
    d402:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    d406:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    d40a:	5cf3      	ldrb	r3, [r6, r3]
    d40c:	2b01      	cmp	r3, #1
    d40e:	d10a      	bne.n	d426 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    d410:	2007      	movs	r0, #7
    d412:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    d416:	4430      	add	r0, r6
    d418:	f7ff fe1c 	bl	d054 <set_random_address>
			*own_addr_type = id_addr->type;
    d41c:	eba8 0505 	sub.w	r5, r8, r5
    d420:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    d422:	703b      	strb	r3, [r7, #0]
		if (err) {
    d424:	e7e3      	b.n	d3ee <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    d426:	4620      	mov	r0, r4
    d428:	e7f8      	b.n	d41c <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
    d42a:	f004 fb74 	bl	11b16 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    d42e:	2301      	movs	r3, #1
    d430:	e7f7      	b.n	d422 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
    d432:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d436:	e7da      	b.n	d3ee <bt_id_set_adv_own_addr+0x52>
    d438:	20000178 	.word	0x20000178

0000d43c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    d43c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d43e:	4d14      	ldr	r5, [pc, #80]	; (d490 <bt_id_init+0x54>)
    d440:	79eb      	ldrb	r3, [r5, #7]
    d442:	b113      	cbz	r3, d44a <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    d444:	2400      	movs	r4, #0
}
    d446:	4620      	mov	r0, r4
    d448:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
    d44a:	f7ff ff11 	bl	d270 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d44e:	79eb      	ldrb	r3, [r5, #7]
    d450:	2b00      	cmp	r3, #0
    d452:	d1f7      	bne.n	d444 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    d454:	f7ff ff76 	bl	d344 <bt_setup_random_id_addr>
		if (err) {
    d458:	4604      	mov	r4, r0
    d45a:	b150      	cbz	r0, d472 <bt_id_init+0x36>
    d45c:	490d      	ldr	r1, [pc, #52]	; (d494 <bt_id_init+0x58>)
    d45e:	4b0e      	ldr	r3, [pc, #56]	; (d498 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
    d460:	480e      	ldr	r0, [pc, #56]	; (d49c <bt_id_init+0x60>)
    d462:	1ac9      	subs	r1, r1, r3
    d464:	08c9      	lsrs	r1, r1, #3
    d466:	0189      	lsls	r1, r1, #6
    d468:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
    d46c:	f003 fedb 	bl	11226 <log_0>
			return err;
    d470:	e7e9      	b.n	d446 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    d472:	1c68      	adds	r0, r5, #1
    d474:	f7ff fdee 	bl	d054 <set_random_address>
		if (err) {
    d478:	4604      	mov	r4, r0
    d47a:	2800      	cmp	r0, #0
    d47c:	d0e3      	beq.n	d446 <bt_id_init+0xa>
    d47e:	4905      	ldr	r1, [pc, #20]	; (d494 <bt_id_init+0x58>)
    d480:	4b05      	ldr	r3, [pc, #20]	; (d498 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
    d482:	4807      	ldr	r0, [pc, #28]	; (d4a0 <bt_id_init+0x64>)
    d484:	1ac9      	subs	r1, r1, r3
    d486:	08c9      	lsrs	r1, r1, #3
    d488:	0189      	lsls	r1, r1, #6
    d48a:	f041 0101 	orr.w	r1, r1, #1
    d48e:	e7ed      	b.n	d46c <bt_id_init+0x30>
    d490:	20000178 	.word	0x20000178
    d494:	00012b7c 	.word	0x00012b7c
    d498:	00012b64 	.word	0x00012b64
    d49c:	00013bd7 	.word	0x00013bd7
    d4a0:	00013bf6 	.word	0x00013bf6

0000d4a4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    d4a4:	6843      	ldr	r3, [r0, #4]
{
    d4a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d4a8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    d4aa:	0558      	lsls	r0, r3, #21
    d4ac:	d502      	bpl.n	d4b4 <valid_adv_param+0x10>
		return false;
    d4ae:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    d4b0:	b003      	add	sp, #12
    d4b2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    d4b4:	6922      	ldr	r2, [r4, #16]
    d4b6:	b10a      	cbz	r2, d4bc <valid_adv_param+0x18>
    d4b8:	07d9      	lsls	r1, r3, #31
    d4ba:	d5f8      	bpl.n	d4ae <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    d4bc:	4d1a      	ldr	r5, [pc, #104]	; (d528 <valid_adv_param+0x84>)
    d4be:	7820      	ldrb	r0, [r4, #0]
    d4c0:	79eb      	ldrb	r3, [r5, #7]
    d4c2:	4283      	cmp	r3, r0
    d4c4:	d9f3      	bls.n	d4ae <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    d4c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    d4ca:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    d4cc:	2207      	movs	r2, #7
    d4ce:	4669      	mov	r1, sp
    d4d0:	4428      	add	r0, r5
    d4d2:	9300      	str	r3, [sp, #0]
    d4d4:	f8cd 3003 	str.w	r3, [sp, #3]
    d4d8:	f004 faca 	bl	11a70 <memcmp>
	if (param->id >= bt_dev.id_count ||
    d4dc:	2800      	cmp	r0, #0
    d4de:	d0e6      	beq.n	d4ae <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    d4e0:	6860      	ldr	r0, [r4, #4]
    d4e2:	07c2      	lsls	r2, r0, #31
    d4e4:	d406      	bmi.n	d4f4 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    d4e6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    d4ea:	2b08      	cmp	r3, #8
    d4ec:	d802      	bhi.n	d4f4 <valid_adv_param+0x50>
    d4ee:	68a3      	ldr	r3, [r4, #8]
    d4f0:	2b9f      	cmp	r3, #159	; 0x9f
    d4f2:	d9dc      	bls.n	d4ae <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    d4f4:	f010 0f30 	tst.w	r0, #48	; 0x30
    d4f8:	d002      	beq.n	d500 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    d4fa:	6923      	ldr	r3, [r4, #16]
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d0d6      	beq.n	d4ae <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    d500:	06c3      	lsls	r3, r0, #27
    d502:	d401      	bmi.n	d508 <valid_adv_param+0x64>
    d504:	6923      	ldr	r3, [r4, #16]
    d506:	b943      	cbnz	r3, d51a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    d508:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    d50c:	429a      	cmp	r2, r3
    d50e:	d8ce      	bhi.n	d4ae <valid_adv_param+0xa>
    d510:	2a1f      	cmp	r2, #31
    d512:	d9cc      	bls.n	d4ae <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    d514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    d518:	d8c9      	bhi.n	d4ae <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    d51a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    d51e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    d522:	bf18      	it	ne
    d524:	2001      	movne	r0, #1
    d526:	e7c3      	b.n	d4b0 <valid_adv_param+0xc>
    d528:	20000178 	.word	0x20000178

0000d52c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    d52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d530:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    d532:	2120      	movs	r1, #32
{
    d534:	4682      	mov	sl, r0
    d536:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    d538:	f7ff f894 	bl	c664 <bt_hci_cmd_create>
	if (!buf) {
    d53c:	4606      	mov	r6, r0
    d53e:	2800      	cmp	r0, #0
    d540:	d05c      	beq.n	d5fc <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    d542:	2120      	movs	r1, #32
    d544:	3008      	adds	r0, #8
    d546:	f004 fc10 	bl	11d6a <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    d54a:	2220      	movs	r2, #32
    d54c:	2100      	movs	r1, #0
    d54e:	4681      	mov	r9, r0
    d550:	f004 faa9 	bl	11aa6 <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    d554:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    d558:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    d55c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    d55e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    d560:	f8d4 8000 	ldr.w	r8, [r4]
    d564:	2300      	movs	r3, #0
    d566:	6862      	ldr	r2, [r4, #4]
    d568:	4293      	cmp	r3, r2
    d56a:	d30d      	bcc.n	d588 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    d56c:	9b00      	ldr	r3, [sp, #0]
    d56e:	3408      	adds	r4, #8
    d570:	429c      	cmp	r4, r3
    d572:	d1f5      	bne.n	d560 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    d574:	2200      	movs	r2, #0
    d576:	4631      	mov	r1, r6
    d578:	4650      	mov	r0, sl
	*data_len = set_data_len;
    d57a:	f889 5000 	strb.w	r5, [r9]
}
    d57e:	b003      	add	sp, #12
    d580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    d584:	f7ff b8a6 	b.w	c6d4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    d588:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    d58c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    d590:	1ca8      	adds	r0, r5, #2
    d592:	1881      	adds	r1, r0, r2
    d594:	291f      	cmp	r1, #31
    d596:	d91a      	bls.n	d5ce <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    d598:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    d59c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    d5a0:	d101      	bne.n	d5a6 <hci_set_ad+0x7a>
    d5a2:	2a00      	cmp	r2, #0
    d5a4:	dc11      	bgt.n	d5ca <hci_set_ad+0x9e>
    d5a6:	4b17      	ldr	r3, [pc, #92]	; (d604 <hci_set_ad+0xd8>)
    d5a8:	4917      	ldr	r1, [pc, #92]	; (d608 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    d5aa:	4818      	ldr	r0, [pc, #96]	; (d60c <hci_set_ad+0xe0>)
    d5ac:	1ac9      	subs	r1, r1, r3
    d5ae:	08c9      	lsrs	r1, r1, #3
    d5b0:	0189      	lsls	r1, r1, #6
    d5b2:	f041 0101 	orr.w	r1, r1, #1
    d5b6:	f003 fe36 	bl	11226 <log_0>
		net_buf_unref(buf);
    d5ba:	4630      	mov	r0, r6
    d5bc:	f000 fa12 	bl	d9e4 <net_buf_unref>
					return -EINVAL;
    d5c0:	f06f 0015 	mvn.w	r0, #21
}
    d5c4:	b003      	add	sp, #12
    d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    d5ca:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    d5ce:	b2d7      	uxtb	r7, r2
    d5d0:	1c79      	adds	r1, r7, #1
    d5d2:	f80b 1005 	strb.w	r1, [fp, r5]
    d5d6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    d5d8:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    d5da:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    d5de:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    d5e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    d5e6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    d5e8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    d5ea:	f004 fa51 	bl	11a90 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    d5ee:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    d5f0:	443d      	add	r5, r7
    d5f2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    d5f4:	3301      	adds	r3, #1
    d5f6:	f108 0808 	add.w	r8, r8, #8
    d5fa:	e7b4      	b.n	d566 <hci_set_ad+0x3a>
		return -ENOBUFS;
    d5fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d600:	e7e0      	b.n	d5c4 <hci_set_ad+0x98>
    d602:	bf00      	nop
    d604:	00012b64 	.word	0x00012b64
    d608:	00012b64 	.word	0x00012b64
    d60c:	00013c19 	.word	0x00013c19

0000d610 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    d614:	690e      	ldr	r6, [r1, #16]
{
    d616:	b08d      	sub	sp, #52	; 0x34
	bool dir_adv = (param->peer != NULL), scannable;
    d618:	f1b6 0b00 	subs.w	fp, r6, #0
{
    d61c:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d61e:	487a      	ldr	r0, [pc, #488]	; (d808 <bt_le_adv_start_legacy+0x1f8>)
    d620:	460c      	mov	r4, r1
	bool dir_adv = (param->peer != NULL), scannable;
    d622:	bf18      	it	ne
    d624:	f04f 0b01 	movne.w	fp, #1
{
    d628:	4691      	mov	r9, r2
    d62a:	469a      	mov	sl, r3
    d62c:	f004 fa96 	bl	11b5c <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d630:	0781      	lsls	r1, r0, #30
    d632:	f140 80df 	bpl.w	d7f4 <bt_le_adv_start_legacy+0x1e4>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    d636:	4620      	mov	r0, r4
    d638:	f7ff ff34 	bl	d4a4 <valid_adv_param>
    d63c:	b928      	cbnz	r0, d64a <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
    d63e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    d642:	4658      	mov	r0, fp
    d644:	b00d      	add	sp, #52	; 0x34
    d646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    d64a:	4620      	mov	r0, r4
    d64c:	f004 fa75 	bl	11b3a <bt_id_adv_random_addr_check>
    d650:	4680      	mov	r8, r0
    d652:	2800      	cmp	r0, #0
    d654:	d0f3      	beq.n	d63e <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    d656:	f105 0710 	add.w	r7, r5, #16
    d65a:	4638      	mov	r0, r7
    d65c:	f004 fa7e 	bl	11b5c <atomic_get>
    d660:	0642      	lsls	r2, r0, #25
    d662:	f3c0 1180 	ubfx	r1, r0, #6, #1
    d666:	f100 80c8 	bmi.w	d7fa <bt_le_adv_start_legacy+0x1ea>
	(void)memset(&set_param, 0, sizeof(set_param));
    d66a:	220f      	movs	r2, #15
    d66c:	a808      	add	r0, sp, #32
    d66e:	9105      	str	r1, [sp, #20]
    d670:	f004 fa19 	bl	11aa6 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    d674:	68a3      	ldr	r3, [r4, #8]
    d676:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    d67a:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    d67c:	68e3      	ldr	r3, [r4, #12]
    d67e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    d682:	f004 fa5c 	bl	11b3e <get_adv_channel_map>
	if (adv->id != param->id) {
    d686:	782a      	ldrb	r2, [r5, #0]
    d688:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    d68a:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    d68c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    d690:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    d692:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    d696:	d004      	beq.n	d6a2 <bt_le_adv_start_legacy+0x92>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d698:	485b      	ldr	r0, [pc, #364]	; (d808 <bt_le_adv_start_legacy+0x1f8>)
    d69a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    d69e:	f004 fa63 	bl	11b68 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    d6a2:	4a5a      	ldr	r2, [pc, #360]	; (d80c <bt_le_adv_start_legacy+0x1fc>)
	adv->id = param->id;
    d6a4:	7823      	ldrb	r3, [r4, #0]
    d6a6:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    d6a8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    d6ac:	6861      	ldr	r1, [r4, #4]
    d6ae:	465a      	mov	r2, fp
    d6b0:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    d6b4:	4628      	mov	r0, r5
    d6b6:	f7ff fe71 	bl	d39c <bt_id_set_adv_own_addr>
	if (err) {
    d6ba:	4683      	mov	fp, r0
    d6bc:	2800      	cmp	r0, #0
    d6be:	d1c0      	bne.n	d642 <bt_le_adv_start_legacy+0x32>
	if (dir_adv) {
    d6c0:	f105 0009 	add.w	r0, r5, #9
    d6c4:	2e00      	cmp	r6, #0
    d6c6:	d03e      	beq.n	d746 <bt_le_adv_start_legacy+0x136>
	memcpy(dst, src, sizeof(*dst));
    d6c8:	6921      	ldr	r1, [r4, #16]
    d6ca:	2207      	movs	r2, #7
    d6cc:	f004 f9e0 	bl	11a90 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    d6d0:	6860      	ldr	r0, [r4, #4]
    d6d2:	07c3      	lsls	r3, r0, #31
    d6d4:	d540      	bpl.n	d758 <bt_le_adv_start_legacy+0x148>
		if (dir_adv) {
    d6d6:	2e00      	cmp	r6, #0
    d6d8:	d03b      	beq.n	d752 <bt_le_adv_start_legacy+0x142>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    d6da:	f010 0f10 	tst.w	r0, #16
    d6de:	bf14      	ite	ne
    d6e0:	2304      	movne	r3, #4
    d6e2:	2301      	moveq	r3, #1
    d6e4:	6921      	ldr	r1, [r4, #16]
    d6e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    d6ea:	2207      	movs	r2, #7
    d6ec:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    d6f0:	f004 f9ce 	bl	11a90 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    d6f4:	210f      	movs	r1, #15
    d6f6:	f242 0006 	movw	r0, #8198	; 0x2006
    d6fa:	f7fe ffb3 	bl	c664 <bt_hci_cmd_create>
	if (!buf) {
    d6fe:	4683      	mov	fp, r0
    d700:	2800      	cmp	r0, #0
    d702:	d07d      	beq.n	d800 <bt_le_adv_start_legacy+0x1f0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d704:	220f      	movs	r2, #15
    d706:	a908      	add	r1, sp, #32
    d708:	3008      	adds	r0, #8
    d70a:	f004 fb34 	bl	11d76 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    d70e:	4659      	mov	r1, fp
    d710:	2200      	movs	r2, #0
    d712:	f242 0006 	movw	r0, #8198	; 0x2006
    d716:	f7fe ffdd 	bl	c6d4 <bt_hci_cmd_send_sync>
	if (err) {
    d71a:	4683      	mov	fp, r0
    d71c:	2800      	cmp	r0, #0
    d71e:	d190      	bne.n	d642 <bt_le_adv_start_legacy+0x32>
	if (!dir_adv) {
    d720:	b336      	cbz	r6, d770 <bt_le_adv_start_legacy+0x160>
	return bt_le_adv_set_enable_legacy(adv, enable);
    d722:	2101      	movs	r1, #1
    d724:	4628      	mov	r0, r5
    d726:	f004 fac6 	bl	11cb6 <bt_le_adv_set_enable_legacy>
	if (err) {
    d72a:	4683      	mov	fp, r0
    d72c:	2800      	cmp	r0, #0
    d72e:	d033      	beq.n	d798 <bt_le_adv_start_legacy+0x188>
    d730:	4b37      	ldr	r3, [pc, #220]	; (d810 <bt_le_adv_start_legacy+0x200>)
    d732:	4938      	ldr	r1, [pc, #224]	; (d814 <bt_le_adv_start_legacy+0x204>)
		BT_ERR("Failed to start advertiser");
    d734:	4838      	ldr	r0, [pc, #224]	; (d818 <bt_le_adv_start_legacy+0x208>)
    d736:	1ac9      	subs	r1, r1, r3
    d738:	08c9      	lsrs	r1, r1, #3
    d73a:	0189      	lsls	r1, r1, #6
    d73c:	f041 0101 	orr.w	r1, r1, #1
    d740:	f003 fd71 	bl	11226 <log_0>
		return err;
    d744:	e77d      	b.n	d642 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    d746:	9606      	str	r6, [sp, #24]
    d748:	2207      	movs	r2, #7
    d74a:	f8cd 601b 	str.w	r6, [sp, #27]
    d74e:	a906      	add	r1, sp, #24
    d750:	e7bc      	b.n	d6cc <bt_le_adv_start_legacy+0xbc>
			set_param.type = BT_HCI_ADV_IND;
    d752:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    d756:	e7cd      	b.n	d6f4 <bt_le_adv_start_legacy+0xe4>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    d758:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d75a:	b933      	cbnz	r3, d76a <bt_le_adv_start_legacy+0x15a>
    d75c:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    d760:	f1c8 0303 	rsb	r3, r8, #3
    d764:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    d768:	e7c4      	b.n	d6f4 <bt_le_adv_start_legacy+0xe4>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    d76a:	f04f 0801 	mov.w	r8, #1
    d76e:	e7f7      	b.n	d760 <bt_le_adv_start_legacy+0x150>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
    d770:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    d772:	f3c3 4280 	ubfx	r2, r3, #18, #1
    d776:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d77a:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d77e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d780:	9203      	str	r2, [sp, #12]
    d782:	9300      	str	r3, [sp, #0]
    d784:	4652      	mov	r2, sl
    d786:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d788:	4649      	mov	r1, r9
    d78a:	4628      	mov	r0, r5
    d78c:	f004 fa12 	bl	11bb4 <le_adv_update.constprop.0>
		if (err) {
    d790:	4683      	mov	fp, r0
    d792:	2800      	cmp	r0, #0
    d794:	d0c5      	beq.n	d722 <bt_le_adv_start_legacy+0x112>
    d796:	e754      	b.n	d642 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    d798:	bb56      	cbnz	r6, d7f0 <bt_le_adv_start_legacy+0x1e0>
    d79a:	6862      	ldr	r2, [r4, #4]
    d79c:	f082 0202 	eor.w	r2, r2, #2
    d7a0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d7a4:	4638      	mov	r0, r7
    d7a6:	210c      	movs	r1, #12
    d7a8:	f004 f9ed 	bl	11b86 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    d7ac:	6862      	ldr	r2, [r4, #4]
    d7ae:	4638      	mov	r0, r7
    d7b0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d7b4:	2107      	movs	r1, #7
    d7b6:	f004 f9e6 	bl	11b86 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
    d7ba:	6862      	ldr	r2, [r4, #4]
    d7bc:	4638      	mov	r0, r7
    d7be:	f3c2 4280 	ubfx	r2, r2, #18, #1
    d7c2:	2112      	movs	r1, #18
    d7c4:	f004 f9df 	bl	11b86 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    d7c8:	6862      	ldr	r2, [r4, #4]
    d7ca:	4638      	mov	r0, r7
    d7cc:	f002 0201 	and.w	r2, r2, #1
    d7d0:	2108      	movs	r1, #8
    d7d2:	f004 f9d8 	bl	11b86 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    d7d6:	4642      	mov	r2, r8
    d7d8:	4638      	mov	r0, r7
    d7da:	2109      	movs	r1, #9
    d7dc:	f004 f9d3 	bl	11b86 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    d7e0:	6862      	ldr	r2, [r4, #4]
    d7e2:	210b      	movs	r1, #11
    d7e4:	f3c2 0280 	ubfx	r2, r2, #2, #1
    d7e8:	4638      	mov	r0, r7
    d7ea:	f004 f9cc 	bl	11b86 <atomic_set_bit_to>
	return 0;
    d7ee:	e728      	b.n	d642 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    d7f0:	4602      	mov	r2, r0
    d7f2:	e7d7      	b.n	d7a4 <bt_le_adv_start_legacy+0x194>
		return -EAGAIN;
    d7f4:	f06f 0b0a 	mvn.w	fp, #10
    d7f8:	e723      	b.n	d642 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
    d7fa:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    d7fe:	e720      	b.n	d642 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
    d800:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    d804:	e71d      	b.n	d642 <bt_le_adv_start_legacy+0x32>
    d806:	bf00      	nop
    d808:	20000210 	.word	0x20000210
    d80c:	20000178 	.word	0x20000178
    d810:	00012b64 	.word	0x00012b64
    d814:	00012b64 	.word	0x00012b64
    d818:	00013c32 	.word	0x00013c32

0000d81c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    d81c:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    d81e:	9c04      	ldr	r4, [sp, #16]
    d820:	e9cd 3400 	strd	r3, r4, [sp]
    d824:	4613      	mov	r3, r2
    d826:	460a      	mov	r2, r1
    d828:	4601      	mov	r1, r0
    d82a:	4802      	ldr	r0, [pc, #8]	; (d834 <bt_le_adv_start+0x18>)
    d82c:	f7ff fef0 	bl	d610 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
    d830:	b002      	add	sp, #8
    d832:	bd10      	pop	{r4, pc}
    d834:	20000190 	.word	0x20000190

0000d838 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    d838:	b508      	push	{r3, lr}
    d83a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    d83e:	4809      	ldr	r0, [pc, #36]	; (d864 <bt_le_adv_stop+0x2c>)
    d840:	f004 f992 	bl	11b68 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d844:	4807      	ldr	r0, [pc, #28]	; (d864 <bt_le_adv_stop+0x2c>)
    d846:	f004 f989 	bl	11b5c <atomic_get>
    d84a:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    d84c:	065b      	lsls	r3, r3, #25
    d84e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    d852:	d505      	bpl.n	d860 <bt_le_adv_stop+0x28>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    d854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    d858:	4803      	ldr	r0, [pc, #12]	; (d868 <bt_le_adv_stop+0x30>)
    d85a:	2100      	movs	r1, #0
    d85c:	f004 ba2b 	b.w	11cb6 <bt_le_adv_set_enable_legacy>
}
    d860:	bd08      	pop	{r3, pc}
    d862:	bf00      	nop
    d864:	200001a0 	.word	0x200001a0
    d868:	20000190 	.word	0x20000190

0000d86c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    d86c:	4b02      	ldr	r3, [pc, #8]	; (d878 <net_buf_pool_get+0xc>)
    d86e:	2228      	movs	r2, #40	; 0x28
    d870:	fb02 3000 	mla	r0, r2, r0, r3
    d874:	4770      	bx	lr
    d876:	bf00      	nop
    d878:	2000034c 	.word	0x2000034c

0000d87c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d87c:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
    d87e:	4a05      	ldr	r2, [pc, #20]	; (d894 <net_buf_id+0x18>)
    d880:	2128      	movs	r1, #40	; 0x28
    d882:	fb01 2303 	mla	r3, r1, r3, r2
    d886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d888:	1ac0      	subs	r0, r0, r3
}
    d88a:	4b03      	ldr	r3, [pc, #12]	; (d898 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
    d88c:	10c0      	asrs	r0, r0, #3
}
    d88e:	4358      	muls	r0, r3
    d890:	4770      	bx	lr
    d892:	bf00      	nop
    d894:	2000034c 	.word	0x2000034c
    d898:	aaaaaaab 	.word	0xaaaaaaab

0000d89c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    d89c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d89e:	4a0a      	ldr	r2, [pc, #40]	; (d8c8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d8a0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d8a2:	2428      	movs	r4, #40	; 0x28
    d8a4:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
    d8a8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d8aa:	6a1b      	ldr	r3, [r3, #32]
    d8ac:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    d8ae:	6823      	ldr	r3, [r4, #0]
    d8b0:	429a      	cmp	r2, r3
    d8b2:	bf94      	ite	ls
    d8b4:	600a      	strls	r2, [r1, #0]
    d8b6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    d8b8:	f7ff ffe0 	bl	d87c <net_buf_id>
    d8bc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    d8c0:	fb02 3000 	mla	r0, r2, r0, r3
    d8c4:	bd10      	pop	{r4, pc}
    d8c6:	bf00      	nop
    d8c8:	2000034c 	.word	0x2000034c

0000d8cc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    d8cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d8d0:	4605      	mov	r5, r0
    d8d2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d8d4:	4610      	mov	r0, r2
    d8d6:	4619      	mov	r1, r3
{
    d8d8:	4616      	mov	r6, r2
    d8da:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d8dc:	f004 fe8c 	bl	125f8 <sys_clock_timeout_end_calc>
    d8e0:	4680      	mov	r8, r0
    d8e2:	4689      	mov	r9, r1
	__asm__ volatile(
    d8e4:	f04f 0340 	mov.w	r3, #64	; 0x40
    d8e8:	f3ef 8a11 	mrs	sl, BASEPRI
    d8ec:	f383 8811 	msr	BASEPRI, r3
    d8f0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    d8f4:	8b6b      	ldrh	r3, [r5, #26]
    d8f6:	2b00      	cmp	r3, #0
    d8f8:	d054      	beq.n	d9a4 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    d8fa:	8b2a      	ldrh	r2, [r5, #24]
    d8fc:	429a      	cmp	r2, r3
    d8fe:	d93d      	bls.n	d97c <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
    d900:	2200      	movs	r2, #0
    d902:	2300      	movs	r3, #0
    d904:	4628      	mov	r0, r5
    d906:	f002 f833 	bl	f970 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    d90a:	4604      	mov	r4, r0
    d90c:	2800      	cmp	r0, #0
    d90e:	d035      	beq.n	d97c <net_buf_alloc_len+0xb0>
	__asm__ volatile(
    d910:	f38a 8811 	msr	BASEPRI, sl
    d914:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    d918:	9b01      	ldr	r3, [sp, #4]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d052      	beq.n	d9c4 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d91e:	ea56 0307 	orrs.w	r3, r6, r7
    d922:	d010      	beq.n	d946 <net_buf_alloc_len+0x7a>
    d924:	1c7b      	adds	r3, r7, #1
    d926:	bf08      	it	eq
    d928:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    d92c:	d00b      	beq.n	d946 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    d92e:	f002 feab 	bl	10688 <sys_clock_tick_get>
    d932:	ebb8 0600 	subs.w	r6, r8, r0
    d936:	eb69 0701 	sbc.w	r7, r9, r1
    d93a:	2e00      	cmp	r6, #0
    d93c:	f177 0300 	sbcs.w	r3, r7, #0
    d940:	bfbc      	itt	lt
    d942:	2600      	movlt	r6, #0
    d944:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d946:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    d948:	f8df 8090 	ldr.w	r8, [pc, #144]	; d9dc <net_buf_alloc_len+0x110>
    d94c:	2228      	movs	r2, #40	; 0x28
    d94e:	fb02 8303 	mla	r3, r2, r3, r8
    d952:	a901      	add	r1, sp, #4
    d954:	6a1b      	ldr	r3, [r3, #32]
    d956:	681b      	ldr	r3, [r3, #0]
    d958:	4632      	mov	r2, r6
    d95a:	681d      	ldr	r5, [r3, #0]
    d95c:	4620      	mov	r0, r4
    d95e:	463b      	mov	r3, r7
    d960:	47a8      	blx	r5
    d962:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    d964:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    d966:	bb70      	cbnz	r0, d9c6 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
    d968:	79a0      	ldrb	r0, [r4, #6]
    d96a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    d96e:	4621      	mov	r1, r4
    d970:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    d974:	f004 fc66 	bl	12244 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    d978:	462c      	mov	r4, r5
}
    d97a:	e01f      	b.n	d9bc <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
    d97c:	8b68      	ldrh	r0, [r5, #26]
    d97e:	1e43      	subs	r3, r0, #1
    d980:	836b      	strh	r3, [r5, #26]
    d982:	f38a 8811 	msr	BASEPRI, sl
    d986:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    d98a:	8b2c      	ldrh	r4, [r5, #24]
    d98c:	1a24      	subs	r4, r4, r0
    d98e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    d990:	2318      	movs	r3, #24
    d992:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    d996:	4811      	ldr	r0, [pc, #68]	; (d9dc <net_buf_alloc_len+0x110>)
    d998:	4b11      	ldr	r3, [pc, #68]	; (d9e0 <net_buf_alloc_len+0x114>)
    d99a:	1a2d      	subs	r5, r5, r0
    d99c:	10ed      	asrs	r5, r5, #3
    d99e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
    d9a0:	71a5      	strb	r5, [r4, #6]
		goto success;
    d9a2:	e7b9      	b.n	d918 <net_buf_alloc_len+0x4c>
    d9a4:	f38a 8811 	msr	BASEPRI, sl
    d9a8:	f3bf 8f6f 	isb	sy
    d9ac:	4632      	mov	r2, r6
    d9ae:	463b      	mov	r3, r7
    d9b0:	4628      	mov	r0, r5
    d9b2:	f001 ffdd 	bl	f970 <z_impl_k_queue_get>
	if (!buf) {
    d9b6:	4604      	mov	r4, r0
    d9b8:	2800      	cmp	r0, #0
    d9ba:	d1ad      	bne.n	d918 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    d9bc:	4620      	mov	r0, r4
    d9be:	b002      	add	sp, #8
    d9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
    d9c4:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    d9c6:	2300      	movs	r3, #0
	buf->ref   = 1U;
    d9c8:	2201      	movs	r2, #1
	buf->frags = NULL;
    d9ca:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    d9cc:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    d9ce:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    d9d0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    d9d2:	6923      	ldr	r3, [r4, #16]
    d9d4:	81e2      	strh	r2, [r4, #14]
    d9d6:	60a3      	str	r3, [r4, #8]
	return buf;
    d9d8:	e7f0      	b.n	d9bc <net_buf_alloc_len+0xf0>
    d9da:	bf00      	nop
    d9dc:	2000034c 	.word	0x2000034c
    d9e0:	cccccccd 	.word	0xcccccccd

0000d9e4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    d9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9e8:	4d17      	ldr	r5, [pc, #92]	; (da48 <net_buf_unref+0x64>)
    d9ea:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    d9ec:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    d9ee:	2728      	movs	r7, #40	; 0x28
	while (buf) {
    d9f0:	b90c      	cbnz	r4, d9f6 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    d9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    d9f6:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    d9f8:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    d9fc:	3b01      	subs	r3, #1
    d9fe:	b2db      	uxtb	r3, r3
    da00:	7123      	strb	r3, [r4, #4]
    da02:	2b00      	cmp	r3, #0
    da04:	d1f5      	bne.n	d9f2 <net_buf_unref+0xe>
		if (buf->__buf) {
    da06:	6921      	ldr	r1, [r4, #16]
    da08:	b159      	cbz	r1, da22 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    da0a:	7963      	ldrb	r3, [r4, #5]
    da0c:	079b      	lsls	r3, r3, #30
    da0e:	d407      	bmi.n	da20 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
    da10:	79a3      	ldrb	r3, [r4, #6]
    da12:	fb07 5303 	mla	r3, r7, r3, r5
    da16:	4620      	mov	r0, r4
    da18:	6a1b      	ldr	r3, [r3, #32]
    da1a:	681b      	ldr	r3, [r3, #0]
    da1c:	689b      	ldr	r3, [r3, #8]
    da1e:	4798      	blx	r3
			buf->__buf = NULL;
    da20:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    da22:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    da24:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    da26:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    da2a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    da2c:	69db      	ldr	r3, [r3, #28]
    da2e:	b11b      	cbz	r3, da38 <net_buf_unref+0x54>
			pool->destroy(buf);
    da30:	4620      	mov	r0, r4
    da32:	4798      	blx	r3
{
    da34:	4644      	mov	r4, r8
    da36:	e7db      	b.n	d9f0 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    da38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    da3c:	4621      	mov	r1, r4
    da3e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    da42:	f004 fbff 	bl	12244 <k_queue_prepend>
}
    da46:	e7f5      	b.n	da34 <net_buf_unref+0x50>
    da48:	2000034c 	.word	0x2000034c

0000da4c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    da4c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    da4e:	4b09      	ldr	r3, [pc, #36]	; (da74 <gpio_nrfx_init+0x28>)
    da50:	781a      	ldrb	r2, [r3, #0]
    da52:	b96a      	cbnz	r2, da70 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    da54:	2101      	movs	r1, #1
    da56:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    da58:	2006      	movs	r0, #6
    da5a:	2105      	movs	r1, #5
    da5c:	f7fd fe84 	bl	b768 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    da60:	2006      	movs	r0, #6
    da62:	f7fd fe4f 	bl	b704 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    da66:	4b04      	ldr	r3, [pc, #16]	; (da78 <gpio_nrfx_init+0x2c>)
    da68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    da6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    da70:	2000      	movs	r0, #0
    da72:	bd08      	pop	{r3, pc}
    da74:	20001726 	.word	0x20001726
    da78:	40006000 	.word	0x40006000

0000da7c <gpio_nrfx_pin_interrupt_configure>:
{
    da7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    da7e:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    da80:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    da82:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    da84:	7a09      	ldrb	r1, [r1, #8]
    da86:	f005 041f 	and.w	r4, r5, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    da8a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    da8e:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
    da92:	d10c      	bne.n	daae <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    da94:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    da98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    da9c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    daa0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    daa4:	07c8      	lsls	r0, r1, #31
    daa6:	d507      	bpl.n	dab8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
    daa8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    daac:	e093      	b.n	dbd6 <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    daae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    dab2:	68f1      	ldr	r1, [r6, #12]
    dab4:	f000 8091 	beq.w	dbda <gpio_nrfx_pin_interrupt_configure+0x15e>
    dab8:	68f0      	ldr	r0, [r6, #12]
    daba:	2101      	movs	r1, #1
    dabc:	40a9      	lsls	r1, r5
    dabe:	4301      	orrs	r1, r0
    dac0:	6970      	ldr	r0, [r6, #20]
    dac2:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    dac4:	2101      	movs	r1, #1
    dac6:	40a9      	lsls	r1, r5
    dac8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    dacc:	69b2      	ldr	r2, [r6, #24]
    dace:	bf0c      	ite	eq
    dad0:	4308      	orreq	r0, r1
    dad2:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    dad4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    dad8:	bf0c      	ite	eq
    dada:	430a      	orreq	r2, r1
    dadc:	438a      	bicne	r2, r1
    dade:	61b2      	str	r2, [r6, #24]
    dae0:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    dae2:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    dae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    dae8:	bf0c      	ite	eq
    daea:	4311      	orreq	r1, r2
    daec:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    daf0:	4a46      	ldr	r2, [pc, #280]	; (dc0c <gpio_nrfx_pin_interrupt_configure+0x190>)
    daf2:	6131      	str	r1, [r6, #16]
    daf4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    daf8:	2000      	movs	r0, #0
    dafa:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    dafc:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    db00:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    db04:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    db08:	428c      	cmp	r4, r1
    db0a:	d16b      	bne.n	dbe4 <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
    db0c:	fa23 f100 	lsr.w	r1, r3, r0
    db10:	07c9      	lsls	r1, r1, #31
    db12:	d567      	bpl.n	dbe4 <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    db14:	0083      	lsls	r3, r0, #2
    db16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    db1a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    db1e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    db22:	f021 0101 	bic.w	r1, r1, #1
    db26:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    db2a:	2301      	movs	r3, #1
    db2c:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    db2e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    db32:	b2c0      	uxtb	r0, r0
    db34:	f001 fab0 	bl	f098 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    db38:	4620      	mov	r0, r4
    db3a:	2100      	movs	r1, #0
    db3c:	f004 f938 	bl	11db0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    db40:	68f0      	ldr	r0, [r6, #12]
    db42:	40e8      	lsrs	r0, r5
    db44:	f010 0001 	ands.w	r0, r0, #1
    db48:	d045      	beq.n	dbd6 <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
    db4a:	6970      	ldr	r0, [r6, #20]
    db4c:	40e8      	lsrs	r0, r5
    db4e:	f010 0201 	ands.w	r2, r0, #1
    db52:	d04e      	beq.n	dbf2 <gpio_nrfx_pin_interrupt_configure+0x176>
				if (data->double_edge & BIT(pin)) {
    db54:	69b3      	ldr	r3, [r6, #24]
    db56:	40eb      	lsrs	r3, r5
    db58:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    db5a:	bf5f      	itttt	pl
    db5c:	6931      	ldrpl	r1, [r6, #16]
    db5e:	fa21 f505 	lsrpl.w	r5, r1, r5
    db62:	f005 0501 	andpl.w	r5, r5, #1
    db66:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    db6a:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    db6e:	bf54      	ite	pl
    db70:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    db72:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    db74:	f001 fab2 	bl	f0dc <nrfx_gpiote_channel_alloc>
    db78:	4b25      	ldr	r3, [pc, #148]	; (dc10 <gpio_nrfx_pin_interrupt_configure+0x194>)
    db7a:	4298      	cmp	r0, r3
    db7c:	d136      	bne.n	dbec <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    db7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    db82:	008b      	lsls	r3, r1, #2
    db84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    db88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    db8c:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    db8e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    db92:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    db96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    db9a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    db9e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    dba2:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    dba6:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
    dba8:	008a      	lsls	r2, r1, #2
    dbaa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    dbae:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dbb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dbb6:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    dbb8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dbbc:	6010      	str	r0, [r2, #0]
    dbbe:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    dbc0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    dbc4:	f042 0201 	orr.w	r2, r2, #1
    dbc8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    dbcc:	4a0f      	ldr	r2, [pc, #60]	; (dc0c <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    dbce:	2301      	movs	r3, #1
    dbd0:	408b      	lsls	r3, r1
    dbd2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    dbd6:	b002      	add	sp, #8
    dbd8:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    dbda:	2001      	movs	r0, #1
    dbdc:	40a8      	lsls	r0, r5
    dbde:	ea21 0100 	bic.w	r1, r1, r0
    dbe2:	e76d      	b.n	dac0 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    dbe4:	3001      	adds	r0, #1
    dbe6:	2808      	cmp	r0, #8
    dbe8:	d188      	bne.n	dafc <gpio_nrfx_pin_interrupt_configure+0x80>
    dbea:	e7a5      	b.n	db38 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
    dbec:	f06f 0012 	mvn.w	r0, #18
    dbf0:	e7f1      	b.n	dbd6 <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    dbf2:	6931      	ldr	r1, [r6, #16]
    dbf4:	40e9      	lsrs	r1, r5
    dbf6:	f001 0101 	and.w	r1, r1, #1
    dbfa:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    dbfe:	4620      	mov	r0, r4
    dc00:	b2c9      	uxtb	r1, r1
    dc02:	f004 f8d5 	bl	11db0 <nrf_gpio_cfg_sense_set>
	int res = 0;
    dc06:	4610      	mov	r0, r2
    dc08:	e7e5      	b.n	dbd6 <gpio_nrfx_pin_interrupt_configure+0x15a>
    dc0a:	bf00      	nop
    dc0c:	40006000 	.word	0x40006000
    dc10:	0bad0000 	.word	0x0bad0000

0000dc14 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    dc14:	4b2a      	ldr	r3, [pc, #168]	; (dcc0 <gpio_nrfx_config+0xac>)
{
    dc16:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    dc18:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    dc1a:	482a      	ldr	r0, [pc, #168]	; (dcc4 <gpio_nrfx_config+0xb0>)
    dc1c:	4013      	ands	r3, r2
    dc1e:	4283      	cmp	r3, r0
    dc20:	d03e      	beq.n	dca0 <gpio_nrfx_config+0x8c>
    dc22:	d80d      	bhi.n	dc40 <gpio_nrfx_config+0x2c>
    dc24:	2b06      	cmp	r3, #6
    dc26:	d015      	beq.n	dc54 <gpio_nrfx_config+0x40>
    dc28:	d805      	bhi.n	dc36 <gpio_nrfx_config+0x22>
    dc2a:	b19b      	cbz	r3, dc54 <gpio_nrfx_config+0x40>
    dc2c:	2b02      	cmp	r3, #2
    dc2e:	d039      	beq.n	dca4 <gpio_nrfx_config+0x90>
    dc30:	f06f 0015 	mvn.w	r0, #21
    dc34:	e033      	b.n	dc9e <gpio_nrfx_config+0x8a>
    dc36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    dc3a:	d1f9      	bne.n	dc30 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    dc3c:	2301      	movs	r3, #1
    dc3e:	e009      	b.n	dc54 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    dc40:	4821      	ldr	r0, [pc, #132]	; (dcc8 <gpio_nrfx_config+0xb4>)
    dc42:	4283      	cmp	r3, r0
    dc44:	d030      	beq.n	dca8 <gpio_nrfx_config+0x94>
    dc46:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    dc4a:	d02f      	beq.n	dcac <gpio_nrfx_config+0x98>
    dc4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    dc50:	d1ee      	bne.n	dc30 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    dc52:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    dc54:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    dc56:	bf54      	ite	pl
    dc58:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    dc5c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    dc5e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    dc62:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    dc66:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    dc6a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    dc6e:	d007      	beq.n	dc80 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    dc70:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    dc74:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    dc76:	d01b      	beq.n	dcb0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    dc78:	2201      	movs	r2, #1
    dc7a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    dc7c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    dc80:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    dc84:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    dc88:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    dc8c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    dc90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    dc94:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    dc98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    dc9c:	2000      	movs	r0, #0
}
    dc9e:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    dca0:	2307      	movs	r3, #7
    dca2:	e7d7      	b.n	dc54 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    dca4:	2304      	movs	r3, #4
    dca6:	e7d5      	b.n	dc54 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    dca8:	2305      	movs	r3, #5
    dcaa:	e7d3      	b.n	dc54 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    dcac:	2303      	movs	r3, #3
    dcae:	e7d1      	b.n	dc54 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    dcb0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    dcb2:	bf42      	ittt	mi
    dcb4:	2201      	movmi	r2, #1
    dcb6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    dcb8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    dcbc:	e7e0      	b.n	dc80 <gpio_nrfx_config+0x6c>
    dcbe:	bf00      	nop
    dcc0:	00f00006 	.word	0x00f00006
    dcc4:	00100006 	.word	0x00100006
    dcc8:	00400002 	.word	0x00400002

0000dccc <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dccc:	4a46      	ldr	r2, [pc, #280]	; (dde8 <gpiote_event_handler+0x11c>)
{
    dcce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcd2:	6816      	ldr	r6, [r2, #0]
	if (port_event) {
    dcd4:	2e00      	cmp	r6, #0
    dcd6:	d05a      	beq.n	dd8e <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
    dcd8:	4b44      	ldr	r3, [pc, #272]	; (ddec <gpiote_event_handler+0x120>)
	out &= ~data->trig_edge & ~data->double_edge;
    dcda:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
	uint32_t out = data->pin_int_en;
    dcde:	68d8      	ldr	r0, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    dce0:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    dce2:	4321      	orrs	r1, r4
    dce4:	ea20 0801 	bic.w	r8, r0, r1
    return p_reg->IN;
    dce8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t check_pins = level_pins;
    dcec:	4645      	mov	r5, r8
    dcee:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    dcf2:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    dcf4:	ea28 0404 	bic.w	r4, r8, r4
	uint32_t bit = 1U << pin;
    dcf8:	2701      	movs	r7, #1
	uint32_t pin = 0U;
    dcfa:	f04f 0a00 	mov.w	sl, #0
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    dcfe:	4689      	mov	r9, r1
	while (check_pins) {
    dd00:	bb7d      	cbnz	r5, dd62 <gpiote_event_handler+0x96>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dd02:	6015      	str	r5, [r2, #0]
    dd04:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    dd06:	483a      	ldr	r0, [pc, #232]	; (ddf0 <gpiote_event_handler+0x124>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    dd08:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    dd0a:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dd0c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    dd0e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    dd12:	fa05 f103 	lsl.w	r1, r5, r3
    dd16:	4211      	tst	r1, r2
    dd18:	d011      	beq.n	dd3e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dd1a:	009a      	lsls	r2, r3, #2
    dd1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    dd20:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    dd24:	6811      	ldr	r1, [r2, #0]
    dd26:	b151      	cbz	r1, dd3e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    dd28:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    dd2c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    dd30:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    dd32:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    dd36:	fa05 f101 	lsl.w	r1, r5, r1
    dd3a:	6812      	ldr	r2, [r2, #0]
    dd3c:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    dd3e:	3301      	adds	r3, #1
    dd40:	2b08      	cmp	r3, #8
    dd42:	d1e4      	bne.n	dd0e <gpiote_event_handler+0x42>
	if (fired_triggers[0]) {
    dd44:	bb2c      	cbnz	r4, dd92 <gpiote_event_handler+0xc6>
	if (port_event) {
    dd46:	b156      	cbz	r6, dd5e <gpiote_event_handler+0x92>
	uint32_t out = data->pin_int_en;
    dd48:	4c28      	ldr	r4, [pc, #160]	; (ddec <gpiote_event_handler+0x120>)
	out &= ~data->trig_edge & ~data->double_edge;
    dd4a:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
    dd4e:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    dd50:	4301      	orrs	r1, r0
    dd52:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
    dd56:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    dd58:	2600      	movs	r6, #0
	while (level_pins) {
    dd5a:	2a00      	cmp	r2, #0
    dd5c:	d131      	bne.n	ddc2 <gpiote_event_handler+0xf6>
}
    dd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (check_pins & bit) {
    dd62:	422f      	tst	r7, r5
    dd64:	d00f      	beq.n	dd86 <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    dd66:	ea17 0f08 	tst.w	r7, r8
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    dd6a:	f00a 001f 	and.w	r0, sl, #31
    dd6e:	bf08      	it	eq
    dd70:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    dd74:	f04f 0100 	mov.w	r1, #0
    dd78:	bf08      	it	eq
    dd7a:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
    dd7e:	f004 f817 	bl	11db0 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    dd82:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
    dd86:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    dd8a:	007f      	lsls	r7, r7, #1
    dd8c:	e7b8      	b.n	dd00 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    dd8e:	4634      	mov	r4, r6
    dd90:	e7b9      	b.n	dd06 <gpiote_event_handler+0x3a>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    dd92:	4b16      	ldr	r3, [pc, #88]	; (ddec <gpiote_event_handler+0x120>)
    dd94:	6859      	ldr	r1, [r3, #4]
    dd96:	2900      	cmp	r1, #0
    dd98:	d0d5      	beq.n	dd46 <gpiote_event_handler+0x7a>
	return node->next;
    dd9a:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    dd9c:	4f15      	ldr	r7, [pc, #84]	; (ddf4 <gpiote_event_handler+0x128>)
    dd9e:	2d00      	cmp	r5, #0
    dda0:	bf38      	it	cc
    dda2:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    dda4:	688a      	ldr	r2, [r1, #8]
    dda6:	4022      	ands	r2, r4
    dda8:	d002      	beq.n	ddb0 <gpiote_event_handler+0xe4>
			cb->handler(port, cb, cb->pin_mask & pins);
    ddaa:	684b      	ldr	r3, [r1, #4]
    ddac:	4638      	mov	r0, r7
    ddae:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ddb0:	2d00      	cmp	r5, #0
    ddb2:	d0c8      	beq.n	dd46 <gpiote_event_handler+0x7a>
    ddb4:	682b      	ldr	r3, [r5, #0]
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	bf38      	it	cc
    ddba:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ddbc:	4629      	mov	r1, r5
    ddbe:	461d      	mov	r5, r3
    ddc0:	e7f0      	b.n	dda4 <gpiote_event_handler+0xd8>
		if (level_pins & bit) {
    ddc2:	4215      	tst	r5, r2
    ddc4:	d00c      	beq.n	dde0 <gpiote_event_handler+0x114>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ddc6:	6921      	ldr	r1, [r4, #16]
    ddc8:	40f1      	lsrs	r1, r6
    ddca:	f001 0101 	and.w	r1, r1, #1
    ddce:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ddd2:	b2c9      	uxtb	r1, r1
    ddd4:	f006 001f 	and.w	r0, r6, #31
    ddd8:	f003 ffea 	bl	11db0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    dddc:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    dde0:	3601      	adds	r6, #1
		bit <<= 1;
    dde2:	006d      	lsls	r5, r5, #1
    dde4:	e7b9      	b.n	dd5a <gpiote_event_handler+0x8e>
    dde6:	bf00      	nop
    dde8:	4000617c 	.word	0x4000617c
    ddec:	200014a8 	.word	0x200014a8
    ddf0:	40006000 	.word	0x40006000
    ddf4:	00012a14 	.word	0x00012a14

0000ddf8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    ddf8:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    ddfa:	794b      	ldrb	r3, [r1, #5]
    ddfc:	2b01      	cmp	r3, #1
    ddfe:	d124      	bne.n	de4a <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    de00:	798b      	ldrb	r3, [r1, #6]
    de02:	2b03      	cmp	r3, #3
    de04:	d121      	bne.n	de4a <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    de06:	79ca      	ldrb	r2, [r1, #7]
    de08:	b12a      	cbz	r2, de16 <uarte_nrfx_configure+0x1e>
    de0a:	2a01      	cmp	r2, #1
    de0c:	d11d      	bne.n	de4a <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    de0e:	6843      	ldr	r3, [r0, #4]
    de10:	685b      	ldr	r3, [r3, #4]
    de12:	079b      	lsls	r3, r3, #30
    de14:	d019      	beq.n	de4a <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    de16:	790c      	ldrb	r4, [r1, #4]
    de18:	b114      	cbz	r4, de20 <uarte_nrfx_configure+0x28>
    de1a:	2c02      	cmp	r4, #2
    de1c:	d115      	bne.n	de4a <uarte_nrfx_configure+0x52>
    de1e:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    de20:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    de22:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    de24:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    de28:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    de2a:	d062      	beq.n	def2 <uarte_nrfx_configure+0xfa>
    de2c:	d82b      	bhi.n	de86 <uarte_nrfx_configure+0x8e>
    de2e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    de32:	d061      	beq.n	def8 <uarte_nrfx_configure+0x100>
    de34:	d814      	bhi.n	de60 <uarte_nrfx_configure+0x68>
    de36:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    de3a:	d05f      	beq.n	defc <uarte_nrfx_configure+0x104>
    de3c:	d808      	bhi.n	de50 <uarte_nrfx_configure+0x58>
    de3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    de42:	d05e      	beq.n	df02 <uarte_nrfx_configure+0x10a>
    de44:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    de48:	d05e      	beq.n	df08 <uarte_nrfx_configure+0x110>
    de4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    de4e:	e04f      	b.n	def0 <uarte_nrfx_configure+0xf8>
    de50:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    de54:	d05b      	beq.n	df0e <uarte_nrfx_configure+0x116>
    de56:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    de5a:	d1f6      	bne.n	de4a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    de5c:	4b36      	ldr	r3, [pc, #216]	; (df38 <uarte_nrfx_configure+0x140>)
    de5e:	e03c      	b.n	deda <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    de60:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    de64:	d056      	beq.n	df14 <uarte_nrfx_configure+0x11c>
    de66:	d807      	bhi.n	de78 <uarte_nrfx_configure+0x80>
    de68:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    de6c:	d054      	beq.n	df18 <uarte_nrfx_configure+0x120>
    de6e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    de72:	d1ea      	bne.n	de4a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    de74:	4b31      	ldr	r3, [pc, #196]	; (df3c <uarte_nrfx_configure+0x144>)
    de76:	e030      	b.n	deda <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    de78:	f647 2612 	movw	r6, #31250	; 0x7a12
    de7c:	42b3      	cmp	r3, r6
    de7e:	d1e4      	bne.n	de4a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    de80:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    de84:	e029      	b.n	deda <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    de86:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    de8a:	d047      	beq.n	df1c <uarte_nrfx_configure+0x124>
    de8c:	d813      	bhi.n	deb6 <uarte_nrfx_configure+0xbe>
    de8e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    de92:	d046      	beq.n	df22 <uarte_nrfx_configure+0x12a>
    de94:	d809      	bhi.n	deaa <uarte_nrfx_configure+0xb2>
    de96:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    de9a:	42b3      	cmp	r3, r6
    de9c:	d043      	beq.n	df26 <uarte_nrfx_configure+0x12e>
    de9e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    dea2:	d1d2      	bne.n	de4a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    dea4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    dea8:	e017      	b.n	deda <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    deaa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    deae:	d1cc      	bne.n	de4a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    deb0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    deb4:	e011      	b.n	deda <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    deb6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    deba:	d037      	beq.n	df2c <uarte_nrfx_configure+0x134>
    debc:	d808      	bhi.n	ded0 <uarte_nrfx_configure+0xd8>
    debe:	4e20      	ldr	r6, [pc, #128]	; (df40 <uarte_nrfx_configure+0x148>)
    dec0:	42b3      	cmp	r3, r6
    dec2:	d036      	beq.n	df32 <uarte_nrfx_configure+0x13a>
    dec4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    dec8:	d1bf      	bne.n	de4a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    deca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    dece:	e004      	b.n	deda <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    ded0:	4e1c      	ldr	r6, [pc, #112]	; (df44 <uarte_nrfx_configure+0x14c>)
    ded2:	42b3      	cmp	r3, r6
    ded4:	d1b9      	bne.n	de4a <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    ded6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    deda:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    dede:	6903      	ldr	r3, [r0, #16]
    dee0:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    dee2:	4322      	orrs	r2, r4
    dee4:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    dee6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    deea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    deee:	2000      	movs	r0, #0
}
    def0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    def2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    def6:	e7f0      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    def8:	4b13      	ldr	r3, [pc, #76]	; (df48 <uarte_nrfx_configure+0x150>)
    defa:	e7ee      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    defc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    df00:	e7eb      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
    df02:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    df06:	e7e8      	b.n	deda <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    df08:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    df0c:	e7e5      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    df0e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    df12:	e7e2      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    df14:	4b0d      	ldr	r3, [pc, #52]	; (df4c <uarte_nrfx_configure+0x154>)
    df16:	e7e0      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    df18:	4b0d      	ldr	r3, [pc, #52]	; (df50 <uarte_nrfx_configure+0x158>)
    df1a:	e7de      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    df1c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    df20:	e7db      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    df22:	4b0c      	ldr	r3, [pc, #48]	; (df54 <uarte_nrfx_configure+0x15c>)
    df24:	e7d9      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    df26:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    df2a:	e7d6      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    df2c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    df30:	e7d3      	b.n	deda <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    df32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    df36:	e7d0      	b.n	deda <uarte_nrfx_configure+0xe2>
    df38:	0013b000 	.word	0x0013b000
    df3c:	004ea000 	.word	0x004ea000
    df40:	0003d090 	.word	0x0003d090
    df44:	000f4240 	.word	0x000f4240
    df48:	00275000 	.word	0x00275000
    df4c:	0075c000 	.word	0x0075c000
    df50:	003af000 	.word	0x003af000
    df54:	013a9000 	.word	0x013a9000

0000df58 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    df5a:	6906      	ldr	r6, [r0, #16]
{
    df5c:	4605      	mov	r5, r0
    df5e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    df60:	f004 f8ec 	bl	1213c <k_is_in_isr>
    df64:	b910      	cbnz	r0, df6c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    df66:	4b2c      	ldr	r3, [pc, #176]	; (e018 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	b983      	cbnz	r3, df8e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    df6c:	f04f 0340 	mov.w	r3, #64	; 0x40
    df70:	f3ef 8411 	mrs	r4, BASEPRI
    df74:	f383 8811 	msr	BASEPRI, r3
    df78:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    df7c:	4628      	mov	r0, r5
    df7e:	f003 ffc0 	bl	11f02 <is_tx_ready>
    df82:	bb28      	cbnz	r0, dfd0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    df84:	f384 8811 	msr	BASEPRI, r4
    df88:	f3bf 8f6f 	isb	sy
}
    df8c:	e7ee      	b.n	df6c <uarte_nrfx_poll_out+0x14>
{
    df8e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    df90:	4628      	mov	r0, r5
    df92:	f003 ffb6 	bl	11f02 <is_tx_ready>
    df96:	b970      	cbnz	r0, dfb6 <uarte_nrfx_poll_out+0x5e>
    df98:	2001      	movs	r0, #1
    df9a:	f004 f80b 	bl	11fb4 <nrfx_busy_wait>
    df9e:	3c01      	subs	r4, #1
    dfa0:	d1f6      	bne.n	df90 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    dfa2:	2100      	movs	r1, #0
    dfa4:	2021      	movs	r0, #33	; 0x21
    dfa6:	f002 f97d 	bl	102a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    dfaa:	e7f0      	b.n	df8e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    dfac:	f384 8811 	msr	BASEPRI, r4
    dfb0:	f3bf 8f6f 	isb	sy
}
    dfb4:	e7f5      	b.n	dfa2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    dfb6:	f04f 0340 	mov.w	r3, #64	; 0x40
    dfba:	f3ef 8411 	mrs	r4, BASEPRI
    dfbe:	f383 8811 	msr	BASEPRI, r3
    dfc2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    dfc6:	4628      	mov	r0, r5
    dfc8:	f003 ff9b 	bl	11f02 <is_tx_ready>
    dfcc:	2800      	cmp	r0, #0
    dfce:	d0ed      	beq.n	dfac <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    dfd0:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    dfd4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    dfd6:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    dfd8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dfda:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dfde:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfe2:	2200      	movs	r2, #0
    dfe4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    dfe8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    dfec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    dff0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    dff4:	684a      	ldr	r2, [r1, #4]
    dff6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dff8:	bf41      	itttt	mi
    dffa:	2208      	movmi	r2, #8
    dffc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    e000:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    e004:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e008:	2201      	movs	r2, #1
    e00a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    e00c:	f384 8811 	msr	BASEPRI, r4
    e010:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    e014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e016:	bf00      	nop
    e018:	20001f14 	.word	0x20001f14

0000e01c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e01e:	2200      	movs	r2, #0
    e020:	4605      	mov	r5, r0
    e022:	2101      	movs	r1, #1
    e024:	2002      	movs	r0, #2
    e026:	f7fd fb9f 	bl	b768 <z_arm_irq_priority_set>
    e02a:	2002      	movs	r0, #2
    e02c:	f7fd fb6a 	bl	b704 <arch_irq_enable>
	return config->uarte_regs;
    e030:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    e032:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
    e034:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e036:	2300      	movs	r3, #0
    e038:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->OUTSET = set_mask;
    e03c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e040:	2240      	movs	r2, #64	; 0x40
	data->dev = dev;
    e042:	6035      	str	r5, [r6, #0]
    reg->PIN_CNF[pin_number] = cnf;
    e044:	210c      	movs	r1, #12
    p_reg->OUTSET = set_mask;
    e046:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.TXD = pseltxd;
    e04a:	2006      	movs	r0, #6
    reg->PIN_CNF[pin_number] = cnf;
    e04c:	2203      	movs	r2, #3
    e04e:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
    e052:	f8c3 1720 	str.w	r1, [r3, #1824]	; 0x720
    e056:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    e05a:	2008      	movs	r0, #8
    e05c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    e060:	f8c3 171c 	str.w	r1, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
    e064:	2120      	movs	r1, #32
    e066:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    e06a:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    e06e:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
    e070:	2305      	movs	r3, #5
    e072:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    e076:	2307      	movs	r3, #7
    e078:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    e07c:	3104      	adds	r1, #4
    e07e:	4628      	mov	r0, r5
    e080:	f7ff feba 	bl	ddf8 <uarte_nrfx_configure>
	if (err) {
    e084:	4607      	mov	r7, r0
    e086:	b9b0      	cbnz	r0, e0b6 <uarte_0_init+0x9a>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    e088:	686b      	ldr	r3, [r5, #4]
    e08a:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    e08c:	0719      	lsls	r1, r3, #28
    e08e:	d527      	bpl.n	e0e0 <uarte_0_init+0xc4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    e090:	f106 0012 	add.w	r0, r6, #18
    e094:	f001 f85a 	bl	f14c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    e098:	4b25      	ldr	r3, [pc, #148]	; (e130 <uarte_0_init+0x114>)
    e09a:	4298      	cmp	r0, r3
    e09c:	d00d      	beq.n	e0ba <uarte_0_init+0x9e>
    e09e:	4b25      	ldr	r3, [pc, #148]	; (e134 <uarte_0_init+0x118>)
    e0a0:	4925      	ldr	r1, [pc, #148]	; (e138 <uarte_0_init+0x11c>)
		LOG_ERR("Failed to allocate PPI Channel");
    e0a2:	4826      	ldr	r0, [pc, #152]	; (e13c <uarte_0_init+0x120>)
    e0a4:	1ac9      	subs	r1, r1, r3
    e0a6:	08c9      	lsrs	r1, r1, #3
    e0a8:	0189      	lsls	r1, r1, #6
    e0aa:	f041 0101 	orr.w	r1, r1, #1
    e0ae:	f003 f8ba 	bl	11226 <log_0>
		return -EIO;
    e0b2:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    e0b6:	4638      	mov	r0, r7
    e0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    e0ba:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    e0bc:	00c3      	lsls	r3, r0, #3
    e0be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e0c2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    e0c6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    e0ca:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    e0ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    e0d2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    e0d6:	4a1a      	ldr	r2, [pc, #104]	; (e140 <uarte_0_init+0x124>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    e0d8:	2301      	movs	r3, #1
    e0da:	4083      	lsls	r3, r0
    e0dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e0e0:	2308      	movs	r3, #8
    e0e2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e0e6:	2300      	movs	r3, #0
    e0e8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    e0ec:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    e0f0:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e0f4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    e0f8:	2301      	movs	r3, #1
    e0fa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e0fe:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    e100:	686b      	ldr	r3, [r5, #4]
    e102:	685b      	ldr	r3, [r3, #4]
    e104:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    e106:	bf5c      	itt	pl
    e108:	f44f 7280 	movpl.w	r2, #256	; 0x100
    e10c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e110:	06db      	lsls	r3, r3, #27
    e112:	bf44      	itt	mi
    e114:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    e118:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    e11c:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    e11e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e120:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e124:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e128:	2301      	movs	r3, #1
    e12a:	60a3      	str	r3, [r4, #8]
    e12c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    e12e:	e7c2      	b.n	e0b6 <uarte_0_init+0x9a>
    e130:	0bad0000 	.word	0x0bad0000
    e134:	00012b64 	.word	0x00012b64
    e138:	00012bec 	.word	0x00012bec
    e13c:	00013c63 	.word	0x00013c63
    e140:	4001f000 	.word	0x4001f000

0000e144 <random_byte_get>:
	__asm__ volatile(
    e144:	f04f 0340 	mov.w	r3, #64	; 0x40
    e148:	f3ef 8211 	mrs	r2, BASEPRI
    e14c:	f383 8811 	msr	BASEPRI, r3
    e150:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e154:	4b08      	ldr	r3, [pc, #32]	; (e178 <random_byte_get+0x34>)
    e156:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    e158:	b159      	cbz	r1, e172 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    e15a:	4908      	ldr	r1, [pc, #32]	; (e17c <random_byte_get+0x38>)
    e15c:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e160:	2100      	movs	r1, #0
    e162:	6019      	str	r1, [r3, #0]
    e164:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
    e166:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    e168:	f382 8811 	msr	BASEPRI, r2
    e16c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    e170:	4770      	bx	lr
	int retval = -EAGAIN;
    e172:	f06f 000a 	mvn.w	r0, #10
    e176:	e7f7      	b.n	e168 <random_byte_get+0x24>
    e178:	4000d100 	.word	0x4000d100
    e17c:	4000d000 	.word	0x4000d000

0000e180 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    e180:	b5f0      	push	{r4, r5, r6, r7, lr}
    e182:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
    e184:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
    e186:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
    e188:	f04f 0540 	mov.w	r5, #64	; 0x40
    e18c:	f3ef 8011 	mrs	r0, BASEPRI
    e190:	f385 8811 	msr	BASEPRI, r5
    e194:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    e198:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    e19a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    e19e:	1ba4      	subs	r4, r4, r6
    e1a0:	403c      	ands	r4, r7
	if (available < len) {
    e1a2:	42a2      	cmp	r2, r4
		len = available;
    e1a4:	bf88      	it	hi
    e1a6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    e1a8:	eb06 0c02 	add.w	ip, r6, r2
    e1ac:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
    e1b0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
    e1b2:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
    e1b6:	f380 8811 	msr	BASEPRI, r0
    e1ba:	f3bf 8f6f 	isb	sy
    e1be:	440a      	add	r2, r1
	uint8_t *dst   = buf;
    e1c0:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
    e1c2:	4282      	cmp	r2, r0
    e1c4:	d119      	bne.n	e1fa <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    e1c6:	4576      	cmp	r6, lr
    e1c8:	d10d      	bne.n	e1e6 <rng_pool_get+0x66>
	__asm__ volatile(
    e1ca:	f04f 0540 	mov.w	r5, #64	; 0x40
    e1ce:	f3ef 8211 	mrs	r2, BASEPRI
    e1d2:	f385 8811 	msr	BASEPRI, r5
    e1d6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    e1da:	781d      	ldrb	r5, [r3, #0]
    e1dc:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
    e1de:	f382 8811 	msr	BASEPRI, r2
    e1e2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
    e1e6:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
    e1e8:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
    e1ea:	b288      	uxth	r0, r1
	available = available - len;
    e1ec:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
    e1ee:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e1f0:	bf22      	ittt	cs
    e1f2:	4b06      	ldrcs	r3, [pc, #24]	; (e20c <rng_pool_get+0x8c>)
    e1f4:	2201      	movcs	r2, #1
    e1f6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    e1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    e1fa:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
    e1fe:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    e200:	f89c c005 	ldrb.w	ip, [ip, #5]
    e204:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
    e208:	403d      	ands	r5, r7
    e20a:	e7da      	b.n	e1c2 <rng_pool_get+0x42>
    e20c:	4000d000 	.word	0x4000d000

0000e210 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e210:	43db      	mvns	r3, r3
{
    e212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e216:	f013 0501 	ands.w	r5, r3, #1
{
    e21a:	460e      	mov	r6, r1
    e21c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e21e:	d004      	beq.n	e22a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    e220:	4821      	ldr	r0, [pc, #132]	; (e2a8 <entropy_nrf5_get_entropy_isr+0x98>)
    e222:	f7ff ffad 	bl	e180 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    e226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    e22a:	2a00      	cmp	r2, #0
    e22c:	d033      	beq.n	e296 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    e22e:	f04f 0340 	mov.w	r3, #64	; 0x40
    e232:	f3ef 8811 	mrs	r8, BASEPRI
    e236:	f383 8811 	msr	BASEPRI, r3
    e23a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    e23e:	200d      	movs	r0, #13
    e240:	f7fd fa84 	bl	b74c <arch_irq_is_enabled>
    e244:	4607      	mov	r7, r0
		irq_disable(IRQN);
    e246:	200d      	movs	r0, #13
    e248:	f7fd fa6c 	bl	b724 <arch_irq_disable>
	__asm__ volatile(
    e24c:	f388 8811 	msr	BASEPRI, r8
    e250:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e254:	4a15      	ldr	r2, [pc, #84]	; (e2ac <entropy_nrf5_get_entropy_isr+0x9c>)
    e256:	6015      	str	r5, [r2, #0]
    e258:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e25a:	4b15      	ldr	r3, [pc, #84]	; (e2b0 <entropy_nrf5_get_entropy_isr+0xa0>)
    e25c:	2101      	movs	r1, #1
    e25e:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e260:	4914      	ldr	r1, [pc, #80]	; (e2b4 <entropy_nrf5_get_entropy_isr+0xa4>)
    e262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e266:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    e26a:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e26c:	4691      	mov	r9, r2
    e26e:	468a      	mov	sl, r1
    e270:	4698      	mov	r8, r3
    e272:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
    e276:	b183      	cbz	r3, e29a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    e278:	f7ff ff64 	bl	e144 <random_byte_get>
			if (byte < 0) {
    e27c:	1e03      	subs	r3, r0, #0
    e27e:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
    e282:	dbf6      	blt.n	e272 <entropy_nrf5_get_entropy_isr+0x62>
    e284:	3d01      	subs	r5, #1
    e286:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
    e288:	5573      	strb	r3, [r6, r5]
		} while (len);
    e28a:	2d00      	cmp	r5, #0
    e28c:	d1f1      	bne.n	e272 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    e28e:	b117      	cbz	r7, e296 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    e290:	200d      	movs	r0, #13
    e292:	f7fd fa37 	bl	b704 <arch_irq_enable>
	return cnt;
    e296:	4620      	mov	r0, r4
    e298:	e7c5      	b.n	e226 <entropy_nrf5_get_entropy_isr+0x16>
    e29a:	f3bf 8f4f 	dsb	sy
				__WFE();
    e29e:	bf20      	wfe
				__SEV();
    e2a0:	bf40      	sev
				__WFE();
    e2a2:	bf20      	wfe
    e2a4:	e7e5      	b.n	e272 <entropy_nrf5_get_entropy_isr+0x62>
    e2a6:	bf00      	nop
    e2a8:	200014fc 	.word	0x200014fc
    e2ac:	4000d100 	.word	0x4000d100
    e2b0:	4000d000 	.word	0x4000d000
    e2b4:	e000e100 	.word	0xe000e100

0000e2b8 <entropy_nrf5_get_entropy>:
{
    e2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
    e2bc:	4f13      	ldr	r7, [pc, #76]	; (e30c <entropy_nrf5_get_entropy+0x54>)
    e2be:	460d      	mov	r5, r1
    e2c0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e2c2:	f107 0845 	add.w	r8, r7, #69	; 0x45
    e2c6:	f107 0918 	add.w	r9, r7, #24
	while (len) {
    e2ca:	b914      	cbnz	r4, e2d2 <entropy_nrf5_get_entropy+0x1a>
}
    e2cc:	4620      	mov	r0, r4
    e2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e2da:	4638      	mov	r0, r7
    e2dc:	f001 fba2 	bl	fa24 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e2e0:	4622      	mov	r2, r4
    e2e2:	4629      	mov	r1, r5
    e2e4:	4640      	mov	r0, r8
    e2e6:	f7ff ff4b 	bl	e180 <rng_pool_get>
    e2ea:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    e2ec:	4638      	mov	r0, r7
    e2ee:	f001 fb73 	bl	f9d8 <z_impl_k_sem_give>
		if (bytes == 0U) {
    e2f2:	b93e      	cbnz	r6, e304 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    e2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e2f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2fc:	4648      	mov	r0, r9
    e2fe:	f001 fb91 	bl	fa24 <z_impl_k_sem_take>
			continue;
    e302:	e7e2      	b.n	e2ca <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
    e304:	1ba4      	subs	r4, r4, r6
    e306:	b2a4      	uxth	r4, r4
		buf += bytes;
    e308:	4435      	add	r5, r6
    e30a:	e7de      	b.n	e2ca <entropy_nrf5_get_entropy+0x12>
    e30c:	200014cc 	.word	0x200014cc

0000e310 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    e310:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e312:	4c19      	ldr	r4, [pc, #100]	; (e378 <entropy_nrf5_init+0x68>)
    e314:	2201      	movs	r2, #1
    e316:	4611      	mov	r1, r2
    e318:	4620      	mov	r0, r4
    e31a:	f003 ffd9 	bl	122d0 <z_impl_k_sem_init>
    e31e:	2201      	movs	r2, #1
    e320:	2100      	movs	r1, #0
    e322:	f104 0018 	add.w	r0, r4, #24
    e326:	f003 ffd3 	bl	122d0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    e32a:	f240 4307 	movw	r3, #1031	; 0x407
    e32e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    e332:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    e336:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    e338:	230c      	movs	r3, #12
    e33a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    e33e:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    e340:	4b0e      	ldr	r3, [pc, #56]	; (e37c <entropy_nrf5_init+0x6c>)
    e342:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    e346:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    e34a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    e34e:	f022 0201 	bic.w	r2, r2, #1
    e352:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e356:	4a0a      	ldr	r2, [pc, #40]	; (e380 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
    e358:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e35a:	6015      	str	r5, [r2, #0]
    e35c:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
    e35e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    e362:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e364:	6019      	str	r1, [r3, #0]
    e366:	200d      	movs	r0, #13
    e368:	f7fd f9fe 	bl	b768 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    e36c:	200d      	movs	r0, #13
    e36e:	f7fd f9c9 	bl	b704 <arch_irq_enable>

	return 0;
}
    e372:	4628      	mov	r0, r5
    e374:	bd38      	pop	{r3, r4, r5, pc}
    e376:	bf00      	nop
    e378:	200014cc 	.word	0x200014cc
    e37c:	4000d000 	.word	0x4000d000
    e380:	4000d100 	.word	0x4000d100

0000e384 <isr>:
{
    e384:	b510      	push	{r4, lr}
	byte = random_byte_get();
    e386:	f7ff fedd 	bl	e144 <random_byte_get>
	if (byte < 0) {
    e38a:	2800      	cmp	r0, #0
    e38c:	db20      	blt.n	e3d0 <isr+0x4c>
	uint8_t last  = rngp->last;
    e38e:	4b17      	ldr	r3, [pc, #92]	; (e3ec <isr+0x68>)
    e390:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    e394:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
    e398:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    e39c:	1a51      	subs	r1, r2, r1
    e39e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    e3a2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    e3a4:	d10d      	bne.n	e3c2 <isr+0x3e>
	uint8_t last  = rngp->last;
    e3a6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    e3aa:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
    e3ae:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    e3b2:	1a51      	subs	r1, r2, r1
    e3b4:	ea34 0101 	bics.w	r1, r4, r1
    e3b8:	d10b      	bne.n	e3d2 <isr+0x4e>
    e3ba:	4b0d      	ldr	r3, [pc, #52]	; (e3f0 <isr+0x6c>)
    e3bc:	2201      	movs	r2, #1
    e3be:	601a      	str	r2, [r3, #0]
}
    e3c0:	e00e      	b.n	e3e0 <isr+0x5c>
	rngp->buffer[last] = byte;
    e3c2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    e3c4:	3201      	adds	r2, #1
    e3c6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    e3c8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    e3cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
    e3d0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    e3d2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    e3d4:	3201      	adds	r2, #1
    e3d6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    e3d8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    e3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    e3e0:	4804      	ldr	r0, [pc, #16]	; (e3f4 <isr+0x70>)
}
    e3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3e6:	f001 baf7 	b.w	f9d8 <z_impl_k_sem_give>
    e3ea:	bf00      	nop
    e3ec:	200014cc 	.word	0x200014cc
    e3f0:	4000d004 	.word	0x4000d004
    e3f4:	200014e4 	.word	0x200014e4

0000e3f8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    e3f8:	4602      	mov	r2, r0
    e3fa:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    e3fc:	4801      	ldr	r0, [pc, #4]	; (e404 <multithreading_lock_acquire+0xc>)
    e3fe:	f001 b9f3 	b.w	f7e8 <z_impl_k_mutex_lock>
    e402:	bf00      	nop
    e404:	200002dc 	.word	0x200002dc

0000e408 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
    e408:	4801      	ldr	r0, [pc, #4]	; (e410 <multithreading_lock_release+0x8>)
    e40a:	f001 ba6b 	b.w	f8e4 <z_impl_k_mutex_unlock>
    e40e:	bf00      	nop
    e410:	200002dc 	.word	0x200002dc

0000e414 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    e414:	b508      	push	{r3, lr}
	z_impl_log_panic();
    e416:	f7fc fa51 	bl	a8bc <z_impl_log_panic>
    e41a:	4b06      	ldr	r3, [pc, #24]	; (e434 <k_sys_fatal_error_handler+0x20>)
    e41c:	4906      	ldr	r1, [pc, #24]	; (e438 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    e41e:	4807      	ldr	r0, [pc, #28]	; (e43c <k_sys_fatal_error_handler+0x28>)
    e420:	1ac9      	subs	r1, r1, r3
    e422:	08c9      	lsrs	r1, r1, #3
    e424:	0189      	lsls	r1, r1, #6
    e426:	f041 0101 	orr.w	r1, r1, #1
    e42a:	f002 fefc 	bl	11226 <log_0>
		sys_arch_reboot(0);
    e42e:	2000      	movs	r0, #0
    e430:	f7fd fe5e 	bl	c0f0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    e434:	00012b64 	.word	0x00012b64
    e438:	00012b94 	.word	0x00012b94
    e43c:	00013c96 	.word	0x00013c96

0000e440 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
    e440:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
    e442:	4905      	ldr	r1, [pc, #20]	; (e458 <rand_prio_low_vector_get_blocking+0x18>)
{
    e444:	b410      	push	{r4}
    e446:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
    e448:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    e44a:	6881      	ldr	r1, [r0, #8]
    e44c:	680c      	ldr	r4, [r1, #0]
    e44e:	4619      	mov	r1, r3
    e450:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
    e452:	bc10      	pop	{r4}
    e454:	4718      	bx	r3
    e456:	bf00      	nop
    e458:	20001520 	.word	0x20001520

0000e45c <sdc_assertion_handler>:
{
    e45c:	b538      	push	{r3, r4, r5, lr}
    e45e:	4b0b      	ldr	r3, [pc, #44]	; (e48c <sdc_assertion_handler+0x30>)
    e460:	4c0b      	ldr	r4, [pc, #44]	; (e490 <sdc_assertion_handler+0x34>)
    e462:	1ae4      	subs	r4, r4, r3
    e464:	460d      	mov	r5, r1
    e466:	08e4      	lsrs	r4, r4, #3
    e468:	f7fc f8b0 	bl	a5cc <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
    e46c:	01a4      	lsls	r4, r4, #6
    e46e:	f044 0401 	orr.w	r4, r4, #1
    e472:	4601      	mov	r1, r0
    e474:	4623      	mov	r3, r4
    e476:	4807      	ldr	r0, [pc, #28]	; (e494 <sdc_assertion_handler+0x38>)
    e478:	462a      	mov	r2, r5
    e47a:	f002 fef5 	bl	11268 <log_2>
	k_oops();
    e47e:	4040      	eors	r0, r0
    e480:	f380 8811 	msr	BASEPRI, r0
    e484:	f04f 0003 	mov.w	r0, #3
    e488:	df02      	svc	2
}
    e48a:	bd38      	pop	{r3, r4, r5, pc}
    e48c:	00012b64 	.word	0x00012b64
    e490:	00012bd4 	.word	0x00012bd4
    e494:	00013cb3 	.word	0x00013cb3

0000e498 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
    e498:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
    e49a:	4804      	ldr	r0, [pc, #16]	; (e4ac <hci_driver_init+0x14>)
    e49c:	f7fe fc8a 	bl	cdb4 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
    e4a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
    e4a4:	4802      	ldr	r0, [pc, #8]	; (e4b0 <hci_driver_init+0x18>)
    e4a6:	f7f5 babd 	b.w	3a24 <sdc_init>
    e4aa:	bf00      	nop
    e4ac:	00012f0c 	.word	0x00012f0c
    e4b0:	0000e45d 	.word	0x0000e45d

0000e4b4 <rand_prio_low_vector_get>:
{
    e4b4:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
    e4b6:	4b08      	ldr	r3, [pc, #32]	; (e4d8 <rand_prio_low_vector_get+0x24>)
{
    e4b8:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
    e4ba:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    e4bc:	6883      	ldr	r3, [r0, #8]
    e4be:	685d      	ldr	r5, [r3, #4]
    e4c0:	460a      	mov	r2, r1
    e4c2:	b135      	cbz	r5, e4d2 <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    e4c4:	2300      	movs	r3, #0
    e4c6:	4621      	mov	r1, r4
    e4c8:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
    e4ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    e4ce:	b2c0      	uxtb	r0, r0
    e4d0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    e4d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e4d6:	e7f8      	b.n	e4ca <rand_prio_low_vector_get+0x16>
    e4d8:	20001520 	.word	0x20001520

0000e4dc <hci_driver_send>:
{
    e4dc:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    e4de:	8983      	ldrh	r3, [r0, #12]
{
    e4e0:	4605      	mov	r5, r0
	if (!buf->len) {
    e4e2:	b1c3      	cbz	r3, e516 <hci_driver_send+0x3a>
	switch (type) {
    e4e4:	7d03      	ldrb	r3, [r0, #20]
    e4e6:	b9b3      	cbnz	r3, e516 <hci_driver_send+0x3a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
    e4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e4ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e4f0:	f7ff ff82 	bl	e3f8 <multithreading_lock_acquire>
	if (!errcode) {
    e4f4:	4604      	mov	r4, r0
    e4f6:	b960      	cbnz	r0, e512 <hci_driver_send+0x36>
		errcode = hci_internal_cmd_put(cmd->data);
    e4f8:	68a8      	ldr	r0, [r5, #8]
    e4fa:	f000 f93b 	bl	e774 <hci_internal_cmd_put>
    e4fe:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    e500:	f7ff ff82 	bl	e408 <multithreading_lock_release>
	if (errcode) {
    e504:	b92c      	cbnz	r4, e512 <hci_driver_send+0x36>
	z_impl_k_sem_give(sem);
    e506:	4805      	ldr	r0, [pc, #20]	; (e51c <hci_driver_send+0x40>)
    e508:	f001 fa66 	bl	f9d8 <z_impl_k_sem_give>
		net_buf_unref(buf);
    e50c:	4628      	mov	r0, r5
    e50e:	f7ff fa69 	bl	d9e4 <net_buf_unref>
}
    e512:	4620      	mov	r0, r4
    e514:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e516:	f06f 0415 	mvn.w	r4, #21
    e51a:	e7fa      	b.n	e512 <hci_driver_send+0x36>
    e51c:	2000031c 	.word	0x2000031c

0000e520 <recv_thread>:
{
    e520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e524:	4b28      	ldr	r3, [pc, #160]	; (e5c8 <recv_thread+0xa8>)
    e526:	4d29      	ldr	r5, [pc, #164]	; (e5cc <recv_thread+0xac>)
	return z_impl_k_sem_take(sem, timeout);
    e528:	f8df 80ac 	ldr.w	r8, [pc, #172]	; e5d8 <recv_thread+0xb8>
		errcode = hci_internal_evt_get(p_hci_buffer);
    e52c:	4e28      	ldr	r6, [pc, #160]	; (e5d0 <recv_thread+0xb0>)
    e52e:	1aed      	subs	r5, r5, r3
    e530:	08ed      	lsrs	r5, r5, #3
	bool received_evt = false;
    e532:	2400      	movs	r4, #0
		if (!received_evt && !received_data) {
    e534:	b934      	cbnz	r4, e544 <recv_thread+0x24>
    e536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e53a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e53e:	4640      	mov	r0, r8
    e540:	f001 fa70 	bl	fa24 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
    e544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e54c:	f7ff ff54 	bl	e3f8 <multithreading_lock_acquire>
	if (!errcode) {
    e550:	b118      	cbz	r0, e55a <recv_thread+0x3a>
		return false;
    e552:	2400      	movs	r4, #0
	z_impl_k_yield();
    e554:	f001 fe18 	bl	10188 <z_impl_k_yield>
}
    e558:	e7ec      	b.n	e534 <recv_thread+0x14>
		errcode = hci_internal_evt_get(p_hci_buffer);
    e55a:	481d      	ldr	r0, [pc, #116]	; (e5d0 <recv_thread+0xb0>)
    e55c:	f000 fb5e 	bl	ec1c <hci_internal_evt_get>
    e560:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    e562:	f7ff ff51 	bl	e408 <multithreading_lock_release>
	if (errcode) {
    e566:	2c00      	cmp	r4, #0
    e568:	d1f3      	bne.n	e552 <recv_thread+0x32>
	switch (hdr->evt) {
    e56a:	7830      	ldrb	r0, [r6, #0]
    e56c:	283e      	cmp	r0, #62	; 0x3e
    e56e:	d007      	beq.n	e580 <recv_thread+0x60>
    e570:	28ff      	cmp	r0, #255	; 0xff
    e572:	d01c      	beq.n	e5ae <recv_thread+0x8e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    e574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e57c:	2400      	movs	r4, #0
    e57e:	e007      	b.n	e590 <recv_thread+0x70>
		switch (me->subevent) {
    e580:	78b3      	ldrb	r3, [r6, #2]
    e582:	2b02      	cmp	r3, #2
    e584:	d001      	beq.n	e58a <recv_thread+0x6a>
    e586:	2b0d      	cmp	r3, #13
		switch (subevent) {
    e588:	d1f4      	bne.n	e574 <recv_thread+0x54>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    e58a:	2200      	movs	r2, #0
    e58c:	2300      	movs	r3, #0
    e58e:	2401      	movs	r4, #1
    e590:	4621      	mov	r1, r4
    e592:	f7fd fe63 	bl	c25c <bt_buf_get_evt>
	if (!evt_buf) {
    e596:	4607      	mov	r7, r0
    e598:	b960      	cbnz	r0, e5b4 <recv_thread+0x94>
		if (discardable) {
    e59a:	2c00      	cmp	r4, #0
    e59c:	d1da      	bne.n	e554 <recv_thread+0x34>
		BT_ERR("No event buffer available");
    e59e:	01a9      	lsls	r1, r5, #6
    e5a0:	480c      	ldr	r0, [pc, #48]	; (e5d4 <recv_thread+0xb4>)
    e5a2:	f041 0101 	orr.w	r1, r1, #1
    e5a6:	f002 fe3e 	bl	11226 <log_0>
	return true;
    e5aa:	2401      	movs	r4, #1
    e5ac:	e7d2      	b.n	e554 <recv_thread+0x34>
		switch (subevent) {
    e5ae:	78b3      	ldrb	r3, [r6, #2]
    e5b0:	2b80      	cmp	r3, #128	; 0x80
    e5b2:	e7e9      	b.n	e588 <recv_thread+0x68>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
    e5b4:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e5b6:	4631      	mov	r1, r6
    e5b8:	3202      	adds	r2, #2
    e5ba:	3008      	adds	r0, #8
    e5bc:	f003 fbdb 	bl	11d76 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
    e5c0:	4638      	mov	r0, r7
    e5c2:	f7fe fbc1 	bl	cd48 <bt_recv>
    e5c6:	e7f0      	b.n	e5aa <recv_thread+0x8a>
    e5c8:	00012b64 	.word	0x00012b64
    e5cc:	00012bd4 	.word	0x00012bd4
    e5d0:	20001727 	.word	0x20001727
    e5d4:	00013cd8 	.word	0x00013cd8
    e5d8:	2000031c 	.word	0x2000031c

0000e5dc <hci_driver_open>:
{
    e5dc:	b570      	push	{r4, r5, r6, lr}
    e5de:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e5e0:	2200      	movs	r2, #0
    e5e2:	2300      	movs	r3, #0
    e5e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e5e8:	2300      	movs	r3, #0
    e5ea:	f06f 0209 	mvn.w	r2, #9
    e5ee:	e9cd 2303 	strd	r2, r3, [sp, #12]
    e5f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e5f6:	9300      	str	r3, [sp, #0]
    e5f8:	494b      	ldr	r1, [pc, #300]	; (e728 <hci_driver_open+0x14c>)
    e5fa:	4b4c      	ldr	r3, [pc, #304]	; (e72c <hci_driver_open+0x150>)
    e5fc:	484c      	ldr	r0, [pc, #304]	; (e730 <hci_driver_open+0x154>)
    e5fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e602:	f001 f851 	bl	f6a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e606:	494b      	ldr	r1, [pc, #300]	; (e734 <hci_driver_open+0x158>)
    e608:	4849      	ldr	r0, [pc, #292]	; (e730 <hci_driver_open+0x154>)
    e60a:	4c4b      	ldr	r4, [pc, #300]	; (e738 <hci_driver_open+0x15c>)
    e60c:	f003 fd9c 	bl	12148 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
    e610:	a80b      	add	r0, sp, #44	; 0x2c
    e612:	f7f5 f989 	bl	3928 <sdc_build_revision_get>
    e616:	4b49      	ldr	r3, [pc, #292]	; (e73c <hci_driver_open+0x160>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
    e618:	4849      	ldr	r0, [pc, #292]	; (e740 <hci_driver_open+0x164>)
    e61a:	1ae4      	subs	r4, r4, r3
    e61c:	08e4      	lsrs	r4, r4, #3
    e61e:	01a4      	lsls	r4, r4, #6
    e620:	f044 0303 	orr.w	r3, r4, #3
    e624:	2214      	movs	r2, #20
    e626:	a90b      	add	r1, sp, #44	; 0x2c
    e628:	f002 fe5e 	bl	112e8 <log_hexdump>
			err = sdc_support_adv();
    e62c:	f7f5 fa78 	bl	3b20 <sdc_support_adv>
			if (err) {
    e630:	4606      	mov	r6, r0
    e632:	2800      	cmp	r0, #0
    e634:	d175      	bne.n	e722 <hci_driver_open+0x146>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e636:	ad08      	add	r5, sp, #32
    e638:	462a      	mov	r2, r5
    e63a:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
    e63c:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e640:	f7f5 f980 	bl	3944 <sdc_cfg_set>
	if (required_memory < 0) {
    e644:	2800      	cmp	r0, #0
    e646:	db38      	blt.n	e6ba <hci_driver_open+0xde>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e648:	462a      	mov	r2, r5
    e64a:	2102      	movs	r1, #2
    e64c:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
    e64e:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e652:	f7f5 f977 	bl	3944 <sdc_cfg_set>
	if (required_memory < 0) {
    e656:	2800      	cmp	r0, #0
    e658:	db2f      	blt.n	e6ba <hci_driver_open+0xde>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
    e65a:	4b3a      	ldr	r3, [pc, #232]	; (e744 <hci_driver_open+0x168>)
    e65c:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e65e:	462a      	mov	r2, r5
    e660:	2103      	movs	r1, #3
    e662:	4630      	mov	r0, r6
    e664:	f7f5 f96e 	bl	3944 <sdc_cfg_set>
	if (required_memory < 0) {
    e668:	2800      	cmp	r0, #0
    e66a:	db26      	blt.n	e6ba <hci_driver_open+0xde>
	cfg.event_length.event_length_us =
    e66c:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e670:	462a      	mov	r2, r5
    e672:	2104      	movs	r1, #4
    e674:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
    e676:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e678:	f7f5 f964 	bl	3944 <sdc_cfg_set>
	if (required_memory < 0) {
    e67c:	2800      	cmp	r0, #0
    e67e:	db1c      	blt.n	e6ba <hci_driver_open+0xde>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    e680:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e682:	462a      	mov	r2, r5
    e684:	2105      	movs	r1, #5
    e686:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    e688:	f88d 3020 	strb.w	r3, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e68c:	f7f5 f95a 	bl	3944 <sdc_cfg_set>
	if (required_memory < 0) {
    e690:	2800      	cmp	r0, #0
    e692:	db12      	blt.n	e6ba <hci_driver_open+0xde>
	if (required_memory > sizeof(sdc_mempool)) {
    e694:	f5b0 7f54 	cmp.w	r0, #848	; 0x350
    e698:	dd11      	ble.n	e6be <hci_driver_open+0xe2>
		BT_ERR("Allocated memory too low: %u < %u",
    e69a:	4602      	mov	r2, r0
    e69c:	f044 0301 	orr.w	r3, r4, #1
    e6a0:	4829      	ldr	r0, [pc, #164]	; (e748 <hci_driver_open+0x16c>)
    e6a2:	f44f 7154 	mov.w	r1, #848	; 0x350
    e6a6:	f002 fddf 	bl	11268 <log_2>
		k_panic();
    e6aa:	4040      	eors	r0, r0
    e6ac:	f380 8811 	msr	BASEPRI, r0
    e6b0:	f04f 0004 	mov.w	r0, #4
    e6b4:	df02      	svc	2
		return -ENOMEM;
    e6b6:	f06f 000b 	mvn.w	r0, #11
}
    e6ba:	b010      	add	sp, #64	; 0x40
    e6bc:	bd70      	pop	{r4, r5, r6, pc}
    e6be:	4823      	ldr	r0, [pc, #140]	; (e74c <hci_driver_open+0x170>)
    e6c0:	f000 fe24 	bl	f30c <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
    e6c4:	4b22      	ldr	r3, [pc, #136]	; (e750 <hci_driver_open+0x174>)
    e6c6:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
    e6c8:	b938      	cbnz	r0, e6da <hci_driver_open+0xfe>
		BT_ERR("An entropy source is required");
    e6ca:	4822      	ldr	r0, [pc, #136]	; (e754 <hci_driver_open+0x178>)
    e6cc:	f044 0101 	orr.w	r1, r4, #1
    e6d0:	f002 fda9 	bl	11226 <log_0>
		return -ENODEV;
    e6d4:	f06f 0012 	mvn.w	r0, #18
    e6d8:	e7ef      	b.n	e6ba <hci_driver_open+0xde>
	sdc_rand_source_t rand_functions = {
    e6da:	4b1f      	ldr	r3, [pc, #124]	; (e758 <hci_driver_open+0x17c>)
    e6dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    e6e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
    e6e4:	4628      	mov	r0, r5
    e6e6:	f7f5 fa87 	bl	3bf8 <sdc_rand_source_register>
	if (err) {
    e6ea:	4601      	mov	r1, r0
    e6ec:	b138      	cbz	r0, e6fe <hci_driver_open+0x122>
		BT_ERR("Failed to register rand source (%d)", err);
    e6ee:	481b      	ldr	r0, [pc, #108]	; (e75c <hci_driver_open+0x180>)
    e6f0:	f044 0201 	orr.w	r2, r4, #1
    e6f4:	f002 fda4 	bl	11240 <log_1>
		return -EINVAL;
    e6f8:	f06f 0015 	mvn.w	r0, #21
    e6fc:	e7dd      	b.n	e6ba <hci_driver_open+0xde>
	err = MULTITHREADING_LOCK_ACQUIRE();
    e6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e702:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e706:	f7ff fe77 	bl	e3f8 <multithreading_lock_acquire>
	if (!err) {
    e70a:	4604      	mov	r4, r0
    e70c:	b930      	cbnz	r0, e71c <hci_driver_open+0x140>
		err = sdc_enable(host_signal, sdc_mempool);
    e70e:	4914      	ldr	r1, [pc, #80]	; (e760 <hci_driver_open+0x184>)
    e710:	4814      	ldr	r0, [pc, #80]	; (e764 <hci_driver_open+0x188>)
    e712:	f7f5 f959 	bl	39c8 <sdc_enable>
    e716:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    e718:	f7ff fe76 	bl	e408 <multithreading_lock_release>
	if (err < 0) {
    e71c:	ea04 70e4 	and.w	r0, r4, r4, asr #31
    e720:	e7cb      	b.n	e6ba <hci_driver_open+0xde>
		return -err;
    e722:	2086      	movs	r0, #134	; 0x86
    e724:	e7c9      	b.n	e6ba <hci_driver_open+0xde>
    e726:	bf00      	nop
    e728:	20002c80 	.word	0x20002c80
    e72c:	0000e521 	.word	0x0000e521
    e730:	200010b8 	.word	0x200010b8
    e734:	00013cf2 	.word	0x00013cf2
    e738:	00012bd4 	.word	0x00012bd4
    e73c:	00012b64 	.word	0x00012b64
    e740:	00013cf9 	.word	0x00013cf9
    e744:	02031b1b 	.word	0x02031b1b
    e748:	00013d20 	.word	0x00013d20
    e74c:	00013c92 	.word	0x00013c92
    e750:	20001520 	.word	0x20001520
    e754:	00013d42 	.word	0x00013d42
    e758:	00012d08 	.word	0x00012d08
    e75c:	00013d60 	.word	0x00013d60
    e760:	2000176d 	.word	0x2000176d
    e764:	0000e769 	.word	0x0000e769

0000e768 <host_signal>:
	z_impl_k_sem_give(sem);
    e768:	4801      	ldr	r0, [pc, #4]	; (e770 <host_signal+0x8>)
    e76a:	f001 b935 	b.w	f9d8 <z_impl_k_sem_give>
    e76e:	bf00      	nop
    e770:	2000031c 	.word	0x2000031c

0000e774 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    e774:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    e776:	4cd5      	ldr	r4, [pc, #852]	; (eacc <hci_internal_cmd_put+0x358>)
    e778:	7823      	ldrb	r3, [r4, #0]
    e77a:	2b00      	cmp	r3, #0
    e77c:	f040 8239 	bne.w	ebf2 <hci_internal_cmd_put+0x47e>
	return ((uint16_t)src[1] << 8) | src[0];
    e780:	7843      	ldrb	r3, [r0, #1]
    e782:	7806      	ldrb	r6, [r0, #0]
    e784:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	switch (BT_OGF(opcode)) {
    e788:	0ab3      	lsrs	r3, r6, #10
    e78a:	2b08      	cmp	r3, #8
    e78c:	b235      	sxth	r5, r6
    e78e:	f000 80cf 	beq.w	e930 <hci_internal_cmd_put+0x1bc>
    e792:	d81a      	bhi.n	e7ca <hci_internal_cmd_put+0x56>
    e794:	2b03      	cmp	r3, #3
    e796:	d035      	beq.n	e804 <hci_internal_cmd_put+0x90>
    e798:	2b04      	cmp	r3, #4
    e79a:	d045      	beq.n	e828 <hci_internal_cmd_put+0xb4>
    e79c:	2304      	movs	r3, #4
    e79e:	2001      	movs	r0, #1
	switch (hci_opcode) {
    e7a0:	f242 0219 	movw	r2, #8217	; 0x2019
    e7a4:	4295      	cmp	r5, r2
    e7a6:	f300 821d 	bgt.w	ebe4 <hci_internal_cmd_put+0x470>
    e7aa:	f242 020c 	movw	r2, #8204	; 0x200c
    e7ae:	4295      	cmp	r5, r2
    e7b0:	f300 81ff 	bgt.w	ebb2 <hci_internal_cmd_put+0x43e>
    e7b4:	f240 4206 	movw	r2, #1030	; 0x406
    e7b8:	4295      	cmp	r5, r2
    e7ba:	f000 8206 	beq.w	ebca <hci_internal_cmd_put+0x456>
    e7be:	f240 421d 	movw	r2, #1053	; 0x41d
    e7c2:	4295      	cmp	r5, r2
    e7c4:	f000 8201 	beq.w	ebca <hci_internal_cmd_put+0x456>
    e7c8:	e0ae      	b.n	e928 <hci_internal_cmd_put+0x1b4>
	switch (BT_OGF(opcode)) {
    e7ca:	2b3f      	cmp	r3, #63	; 0x3f
    e7cc:	d1e6      	bne.n	e79c <hci_internal_cmd_put+0x28>
	switch (opcode)	{
    e7ce:	f64f 430a 	movw	r3, #64522	; 0xfc0a
    e7d2:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    e7d4:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
    e7d8:	f200 8191 	bhi.w	eafe <hci_internal_cmd_put+0x38a>
    e7dc:	f5b6 4f7c 	cmp.w	r6, #64512	; 0xfc00
    e7e0:	d018      	beq.n	e814 <hci_internal_cmd_put+0xa0>
    e7e2:	f5a6 437c 	sub.w	r3, r6, #64512	; 0xfc00
    e7e6:	3b01      	subs	r3, #1
    e7e8:	2b09      	cmp	r3, #9
    e7ea:	d813      	bhi.n	e814 <hci_internal_cmd_put+0xa0>
    e7ec:	e8df f013 	tbh	[pc, r3, lsl #1]
    e7f0:	019c0197 	.word	0x019c0197
    e7f4:	00120012 	.word	0x00120012
    e7f8:	01c20012 	.word	0x01c20012
    e7fc:	00120012 	.word	0x00120012
    e800:	01bd01b8 	.word	0x01bd01b8
	switch (opcode)	{
    e804:	f640 4301 	movw	r3, #3073	; 0xc01
    e808:	429d      	cmp	r5, r3
    e80a:	d005      	beq.n	e818 <hci_internal_cmd_put+0xa4>
    e80c:	f640 4303 	movw	r3, #3075	; 0xc03
    e810:	429d      	cmp	r5, r3
    e812:	d006      	beq.n	e822 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
    e814:	2001      	movs	r0, #1
    e816:	e1d8      	b.n	ebca <hci_internal_cmd_put+0x456>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
    e818:	3003      	adds	r0, #3
    e81a:	f7f9 fa0d 	bl	7c38 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    e81e:	2304      	movs	r3, #4
    e820:	e082      	b.n	e928 <hci_internal_cmd_put+0x1b4>
		return sdc_hci_cmd_cb_reset();
    e822:	f7f5 fad9 	bl	3dd8 <sdc_hci_cmd_cb_reset>
    e826:	e7fa      	b.n	e81e <hci_internal_cmd_put+0xaa>
	switch (opcode)	{
    e828:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
    e82c:	3d01      	subs	r5, #1
    e82e:	2d08      	cmp	r5, #8
    e830:	d8f0      	bhi.n	e814 <hci_internal_cmd_put+0xa0>
    e832:	a301      	add	r3, pc, #4	; (adr r3, e838 <hci_internal_cmd_put+0xc4>)
    e834:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    e838:	0000e85d 	.word	0x0000e85d
    e83c:	0000e867 	.word	0x0000e867
    e840:	0000e905 	.word	0x0000e905
    e844:	0000e815 	.word	0x0000e815
    e848:	0000e815 	.word	0x0000e815
    e84c:	0000e815 	.word	0x0000e815
    e850:	0000e815 	.word	0x0000e815
    e854:	0000e815 	.word	0x0000e815
    e858:	0000e921 	.word	0x0000e921
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    e85c:	489c      	ldr	r0, [pc, #624]	; (ead0 <hci_internal_cmd_put+0x35c>)
    e85e:	f7f9 fa9f 	bl	7da0 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    e862:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    e864:	e060      	b.n	e928 <hci_internal_cmd_put+0x1b4>
	memset(cmds, 0, sizeof(*cmds));
    e866:	489a      	ldr	r0, [pc, #616]	; (ead0 <hci_internal_cmd_put+0x35c>)
    e868:	222e      	movs	r2, #46	; 0x2e
    e86a:	2100      	movs	r1, #0
    e86c:	f003 f91b 	bl	11aa6 <memset>
	cmds->hci_set_event_mask = 1;
    e870:	7b23      	ldrb	r3, [r4, #12]
    e872:	f063 033f 	orn	r3, r3, #63	; 0x3f
    e876:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_local_version_information = 1;
    e878:	7d63      	ldrb	r3, [r4, #21]
    e87a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    e87e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    e882:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
    e884:	7da3      	ldrb	r3, [r4, #22]
    e886:	f043 0302 	orr.w	r3, r3, #2
    e88a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
    e88c:	f894 3020 	ldrb.w	r3, [r4, #32]
    e890:	f063 0308 	orn	r3, r3, #8
    e894:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
    e898:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e89c:	f063 033c 	orn	r3, r3, #60	; 0x3c
    e8a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
    e8a4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    e8a8:	f063 033c 	orn	r3, r3, #60	; 0x3c
    e8ac:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
    e8b0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    e8b4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
    e8b8:	f043 0378 	orr.w	r3, r3, #120	; 0x78
    e8bc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_add_device_to_resolving_list = 1;
    e8c0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e8c4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
    e8c8:	f043 0378 	orr.w	r3, r3, #120	; 0x78
    e8cc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
    e8d0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e8d4:	f063 0379 	orn	r3, r3, #121	; 0x79
    e8d8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
    e8dc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    e8e0:	f043 0301 	orr.w	r3, r3, #1
    e8e4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
    e8e8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    e8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e8f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
    e8f4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e8f8:	f043 0304 	orr.w	r3, r3, #4
    e8fc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
    e900:	2344      	movs	r3, #68	; 0x44
    e902:	e00b      	b.n	e91c <hci_internal_cmd_put+0x1a8>
	memset(features, 0, sizeof(*features));
    e904:	4872      	ldr	r0, [pc, #456]	; (ead0 <hci_internal_cmd_put+0x35c>)
    e906:	2208      	movs	r2, #8
    e908:	2100      	movs	r1, #0
    e90a:	f003 f8cc 	bl	11aa6 <memset>
	features->bdedr_not_supported = 1;
    e90e:	7ae3      	ldrb	r3, [r4, #11]
    e910:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e914:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    e918:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    e91a:	230c      	movs	r3, #12
	switch (hci_opcode) {
    e91c:	2000      	movs	r0, #0
    e91e:	e0ca      	b.n	eab6 <hci_internal_cmd_put+0x342>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    e920:	486b      	ldr	r0, [pc, #428]	; (ead0 <hci_internal_cmd_put+0x35c>)
    e922:	f7f9 fa3b 	bl	7d9c <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    e926:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
    e928:	2801      	cmp	r0, #1
    e92a:	f040 80c4 	bne.w	eab6 <hci_internal_cmd_put+0x342>
    e92e:	e14c      	b.n	ebca <hci_internal_cmd_put+0x456>
	switch (opcode)	{
    e930:	f242 032e 	movw	r3, #8238	; 0x202e
    e934:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    e936:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
    e93a:	dc69      	bgt.n	ea10 <hci_internal_cmd_put+0x29c>
    e93c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    e940:	f77f af68 	ble.w	e814 <hci_internal_cmd_put+0xa0>
    e944:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    e948:	3d01      	subs	r5, #1
    e94a:	2d2d      	cmp	r5, #45	; 0x2d
    e94c:	f63f af62 	bhi.w	e814 <hci_internal_cmd_put+0xa0>
    e950:	a301      	add	r3, pc, #4	; (adr r3, e958 <hci_internal_cmd_put+0x1e4>)
    e952:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    e956:	bf00      	nop
    e958:	0000ea29 	.word	0x0000ea29
    e95c:	0000ea2f 	.word	0x0000ea2f
    e960:	0000ea39 	.word	0x0000ea39
    e964:	0000e815 	.word	0x0000e815
    e968:	0000ea59 	.word	0x0000ea59
    e96c:	0000ea5f 	.word	0x0000ea5f
    e970:	0000ea65 	.word	0x0000ea65
    e974:	0000ea6f 	.word	0x0000ea6f
    e978:	0000ea75 	.word	0x0000ea75
    e97c:	0000ea7b 	.word	0x0000ea7b
    e980:	0000e815 	.word	0x0000e815
    e984:	0000e815 	.word	0x0000e815
    e988:	0000e815 	.word	0x0000e815
    e98c:	0000e815 	.word	0x0000e815
    e990:	0000ea81 	.word	0x0000ea81
    e994:	0000ea89 	.word	0x0000ea89
    e998:	0000ea8f 	.word	0x0000ea8f
    e99c:	0000ea95 	.word	0x0000ea95
    e9a0:	0000e815 	.word	0x0000e815
    e9a4:	0000e815 	.word	0x0000e815
    e9a8:	0000e815 	.word	0x0000e815
    e9ac:	0000e815 	.word	0x0000e815
    e9b0:	0000ea9b 	.word	0x0000ea9b
    e9b4:	0000eaa5 	.word	0x0000eaa5
    e9b8:	0000e815 	.word	0x0000e815
    e9bc:	0000e815 	.word	0x0000e815
    e9c0:	0000e815 	.word	0x0000e815
    e9c4:	0000eaad 	.word	0x0000eaad
    e9c8:	0000e815 	.word	0x0000e815
    e9cc:	0000e815 	.word	0x0000e815
    e9d0:	0000e815 	.word	0x0000e815
    e9d4:	0000e815 	.word	0x0000e815
    e9d8:	0000e815 	.word	0x0000e815
    e9dc:	0000e815 	.word	0x0000e815
    e9e0:	0000e815 	.word	0x0000e815
    e9e4:	0000e815 	.word	0x0000e815
    e9e8:	0000e815 	.word	0x0000e815
    e9ec:	0000e815 	.word	0x0000e815
    e9f0:	0000eac7 	.word	0x0000eac7
    e9f4:	0000ead5 	.word	0x0000ead5
    e9f8:	0000eadb 	.word	0x0000eadb
    e9fc:	0000eae1 	.word	0x0000eae1
    ea00:	0000e815 	.word	0x0000e815
    ea04:	0000e815 	.word	0x0000e815
    ea08:	0000eae9 	.word	0x0000eae9
    ea0c:	0000eaef 	.word	0x0000eaef
    ea10:	f242 034b 	movw	r3, #8267	; 0x204b
    ea14:	429d      	cmp	r5, r3
    ea16:	d06d      	beq.n	eaf4 <hci_internal_cmd_put+0x380>
    ea18:	f242 034e 	movw	r3, #8270	; 0x204e
    ea1c:	429d      	cmp	r5, r3
    ea1e:	f47f aef9 	bne.w	e814 <hci_internal_cmd_put+0xa0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
    ea22:	f7f9 f9ea 	bl	7dfa <sdc_hci_cmd_le_set_privacy_mode>
    ea26:	e6fa      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
    ea28:	f7f9 f9e2 	bl	7df0 <sdc_hci_cmd_le_set_event_mask>
    ea2c:	e6f7      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    ea2e:	4828      	ldr	r0, [pc, #160]	; (ead0 <hci_internal_cmd_put+0x35c>)
    ea30:	f7f9 f9ca 	bl	7dc8 <sdc_hci_cmd_le_read_buffer_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    ea34:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    ea36:	e777      	b.n	e928 <hci_internal_cmd_put+0x1b4>
	memset(features, 0, sizeof(*features));
    ea38:	4825      	ldr	r0, [pc, #148]	; (ead0 <hci_internal_cmd_put+0x35c>)
    ea3a:	2205      	movs	r2, #5
    ea3c:	2100      	movs	r1, #0
    ea3e:	f003 f832 	bl	11aa6 <memset>
	features->le_encryption = 1;
    ea42:	79e3      	ldrb	r3, [r4, #7]
    ea44:	f023 0355 	bic.w	r3, r3, #85	; 0x55
    ea48:	f043 0355 	orr.w	r3, r3, #85	; 0x55
    ea4c:	71e3      	strb	r3, [r4, #7]
	features->channel_selection_algorithm_2 = 1;
    ea4e:	7a23      	ldrb	r3, [r4, #8]
    ea50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea54:	7223      	strb	r3, [r4, #8]
    ea56:	e760      	b.n	e91a <hci_internal_cmd_put+0x1a6>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
    ea58:	f7f9 f9d1 	bl	7dfe <sdc_hci_cmd_le_set_random_address>
    ea5c:	e6df      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
    ea5e:	f7f9 f9c5 	bl	7dec <sdc_hci_cmd_le_set_adv_params>
    ea62:	e6dc      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
    ea64:	481a      	ldr	r0, [pc, #104]	; (ead0 <hci_internal_cmd_put+0x35c>)
    ea66:	f7f9 f9ad 	bl	7dc4 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
    ea6a:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
    ea6c:	e75c      	b.n	e928 <hci_internal_cmd_put+0x1b4>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
    ea6e:	f7f9 f9b9 	bl	7de4 <sdc_hci_cmd_le_set_adv_data>
    ea72:	e6d4      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
    ea74:	f7f9 f9c7 	bl	7e06 <sdc_hci_cmd_le_set_scan_response_data>
    ea78:	e6d1      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
    ea7a:	f7f9 f9b5 	bl	7de8 <sdc_hci_cmd_le_set_adv_enable>
    ea7e:	e6ce      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
    ea80:	4813      	ldr	r0, [pc, #76]	; (ead0 <hci_internal_cmd_put+0x35c>)
    ea82:	f7f9 f9a7 	bl	7dd4 <sdc_hci_cmd_le_read_white_list_size>
    ea86:	e7f0      	b.n	ea6a <hci_internal_cmd_put+0x2f6>
		return sdc_hci_cmd_le_clear_white_list();
    ea88:	f7f9 f992 	bl	7db0 <sdc_hci_cmd_le_clear_white_list>
    ea8c:	e6c7      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
    ea8e:	f7f9 f98b 	bl	7da8 <sdc_hci_cmd_le_add_device_to_white_list>
    ea92:	e6c4      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
    ea94:	f7f9 f9a2 	bl	7ddc <sdc_hci_cmd_le_remove_device_from_white_list>
    ea98:	e6c1      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    ea9a:	490d      	ldr	r1, [pc, #52]	; (ead0 <hci_internal_cmd_put+0x35c>)
    ea9c:	f7f9 f98a 	bl	7db4 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    eaa0:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    eaa2:	e741      	b.n	e928 <hci_internal_cmd_put+0x1b4>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    eaa4:	480a      	ldr	r0, [pc, #40]	; (ead0 <hci_internal_cmd_put+0x35c>)
    eaa6:	f7f9 f98b 	bl	7dc0 <sdc_hci_cmd_le_rand>
    eaaa:	e6da      	b.n	e862 <hci_internal_cmd_put+0xee>
	*buf = states1;
    eaac:	2303      	movs	r3, #3
	*(buf + 4) = states2;
    eaae:	2000      	movs	r0, #0
	*buf = states1;
    eab0:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
    eab2:	72e0      	strb	r0, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
    eab4:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    eab6:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
    eab8:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
    eaba:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    eabc:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
    eabe:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
    eac0:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    eac2:	71a0      	strb	r0, [r4, #6]
}
    eac4:	e08a      	b.n	ebdc <hci_internal_cmd_put+0x468>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
    eac6:	f7f9 f96d 	bl	7da4 <sdc_hci_cmd_le_add_device_to_resolving_list>
    eaca:	e6a8      	b.n	e81e <hci_internal_cmd_put+0xaa>
    eacc:	20001abd 	.word	0x20001abd
    ead0:	20001ac4 	.word	0x20001ac4
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
    ead4:	f7f9 f980 	bl	7dd8 <sdc_hci_cmd_le_remove_device_from_resolving_list>
    ead8:	e6a1      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_clear_resolving_list();
    eada:	f7f9 f967 	bl	7dac <sdc_hci_cmd_le_clear_resolving_list>
    eade:	e69e      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
    eae0:	484d      	ldr	r0, [pc, #308]	; (ec18 <hci_internal_cmd_put+0x4a4>)
    eae2:	f7f9 f973 	bl	7dcc <sdc_hci_cmd_le_read_resolving_list_size>
    eae6:	e7c0      	b.n	ea6a <hci_internal_cmd_put+0x2f6>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
    eae8:	f7f9 f97a 	bl	7de0 <sdc_hci_cmd_le_set_address_resolution_enable>
    eaec:	e697      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
    eaee:	f7f9 f988 	bl	7e02 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
    eaf2:	e694      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    eaf4:	1de0      	adds	r0, r4, #7
    eaf6:	f7f9 f96b 	bl	7dd0 <sdc_hci_cmd_le_read_transmit_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    eafa:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    eafc:	e714      	b.n	e928 <hci_internal_cmd_put+0x1b4>
	switch (opcode)	{
    eafe:	f506 7340 	add.w	r3, r6, #768	; 0x300
    eb02:	b29b      	uxth	r3, r3
    eb04:	2b05      	cmp	r3, #5
    eb06:	f63f ae85 	bhi.w	e814 <hci_internal_cmd_put+0xa0>
    eb0a:	f5a6 437d 	sub.w	r3, r6, #64768	; 0xfd00
    eb0e:	2b05      	cmp	r3, #5
    eb10:	f63f ae80 	bhi.w	e814 <hci_internal_cmd_put+0xa0>
    eb14:	e8df f003 	tbb	[pc, r3]
    eb18:	44413e32 	.word	0x44413e32
    eb1c:	4a47      	.short	0x4a47
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    eb1e:	483e      	ldr	r0, [pc, #248]	; (ec18 <hci_internal_cmd_put+0x4a4>)
    eb20:	f7f5 f96e 	bl	3e00 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    eb24:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    eb26:	e63b      	b.n	e7a0 <hci_internal_cmd_put+0x2c>
	memset(cmds, 0, sizeof(*cmds));
    eb28:	483b      	ldr	r0, [pc, #236]	; (ec18 <hci_internal_cmd_put+0x4a4>)
    eb2a:	2202      	movs	r2, #2
    eb2c:	2100      	movs	r1, #0
    eb2e:	f002 ffba 	bl	11aa6 <memset>
	cmds->read_version_info = 1;
    eb32:	79e3      	ldrb	r3, [r4, #7]
    eb34:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    eb38:	f043 0323 	orr.w	r3, r3, #35	; 0x23
    eb3c:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
    eb3e:	7a23      	ldrb	r3, [r4, #8]
    eb40:	f023 0307 	bic.w	r3, r3, #7
    eb44:	f043 0307 	orr.w	r3, r3, #7
    eb48:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
    eb4a:	f242 0319 	movw	r3, #8217	; 0x2019
    eb4e:	429d      	cmp	r5, r3
    eb50:	dd52      	ble.n	ebf8 <hci_internal_cmd_put+0x484>
    eb52:	f242 0332 	movw	r3, #8242	; 0x2032
    eb56:	429d      	cmp	r5, r3
    eb58:	d05c      	beq.n	ec14 <hci_internal_cmd_put+0x4a0>
    eb5a:	f242 0343 	movw	r3, #8259	; 0x2043
    eb5e:	e056      	b.n	ec0e <hci_internal_cmd_put+0x49a>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    eb60:	482d      	ldr	r0, [pc, #180]	; (ec18 <hci_internal_cmd_put+0x4a4>)
    eb62:	f7f9 f8ce 	bl	7d02 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    eb66:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    eb68:	e61a      	b.n	e7a0 <hci_internal_cmd_put+0x2c>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    eb6a:	482b      	ldr	r0, [pc, #172]	; (ec18 <hci_internal_cmd_put+0x4a4>)
    eb6c:	f7f9 f87c 	bl	7c68 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
    eb70:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    eb72:	e615      	b.n	e7a0 <hci_internal_cmd_put+0x2c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
    eb74:	f7f9 f910 	bl	7d98 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    eb78:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
    eb7a:	e611      	b.n	e7a0 <hci_internal_cmd_put+0x2c>
	memset(cmds, 0, sizeof(*cmds));
    eb7c:	4826      	ldr	r0, [pc, #152]	; (ec18 <hci_internal_cmd_put+0x4a4>)
    eb7e:	2201      	movs	r2, #1
    eb80:	2100      	movs	r1, #0
    eb82:	f002 ff90 	bl	11aa6 <memset>
	cmds->read_supported_vs_commands = 1;
    eb86:	79e3      	ldrb	r3, [r4, #7]
    eb88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    eb8c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
    eb90:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
    eb92:	e6b5      	b.n	e900 <hci_internal_cmd_put+0x18c>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
    eb94:	f7f9 f861 	bl	7c5a <sdc_hci_cmd_vs_llpm_mode_set>
    eb98:	e641      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
    eb9a:	f7f9 f85a 	bl	7c52 <sdc_hci_cmd_vs_conn_update>
    eb9e:	e63e      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
    eba0:	f7f9 f84f 	bl	7c42 <sdc_hci_cmd_vs_conn_event_extend>
    eba4:	e63b      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
    eba6:	f7f9 f85a 	bl	7c5e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
    ebaa:	e638      	b.n	e81e <hci_internal_cmd_put+0xaa>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
    ebac:	f7f9 f853 	bl	7c56 <sdc_hci_cmd_vs_event_length_set>
    ebb0:	e635      	b.n	e81e <hci_internal_cmd_put+0xaa>
    ebb2:	f5a6 5200 	sub.w	r2, r6, #8192	; 0x2000
    ebb6:	3a0d      	subs	r2, #13
    ebb8:	2101      	movs	r1, #1
    ebba:	b292      	uxth	r2, r2
    ebbc:	fa01 f202 	lsl.w	r2, r1, r2
    ebc0:	f241 2141 	movw	r1, #4673	; 0x1241
    ebc4:	420a      	tst	r2, r1
    ebc6:	f43f aeaf 	beq.w	e928 <hci_internal_cmd_put+0x1b4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    ebca:	230f      	movs	r3, #15
    ebcc:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    ebce:	2304      	movs	r3, #4
    ebd0:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
    ebd2:	2301      	movs	r3, #1
	evt_data->status = status_code;
    ebd4:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    ebd6:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    ebd8:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
    ebdc:	2301      	movs	r3, #1
    ebde:	7023      	strb	r3, [r4, #0]
	}

	return 0;
    ebe0:	2000      	movs	r0, #0
}
    ebe2:	bd70      	pop	{r4, r5, r6, pc}
	switch (hci_opcode) {
    ebe4:	f242 0232 	movw	r2, #8242	; 0x2032
    ebe8:	4295      	cmp	r5, r2
    ebea:	d0ee      	beq.n	ebca <hci_internal_cmd_put+0x456>
    ebec:	f242 0243 	movw	r2, #8259	; 0x2043
    ebf0:	e5e7      	b.n	e7c2 <hci_internal_cmd_put+0x4e>
		return -NRF_EPERM;
    ebf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ebf6:	e7f4      	b.n	ebe2 <hci_internal_cmd_put+0x46e>
	switch (hci_opcode) {
    ebf8:	f242 030c 	movw	r3, #8204	; 0x200c
    ebfc:	429d      	cmp	r5, r3
    ebfe:	f73f ae7f 	bgt.w	e900 <hci_internal_cmd_put+0x18c>
    ec02:	f240 4306 	movw	r3, #1030	; 0x406
    ec06:	429d      	cmp	r5, r3
    ec08:	d004      	beq.n	ec14 <hci_internal_cmd_put+0x4a0>
    ec0a:	f240 431d 	movw	r3, #1053	; 0x41d
    ec0e:	429d      	cmp	r5, r3
    ec10:	f47f ae76 	bne.w	e900 <hci_internal_cmd_put+0x18c>
    ec14:	2000      	movs	r0, #0
    ec16:	e7d8      	b.n	ebca <hci_internal_cmd_put+0x456>
    ec18:	20001ac4 	.word	0x20001ac4

0000ec1c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
    ec1c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
    ec1e:	4c07      	ldr	r4, [pc, #28]	; (ec3c <hci_internal_evt_get+0x20>)
    ec20:	7823      	ldrb	r3, [r4, #0]
    ec22:	b13b      	cbz	r3, ec34 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
    ec24:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
    ec26:	1c61      	adds	r1, r4, #1
    ec28:	3202      	adds	r2, #2
    ec2a:	f002 ff31 	bl	11a90 <memcpy>
		cmd_complete_or_status.occurred = false;
    ec2e:	2000      	movs	r0, #0
    ec30:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
    ec32:	bd10      	pop	{r4, pc}
    ec34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
    ec38:	f7f8 bff1 	b.w	7c1e <sdc_hci_evt_get>
    ec3c:	20001abd 	.word	0x20001abd

0000ec40 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
    ec40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
    ec44:	4c0b      	ldr	r4, [pc, #44]	; (ec74 <bt_rand+0x34>)
    ec46:	6823      	ldr	r3, [r4, #0]
{
    ec48:	4605      	mov	r5, r0
    ec4a:	460e      	mov	r6, r1
    ec4c:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
    ec4e:	b13b      	cbz	r3, ec60 <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
    ec50:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
    ec52:	6883      	ldr	r3, [r0, #8]
    ec54:	b2b2      	uxth	r2, r6
    ec56:	4629      	mov	r1, r5
    ec58:	681b      	ldr	r3, [r3, #0]
}
    ec5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ec5e:	4718      	bx	r3
    ec60:	4805      	ldr	r0, [pc, #20]	; (ec78 <bt_rand+0x38>)
    ec62:	f000 fb53 	bl	f30c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
    ec66:	6020      	str	r0, [r4, #0]
		if (!dev) {
    ec68:	2800      	cmp	r0, #0
    ec6a:	d1f1      	bne.n	ec50 <bt_rand+0x10>
}
    ec6c:	f06f 0012 	mvn.w	r0, #18
    ec70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec74:	20001524 	.word	0x20001524
    ec78:	00013c92 	.word	0x00013c92

0000ec7c <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
    ec7c:	b538      	push	{r3, r4, r5, lr}
    ec7e:	4b0b      	ldr	r3, [pc, #44]	; (ecac <m_assert_handler+0x30>)
    ec80:	4c0b      	ldr	r4, [pc, #44]	; (ecb0 <m_assert_handler+0x34>)
    ec82:	1ae4      	subs	r4, r4, r3
    ec84:	460d      	mov	r5, r1
    ec86:	08e4      	lsrs	r4, r4, #3
    ec88:	f7fb fca0 	bl	a5cc <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
    ec8c:	01a4      	lsls	r4, r4, #6
    ec8e:	f044 0401 	orr.w	r4, r4, #1
    ec92:	4601      	mov	r1, r0
    ec94:	4623      	mov	r3, r4
    ec96:	4807      	ldr	r0, [pc, #28]	; (ecb4 <m_assert_handler+0x38>)
    ec98:	462a      	mov	r2, r5
    ec9a:	f002 fae5 	bl	11268 <log_2>
	k_oops();
    ec9e:	4040      	eors	r0, r0
    eca0:	f380 8811 	msr	BASEPRI, r0
    eca4:	f04f 0003 	mov.w	r0, #3
    eca8:	df02      	svc	2
}
    ecaa:	bd38      	pop	{r3, r4, r5, pc}
    ecac:	00012b64 	.word	0x00012b64
    ecb0:	00012ba4 	.word	0x00012ba4
    ecb4:	00013dc5 	.word	0x00013dc5

0000ecb8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
    ecb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    ecba:	2332      	movs	r3, #50	; 0x32
    ecbc:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    ecc0:	4a10      	ldr	r2, [pc, #64]	; (ed04 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
    ecc2:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
    ecc4:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    ecc6:	2119      	movs	r1, #25
    ecc8:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
    ecca:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
    ecce:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
    ecd2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    ecd6:	f7f4 fc7d 	bl	35d4 <mpsl_init>
	if (err) {
    ecda:	4604      	mov	r4, r0
    ecdc:	b970      	cbnz	r0, ecfc <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    ecde:	4601      	mov	r1, r0
    ece0:	462a      	mov	r2, r5
    ece2:	2008      	movs	r0, #8
    ece4:	f7fc fd40 	bl	b768 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    ece8:	462a      	mov	r2, r5
    ecea:	4621      	mov	r1, r4
    ecec:	200b      	movs	r0, #11
    ecee:	f7fc fd3b 	bl	b768 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    ecf2:	462a      	mov	r2, r5
    ecf4:	4621      	mov	r1, r4
    ecf6:	4628      	mov	r0, r5
    ecf8:	f7fc fd36 	bl	b768 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
    ecfc:	4620      	mov	r0, r4
    ecfe:	b003      	add	sp, #12
    ed00:	bd30      	pop	{r4, r5, pc}
    ed02:	bf00      	nop
    ed04:	0000ec7d 	.word	0x0000ec7d

0000ed08 <mpsl_low_prio_irq_handler>:
    ed08:	4801      	ldr	r0, [pc, #4]	; (ed10 <mpsl_low_prio_irq_handler+0x8>)
    ed0a:	f000 be65 	b.w	f9d8 <z_impl_k_sem_give>
    ed0e:	bf00      	nop
    ed10:	20000334 	.word	0x20000334

0000ed14 <signal_thread>:
{
    ed14:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
    ed16:	4c09      	ldr	r4, [pc, #36]	; (ed3c <signal_thread+0x28>)
    ed18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ed1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ed20:	4620      	mov	r0, r4
    ed22:	f000 fe7f 	bl	fa24 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
    ed26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ed2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ed2e:	f7ff fb63 	bl	e3f8 <multithreading_lock_acquire>
		mpsl_low_priority_process();
    ed32:	f7f8 fba2 	bl	747a <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
    ed36:	f7ff fb67 	bl	e408 <multithreading_lock_release>
	while (true) {
    ed3a:	e7ed      	b.n	ed18 <signal_thread+0x4>
    ed3c:	20000334 	.word	0x20000334

0000ed40 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
    ed40:	b530      	push	{r4, r5, lr}
    ed42:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ed44:	4d0f      	ldr	r5, [pc, #60]	; (ed84 <mpsl_signal_thread_init+0x44>)
    ed46:	4910      	ldr	r1, [pc, #64]	; (ed88 <mpsl_signal_thread_init+0x48>)
    ed48:	2200      	movs	r2, #0
    ed4a:	2300      	movs	r3, #0
    ed4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ed50:	2400      	movs	r4, #0
    ed52:	f06f 0309 	mvn.w	r3, #9
    ed56:	e9cd 3403 	strd	r3, r4, [sp, #12]
    ed5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ed5e:	4b0b      	ldr	r3, [pc, #44]	; (ed8c <mpsl_signal_thread_init+0x4c>)
    ed60:	9400      	str	r4, [sp, #0]
    ed62:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ed66:	4628      	mov	r0, r5
    ed68:	f000 fc9e 	bl	f6a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ed6c:	4908      	ldr	r1, [pc, #32]	; (ed90 <mpsl_signal_thread_init+0x50>)
    ed6e:	4628      	mov	r0, r5
    ed70:	f003 f9ea 	bl	12148 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    ed74:	4622      	mov	r2, r4
    ed76:	2104      	movs	r1, #4
    ed78:	2019      	movs	r0, #25
    ed7a:	f7fc fcf5 	bl	b768 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    ed7e:	4620      	mov	r0, r4
    ed80:	b009      	add	sp, #36	; 0x24
    ed82:	bd30      	pop	{r4, r5, pc}
    ed84:	20001138 	.word	0x20001138
    ed88:	200030a0 	.word	0x200030a0
    ed8c:	0000ed15 	.word	0x0000ed15
    ed90:	00013dd9 	.word	0x00013dd9

0000ed94 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    ed94:	4b01      	ldr	r3, [pc, #4]	; (ed9c <mpsl_hfclk_callback+0x8>)
    ed96:	2000      	movs	r0, #0
    ed98:	681b      	ldr	r3, [r3, #0]
    ed9a:	4718      	bx	r3
    ed9c:	20001528 	.word	0x20001528

0000eda0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
    eda0:	b120      	cbz	r0, edac <nrfx_clock_start+0xc>
    eda2:	2801      	cmp	r0, #1
    eda4:	d106      	bne.n	edb4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    eda6:	4804      	ldr	r0, [pc, #16]	; (edb8 <nrfx_clock_start+0x18>)
    eda8:	f7f4 ba92 	b.w	32d0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    edac:	4b03      	ldr	r3, [pc, #12]	; (edbc <nrfx_clock_start+0x1c>)
    edae:	2001      	movs	r0, #1
    edb0:	681b      	ldr	r3, [r3, #0]
    edb2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    edb4:	4770      	bx	lr
    edb6:	bf00      	nop
    edb8:	0000ed95 	.word	0x0000ed95
    edbc:	20001528 	.word	0x20001528

0000edc0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    edc0:	4b01      	ldr	r3, [pc, #4]	; (edc8 <nrfx_clock_init+0x8>)
    edc2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    edc4:	4801      	ldr	r0, [pc, #4]	; (edcc <nrfx_clock_init+0xc>)
    edc6:	4770      	bx	lr
    edc8:	20001528 	.word	0x20001528
    edcc:	0bad0000 	.word	0x0bad0000

0000edd0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    edd0:	4b04      	ldr	r3, [pc, #16]	; (ede4 <nrf52_errata_108+0x14>)
    edd2:	6818      	ldr	r0, [r3, #0]
    edd4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    edd6:	bf04      	itt	eq
    edd8:	4b03      	ldreq	r3, [pc, #12]	; (ede8 <nrf52_errata_108+0x18>)
    edda:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    eddc:	1f83      	subs	r3, r0, #6
    edde:	4258      	negs	r0, r3
    ede0:	4158      	adcs	r0, r3
    ede2:	4770      	bx	lr
    ede4:	10000130 	.word	0x10000130
    ede8:	f0000fe0 	.word	0xf0000fe0

0000edec <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    edec:	4b07      	ldr	r3, [pc, #28]	; (ee0c <nrf52_errata_16+0x20>)
    edee:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    edf0:	2b06      	cmp	r3, #6
    edf2:	d109      	bne.n	ee08 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    edf4:	4b06      	ldr	r3, [pc, #24]	; (ee10 <nrf52_errata_16+0x24>)
    edf6:	681b      	ldr	r3, [r3, #0]
    edf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    edfc:	3b03      	subs	r3, #3
    edfe:	2b04      	cmp	r3, #4
    ee00:	d802      	bhi.n	ee08 <nrf52_errata_16+0x1c>
    ee02:	4a04      	ldr	r2, [pc, #16]	; (ee14 <nrf52_errata_16+0x28>)
    ee04:	5cd0      	ldrb	r0, [r2, r3]
    ee06:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    ee08:	2000      	movs	r0, #0
    #endif
}
    ee0a:	4770      	bx	lr
    ee0c:	f0000fe0 	.word	0xf0000fe0
    ee10:	f0000fe8 	.word	0xf0000fe8
    ee14:	00013dfe 	.word	0x00013dfe

0000ee18 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    ee18:	4a02      	ldr	r2, [pc, #8]	; (ee24 <nvmc_wait+0xc>)
    ee1a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    ee1e:	2b00      	cmp	r3, #0
    ee20:	d0fb      	beq.n	ee1a <nvmc_wait+0x2>
}
    ee22:	4770      	bx	lr
    ee24:	4001e000 	.word	0x4001e000

0000ee28 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    ee28:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    ee2a:	f7ff ffd1 	bl	edd0 <nrf52_errata_108>
    ee2e:	b128      	cbz	r0, ee3c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    ee30:	4b81      	ldr	r3, [pc, #516]	; (f038 <SystemInit+0x210>)
    ee32:	4a82      	ldr	r2, [pc, #520]	; (f03c <SystemInit+0x214>)
    ee34:	681b      	ldr	r3, [r3, #0]
    ee36:	f3c3 2304 	ubfx	r3, r3, #8, #5
    ee3a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    ee3c:	f7ff ffd6 	bl	edec <nrf52_errata_16>
    ee40:	b110      	cbz	r0, ee48 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    ee42:	4b7f      	ldr	r3, [pc, #508]	; (f040 <SystemInit+0x218>)
    ee44:	4a7f      	ldr	r2, [pc, #508]	; (f044 <SystemInit+0x21c>)
    ee46:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    ee48:	f7ff ffc2 	bl	edd0 <nrf52_errata_108>
    ee4c:	b128      	cbz	r0, ee5a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    ee4e:	4b7e      	ldr	r3, [pc, #504]	; (f048 <SystemInit+0x220>)
    ee50:	4a7e      	ldr	r2, [pc, #504]	; (f04c <SystemInit+0x224>)
    ee52:	681b      	ldr	r3, [r3, #0]
    ee54:	f3c3 3342 	ubfx	r3, r3, #13, #3
    ee58:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    ee5a:	f7ff ffc7 	bl	edec <nrf52_errata_16>
    ee5e:	b120      	cbz	r0, ee6a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    ee60:	4a7b      	ldr	r2, [pc, #492]	; (f050 <SystemInit+0x228>)
    ee62:	68d3      	ldr	r3, [r2, #12]
    ee64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ee68:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    ee6a:	f7ff ffb1 	bl	edd0 <nrf52_errata_108>
    ee6e:	b140      	cbz	r0, ee82 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    ee70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ee74:	2200      	movs	r2, #0
    ee76:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    ee7a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    ee7e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    ee82:	f7ff ffb3 	bl	edec <nrf52_errata_16>
    ee86:	b110      	cbz	r0, ee8e <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    ee88:	4b72      	ldr	r3, [pc, #456]	; (f054 <SystemInit+0x22c>)
    ee8a:	2203      	movs	r2, #3
    ee8c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    ee8e:	f7ff ffad 	bl	edec <nrf52_errata_16>
    ee92:	b140      	cbz	r0, eea6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    ee94:	4b70      	ldr	r3, [pc, #448]	; (f058 <SystemInit+0x230>)
    ee96:	2205      	movs	r2, #5
    ee98:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    ee9a:	2201      	movs	r2, #1
    ee9c:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    ee9e:	2200      	movs	r2, #0
    eea0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    eea2:	223f      	movs	r2, #63	; 0x3f
    eea4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    eea6:	4b6d      	ldr	r3, [pc, #436]	; (f05c <SystemInit+0x234>)
    eea8:	681a      	ldr	r2, [r3, #0]
    eeaa:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    eeac:	bf0b      	itete	eq
    eeae:	4b6c      	ldreq	r3, [pc, #432]	; (f060 <SystemInit+0x238>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    eeb0:	4b6c      	ldrne	r3, [pc, #432]	; (f064 <SystemInit+0x23c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    eeb2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    eeb4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    eeb6:	bf02      	ittt	eq
    eeb8:	3308      	addeq	r3, #8
    eeba:	681b      	ldreq	r3, [r3, #0]
    eebc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    eec0:	2a06      	cmp	r2, #6
    eec2:	d14d      	bne.n	ef60 <SystemInit+0x138>
            {
                switch(var2)
    eec4:	3b03      	subs	r3, #3
    eec6:	2b04      	cmp	r3, #4
    eec8:	d803      	bhi.n	eed2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    eeca:	4a67      	ldr	r2, [pc, #412]	; (f068 <SystemInit+0x240>)
    eecc:	5cd3      	ldrb	r3, [r2, r3]
    eece:	2b00      	cmp	r3, #0
    eed0:	d046      	beq.n	ef60 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    eed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    eed6:	4b65      	ldr	r3, [pc, #404]	; (f06c <SystemInit+0x244>)
    eed8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    eedc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    eee0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    eee4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    eee8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    eeec:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    eef0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    eef4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    eef8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    eefc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    ef00:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    ef04:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    ef08:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    ef0c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    ef10:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    ef14:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    ef18:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    ef1c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    ef20:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    ef24:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    ef28:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    ef2c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    ef30:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    ef34:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    ef38:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    ef3c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    ef40:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    ef44:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    ef48:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    ef4c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    ef50:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    ef54:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    ef58:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    ef5c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    ef60:	f7ff ff36 	bl	edd0 <nrf52_errata_108>
    ef64:	b128      	cbz	r0, ef72 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    ef66:	4b42      	ldr	r3, [pc, #264]	; (f070 <SystemInit+0x248>)
    ef68:	4a42      	ldr	r2, [pc, #264]	; (f074 <SystemInit+0x24c>)
    ef6a:	681b      	ldr	r3, [r3, #0]
    ef6c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    ef70:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    ef72:	f7ff ff2d 	bl	edd0 <nrf52_errata_108>
    ef76:	b148      	cbz	r0, ef8c <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    ef78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ef7c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    ef80:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    ef82:	bf44      	itt	mi
    ef84:	f06f 0201 	mvnmi.w	r2, #1
    ef88:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ef8c:	4b33      	ldr	r3, [pc, #204]	; (f05c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ef8e:	681b      	ldr	r3, [r3, #0]
    ef90:	2b06      	cmp	r3, #6
    ef92:	d120      	bne.n	efd6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ef94:	4b33      	ldr	r3, [pc, #204]	; (f064 <SystemInit+0x23c>)
    ef96:	681b      	ldr	r3, [r3, #0]
    ef98:	3b03      	subs	r3, #3
    ef9a:	2b04      	cmp	r3, #4
    ef9c:	d802      	bhi.n	efa4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    ef9e:	4a36      	ldr	r2, [pc, #216]	; (f078 <SystemInit+0x250>)
    efa0:	5cd3      	ldrb	r3, [r2, r3]
    efa2:	b143      	cbz	r3, efb6 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    efa4:	4a35      	ldr	r2, [pc, #212]	; (f07c <SystemInit+0x254>)
    efa6:	6813      	ldr	r3, [r2, #0]
    efa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    efac:	6013      	str	r3, [r2, #0]
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    efae:	4b2b      	ldr	r3, [pc, #172]	; (f05c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    efb0:	681b      	ldr	r3, [r3, #0]
    efb2:	2b06      	cmp	r3, #6
    efb4:	d10f      	bne.n	efd6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    efb6:	4b2b      	ldr	r3, [pc, #172]	; (f064 <SystemInit+0x23c>)
    efb8:	681b      	ldr	r3, [r3, #0]
    efba:	3b03      	subs	r3, #3
    efbc:	2b04      	cmp	r3, #4
    efbe:	d802      	bhi.n	efc6 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    efc0:	4a2f      	ldr	r2, [pc, #188]	; (f080 <SystemInit+0x258>)
    efc2:	5cd3      	ldrb	r3, [r2, r3]
    efc4:	b13b      	cbz	r3, efd6 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    efc6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    efca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    efce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    efd2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    efd6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    efda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    efde:	2a00      	cmp	r2, #0
    efe0:	db03      	blt.n	efea <SystemInit+0x1c2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    efe2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    efe6:	2b00      	cmp	r3, #0
    efe8:	da22      	bge.n	f030 <SystemInit+0x208>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    efea:	4926      	ldr	r1, [pc, #152]	; (f084 <SystemInit+0x25c>)
    efec:	2301      	movs	r3, #1
    efee:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    eff2:	f7ff ff11 	bl	ee18 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    eff6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    effa:	2415      	movs	r4, #21
    effc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    f000:	f7ff ff0a 	bl	ee18 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    f004:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    f008:	f7ff ff06 	bl	ee18 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f00c:	2300      	movs	r3, #0
    f00e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    f012:	f7ff ff01 	bl	ee18 <nvmc_wait>
    f016:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f01a:	491b      	ldr	r1, [pc, #108]	; (f088 <SystemInit+0x260>)
    f01c:	4b1b      	ldr	r3, [pc, #108]	; (f08c <SystemInit+0x264>)
    f01e:	68ca      	ldr	r2, [r1, #12]
    f020:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f024:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f026:	60cb      	str	r3, [r1, #12]
    f028:	f3bf 8f4f 	dsb	sy
    __NOP();
    f02c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f02e:	e7fd      	b.n	f02c <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    f030:	4b17      	ldr	r3, [pc, #92]	; (f090 <SystemInit+0x268>)
    f032:	4a18      	ldr	r2, [pc, #96]	; (f094 <SystemInit+0x26c>)
    f034:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    f036:	bd10      	pop	{r4, pc}
    f038:	10000324 	.word	0x10000324
    f03c:	40013540 	.word	0x40013540
    f040:	4007c074 	.word	0x4007c074
    f044:	baadf00d 	.word	0xbaadf00d
    f048:	10000244 	.word	0x10000244
    f04c:	4000053c 	.word	0x4000053c
    f050:	e000edf0 	.word	0xe000edf0
    f054:	400005a0 	.word	0x400005a0
    f058:	40005610 	.word	0x40005610
    f05c:	10000130 	.word	0x10000130
    f060:	f0000fe0 	.word	0xf0000fe0
    f064:	10000134 	.word	0x10000134
    f068:	00013def 	.word	0x00013def
    f06c:	4000c000 	.word	0x4000c000
    f070:	10000258 	.word	0x10000258
    f074:	40000ee4 	.word	0x40000ee4
    f078:	00013df4 	.word	0x00013df4
    f07c:	4000173c 	.word	0x4000173c
    f080:	00013df9 	.word	0x00013df9
    f084:	4001e000 	.word	0x4001e000
    f088:	e000ed00 	.word	0xe000ed00
    f08c:	05fa0004 	.word	0x05fa0004
    f090:	200002b0 	.word	0x200002b0
    f094:	03d09000 	.word	0x03d09000

0000f098 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    f098:	2301      	movs	r3, #1
    f09a:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    f09e:	f010 0fff 	tst.w	r0, #255	; 0xff
    f0a2:	d012      	beq.n	f0ca <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    f0a4:	f04f 0340 	mov.w	r3, #64	; 0x40
    f0a8:	f3ef 8111 	mrs	r1, BASEPRI
    f0ac:	f383 8811 	msr	BASEPRI, r3
    f0b0:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    f0b4:	4a06      	ldr	r2, [pc, #24]	; (f0d0 <nrfx_gpiote_channel_free+0x38>)
    f0b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    f0b8:	ea23 0000 	bic.w	r0, r3, r0
    f0bc:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    f0be:	f381 8811 	msr	BASEPRI, r1
    f0c2:	f3bf 8f6f 	isb	sy
    f0c6:	4803      	ldr	r0, [pc, #12]	; (f0d4 <nrfx_gpiote_channel_free+0x3c>)
    f0c8:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    f0ca:	4803      	ldr	r0, [pc, #12]	; (f0d8 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f0cc:	4770      	bx	lr
    f0ce:	bf00      	nop
    f0d0:	2000152c 	.word	0x2000152c
    f0d4:	0bad0000 	.word	0x0bad0000
    f0d8:	0bad0004 	.word	0x0bad0004

0000f0dc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    f0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0e0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    f0e2:	f8df e060 	ldr.w	lr, [pc, #96]	; f144 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    f0e6:	4816      	ldr	r0, [pc, #88]	; (f140 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    f0e8:	f8df 805c 	ldr.w	r8, [pc, #92]	; f148 <nrfx_gpiote_channel_alloc+0x6c>
{
    f0ec:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    f0ee:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    f0f0:	2601      	movs	r6, #1
    f0f2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    f0f4:	f04f 0140 	mov.w	r1, #64	; 0x40
    f0f8:	f3ef 8c11 	mrs	ip, BASEPRI
    f0fc:	f381 8811 	msr	BASEPRI, r1
    f100:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    f104:	fa22 f103 	lsr.w	r1, r2, r3
    f108:	07c9      	lsls	r1, r1, #31
    f10a:	d50a      	bpl.n	f122 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    f10c:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    f110:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    f114:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    f116:	bf01      	itttt	eq
    f118:	4339      	orreq	r1, r7
    f11a:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    f11e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    f120:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    f122:	f38c 8811 	msr	BASEPRI, ip
    f126:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    f12a:	4540      	cmp	r0, r8
    f12c:	d005      	beq.n	f13a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    f12e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    f132:	439a      	bics	r2, r3
    f134:	f104 0401 	add.w	r4, r4, #1
    f138:	d1db      	bne.n	f0f2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f13e:	bf00      	nop
    f140:	0bad0002 	.word	0x0bad0002
    f144:	2000152c 	.word	0x2000152c
    f148:	0bad0000 	.word	0x0bad0000

0000f14c <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    f14c:	4b18      	ldr	r3, [pc, #96]	; (f1b0 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    f14e:	f8df c06c 	ldr.w	ip, [pc, #108]	; f1bc <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    f152:	681b      	ldr	r3, [r3, #0]
{
    f154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    f158:	43db      	mvns	r3, r3
{
    f15a:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    f15c:	4f15      	ldr	r7, [pc, #84]	; (f1b4 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    f15e:	4816      	ldr	r0, [pc, #88]	; (f1b8 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    f160:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    f164:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    f166:	f04f 0e01 	mov.w	lr, #1
    f16a:	b2e6      	uxtb	r6, r4
    f16c:	b90b      	cbnz	r3, f172 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    f172:	f04f 0240 	mov.w	r2, #64	; 0x40
    f176:	f3ef 8811 	mrs	r8, BASEPRI
    f17a:	f382 8811 	msr	BASEPRI, r2
    f17e:	f3bf 8f6f 	isb	sy
    f182:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    f186:	421a      	tst	r2, r3
    f188:	d006      	beq.n	f198 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    f18a:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    f18c:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    f18e:	bf01      	itttt	eq
    f190:	4311      	orreq	r1, r2
    f192:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
    f194:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
    f196:	4660      	moveq	r0, ip
	__asm__ volatile(
    f198:	f388 8811 	msr	BASEPRI, r8
    f19c:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
    f1a0:	4560      	cmp	r0, ip
    f1a2:	f104 0401 	add.w	r4, r4, #1
    f1a6:	d0e2      	beq.n	f16e <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    f1a8:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    f1ac:	e7dd      	b.n	f16a <nrfx_ppi_channel_alloc+0x1e>
    f1ae:	bf00      	nop
    f1b0:	00012f20 	.word	0x00012f20
    f1b4:	2000157c 	.word	0x2000157c
    f1b8:	0bad0002 	.word	0x0bad0002
    f1bc:	0bad0000 	.word	0x0bad0000

0000f1c0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    f1c0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    f1c2:	4c11      	ldr	r4, [pc, #68]	; (f208 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    f1c4:	4a11      	ldr	r2, [pc, #68]	; (f20c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    f1c6:	4912      	ldr	r1, [pc, #72]	; (f210 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    f1c8:	2303      	movs	r3, #3
    f1ca:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    f1cc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    f1ce:	4b11      	ldr	r3, [pc, #68]	; (f214 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    f1d0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    f1d2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    f1d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    f1d8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    f1da:	2300      	movs	r3, #0
    f1dc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    f1de:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    f1e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    f1e2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    f1e4:	4a0c      	ldr	r2, [pc, #48]	; (f218 <_DoInit+0x58>)
    f1e6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    f1e8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    f1ea:	2210      	movs	r2, #16
    f1ec:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    f1ee:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    f1f0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    f1f2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    f1f4:	f002 fc03 	bl	119fe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    f1f8:	4908      	ldr	r1, [pc, #32]	; (f21c <_DoInit+0x5c>)
    f1fa:	4620      	mov	r0, r4
    f1fc:	f002 fbff 	bl	119fe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    f200:	2320      	movs	r3, #32
    f202:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    f204:	bd10      	pop	{r4, pc}
    f206:	bf00      	nop
    f208:	20001580 	.word	0x20001580
    f20c:	00013e03 	.word	0x00013e03
    f210:	00013e0c 	.word	0x00013e0c
    f214:	20001b14 	.word	0x20001b14
    f218:	20001b04 	.word	0x20001b04
    f21c:	00013e10 	.word	0x00013e10

0000f220 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    f220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    f224:	4f23      	ldr	r7, [pc, #140]	; (f2b4 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    f226:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    f22a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    f22c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    f230:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    f232:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    f234:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    f236:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    f238:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    f23a:	d834      	bhi.n	f2a6 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    f23c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    f240:	ebaa 0905 	sub.w	r9, sl, r5
    f244:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    f248:	4294      	cmp	r4, r2
    f24a:	d811      	bhi.n	f270 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f24c:	f04f 0918 	mov.w	r9, #24
    f250:	fb06 9309 	mla	r3, r6, r9, r9
    f254:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    f256:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f258:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    f25a:	4641      	mov	r1, r8
    f25c:	4428      	add	r0, r5
    f25e:	f002 fc17 	bl	11a90 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    f262:	fb09 7606 	mla	r6, r9, r6, r7
    f266:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    f268:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    f26a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    f26c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    f270:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    f272:	429c      	cmp	r4, r3
    f274:	d81b      	bhi.n	f2ae <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f276:	fb00 bb0b 	mla	fp, r0, fp, fp
    f27a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    f27c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f27e:	f8db 0004 	ldr.w	r0, [fp, #4]
    f282:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    f284:	4428      	add	r0, r5
    f286:	f002 fc03 	bl	11a90 <memcpy>
      if (NumBytes) {
    f28a:	ebb4 040a 	subs.w	r4, r4, sl
    f28e:	d006      	beq.n	f29e <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    f290:	f8db 0004 	ldr.w	r0, [fp, #4]
    f294:	4622      	mov	r2, r4
    f296:	eb08 0109 	add.w	r1, r8, r9
    f29a:	f002 fbf9 	bl	11a90 <memcpy>
      pRing->WrOff = NumBytes;
    f29e:	2018      	movs	r0, #24
    f2a0:	fb00 7606 	mla	r6, r0, r6, r7
    f2a4:	e7e0      	b.n	f268 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    f2a6:	3b01      	subs	r3, #1
    f2a8:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    f2aa:	42a3      	cmp	r3, r4
    f2ac:	d2ce      	bcs.n	f24c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    f2ae:	2000      	movs	r0, #0
    f2b0:	e7dc      	b.n	f26c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    f2b2:	bf00      	nop
    f2b4:	20001580 	.word	0x20001580

0000f2b8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    f2b8:	4b03      	ldr	r3, [pc, #12]	; (f2c8 <SEGGER_RTT_HasDataUp+0x10>)
    f2ba:	2218      	movs	r2, #24
    f2bc:	fb02 3300 	mla	r3, r2, r0, r3
    f2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    f2c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    f2c4:	1a80      	subs	r0, r0, r2
    f2c6:	4770      	bx	lr
    f2c8:	20001580 	.word	0x20001580

0000f2cc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f2cc:	4b0e      	ldr	r3, [pc, #56]	; (f308 <z_sys_init_run_level+0x3c>)
{
    f2ce:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f2d0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    f2d4:	3001      	adds	r0, #1
    f2d6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    f2da:	42a6      	cmp	r6, r4
    f2dc:	d800      	bhi.n	f2e0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    f2de:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    f2e0:	e9d4 3500 	ldrd	r3, r5, [r4]
    f2e4:	4628      	mov	r0, r5
    f2e6:	4798      	blx	r3
		if (dev != NULL) {
    f2e8:	b165      	cbz	r5, f304 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    f2ea:	68eb      	ldr	r3, [r5, #12]
    f2ec:	b130      	cbz	r0, f2fc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    f2ee:	2800      	cmp	r0, #0
    f2f0:	bfb8      	it	lt
    f2f2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    f2f4:	28ff      	cmp	r0, #255	; 0xff
    f2f6:	bfa8      	it	ge
    f2f8:	20ff      	movge	r0, #255	; 0xff
    f2fa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    f2fc:	785a      	ldrb	r2, [r3, #1]
    f2fe:	f042 0201 	orr.w	r2, r2, #1
    f302:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f304:	3408      	adds	r4, #8
    f306:	e7e8      	b.n	f2da <z_sys_init_run_level+0xe>
    f308:	00012f24 	.word	0x00012f24

0000f30c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    f30c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    f30e:	4605      	mov	r5, r0
    f310:	b910      	cbnz	r0, f318 <z_impl_device_get_binding+0xc>
		return NULL;
    f312:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    f314:	4620      	mov	r0, r4
    f316:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    f318:	7803      	ldrb	r3, [r0, #0]
    f31a:	2b00      	cmp	r3, #0
    f31c:	d0f9      	beq.n	f312 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    f31e:	4a0f      	ldr	r2, [pc, #60]	; (f35c <z_impl_device_get_binding+0x50>)
    f320:	4c0f      	ldr	r4, [pc, #60]	; (f360 <z_impl_device_get_binding+0x54>)
    f322:	4616      	mov	r6, r2
    f324:	4294      	cmp	r4, r2
    f326:	d108      	bne.n	f33a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    f328:	4c0d      	ldr	r4, [pc, #52]	; (f360 <z_impl_device_get_binding+0x54>)
    f32a:	42b4      	cmp	r4, r6
    f32c:	d0f1      	beq.n	f312 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    f32e:	4620      	mov	r0, r4
    f330:	f002 fe4a 	bl	11fc8 <z_device_ready>
    f334:	b950      	cbnz	r0, f34c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    f336:	3418      	adds	r4, #24
    f338:	e7f7      	b.n	f32a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    f33a:	4620      	mov	r0, r4
    f33c:	f002 fe44 	bl	11fc8 <z_device_ready>
    f340:	b110      	cbz	r0, f348 <z_impl_device_get_binding+0x3c>
    f342:	6823      	ldr	r3, [r4, #0]
    f344:	42ab      	cmp	r3, r5
    f346:	d0e5      	beq.n	f314 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    f348:	3418      	adds	r4, #24
    f34a:	e7eb      	b.n	f324 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    f34c:	6821      	ldr	r1, [r4, #0]
    f34e:	4628      	mov	r0, r5
    f350:	f002 fb82 	bl	11a58 <strcmp>
    f354:	2800      	cmp	r0, #0
    f356:	d1ee      	bne.n	f336 <z_impl_device_get_binding+0x2a>
    f358:	e7dc      	b.n	f314 <z_impl_device_get_binding+0x8>
    f35a:	bf00      	nop
    f35c:	00012a2c 	.word	0x00012a2c
    f360:	000129b4 	.word	0x000129b4

0000f364 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f368:	4606      	mov	r6, r0
    f36a:	460f      	mov	r7, r1
	__asm__ volatile(
    f36c:	f04f 0340 	mov.w	r3, #64	; 0x40
    f370:	f3ef 8811 	mrs	r8, BASEPRI
    f374:	f383 8811 	msr	BASEPRI, r3
    f378:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    f37c:	f000 ffac 	bl	102d8 <z_impl_k_current_get>
    f380:	4c1f      	ldr	r4, [pc, #124]	; (f400 <z_fatal_error+0x9c>)
    f382:	4b20      	ldr	r3, [pc, #128]	; (f404 <z_fatal_error+0xa0>)
    f384:	1ae4      	subs	r4, r4, r3
    f386:	2e04      	cmp	r6, #4
    f388:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    f38c:	bf96      	itet	ls
    f38e:	4a1e      	ldrls	r2, [pc, #120]	; (f408 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    f390:	4a1e      	ldrhi	r2, [pc, #120]	; (f40c <z_fatal_error+0xa8>)
    f392:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    f396:	01a4      	lsls	r4, r4, #6
    f398:	f044 0301 	orr.w	r3, r4, #1
    f39c:	4605      	mov	r5, r0
    f39e:	f8ad 3000 	strh.w	r3, [sp]
    f3a2:	481b      	ldr	r0, [pc, #108]	; (f410 <z_fatal_error+0xac>)
    f3a4:	2300      	movs	r3, #0
    f3a6:	4631      	mov	r1, r6
    f3a8:	f001 ff77 	bl	1129a <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    f3ac:	b147      	cbz	r7, f3c0 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    f3ae:	69fb      	ldr	r3, [r7, #28]
    f3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    f3b4:	b123      	cbz	r3, f3c0 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    f3b6:	4817      	ldr	r0, [pc, #92]	; (f414 <z_fatal_error+0xb0>)
    f3b8:	f044 0101 	orr.w	r1, r4, #1
    f3bc:	f001 ff33 	bl	11226 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    f3c0:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    f3c4:	b12d      	cbz	r5, f3d2 <z_fatal_error+0x6e>
    f3c6:	4628      	mov	r0, r5
    f3c8:	f002 fec1 	bl	1214e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    f3cc:	b108      	cbz	r0, f3d2 <z_fatal_error+0x6e>
    f3ce:	7803      	ldrb	r3, [r0, #0]
    f3d0:	b903      	cbnz	r3, f3d4 <z_fatal_error+0x70>
		thread_name = "unknown";
    f3d2:	4811      	ldr	r0, [pc, #68]	; (f418 <z_fatal_error+0xb4>)
    f3d4:	f7fb f8fa 	bl	a5cc <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    f3d8:	4623      	mov	r3, r4
    f3da:	4602      	mov	r2, r0
    f3dc:	4629      	mov	r1, r5
    f3de:	480f      	ldr	r0, [pc, #60]	; (f41c <z_fatal_error+0xb8>)
    f3e0:	f001 ff42 	bl	11268 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    f3e4:	4639      	mov	r1, r7
    f3e6:	4630      	mov	r0, r6
    f3e8:	f7ff f814 	bl	e414 <k_sys_fatal_error_handler>
	__asm__ volatile(
    f3ec:	f388 8811 	msr	BASEPRI, r8
    f3f0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    f3f4:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    f3f6:	b002      	add	sp, #8
    f3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f3fc:	f7fc bd70 	b.w	bee0 <z_impl_k_thread_abort>
    f400:	00012bbc 	.word	0x00012bbc
    f404:	00012b64 	.word	0x00012b64
    f408:	00012f3c 	.word	0x00012f3c
    f40c:	00013e17 	.word	0x00013e17
    f410:	00013e25 	.word	0x00013e25
    f414:	00013e4d 	.word	0x00013e4d
    f418:	000136d2 	.word	0x000136d2
    f41c:	00013e6e 	.word	0x00013e6e

0000f420 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    f420:	4802      	ldr	r0, [pc, #8]	; (f42c <z_bss_zero+0xc>)
    f422:	4a03      	ldr	r2, [pc, #12]	; (f430 <z_bss_zero+0x10>)
    f424:	2100      	movs	r1, #0
    f426:	1a12      	subs	r2, r2, r0
    f428:	f002 bb3d 	b.w	11aa6 <memset>
    f42c:	200003c8 	.word	0x200003c8
    f430:	20001f18 	.word	0x20001f18

0000f434 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    f434:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    f436:	4b0a      	ldr	r3, [pc, #40]	; (f460 <bg_thread_main+0x2c>)
    f438:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f43a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    f43c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f43e:	f7ff ff45 	bl	f2cc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    f442:	f001 fa67 	bl	10914 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    f446:	2003      	movs	r0, #3
    f448:	f7ff ff40 	bl	f2cc <z_sys_init_run_level>

	z_init_static_threads();
    f44c:	f000 f958 	bl	f700 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    f450:	f7fa fada 	bl	9a08 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    f454:	4a03      	ldr	r2, [pc, #12]	; (f464 <bg_thread_main+0x30>)
    f456:	7b13      	ldrb	r3, [r2, #12]
    f458:	f023 0301 	bic.w	r3, r3, #1
    f45c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    f45e:	bd08      	pop	{r3, pc}
    f460:	20001f14 	.word	0x20001f14
    f464:	20001238 	.word	0x20001238

0000f468 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    f468:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    f46c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    f46e:	f7fa ffe5 	bl	a43c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    f472:	f8df 9100 	ldr.w	r9, [pc, #256]	; f574 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    f476:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    f47a:	4d36      	ldr	r5, [pc, #216]	; (f554 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    f47c:	4e36      	ldr	r6, [pc, #216]	; (f558 <z_cstart+0xf0>)
    f47e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f480:	f8df a0f4 	ldr.w	sl, [pc, #244]	; f578 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
    f484:	4f35      	ldr	r7, [pc, #212]	; (f55c <z_cstart+0xf4>)
    f486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f48a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f48c:	23e0      	movs	r3, #224	; 0xe0
    f48e:	2400      	movs	r4, #0
    f490:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    f494:	2320      	movs	r3, #32
    f496:	77eb      	strb	r3, [r5, #31]
    f498:	762c      	strb	r4, [r5, #24]
    f49a:	766c      	strb	r4, [r5, #25]
    f49c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    f49e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f4a0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    f4a4:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    f4a6:	f7fc fcb7 	bl	be18 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    f4aa:	f7fc f9d1 	bl	b850 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    f4ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f4b2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    f4b4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    f4b6:	f7fc fdcf 	bl	c058 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    f4ba:	4d29      	ldr	r5, [pc, #164]	; (f560 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f4bc:	f7fc fd22 	bl	bf04 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    f4c0:	f240 1301 	movw	r3, #257	; 0x101
    f4c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    f4c8:	ab06      	add	r3, sp, #24
    f4ca:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    f4cc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    f4d0:	f002 fd79 	bl	11fc6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    f4d4:	4620      	mov	r0, r4
    f4d6:	f7ff fef9 	bl	f2cc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    f4da:	2001      	movs	r0, #1
    f4dc:	f7ff fef6 	bl	f2cc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f4e0:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    f4e4:	f000 fe44 	bl	10170 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f4e8:	4b1e      	ldr	r3, [pc, #120]	; (f564 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
    f4ea:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f4ec:	491e      	ldr	r1, [pc, #120]	; (f568 <z_cstart+0x100>)
    f4ee:	9305      	str	r3, [sp, #20]
    f4f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f4f4:	4653      	mov	r3, sl
    f4f6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    f4fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    f4fe:	9400      	str	r4, [sp, #0]
    f500:	4630      	mov	r0, r6
    f502:	f000 f89f 	bl	f644 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f506:	7b73      	ldrb	r3, [r6, #13]
    f508:	4680      	mov	r8, r0
    f50a:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    f50e:	4630      	mov	r0, r6
    f510:	7373      	strb	r3, [r6, #13]
    f512:	f002 ff9d 	bl	12450 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    f516:	230f      	movs	r3, #15
    f518:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f51c:	4913      	ldr	r1, [pc, #76]	; (f56c <z_cstart+0x104>)
    f51e:	4b14      	ldr	r3, [pc, #80]	; (f570 <z_cstart+0x108>)
    f520:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f524:	e9cd b404 	strd	fp, r4, [sp, #16]
    f528:	e9cd 5400 	strd	r5, r4, [sp]
    f52c:	4638      	mov	r0, r7
    f52e:	f000 f889 	bl	f644 <z_setup_new_thread>
    f532:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    f534:	60ef      	str	r7, [r5, #12]
    f536:	f023 0304 	bic.w	r3, r3, #4
    f53a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    f53c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    f540:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    f544:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    f546:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    f54a:	4652      	mov	r2, sl
    f54c:	4641      	mov	r1, r8
    f54e:	4630      	mov	r0, r6
    f550:	f7fc f968 	bl	b824 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f554:	e000ed00 	.word	0xe000ed00
    f558:	20001238 	.word	0x20001238
    f55c:	200011b8 	.word	0x200011b8
    f560:	20001628 	.word	0x20001628
    f564:	00013ed0 	.word	0x00013ed0
    f568:	200034c0 	.word	0x200034c0
    f56c:	200038e0 	.word	0x200038e0
    f570:	0000f7bd 	.word	0x0000f7bd
    f574:	20004260 	.word	0x20004260
    f578:	0000f435 	.word	0x0000f435

0000f57c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    f57c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    f57e:	4c06      	ldr	r4, [pc, #24]	; (f598 <statics_init+0x1c>)
    f580:	4d06      	ldr	r5, [pc, #24]	; (f59c <statics_init+0x20>)
    f582:	42ac      	cmp	r4, r5
    f584:	d301      	bcc.n	f58a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    f586:	2000      	movs	r0, #0
    f588:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f58a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    f58e:	4620      	mov	r0, r4
    f590:	f002 fd24 	bl	11fdc <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    f594:	3414      	adds	r4, #20
    f596:	e7f4      	b.n	f582 <statics_init+0x6>
    f598:	200002da 	.word	0x200002da
    f59c:	200002da 	.word	0x200002da

0000f5a0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    f5a0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f5a2:	4b0e      	ldr	r3, [pc, #56]	; (f5dc <init_mem_slab_module+0x3c>)
    f5a4:	4c0e      	ldr	r4, [pc, #56]	; (f5e0 <init_mem_slab_module+0x40>)
    f5a6:	42a3      	cmp	r3, r4
    f5a8:	d301      	bcc.n	f5ae <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    f5aa:	2000      	movs	r0, #0
	return rc;
}
    f5ac:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    f5ae:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    f5b2:	ea41 0200 	orr.w	r2, r1, r0
    f5b6:	f012 0203 	ands.w	r2, r2, #3
    f5ba:	d10b      	bne.n	f5d4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    f5bc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    f5be:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    f5c0:	42aa      	cmp	r2, r5
    f5c2:	d101      	bne.n	f5c8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f5c4:	331c      	adds	r3, #28
    f5c6:	e7ee      	b.n	f5a6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    f5c8:	695e      	ldr	r6, [r3, #20]
    f5ca:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    f5cc:	3201      	adds	r2, #1
		slab->free_list = p;
    f5ce:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    f5d0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    f5d2:	e7f5      	b.n	f5c0 <init_mem_slab_module+0x20>
		return -EINVAL;
    f5d4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    f5d8:	e7e8      	b.n	f5ac <init_mem_slab_module+0xc>
    f5da:	bf00      	nop
    f5dc:	200002da 	.word	0x200002da
    f5e0:	200002da 	.word	0x200002da

0000f5e4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    f5e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    f5e6:	460c      	mov	r4, r1
    f5e8:	4616      	mov	r6, r2
    f5ea:	461f      	mov	r7, r3
	__asm__ volatile(
    f5ec:	f04f 0340 	mov.w	r3, #64	; 0x40
    f5f0:	f3ef 8111 	mrs	r1, BASEPRI
    f5f4:	f383 8811 	msr	BASEPRI, r3
    f5f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    f5fc:	6943      	ldr	r3, [r0, #20]
    f5fe:	b15b      	cbz	r3, f618 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    f600:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    f602:	681b      	ldr	r3, [r3, #0]
    f604:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    f606:	6983      	ldr	r3, [r0, #24]
    f608:	3301      	adds	r3, #1
    f60a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    f60c:	2000      	movs	r0, #0
	__asm__ volatile(
    f60e:	f381 8811 	msr	BASEPRI, r1
    f612:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    f616:	e011      	b.n	f63c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    f618:	ea56 0207 	orrs.w	r2, r6, r7
    f61c:	d103      	bne.n	f626 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    f61e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    f620:	f06f 000b 	mvn.w	r0, #11
    f624:	e7f3      	b.n	f60e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    f626:	4602      	mov	r2, r0
    f628:	e9cd 6700 	strd	r6, r7, [sp]
    f62c:	3008      	adds	r0, #8
    f62e:	f000 fc1b 	bl	fe68 <z_pend_curr>
		if (result == 0) {
    f632:	b918      	cbnz	r0, f63c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    f634:	4b02      	ldr	r3, [pc, #8]	; (f640 <k_mem_slab_alloc+0x5c>)
    f636:	689b      	ldr	r3, [r3, #8]
    f638:	695b      	ldr	r3, [r3, #20]
    f63a:	6023      	str	r3, [r4, #0]
}
    f63c:	b002      	add	sp, #8
    f63e:	bdd0      	pop	{r4, r6, r7, pc}
    f640:	20001628 	.word	0x20001628

0000f644 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    f648:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    f64a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    f64c:	2604      	movs	r6, #4
    f64e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    f650:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f652:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f654:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    f658:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f65a:	1dd6      	adds	r6, r2, #7
    f65c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    f662:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f664:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    f668:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    f66a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    f66e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    f672:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    f674:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    f676:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f678:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f67c:	9202      	str	r2, [sp, #8]
    f67e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f680:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    f682:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f686:	9200      	str	r2, [sp, #0]
    f688:	4642      	mov	r2, r8
{
    f68a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f68c:	f7fc f894 	bl	b7b8 <arch_new_thread>
	if (!_current) {
    f690:	4b04      	ldr	r3, [pc, #16]	; (f6a4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    f692:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    f694:	689b      	ldr	r3, [r3, #8]
    f696:	b103      	cbz	r3, f69a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    f698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    f69a:	6763      	str	r3, [r4, #116]	; 0x74
}
    f69c:	4640      	mov	r0, r8
    f69e:	b004      	add	sp, #16
    f6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f6a4:	20001628 	.word	0x20001628

0000f6a8 <z_impl_k_thread_create>:
{
    f6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6aa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f6ac:	2500      	movs	r5, #0
    f6ae:	9505      	str	r5, [sp, #20]
    f6b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f6b2:	9504      	str	r5, [sp, #16]
    f6b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f6b6:	9503      	str	r5, [sp, #12]
    f6b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f6ba:	9502      	str	r5, [sp, #8]
{
    f6bc:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f6c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f6c2:	9501      	str	r5, [sp, #4]
    f6c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f6c6:	9500      	str	r5, [sp, #0]
{
    f6c8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f6ca:	f7ff ffbb 	bl	f644 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    f6ce:	1c7b      	adds	r3, r7, #1
    f6d0:	bf08      	it	eq
    f6d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    f6d6:	d005      	beq.n	f6e4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f6d8:	ea56 0307 	orrs.w	r3, r6, r7
    f6dc:	d105      	bne.n	f6ea <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    f6de:	4620      	mov	r0, r4
    f6e0:	f000 fcdc 	bl	1009c <z_sched_start>
}
    f6e4:	4620      	mov	r0, r4
    f6e6:	b007      	add	sp, #28
    f6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f6ea:	4904      	ldr	r1, [pc, #16]	; (f6fc <z_impl_k_thread_create+0x54>)
    f6ec:	4632      	mov	r2, r6
    f6ee:	463b      	mov	r3, r7
    f6f0:	f104 0018 	add.w	r0, r4, #24
    f6f4:	f000 fed4 	bl	104a0 <z_add_timeout>
    f6f8:	e7f4      	b.n	f6e4 <z_impl_k_thread_create+0x3c>
    f6fa:	bf00      	nop
    f6fc:	00012471 	.word	0x00012471

0000f700 <z_init_static_threads>:
{
    f700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    f704:	4e2a      	ldr	r6, [pc, #168]	; (f7b0 <z_init_static_threads+0xb0>)
    f706:	4d2b      	ldr	r5, [pc, #172]	; (f7b4 <z_init_static_threads+0xb4>)
{
    f708:	b086      	sub	sp, #24
    f70a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    f70c:	42b5      	cmp	r5, r6
    f70e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    f712:	d310      	bcc.n	f736 <z_init_static_threads+0x36>
	k_sched_lock();
    f714:	f000 fb36 	bl	fd84 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    f718:	4c26      	ldr	r4, [pc, #152]	; (f7b4 <z_init_static_threads+0xb4>)
    f71a:	f8df a09c 	ldr.w	sl, [pc, #156]	; f7b8 <z_init_static_threads+0xb8>
		} else {
			return (t * to_hz + off) / from_hz;
    f71e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    f722:	f240 36e7 	movw	r6, #999	; 0x3e7
    f726:	2700      	movs	r7, #0
    f728:	4544      	cmp	r4, r8
    f72a:	d321      	bcc.n	f770 <z_init_static_threads+0x70>
}
    f72c:	b006      	add	sp, #24
    f72e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    f732:	f000 bbdf 	b.w	fef4 <k_sched_unlock>
		z_setup_new_thread(
    f736:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f73a:	9305      	str	r3, [sp, #20]
    f73c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    f740:	9304      	str	r3, [sp, #16]
    f742:	f854 3c14 	ldr.w	r3, [r4, #-20]
    f746:	9303      	str	r3, [sp, #12]
    f748:	f854 3c18 	ldr.w	r3, [r4, #-24]
    f74c:	9302      	str	r3, [sp, #8]
    f74e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    f752:	9301      	str	r3, [sp, #4]
    f754:	f854 3c20 	ldr.w	r3, [r4, #-32]
    f758:	9300      	str	r3, [sp, #0]
    f75a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    f75e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    f762:	f7ff ff6f 	bl	f644 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    f766:	f854 3c30 	ldr.w	r3, [r4, #-48]
    f76a:	655d      	str	r5, [r3, #84]	; 0x54
    f76c:	4625      	mov	r5, r4
    f76e:	e7cd      	b.n	f70c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f770:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f772:	1c5a      	adds	r2, r3, #1
    f774:	d00d      	beq.n	f792 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    f776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f77a:	4630      	mov	r0, r6
    f77c:	4639      	mov	r1, r7
    f77e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f782:	42b9      	cmp	r1, r7
    f784:	bf08      	it	eq
    f786:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    f788:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f78a:	d104      	bne.n	f796 <z_init_static_threads+0x96>
	z_sched_start(thread);
    f78c:	4628      	mov	r0, r5
    f78e:	f000 fc85 	bl	1009c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    f792:	3430      	adds	r4, #48	; 0x30
    f794:	e7c8      	b.n	f728 <z_init_static_threads+0x28>
    f796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f79a:	2300      	movs	r3, #0
    f79c:	f7f0 fc9e 	bl	dc <__aeabi_uldivmod>
    f7a0:	4602      	mov	r2, r0
    f7a2:	460b      	mov	r3, r1
    f7a4:	f105 0018 	add.w	r0, r5, #24
    f7a8:	4651      	mov	r1, sl
    f7aa:	f000 fe79 	bl	104a0 <z_add_timeout>
    f7ae:	e7f0      	b.n	f792 <z_init_static_threads+0x92>
    f7b0:	200002da 	.word	0x200002da
    f7b4:	200002da 	.word	0x200002da
    f7b8:	00012471 	.word	0x00012471

0000f7bc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    f7bc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    f7be:	4c09      	ldr	r4, [pc, #36]	; (f7e4 <idle+0x28>)
	__asm__ volatile(
    f7c0:	f04f 0240 	mov.w	r2, #64	; 0x40
    f7c4:	f3ef 8311 	mrs	r3, BASEPRI
    f7c8:	f382 8811 	msr	BASEPRI, r2
    f7cc:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    f7d0:	f002 fee0 	bl	12594 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    f7d4:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    f7d6:	f7fb fc21 	bl	b01c <pm_system_suspend>
    f7da:	2800      	cmp	r0, #0
    f7dc:	d1f0      	bne.n	f7c0 <idle+0x4>
	arch_cpu_idle();
    f7de:	f7fc f83d 	bl	b85c <arch_cpu_idle>
}
    f7e2:	e7ed      	b.n	f7c0 <idle+0x4>
    f7e4:	20001628 	.word	0x20001628

0000f7e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f7e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f7ec:	4604      	mov	r4, r0
    f7ee:	4616      	mov	r6, r2
    f7f0:	461f      	mov	r7, r3
    f7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
    f7f6:	f3ef 8811 	mrs	r8, BASEPRI
    f7fa:	f383 8811 	msr	BASEPRI, r3
    f7fe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f802:	68c3      	ldr	r3, [r0, #12]
    f804:	4a35      	ldr	r2, [pc, #212]	; (f8dc <z_impl_k_mutex_lock+0xf4>)
    f806:	b16b      	cbz	r3, f824 <z_impl_k_mutex_lock+0x3c>
    f808:	6880      	ldr	r0, [r0, #8]
    f80a:	6891      	ldr	r1, [r2, #8]
    f80c:	4288      	cmp	r0, r1
    f80e:	d019      	beq.n	f844 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f810:	ea56 0307 	orrs.w	r3, r6, r7
    f814:	d118      	bne.n	f848 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    f816:	f388 8811 	msr	BASEPRI, r8
    f81a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    f81e:	f06f 000f 	mvn.w	r0, #15
    f822:	e00c      	b.n	f83e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    f824:	6891      	ldr	r1, [r2, #8]
    f826:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f82a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    f82c:	3301      	adds	r3, #1
    f82e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    f830:	6893      	ldr	r3, [r2, #8]
    f832:	60a3      	str	r3, [r4, #8]
    f834:	f388 8811 	msr	BASEPRI, r8
    f838:	f3bf 8f6f 	isb	sy
		return 0;
    f83c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    f83e:	b002      	add	sp, #8
    f840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    f844:	6921      	ldr	r1, [r4, #16]
    f846:	e7f0      	b.n	f82a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f848:	f991 100e 	ldrsb.w	r1, [r1, #14]
    f84c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    f850:	4299      	cmp	r1, r3
    f852:	bfa8      	it	ge
    f854:	4619      	movge	r1, r3
    f856:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    f85a:	4291      	cmp	r1, r2
    f85c:	bfb8      	it	lt
    f85e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f860:	428b      	cmp	r3, r1
    f862:	dd2f      	ble.n	f8c4 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    f864:	f000 fc38 	bl	100d8 <z_set_prio>
    f868:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f86a:	e9cd 6700 	strd	r6, r7, [sp]
    f86e:	481c      	ldr	r0, [pc, #112]	; (f8e0 <z_impl_k_mutex_lock+0xf8>)
    f870:	4622      	mov	r2, r4
    f872:	4641      	mov	r1, r8
    f874:	f000 faf8 	bl	fe68 <z_pend_curr>
	if (got_mutex == 0) {
    f878:	2800      	cmp	r0, #0
    f87a:	d0e0      	beq.n	f83e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    f87c:	f04f 0340 	mov.w	r3, #64	; 0x40
    f880:	f3ef 8611 	mrs	r6, BASEPRI
    f884:	f383 8811 	msr	BASEPRI, r3
    f888:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f88c:	6823      	ldr	r3, [r4, #0]
    f88e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f890:	429c      	cmp	r4, r3
    f892:	d00a      	beq.n	f8aa <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f894:	b14b      	cbz	r3, f8aa <z_impl_k_mutex_lock+0xc2>
    f896:	f993 300e 	ldrsb.w	r3, [r3, #14]
    f89a:	4299      	cmp	r1, r3
    f89c:	bfa8      	it	ge
    f89e:	4619      	movge	r1, r3
    f8a0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    f8a4:	4299      	cmp	r1, r3
    f8a6:	bfb8      	it	lt
    f8a8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f8aa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    f8ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f8b0:	4299      	cmp	r1, r3
    f8b2:	d109      	bne.n	f8c8 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    f8b4:	b16d      	cbz	r5, f8d2 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    f8b6:	480a      	ldr	r0, [pc, #40]	; (f8e0 <z_impl_k_mutex_lock+0xf8>)
    f8b8:	4631      	mov	r1, r6
    f8ba:	f000 fa51 	bl	fd60 <z_reschedule>
	return -EAGAIN;
    f8be:	f06f 000a 	mvn.w	r0, #10
    f8c2:	e7bc      	b.n	f83e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    f8c4:	2500      	movs	r5, #0
    f8c6:	e7d0      	b.n	f86a <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    f8c8:	f000 fc06 	bl	100d8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f8cc:	2800      	cmp	r0, #0
    f8ce:	d1f2      	bne.n	f8b6 <z_impl_k_mutex_lock+0xce>
    f8d0:	e7f0      	b.n	f8b4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    f8d2:	f386 8811 	msr	BASEPRI, r6
    f8d6:	f3bf 8f6f 	isb	sy
    f8da:	e7f0      	b.n	f8be <z_impl_k_mutex_lock+0xd6>
    f8dc:	20001628 	.word	0x20001628
    f8e0:	20001f15 	.word	0x20001f15

0000f8e4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    f8e4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    f8e6:	6883      	ldr	r3, [r0, #8]
{
    f8e8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	d036      	beq.n	f95c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f8ee:	4a1e      	ldr	r2, [pc, #120]	; (f968 <z_impl_k_mutex_unlock+0x84>)
    f8f0:	6892      	ldr	r2, [r2, #8]
    f8f2:	4293      	cmp	r3, r2
    f8f4:	d135      	bne.n	f962 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    f8f6:	7bda      	ldrb	r2, [r3, #15]
    f8f8:	3a01      	subs	r2, #1
    f8fa:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    f8fc:	68c3      	ldr	r3, [r0, #12]
    f8fe:	2b01      	cmp	r3, #1
    f900:	d905      	bls.n	f90e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    f902:	3b01      	subs	r3, #1
    f904:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    f906:	f000 faf5 	bl	fef4 <k_sched_unlock>

	return 0;
    f90a:	2000      	movs	r0, #0
}
    f90c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f90e:	f04f 0340 	mov.w	r3, #64	; 0x40
    f912:	f3ef 8511 	mrs	r5, BASEPRI
    f916:	f383 8811 	msr	BASEPRI, r3
    f91a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f91e:	6901      	ldr	r1, [r0, #16]
    f920:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    f922:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f926:	4299      	cmp	r1, r3
    f928:	d001      	beq.n	f92e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    f92a:	f000 fbd5 	bl	100d8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f92e:	4620      	mov	r0, r4
    f930:	f002 fdd5 	bl	124de <z_unpend_first_thread>
	mutex->owner = new_owner;
    f934:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f936:	b158      	cbz	r0, f950 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    f938:	f990 200e 	ldrsb.w	r2, [r0, #14]
    f93c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f93e:	2200      	movs	r2, #0
    f940:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    f942:	f002 fd85 	bl	12450 <z_ready_thread>
		z_reschedule(&lock, key);
    f946:	4809      	ldr	r0, [pc, #36]	; (f96c <z_impl_k_mutex_unlock+0x88>)
    f948:	4629      	mov	r1, r5
    f94a:	f000 fa09 	bl	fd60 <z_reschedule>
    f94e:	e7da      	b.n	f906 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    f950:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    f952:	f385 8811 	msr	BASEPRI, r5
    f956:	f3bf 8f6f 	isb	sy
    f95a:	e7d4      	b.n	f906 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    f95c:	f06f 0015 	mvn.w	r0, #21
    f960:	e7d4      	b.n	f90c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    f962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f966:	e7d1      	b.n	f90c <z_impl_k_mutex_unlock+0x28>
    f968:	20001628 	.word	0x20001628
    f96c:	20001f15 	.word	0x20001f15

0000f970 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    f970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f972:	4616      	mov	r6, r2
    f974:	461f      	mov	r7, r3
	__asm__ volatile(
    f976:	f04f 0340 	mov.w	r3, #64	; 0x40
    f97a:	f3ef 8511 	mrs	r5, BASEPRI
    f97e:	f383 8811 	msr	BASEPRI, r3
    f982:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    f986:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    f988:	b19c      	cbz	r4, f9b2 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f98a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f98c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f98e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f992:	4294      	cmp	r4, r2
	list->head = node;
    f994:	6003      	str	r3, [r0, #0]
	list->tail = node;
    f996:	bf08      	it	eq
    f998:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    f99a:	2101      	movs	r1, #1
    f99c:	4620      	mov	r0, r4
    f99e:	f002 fc45 	bl	1222c <z_queue_node_peek>
    f9a2:	4604      	mov	r4, r0
	__asm__ volatile(
    f9a4:	f385 8811 	msr	BASEPRI, r5
    f9a8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    f9ac:	4620      	mov	r0, r4
    f9ae:	b003      	add	sp, #12
    f9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f9b2:	ea56 0307 	orrs.w	r3, r6, r7
    f9b6:	d0f5      	beq.n	f9a4 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f9b8:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    f9bc:	e9cd 6700 	strd	r6, r7, [sp]
    f9c0:	4629      	mov	r1, r5
    f9c2:	4610      	mov	r0, r2
    f9c4:	f000 fa50 	bl	fe68 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    f9c8:	2800      	cmp	r0, #0
    f9ca:	d1ef      	bne.n	f9ac <z_impl_k_queue_get+0x3c>
    f9cc:	4b01      	ldr	r3, [pc, #4]	; (f9d4 <z_impl_k_queue_get+0x64>)
    f9ce:	689b      	ldr	r3, [r3, #8]
    f9d0:	695c      	ldr	r4, [r3, #20]
    f9d2:	e7eb      	b.n	f9ac <z_impl_k_queue_get+0x3c>
    f9d4:	20001628 	.word	0x20001628

0000f9d8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f9d8:	b538      	push	{r3, r4, r5, lr}
    f9da:	4604      	mov	r4, r0
	__asm__ volatile(
    f9dc:	f04f 0340 	mov.w	r3, #64	; 0x40
    f9e0:	f3ef 8511 	mrs	r5, BASEPRI
    f9e4:	f383 8811 	msr	BASEPRI, r3
    f9e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    f9ec:	f002 fd77 	bl	124de <z_unpend_first_thread>

	if (thread != NULL) {
    f9f0:	b148      	cbz	r0, fa06 <z_impl_k_sem_give+0x2e>
    f9f2:	2200      	movs	r2, #0
    f9f4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f9f6:	f002 fd2b 	bl	12450 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f9fa:	4629      	mov	r1, r5
    f9fc:	4808      	ldr	r0, [pc, #32]	; (fa20 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    f9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    fa02:	f000 b9ad 	b.w	fd60 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    fa06:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    fa0a:	429a      	cmp	r2, r3
    fa0c:	bf18      	it	ne
    fa0e:	3301      	addne	r3, #1
    fa10:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    fa12:	2102      	movs	r1, #2
    fa14:	f104 0010 	add.w	r0, r4, #16
    fa18:	f002 ff75 	bl	12906 <z_handle_obj_poll_events>
}
    fa1c:	e7ed      	b.n	f9fa <z_impl_k_sem_give+0x22>
    fa1e:	bf00      	nop
    fa20:	20001f15 	.word	0x20001f15

0000fa24 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    fa24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fa26:	4614      	mov	r4, r2
    fa28:	461d      	mov	r5, r3
    fa2a:	f04f 0340 	mov.w	r3, #64	; 0x40
    fa2e:	f3ef 8111 	mrs	r1, BASEPRI
    fa32:	f383 8811 	msr	BASEPRI, r3
    fa36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    fa3a:	6883      	ldr	r3, [r0, #8]
    fa3c:	b143      	cbz	r3, fa50 <z_impl_k_sem_take+0x2c>
		sem->count--;
    fa3e:	3b01      	subs	r3, #1
    fa40:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    fa42:	f381 8811 	msr	BASEPRI, r1
    fa46:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    fa4a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    fa4c:	b003      	add	sp, #12
    fa4e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    fa50:	ea54 0305 	orrs.w	r3, r4, r5
    fa54:	d106      	bne.n	fa64 <z_impl_k_sem_take+0x40>
    fa56:	f381 8811 	msr	BASEPRI, r1
    fa5a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    fa5e:	f06f 000f 	mvn.w	r0, #15
    fa62:	e7f3      	b.n	fa4c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    fa64:	4602      	mov	r2, r0
    fa66:	e9cd 4500 	strd	r4, r5, [sp]
    fa6a:	4802      	ldr	r0, [pc, #8]	; (fa74 <z_impl_k_sem_take+0x50>)
    fa6c:	f000 f9fc 	bl	fe68 <z_pend_curr>
	return ret;
    fa70:	e7ec      	b.n	fa4c <z_impl_k_sem_take+0x28>
    fa72:	bf00      	nop
    fa74:	20001f15 	.word	0x20001f15

0000fa78 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    fa7c:	4e4b      	ldr	r6, [pc, #300]	; (fbac <work_queue_main+0x134>)
{
    fa7e:	b085      	sub	sp, #20
    fa80:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    fa82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    fa86:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    fa8a:	f04f 0340 	mov.w	r3, #64	; 0x40
    fa8e:	f3ef 8711 	mrs	r7, BASEPRI
    fa92:	f383 8811 	msr	BASEPRI, r3
    fa96:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    fa9a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    fa9e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    faa2:	b985      	cbnz	r5, fac6 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    faa4:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    faa8:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    faaa:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    faae:	d433      	bmi.n	fb18 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    fab0:	2300      	movs	r3, #0
    fab2:	e9cd 8900 	strd	r8, r9, [sp]
    fab6:	9302      	str	r3, [sp, #8]
    fab8:	f104 0288 	add.w	r2, r4, #136	; 0x88
    fabc:	4639      	mov	r1, r7
    fabe:	483c      	ldr	r0, [pc, #240]	; (fbb0 <work_queue_main+0x138>)
    fac0:	f000 fc72 	bl	103a8 <z_sched_wait>
			continue;
    fac4:	e7e1      	b.n	fa8a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fac6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    faca:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    facc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fad0:	4295      	cmp	r5, r2
    fad2:	d101      	bne.n	fad8 <work_queue_main+0x60>
	list->tail = node;
    fad4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    fad8:	f043 0302 	orr.w	r3, r3, #2
    fadc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    fae0:	68eb      	ldr	r3, [r5, #12]
    fae2:	f023 0304 	bic.w	r3, r3, #4
    fae6:	f043 0301 	orr.w	r3, r3, #1
    faea:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    faec:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    faee:	f387 8811 	msr	BASEPRI, r7
    faf2:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    faf6:	4628      	mov	r0, r5
    faf8:	4798      	blx	r3
	__asm__ volatile(
    fafa:	f04f 0340 	mov.w	r3, #64	; 0x40
    fafe:	f3ef 8b11 	mrs	fp, BASEPRI
    fb02:	f383 8811 	msr	BASEPRI, r3
    fb06:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    fb0a:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    fb0c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    fb0e:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    fb12:	d40b      	bmi.n	fb2c <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    fb14:	60ea      	str	r2, [r5, #12]
    fb16:	e00e      	b.n	fb36 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    fb18:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    fb1c:	2200      	movs	r2, #0
    fb1e:	2101      	movs	r1, #1
    fb20:	4628      	mov	r0, r5
    fb22:	f002 fd04 	bl	1252e <z_sched_wake>
    fb26:	2800      	cmp	r0, #0
    fb28:	d1f8      	bne.n	fb1c <work_queue_main+0xa4>
    fb2a:	e7c1      	b.n	fab0 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    fb2c:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    fb2e:	f023 0303 	bic.w	r3, r3, #3
    fb32:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    fb34:	b970      	cbnz	r0, fb54 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    fb36:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    fb3a:	f023 0302 	bic.w	r3, r3, #2
    fb3e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    fb42:	f38b 8811 	msr	BASEPRI, fp
    fb46:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    fb4a:	05d8      	lsls	r0, r3, #23
    fb4c:	d49d      	bmi.n	fa8a <work_queue_main+0x12>
	z_impl_k_yield();
    fb4e:	f000 fb1b 	bl	10188 <z_impl_k_yield>
}
    fb52:	e79a      	b.n	fa8a <work_queue_main+0x12>
	return node->next;
    fb54:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fb56:	f04f 0a00 	mov.w	sl, #0
    fb5a:	2f00      	cmp	r7, #0
    fb5c:	bf38      	it	cc
    fb5e:	2700      	movcc	r7, #0
	parent->next = child;
    fb60:	4653      	mov	r3, sl
		if (wc->work == work) {
    fb62:	6842      	ldr	r2, [r0, #4]
    fb64:	4295      	cmp	r5, r2
    fb66:	4601      	mov	r1, r0
    fb68:	d10e      	bne.n	fb88 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    fb6a:	6801      	ldr	r1, [r0, #0]
    fb6c:	f1ba 0f00 	cmp.w	sl, #0
    fb70:	d114      	bne.n	fb9c <work_queue_main+0x124>
    fb72:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    fb74:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    fb76:	4290      	cmp	r0, r2
    fb78:	d100      	bne.n	fb7c <work_queue_main+0x104>
	list->tail = node;
    fb7a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    fb7c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    fb80:	f7ff ff2a 	bl	f9d8 <z_impl_k_sem_give>
}
    fb84:	4651      	mov	r1, sl
    fb86:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    fb88:	2f00      	cmp	r7, #0
    fb8a:	d0d4      	beq.n	fb36 <work_queue_main+0xbe>
	return node->next;
    fb8c:	683a      	ldr	r2, [r7, #0]
    fb8e:	2a00      	cmp	r2, #0
    fb90:	bf38      	it	cc
    fb92:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fb94:	4638      	mov	r0, r7
    fb96:	468a      	mov	sl, r1
    fb98:	4617      	mov	r7, r2
    fb9a:	e7e2      	b.n	fb62 <work_queue_main+0xea>
	parent->next = child;
    fb9c:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    fba0:	6872      	ldr	r2, [r6, #4]
    fba2:	4290      	cmp	r0, r2
	list->tail = node;
    fba4:	bf08      	it	eq
    fba6:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    fbaa:	e7e7      	b.n	fb7c <work_queue_main+0x104>
    fbac:	20001658 	.word	0x20001658
    fbb0:	20001f15 	.word	0x20001f15

0000fbb4 <submit_to_queue_locked>:
{
    fbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    fbb6:	68c3      	ldr	r3, [r0, #12]
    fbb8:	079a      	lsls	r2, r3, #30
{
    fbba:	4604      	mov	r4, r0
    fbbc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    fbbe:	f3c3 0540 	ubfx	r5, r3, #1, #1
    fbc2:	d41f      	bmi.n	fc04 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    fbc4:	075f      	lsls	r7, r3, #29
    fbc6:	d41f      	bmi.n	fc08 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    fbc8:	680a      	ldr	r2, [r1, #0]
    fbca:	b90a      	cbnz	r2, fbd0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    fbcc:	6882      	ldr	r2, [r0, #8]
    fbce:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    fbd0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    fbd2:	bf44      	itt	mi
    fbd4:	68a3      	ldrmi	r3, [r4, #8]
    fbd6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    fbd8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    fbda:	bf4c      	ite	mi
    fbdc:	2502      	movmi	r5, #2
		ret = 1;
    fbde:	2501      	movpl	r5, #1
	if (queue == NULL) {
    fbe0:	b37f      	cbz	r7, fc42 <__kernel_ram_size+0xa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    fbe2:	4b1b      	ldr	r3, [pc, #108]	; (fc50 <__kernel_ram_size+0x18>)
    fbe4:	689b      	ldr	r3, [r3, #8]
    fbe6:	42bb      	cmp	r3, r7
    fbe8:	d111      	bne.n	fc0e <submit_to_queue_locked+0x5a>
    fbea:	f002 faa7 	bl	1213c <k_is_in_isr>
    fbee:	f080 0001 	eor.w	r0, r0, #1
    fbf2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    fbf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    fbf8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    fbfa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    fbfe:	d523      	bpl.n	fc48 <__kernel_ram_size+0x10>
	} else if (draining && !chained) {
    fc00:	b13a      	cbz	r2, fc12 <submit_to_queue_locked+0x5e>
    fc02:	b940      	cbnz	r0, fc16 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    fc04:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    fc08:	2300      	movs	r3, #0
    fc0a:	6033      	str	r3, [r6, #0]
	return ret;
    fc0c:	e013      	b.n	fc36 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    fc0e:	2000      	movs	r0, #0
    fc10:	e7f0      	b.n	fbf4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    fc12:	071b      	lsls	r3, r3, #28
    fc14:	d4f6      	bmi.n	fc04 <submit_to_queue_locked+0x50>
	parent->next = child;
    fc16:	2300      	movs	r3, #0
    fc18:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    fc1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    fc1e:	b963      	cbnz	r3, fc3a <__kernel_ram_size+0x2>
	list->head = node;
    fc20:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    fc24:	4638      	mov	r0, r7
    fc26:	f002 fb63 	bl	122f0 <notify_queue_locked>
	*flagp |= BIT(bit);
    fc2a:	68e3      	ldr	r3, [r4, #12]
    fc2c:	f043 0304 	orr.w	r3, r3, #4
    fc30:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    fc32:	6833      	ldr	r3, [r6, #0]
    fc34:	60a3      	str	r3, [r4, #8]
}
    fc36:	4628      	mov	r0, r5
    fc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    fc3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fc3c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    fc40:	e7f0      	b.n	fc24 <submit_to_queue_locked+0x70>
		return -EINVAL;
    fc42:	f06f 0515 	mvn.w	r5, #21
    fc46:	e7df      	b.n	fc08 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    fc48:	f06f 0512 	mvn.w	r5, #18
    fc4c:	e7dc      	b.n	fc08 <submit_to_queue_locked+0x54>
    fc4e:	bf00      	nop
    fc50:	20001628 	.word	0x20001628

0000fc54 <k_work_submit>:
{
    fc54:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    fc56:	4801      	ldr	r0, [pc, #4]	; (fc5c <k_work_submit+0x8>)
    fc58:	f002 bb51 	b.w	122fe <k_work_submit_to_queue>
    fc5c:	200012c0 	.word	0x200012c0

0000fc60 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    fc60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc62:	b089      	sub	sp, #36	; 0x24
    fc64:	4604      	mov	r4, r0
	list->head = NULL;
    fc66:	2000      	movs	r0, #0
	list->tail = NULL;
    fc68:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    fc6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    fc6e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    fc72:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    fc76:	f104 0090 	add.w	r0, r4, #144	; 0x90
    fc7a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    fc7e:	b31d      	cbz	r5, fcc8 <k_work_queue_start+0x68>
    fc80:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    fc82:	2800      	cmp	r0, #0
    fc84:	f240 1001 	movw	r0, #257	; 0x101
    fc88:	bf08      	it	eq
    fc8a:	2001      	moveq	r0, #1
	*flagp = flags;
    fc8c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fc90:	2000      	movs	r0, #0
    fc92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    fc96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    fc9a:	e9cd 3003 	strd	r3, r0, [sp, #12]
    fc9e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    fca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    fca6:	4b09      	ldr	r3, [pc, #36]	; (fccc <k_work_queue_start+0x6c>)
    fca8:	9400      	str	r4, [sp, #0]
    fcaa:	4620      	mov	r0, r4
    fcac:	f7ff fcfc 	bl	f6a8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    fcb0:	b125      	cbz	r5, fcbc <k_work_queue_start+0x5c>
    fcb2:	6829      	ldr	r1, [r5, #0]
    fcb4:	b111      	cbz	r1, fcbc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    fcb6:	4620      	mov	r0, r4
    fcb8:	f002 fa46 	bl	12148 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    fcbc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    fcbe:	b009      	add	sp, #36	; 0x24
    fcc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    fcc4:	f002 ba45 	b.w	12152 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    fcc8:	2001      	movs	r0, #1
    fcca:	e7df      	b.n	fc8c <k_work_queue_start+0x2c>
    fccc:	0000fa79 	.word	0x0000fa79

0000fcd0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    fcd0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    fcd2:	4c08      	ldr	r4, [pc, #32]	; (fcf4 <z_reset_time_slice+0x24>)
    fcd4:	6823      	ldr	r3, [r4, #0]
    fcd6:	b15b      	cbz	r3, fcf0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    fcd8:	f7fb fc98 	bl	b60c <sys_clock_elapsed>
    fcdc:	4603      	mov	r3, r0
    fcde:	6820      	ldr	r0, [r4, #0]
    fce0:	4a05      	ldr	r2, [pc, #20]	; (fcf8 <z_reset_time_slice+0x28>)
    fce2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    fce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    fce8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    fcea:	2100      	movs	r1, #0
    fcec:	f002 bc62 	b.w	125b4 <z_set_timeout_expiry>
}
    fcf0:	bd10      	pop	{r4, pc}
    fcf2:	bf00      	nop
    fcf4:	20001668 	.word	0x20001668
    fcf8:	20001628 	.word	0x20001628

0000fcfc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    fcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcfe:	4604      	mov	r4, r0
    fd00:	460d      	mov	r5, r1
	__asm__ volatile(
    fd02:	f04f 0340 	mov.w	r3, #64	; 0x40
    fd06:	f3ef 8611 	mrs	r6, BASEPRI
    fd0a:	f383 8811 	msr	BASEPRI, r3
    fd0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    fd12:	4b10      	ldr	r3, [pc, #64]	; (fd54 <k_sched_time_slice_set+0x58>)
    fd14:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    fd16:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    fd1a:	f240 30e7 	movw	r0, #999	; 0x3e7
    fd1e:	2100      	movs	r1, #0
    fd20:	611a      	str	r2, [r3, #16]
    fd22:	fbe7 0104 	umlal	r0, r1, r7, r4
    fd26:	2300      	movs	r3, #0
    fd28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fd2c:	f7f0 f9d6 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    fd30:	2c00      	cmp	r4, #0
    fd32:	4b09      	ldr	r3, [pc, #36]	; (fd58 <k_sched_time_slice_set+0x5c>)
    fd34:	dc09      	bgt.n	fd4a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    fd36:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    fd38:	4b08      	ldr	r3, [pc, #32]	; (fd5c <k_sched_time_slice_set+0x60>)
    fd3a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    fd3c:	f7ff ffc8 	bl	fcd0 <z_reset_time_slice>
	__asm__ volatile(
    fd40:	f386 8811 	msr	BASEPRI, r6
    fd44:	f3bf 8f6f 	isb	sy
	}
}
    fd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    fd4a:	2802      	cmp	r0, #2
    fd4c:	bfb8      	it	lt
    fd4e:	2002      	movlt	r0, #2
    fd50:	e7f1      	b.n	fd36 <k_sched_time_slice_set+0x3a>
    fd52:	bf00      	nop
    fd54:	20001628 	.word	0x20001628
    fd58:	20001668 	.word	0x20001668
    fd5c:	20001664 	.word	0x20001664

0000fd60 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fd60:	b949      	cbnz	r1, fd76 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fd62:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    fd66:	b930      	cbnz	r0, fd76 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    fd68:	4b05      	ldr	r3, [pc, #20]	; (fd80 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    fd6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fd6c:	689b      	ldr	r3, [r3, #8]
    fd6e:	429a      	cmp	r2, r3
    fd70:	d001      	beq.n	fd76 <z_reschedule+0x16>
	ret = arch_swap(key);
    fd72:	f7fb bc73 	b.w	b65c <arch_swap>
    fd76:	f381 8811 	msr	BASEPRI, r1
    fd7a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    fd7e:	4770      	bx	lr
    fd80:	20001628 	.word	0x20001628

0000fd84 <k_sched_lock>:
	__asm__ volatile(
    fd84:	f04f 0340 	mov.w	r3, #64	; 0x40
    fd88:	f3ef 8111 	mrs	r1, BASEPRI
    fd8c:	f383 8811 	msr	BASEPRI, r3
    fd90:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    fd94:	4b04      	ldr	r3, [pc, #16]	; (fda8 <k_sched_lock+0x24>)
    fd96:	689a      	ldr	r2, [r3, #8]
    fd98:	7bd3      	ldrb	r3, [r2, #15]
    fd9a:	3b01      	subs	r3, #1
    fd9c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    fd9e:	f381 8811 	msr	BASEPRI, r1
    fda2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    fda6:	4770      	bx	lr
    fda8:	20001628 	.word	0x20001628

0000fdac <update_cache>:
{
    fdac:	b538      	push	{r3, r4, r5, lr}
    fdae:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    fdb0:	480c      	ldr	r0, [pc, #48]	; (fde4 <update_cache+0x38>)
    fdb2:	4d0d      	ldr	r5, [pc, #52]	; (fde8 <update_cache+0x3c>)
    fdb4:	f002 fb15 	bl	123e2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    fdb8:	4604      	mov	r4, r0
    fdba:	b900      	cbnz	r0, fdbe <update_cache+0x12>
    fdbc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    fdbe:	68ab      	ldr	r3, [r5, #8]
    fdc0:	b94a      	cbnz	r2, fdd6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    fdc2:	7b5a      	ldrb	r2, [r3, #13]
    fdc4:	06d2      	lsls	r2, r2, #27
    fdc6:	d106      	bne.n	fdd6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    fdc8:	69a2      	ldr	r2, [r4, #24]
    fdca:	b922      	cbnz	r2, fdd6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    fdcc:	89da      	ldrh	r2, [r3, #14]
    fdce:	2a7f      	cmp	r2, #127	; 0x7f
    fdd0:	d901      	bls.n	fdd6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    fdd2:	626b      	str	r3, [r5, #36]	; 0x24
}
    fdd4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    fdd6:	429c      	cmp	r4, r3
    fdd8:	d001      	beq.n	fdde <update_cache+0x32>
			z_reset_time_slice();
    fdda:	f7ff ff79 	bl	fcd0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    fdde:	626c      	str	r4, [r5, #36]	; 0x24
}
    fde0:	e7f8      	b.n	fdd4 <update_cache+0x28>
    fde2:	bf00      	nop
    fde4:	20001650 	.word	0x20001650
    fde8:	20001628 	.word	0x20001628

0000fdec <unready_thread>:
{
    fdec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    fdee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    fdf2:	7b43      	ldrb	r3, [r0, #13]
    fdf4:	2a00      	cmp	r2, #0
{
    fdf6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    fdf8:	da04      	bge.n	fe04 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fdfe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    fe00:	f002 fa9a 	bl	12338 <sys_dlist_remove>
	update_cache(thread == _current);
    fe04:	4b04      	ldr	r3, [pc, #16]	; (fe18 <unready_thread+0x2c>)
    fe06:	6898      	ldr	r0, [r3, #8]
    fe08:	1a43      	subs	r3, r0, r1
    fe0a:	4258      	negs	r0, r3
    fe0c:	4158      	adcs	r0, r3
}
    fe0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    fe12:	f7ff bfcb 	b.w	fdac <update_cache>
    fe16:	bf00      	nop
    fe18:	20001628 	.word	0x20001628

0000fe1c <pend>:
{
    fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe20:	4606      	mov	r6, r0
    fe22:	4614      	mov	r4, r2
    fe24:	461d      	mov	r5, r3
	__asm__ volatile(
    fe26:	f04f 0340 	mov.w	r3, #64	; 0x40
    fe2a:	f3ef 8711 	mrs	r7, BASEPRI
    fe2e:	f383 8811 	msr	BASEPRI, r3
    fe32:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    fe36:	f002 fade 	bl	123f6 <add_to_waitq_locked>
	__asm__ volatile(
    fe3a:	f387 8811 	msr	BASEPRI, r7
    fe3e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fe42:	1c6b      	adds	r3, r5, #1
    fe44:	bf08      	it	eq
    fe46:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    fe4a:	d008      	beq.n	fe5e <pend+0x42>
    fe4c:	4622      	mov	r2, r4
    fe4e:	462b      	mov	r3, r5
    fe50:	f106 0018 	add.w	r0, r6, #24
    fe54:	4903      	ldr	r1, [pc, #12]	; (fe64 <pend+0x48>)
}
    fe56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fe5a:	f000 bb21 	b.w	104a0 <z_add_timeout>
    fe5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe62:	bf00      	nop
    fe64:	00012471 	.word	0x00012471

0000fe68 <z_pend_curr>:
{
    fe68:	b510      	push	{r4, lr}
	pending_current = _current;
    fe6a:	4b07      	ldr	r3, [pc, #28]	; (fe88 <z_pend_curr+0x20>)
    fe6c:	6898      	ldr	r0, [r3, #8]
    fe6e:	4b07      	ldr	r3, [pc, #28]	; (fe8c <z_pend_curr+0x24>)
{
    fe70:	460c      	mov	r4, r1
	pending_current = _current;
    fe72:	6018      	str	r0, [r3, #0]
{
    fe74:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    fe76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fe7a:	f7ff ffcf 	bl	fe1c <pend>
    fe7e:	4620      	mov	r0, r4
}
    fe80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe84:	f7fb bbea 	b.w	b65c <arch_swap>
    fe88:	20001628 	.word	0x20001628
    fe8c:	20001660 	.word	0x20001660

0000fe90 <z_impl_k_thread_suspend>:
{
    fe90:	b570      	push	{r4, r5, r6, lr}
    fe92:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    fe94:	3018      	adds	r0, #24
    fe96:	f002 fb67 	bl	12568 <z_abort_timeout>
	__asm__ volatile(
    fe9a:	f04f 0340 	mov.w	r3, #64	; 0x40
    fe9e:	f3ef 8611 	mrs	r6, BASEPRI
    fea2:	f383 8811 	msr	BASEPRI, r3
    fea6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    feaa:	f994 200d 	ldrsb.w	r2, [r4, #13]
    feae:	7b63      	ldrb	r3, [r4, #13]
    feb0:	2a00      	cmp	r2, #0
    feb2:	da05      	bge.n	fec0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    feb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    feb8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    feba:	4620      	mov	r0, r4
    febc:	f002 fa3c 	bl	12338 <sys_dlist_remove>
		update_cache(thread == _current);
    fec0:	4d0b      	ldr	r5, [pc, #44]	; (fef0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fec2:	7b63      	ldrb	r3, [r4, #13]
    fec4:	68a8      	ldr	r0, [r5, #8]
    fec6:	f043 0310 	orr.w	r3, r3, #16
    feca:	7363      	strb	r3, [r4, #13]
    fecc:	1b03      	subs	r3, r0, r4
    fece:	4258      	negs	r0, r3
    fed0:	4158      	adcs	r0, r3
    fed2:	f7ff ff6b 	bl	fdac <update_cache>
	__asm__ volatile(
    fed6:	f386 8811 	msr	BASEPRI, r6
    feda:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    fede:	68ab      	ldr	r3, [r5, #8]
    fee0:	42a3      	cmp	r3, r4
    fee2:	d103      	bne.n	feec <z_impl_k_thread_suspend+0x5c>
}
    fee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    fee8:	f002 ba71 	b.w	123ce <z_reschedule_unlocked>
}
    feec:	bd70      	pop	{r4, r5, r6, pc}
    feee:	bf00      	nop
    fef0:	20001628 	.word	0x20001628

0000fef4 <k_sched_unlock>:
{
    fef4:	b510      	push	{r4, lr}
	__asm__ volatile(
    fef6:	f04f 0340 	mov.w	r3, #64	; 0x40
    fefa:	f3ef 8411 	mrs	r4, BASEPRI
    fefe:	f383 8811 	msr	BASEPRI, r3
    ff02:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    ff06:	4b08      	ldr	r3, [pc, #32]	; (ff28 <k_sched_unlock+0x34>)
    ff08:	689a      	ldr	r2, [r3, #8]
    ff0a:	7bd3      	ldrb	r3, [r2, #15]
    ff0c:	3301      	adds	r3, #1
    ff0e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    ff10:	2000      	movs	r0, #0
    ff12:	f7ff ff4b 	bl	fdac <update_cache>
	__asm__ volatile(
    ff16:	f384 8811 	msr	BASEPRI, r4
    ff1a:	f3bf 8f6f 	isb	sy
}
    ff1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    ff22:	f002 ba54 	b.w	123ce <z_reschedule_unlocked>
    ff26:	bf00      	nop
    ff28:	20001628 	.word	0x20001628

0000ff2c <move_thread_to_end_of_prio_q>:
{
    ff2c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    ff2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    ff32:	7b43      	ldrb	r3, [r0, #13]
    ff34:	2a00      	cmp	r2, #0
{
    ff36:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ff38:	da04      	bge.n	ff44 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ff3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ff3e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ff40:	f002 f9fa 	bl	12338 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    ff44:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    ff46:	4a17      	ldr	r2, [pc, #92]	; (ffa4 <move_thread_to_end_of_prio_q+0x78>)
    ff48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ff4c:	4610      	mov	r0, r2
    ff4e:	734b      	strb	r3, [r1, #13]
    ff50:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ff54:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff56:	4283      	cmp	r3, r0
    ff58:	bf08      	it	eq
    ff5a:	2300      	moveq	r3, #0
    ff5c:	2b00      	cmp	r3, #0
    ff5e:	bf38      	it	cc
    ff60:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ff62:	b1cb      	cbz	r3, ff98 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    ff64:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    ff68:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    ff6c:	42a6      	cmp	r6, r4
    ff6e:	d00f      	beq.n	ff90 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    ff70:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    ff72:	2c00      	cmp	r4, #0
    ff74:	dd0c      	ble.n	ff90 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    ff76:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    ff78:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    ff7c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    ff7e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    ff80:	6890      	ldr	r0, [r2, #8]
    ff82:	1a43      	subs	r3, r0, r1
    ff84:	4258      	negs	r0, r3
}
    ff86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    ff8a:	4158      	adcs	r0, r3
    ff8c:	f7ff bf0e 	b.w	fdac <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ff90:	42ab      	cmp	r3, r5
    ff92:	d001      	beq.n	ff98 <move_thread_to_end_of_prio_q+0x6c>
    ff94:	681b      	ldr	r3, [r3, #0]
    ff96:	e7e4      	b.n	ff62 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    ff98:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    ff9c:	6029      	str	r1, [r5, #0]
	list->tail = node;
    ff9e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    ffa0:	e7ee      	b.n	ff80 <move_thread_to_end_of_prio_q+0x54>
    ffa2:	bf00      	nop
    ffa4:	20001628 	.word	0x20001628

0000ffa8 <z_time_slice>:
{
    ffa8:	b570      	push	{r4, r5, r6, lr}
    ffaa:	4601      	mov	r1, r0
	__asm__ volatile(
    ffac:	f04f 0340 	mov.w	r3, #64	; 0x40
    ffb0:	f3ef 8411 	mrs	r4, BASEPRI
    ffb4:	f383 8811 	msr	BASEPRI, r3
    ffb8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ffbc:	4b16      	ldr	r3, [pc, #88]	; (10018 <CONFIG_PM_SRAM_SIZE+0x18>)
    ffbe:	4a17      	ldr	r2, [pc, #92]	; (1001c <CONFIG_PM_SRAM_SIZE+0x1c>)
    ffc0:	6898      	ldr	r0, [r3, #8]
    ffc2:	6815      	ldr	r5, [r2, #0]
    ffc4:	42a8      	cmp	r0, r5
    ffc6:	461d      	mov	r5, r3
    ffc8:	d106      	bne.n	ffd8 <z_time_slice+0x30>
			z_reset_time_slice();
    ffca:	f7ff fe81 	bl	fcd0 <z_reset_time_slice>
	__asm__ volatile(
    ffce:	f384 8811 	msr	BASEPRI, r4
    ffd2:	f3bf 8f6f 	isb	sy
}
    ffd6:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    ffd8:	2600      	movs	r6, #0
    ffda:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ffdc:	4a10      	ldr	r2, [pc, #64]	; (10020 <CONFIG_PM_SRAM_SIZE+0x20>)
    ffde:	6812      	ldr	r2, [r2, #0]
    ffe0:	b1ba      	cbz	r2, 10012 <CONFIG_PM_SRAM_SIZE+0x12>
		&& !z_is_idle_thread_object(thread);
    ffe2:	89c2      	ldrh	r2, [r0, #14]
    ffe4:	2a7f      	cmp	r2, #127	; 0x7f
    ffe6:	d814      	bhi.n	10012 <CONFIG_PM_SRAM_SIZE+0x12>
		&& !z_is_thread_prevented_from_running(thread)
    ffe8:	7b42      	ldrb	r2, [r0, #13]
    ffea:	06d2      	lsls	r2, r2, #27
    ffec:	d111      	bne.n	10012 <CONFIG_PM_SRAM_SIZE+0x12>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ffee:	4a0d      	ldr	r2, [pc, #52]	; (10024 <CONFIG_PM_SRAM_SIZE+0x24>)
    fff0:	f990 600e 	ldrsb.w	r6, [r0, #14]
    fff4:	6812      	ldr	r2, [r2, #0]
    fff6:	4296      	cmp	r6, r2
    fff8:	db0b      	blt.n	10012 <CONFIG_PM_SRAM_SIZE+0x12>
		&& !z_is_idle_thread_object(thread);
    fffa:	4a0b      	ldr	r2, [pc, #44]	; (10028 <CONFIG_PM_SRAM_SIZE+0x28>)
    fffc:	4290      	cmp	r0, r2
    fffe:	d008      	beq.n	10012 <CONFIG_PM_SRAM_SIZE+0x12>
		if (ticks >= _current_cpu->slice_ticks) {
   10000:	691a      	ldr	r2, [r3, #16]
   10002:	428a      	cmp	r2, r1
   10004:	dc02      	bgt.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
			move_thread_to_end_of_prio_q(_current);
   10006:	f7ff ff91 	bl	ff2c <move_thread_to_end_of_prio_q>
   1000a:	e7de      	b.n	ffca <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1000c:	1a52      	subs	r2, r2, r1
   1000e:	611a      	str	r2, [r3, #16]
   10010:	e7dd      	b.n	ffce <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   10012:	2300      	movs	r3, #0
   10014:	612b      	str	r3, [r5, #16]
   10016:	e7da      	b.n	ffce <z_time_slice+0x26>
   10018:	20001628 	.word	0x20001628
   1001c:	20001660 	.word	0x20001660
   10020:	20001668 	.word	0x20001668
   10024:	20001664 	.word	0x20001664
   10028:	200011b8 	.word	0x200011b8

0001002c <ready_thread>:
{
   1002c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1002e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10032:	7b42      	ldrb	r2, [r0, #13]
   10034:	2b00      	cmp	r3, #0
   10036:	db2d      	blt.n	10094 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10038:	06d3      	lsls	r3, r2, #27
   1003a:	d12b      	bne.n	10094 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1003c:	6983      	ldr	r3, [r0, #24]
   1003e:	bb4b      	cbnz	r3, 10094 <ready_thread+0x68>
	return list->head == list;
   10040:	4915      	ldr	r1, [pc, #84]	; (10098 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   10042:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10046:	7342      	strb	r2, [r0, #13]
   10048:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1004a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   1004c:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10050:	4294      	cmp	r4, r2
   10052:	bf18      	it	ne
   10054:	4623      	movne	r3, r4
   10056:	2b00      	cmp	r3, #0
   10058:	bf38      	it	cc
   1005a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1005c:	b1ab      	cbz	r3, 1008a <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1005e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   10062:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   10066:	42a6      	cmp	r6, r4
   10068:	d00b      	beq.n	10082 <ready_thread+0x56>
		return b2 - b1;
   1006a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1006c:	2c00      	cmp	r4, #0
   1006e:	dd08      	ble.n	10082 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   10070:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10072:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   10076:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   10078:	6058      	str	r0, [r3, #4]
}
   1007a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1007c:	2000      	movs	r0, #0
   1007e:	f7ff be95 	b.w	fdac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10082:	42ab      	cmp	r3, r5
   10084:	d001      	beq.n	1008a <ready_thread+0x5e>
   10086:	681b      	ldr	r3, [r3, #0]
   10088:	e7e8      	b.n	1005c <ready_thread+0x30>
	node->prev = tail;
   1008a:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1008e:	6028      	str	r0, [r5, #0]
	list->tail = node;
   10090:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   10092:	e7f2      	b.n	1007a <ready_thread+0x4e>
}
   10094:	bc70      	pop	{r4, r5, r6}
   10096:	4770      	bx	lr
   10098:	20001628 	.word	0x20001628

0001009c <z_sched_start>:
{
   1009c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1009e:	f04f 0240 	mov.w	r2, #64	; 0x40
   100a2:	f3ef 8411 	mrs	r4, BASEPRI
   100a6:	f382 8811 	msr	BASEPRI, r2
   100aa:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   100ae:	7b42      	ldrb	r2, [r0, #13]
   100b0:	0751      	lsls	r1, r2, #29
   100b2:	d404      	bmi.n	100be <z_sched_start+0x22>
	__asm__ volatile(
   100b4:	f384 8811 	msr	BASEPRI, r4
   100b8:	f3bf 8f6f 	isb	sy
}
   100bc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   100be:	f022 0204 	bic.w	r2, r2, #4
   100c2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   100c4:	f7ff ffb2 	bl	1002c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   100c8:	4621      	mov	r1, r4
   100ca:	4802      	ldr	r0, [pc, #8]	; (100d4 <z_sched_start+0x38>)
}
   100cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   100d0:	f7ff be46 	b.w	fd60 <z_reschedule>
   100d4:	20001f15 	.word	0x20001f15

000100d8 <z_set_prio>:
{
   100d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100da:	4604      	mov	r4, r0
	__asm__ volatile(
   100dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   100e0:	f3ef 8611 	mrs	r6, BASEPRI
   100e4:	f383 8811 	msr	BASEPRI, r3
   100e8:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   100ec:	7b43      	ldrb	r3, [r0, #13]
   100ee:	06da      	lsls	r2, r3, #27
   100f0:	b249      	sxtb	r1, r1
   100f2:	d138      	bne.n	10166 <z_set_prio+0x8e>
   100f4:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   100f6:	2d00      	cmp	r5, #0
   100f8:	d135      	bne.n	10166 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   100fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   100fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10100:	f002 f91a 	bl	12338 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10104:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   10106:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   10108:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1010c:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1010e:	4817      	ldr	r0, [pc, #92]	; (1016c <z_set_prio+0x94>)
   10110:	4603      	mov	r3, r0
   10112:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10116:	429f      	cmp	r7, r3
   10118:	bf18      	it	ne
   1011a:	463d      	movne	r5, r7
   1011c:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1011e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   10120:	461a      	mov	r2, r3
   10122:	462b      	mov	r3, r5
   10124:	bf38      	it	cc
   10126:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10128:	b1c3      	cbz	r3, 1015c <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1012a:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1012e:	42a9      	cmp	r1, r5
   10130:	d010      	beq.n	10154 <z_set_prio+0x7c>
		return b2 - b1;
   10132:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   10134:	2d00      	cmp	r5, #0
   10136:	dd0d      	ble.n	10154 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   10138:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1013a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1013e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   10140:	605c      	str	r4, [r3, #4]
			update_cache(1);
   10142:	2001      	movs	r0, #1
   10144:	f7ff fe32 	bl	fdac <update_cache>
   10148:	2001      	movs	r0, #1
	__asm__ volatile(
   1014a:	f386 8811 	msr	BASEPRI, r6
   1014e:	f3bf 8f6f 	isb	sy
}
   10152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   10154:	42bb      	cmp	r3, r7
   10156:	d001      	beq.n	1015c <z_set_prio+0x84>
   10158:	681b      	ldr	r3, [r3, #0]
   1015a:	e7e5      	b.n	10128 <z_set_prio+0x50>
	node->prev = tail;
   1015c:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   10160:	603c      	str	r4, [r7, #0]
	list->tail = node;
   10162:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   10164:	e7ed      	b.n	10142 <z_set_prio+0x6a>
			thread->base.prio = prio;
   10166:	73a1      	strb	r1, [r4, #14]
   10168:	2000      	movs	r0, #0
   1016a:	e7ee      	b.n	1014a <z_set_prio+0x72>
   1016c:	20001628 	.word	0x20001628

00010170 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   10170:	4b04      	ldr	r3, [pc, #16]	; (10184 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   10172:	2100      	movs	r1, #0
   10174:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   10178:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1017c:	4608      	mov	r0, r1
   1017e:	f7ff bdbd 	b.w	fcfc <k_sched_time_slice_set>
   10182:	bf00      	nop
   10184:	20001628 	.word	0x20001628

00010188 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   10188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1018a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1018e:	f3ef 8411 	mrs	r4, BASEPRI
   10192:	f383 8811 	msr	BASEPRI, r3
   10196:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1019a:	491b      	ldr	r1, [pc, #108]	; (10208 <z_impl_k_yield+0x80>)
   1019c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1019e:	7b43      	ldrb	r3, [r0, #13]
   101a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   101a4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   101a6:	f002 f8c7 	bl	12338 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   101aa:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   101ac:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   101ae:	4608      	mov	r0, r1
   101b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   101b4:	7353      	strb	r3, [r2, #13]
   101b6:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   101ba:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   101bc:	4283      	cmp	r3, r0
   101be:	bf08      	it	eq
   101c0:	2300      	moveq	r3, #0
   101c2:	2b00      	cmp	r3, #0
   101c4:	bf38      	it	cc
   101c6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   101c8:	b1cb      	cbz	r3, 101fe <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   101ca:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   101ce:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   101d2:	42af      	cmp	r7, r5
   101d4:	d00f      	beq.n	101f6 <z_impl_k_yield+0x6e>
		return b2 - b1;
   101d6:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   101d8:	2d00      	cmp	r5, #0
   101da:	dd0c      	ble.n	101f6 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   101dc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   101de:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   101e2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   101e4:	605a      	str	r2, [r3, #4]
	update_cache(1);
   101e6:	2001      	movs	r0, #1
   101e8:	f7ff fde0 	bl	fdac <update_cache>
   101ec:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   101ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   101f2:	f7fb ba33 	b.w	b65c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   101f6:	42b3      	cmp	r3, r6
   101f8:	d001      	beq.n	101fe <z_impl_k_yield+0x76>
   101fa:	681b      	ldr	r3, [r3, #0]
   101fc:	e7e4      	b.n	101c8 <z_impl_k_yield+0x40>
	node->prev = tail;
   101fe:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   10202:	6032      	str	r2, [r6, #0]
	list->tail = node;
   10204:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   10206:	e7ee      	b.n	101e6 <z_impl_k_yield+0x5e>
   10208:	20001628 	.word	0x20001628

0001020c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10210:	4604      	mov	r4, r0
   10212:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   10214:	ea54 0105 	orrs.w	r1, r4, r5
   10218:	d104      	bne.n	10224 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1021a:	f7ff ffb5 	bl	10188 <z_impl_k_yield>
		k_yield();
		return 0;
   1021e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   10220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   10224:	f06f 0101 	mvn.w	r1, #1
   10228:	1a0a      	subs	r2, r1, r0
   1022a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1022e:	eb61 0305 	sbc.w	r3, r1, r5
   10232:	2a01      	cmp	r2, #1
   10234:	f173 0300 	sbcs.w	r3, r3, #0
   10238:	da2a      	bge.n	10290 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1023a:	f002 f9d5 	bl	125e8 <sys_clock_tick_get_32>
   1023e:	1906      	adds	r6, r0, r4
   10240:	f04f 0340 	mov.w	r3, #64	; 0x40
   10244:	f3ef 8811 	mrs	r8, BASEPRI
   10248:	f383 8811 	msr	BASEPRI, r3
   1024c:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   10250:	4f11      	ldr	r7, [pc, #68]	; (10298 <z_tick_sleep+0x8c>)
   10252:	4b12      	ldr	r3, [pc, #72]	; (1029c <z_tick_sleep+0x90>)
   10254:	68b8      	ldr	r0, [r7, #8]
   10256:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   10258:	f7ff fdc8 	bl	fdec <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1025c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1025e:	4910      	ldr	r1, [pc, #64]	; (102a0 <z_tick_sleep+0x94>)
   10260:	4622      	mov	r2, r4
   10262:	462b      	mov	r3, r5
   10264:	3018      	adds	r0, #24
   10266:	f000 f91b 	bl	104a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1026a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1026c:	7b53      	ldrb	r3, [r2, #13]
   1026e:	f043 0310 	orr.w	r3, r3, #16
   10272:	7353      	strb	r3, [r2, #13]
   10274:	4640      	mov	r0, r8
   10276:	f7fb f9f1 	bl	b65c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1027a:	f002 f9b5 	bl	125e8 <sys_clock_tick_get_32>
   1027e:	1a30      	subs	r0, r6, r0
   10280:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   10284:	2801      	cmp	r0, #1
   10286:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   1028a:	bfb8      	it	lt
   1028c:	2000      	movlt	r0, #0
   1028e:	e7c7      	b.n	10220 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   10290:	f06f 0601 	mvn.w	r6, #1
   10294:	1a36      	subs	r6, r6, r0
   10296:	e7d3      	b.n	10240 <z_tick_sleep+0x34>
   10298:	20001628 	.word	0x20001628
   1029c:	20001660 	.word	0x20001660
   102a0:	00012471 	.word	0x00012471

000102a4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   102a4:	b508      	push	{r3, lr}
   102a6:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   102a8:	3301      	adds	r3, #1
   102aa:	bf08      	it	eq
   102ac:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   102b0:	d106      	bne.n	102c0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   102b2:	4b08      	ldr	r3, [pc, #32]	; (102d4 <z_impl_k_sleep+0x30>)
   102b4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   102b6:	f7ff fdeb 	bl	fe90 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   102ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   102be:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   102c0:	f7ff ffa4 	bl	1020c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   102c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   102c8:	fb80 2303 	smull	r2, r3, r0, r3
   102cc:	0bd0      	lsrs	r0, r2, #15
   102ce:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   102d2:	e7f4      	b.n	102be <z_impl_k_sleep+0x1a>
   102d4:	20001628 	.word	0x20001628

000102d8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   102d8:	4b01      	ldr	r3, [pc, #4]	; (102e0 <z_impl_k_current_get+0x8>)
   102da:	6898      	ldr	r0, [r3, #8]
   102dc:	4770      	bx	lr
   102de:	bf00      	nop
   102e0:	20001628 	.word	0x20001628

000102e4 <z_impl_k_is_preempt_thread>:
   102e4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   102e8:	b93b      	cbnz	r3, 102fa <z_impl_k_is_preempt_thread+0x16>
   102ea:	4b05      	ldr	r3, [pc, #20]	; (10300 <z_impl_k_is_preempt_thread+0x1c>)
   102ec:	689b      	ldr	r3, [r3, #8]
   102ee:	89d8      	ldrh	r0, [r3, #14]
   102f0:	287f      	cmp	r0, #127	; 0x7f
   102f2:	bf8c      	ite	hi
   102f4:	2000      	movhi	r0, #0
   102f6:	2001      	movls	r0, #1
   102f8:	4770      	bx	lr
   102fa:	2000      	movs	r0, #0
}
   102fc:	4770      	bx	lr
   102fe:	bf00      	nop
   10300:	20001628 	.word	0x20001628

00010304 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   10304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10308:	4604      	mov	r4, r0
   1030a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1030e:	f3ef 8611 	mrs	r6, BASEPRI
   10312:	f383 8811 	msr	BASEPRI, r3
   10316:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1031a:	7b43      	ldrb	r3, [r0, #13]
   1031c:	071a      	lsls	r2, r3, #28
   1031e:	d505      	bpl.n	1032c <z_thread_abort+0x28>
	__asm__ volatile(
   10320:	f386 8811 	msr	BASEPRI, r6
   10324:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   10328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1032c:	f023 0220 	bic.w	r2, r3, #32
   10330:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   10334:	09d2      	lsrs	r2, r2, #7
   10336:	d120      	bne.n	1037a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10338:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1033a:	68a3      	ldr	r3, [r4, #8]
   1033c:	b113      	cbz	r3, 10344 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1033e:	4620      	mov	r0, r4
   10340:	f002 f802 	bl	12348 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   10344:	f104 0018 	add.w	r0, r4, #24
   10348:	f002 f90e 	bl	12568 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1034c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   10350:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   10354:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10356:	42bd      	cmp	r5, r7
   10358:	d000      	beq.n	1035c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1035a:	b9b5      	cbnz	r5, 1038a <z_thread_abort+0x86>
		update_cache(1);
   1035c:	2001      	movs	r0, #1
   1035e:	f7ff fd25 	bl	fdac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   10362:	4b10      	ldr	r3, [pc, #64]	; (103a4 <z_thread_abort+0xa0>)
   10364:	689b      	ldr	r3, [r3, #8]
   10366:	42a3      	cmp	r3, r4
   10368:	d1da      	bne.n	10320 <z_thread_abort+0x1c>
   1036a:	f3ef 8305 	mrs	r3, IPSR
   1036e:	2b00      	cmp	r3, #0
   10370:	d1d6      	bne.n	10320 <z_thread_abort+0x1c>
   10372:	4630      	mov	r0, r6
   10374:	f7fb f972 	bl	b65c <arch_swap>
	return ret;
   10378:	e7d2      	b.n	10320 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1037a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1037e:	f043 0308 	orr.w	r3, r3, #8
   10382:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10384:	f001 ffd8 	bl	12338 <sys_dlist_remove>
}
   10388:	e7d7      	b.n	1033a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1038a:	4628      	mov	r0, r5
   1038c:	f001 ffdc 	bl	12348 <unpend_thread_no_timeout>
   10390:	f105 0018 	add.w	r0, r5, #24
   10394:	f002 f8e8 	bl	12568 <z_abort_timeout>
   10398:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1039c:	4628      	mov	r0, r5
   1039e:	f7ff fe45 	bl	1002c <ready_thread>
   103a2:	e7d7      	b.n	10354 <z_thread_abort+0x50>
   103a4:	20001628 	.word	0x20001628

000103a8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   103a8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   103aa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   103ae:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   103b0:	e9cd 6700 	strd	r6, r7, [sp]
   103b4:	f7ff fd58 	bl	fe68 <z_pend_curr>

	if (data != NULL) {
   103b8:	b11c      	cbz	r4, 103c2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   103ba:	4b03      	ldr	r3, [pc, #12]	; (103c8 <z_sched_wait+0x20>)
   103bc:	689b      	ldr	r3, [r3, #8]
   103be:	695b      	ldr	r3, [r3, #20]
   103c0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   103c2:	b002      	add	sp, #8
   103c4:	bdd0      	pop	{r4, r6, r7, pc}
   103c6:	bf00      	nop
   103c8:	20001628 	.word	0x20001628

000103cc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   103cc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   103ce:	4806      	ldr	r0, [pc, #24]	; (103e8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   103d0:	4a06      	ldr	r2, [pc, #24]	; (103ec <z_data_copy+0x20>)
   103d2:	4907      	ldr	r1, [pc, #28]	; (103f0 <z_data_copy+0x24>)
   103d4:	1a12      	subs	r2, r2, r0
   103d6:	f001 fb5b 	bl	11a90 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   103da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   103de:	4a05      	ldr	r2, [pc, #20]	; (103f4 <z_data_copy+0x28>)
   103e0:	4905      	ldr	r1, [pc, #20]	; (103f8 <z_data_copy+0x2c>)
   103e2:	4806      	ldr	r0, [pc, #24]	; (103fc <z_data_copy+0x30>)
   103e4:	f001 bb54 	b.w	11a90 <memcpy>
   103e8:	20000000 	.word	0x20000000
   103ec:	200003c4 	.word	0x200003c4
   103f0:	00013f18 	.word	0x00013f18
   103f4:	00000000 	.word	0x00000000
   103f8:	00013f18 	.word	0x00013f18
   103fc:	20000000 	.word	0x20000000

00010400 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   10400:	4b03      	ldr	r3, [pc, #12]	; (10410 <elapsed+0x10>)
   10402:	681b      	ldr	r3, [r3, #0]
   10404:	b90b      	cbnz	r3, 1040a <elapsed+0xa>
   10406:	f7fb b901 	b.w	b60c <sys_clock_elapsed>
}
   1040a:	2000      	movs	r0, #0
   1040c:	4770      	bx	lr
   1040e:	bf00      	nop
   10410:	2000166c 	.word	0x2000166c

00010414 <remove_timeout>:
{
   10414:	b530      	push	{r4, r5, lr}
   10416:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10418:	b168      	cbz	r0, 10436 <remove_timeout+0x22>
   1041a:	4a0a      	ldr	r2, [pc, #40]	; (10444 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1041c:	6852      	ldr	r2, [r2, #4]
   1041e:	4290      	cmp	r0, r2
   10420:	d009      	beq.n	10436 <remove_timeout+0x22>
	if (next(t) != NULL) {
   10422:	b143      	cbz	r3, 10436 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   10424:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   10428:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1042c:	1912      	adds	r2, r2, r4
   1042e:	eb45 0101 	adc.w	r1, r5, r1
   10432:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   10436:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   10438:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1043a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1043c:	2300      	movs	r3, #0
	node->prev = NULL;
   1043e:	e9c0 3300 	strd	r3, r3, [r0]
}
   10442:	bd30      	pop	{r4, r5, pc}
   10444:	200002b4 	.word	0x200002b4

00010448 <next_timeout>:

static int32_t next_timeout(void)
{
   10448:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1044a:	4b13      	ldr	r3, [pc, #76]	; (10498 <next_timeout+0x50>)
   1044c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1044e:	429c      	cmp	r4, r3
   10450:	bf08      	it	eq
   10452:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   10454:	f7ff ffd4 	bl	10400 <elapsed>
   10458:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1045a:	b1bc      	cbz	r4, 1048c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1045c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   10460:	1b40      	subs	r0, r0, r5
   10462:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   10466:	2801      	cmp	r0, #1
   10468:	f171 0300 	sbcs.w	r3, r1, #0
   1046c:	db11      	blt.n	10492 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1046e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10472:	2300      	movs	r3, #0
   10474:	4282      	cmp	r2, r0
   10476:	eb73 0401 	sbcs.w	r4, r3, r1
   1047a:	da00      	bge.n	1047e <next_timeout+0x36>
   1047c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1047e:	4b07      	ldr	r3, [pc, #28]	; (1049c <next_timeout+0x54>)
   10480:	691b      	ldr	r3, [r3, #16]
   10482:	b113      	cbz	r3, 1048a <next_timeout+0x42>
   10484:	4298      	cmp	r0, r3
   10486:	bfa8      	it	ge
   10488:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1048a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1048c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10490:	e7f5      	b.n	1047e <next_timeout+0x36>
   10492:	2000      	movs	r0, #0
   10494:	e7f3      	b.n	1047e <next_timeout+0x36>
   10496:	bf00      	nop
   10498:	200002b4 	.word	0x200002b4
   1049c:	20001628 	.word	0x20001628

000104a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   104a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   104a4:	bf08      	it	eq
   104a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   104aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104ae:	4604      	mov	r4, r0
   104b0:	4692      	mov	sl, r2
   104b2:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   104b4:	d073      	beq.n	1059e <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   104b6:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   104b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   104bc:	f3ef 8511 	mrs	r5, BASEPRI
   104c0:	f383 8811 	msr	BASEPRI, r3
   104c4:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   104c8:	f06f 0301 	mvn.w	r3, #1
   104cc:	ebb3 080a 	subs.w	r8, r3, sl
   104d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   104d4:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   104d8:	f1b8 0f00 	cmp.w	r8, #0
   104dc:	f179 0100 	sbcs.w	r1, r9, #0
   104e0:	db1c      	blt.n	1051c <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   104e2:	4830      	ldr	r0, [pc, #192]	; (105a4 <z_add_timeout+0x104>)
   104e4:	e9d0 1000 	ldrd	r1, r0, [r0]
   104e8:	1a5b      	subs	r3, r3, r1
   104ea:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   104ee:	ebb3 060a 	subs.w	r6, r3, sl
   104f2:	eb62 070b 	sbc.w	r7, r2, fp
   104f6:	2e01      	cmp	r6, #1
   104f8:	f177 0300 	sbcs.w	r3, r7, #0
   104fc:	bfbc      	itt	lt
   104fe:	2601      	movlt	r6, #1
   10500:	2700      	movlt	r7, #0
   10502:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   10506:	4a28      	ldr	r2, [pc, #160]	; (105a8 <z_add_timeout+0x108>)
   10508:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1050c:	4293      	cmp	r3, r2
   1050e:	d11e      	bne.n	1054e <z_add_timeout+0xae>
	node->prev = tail;
   10510:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   10514:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   10518:	6054      	str	r4, [r2, #4]
}
   1051a:	e02d      	b.n	10578 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1051c:	f7ff ff70 	bl	10400 <elapsed>
   10520:	f11a 0301 	adds.w	r3, sl, #1
   10524:	9300      	str	r3, [sp, #0]
   10526:	f14b 0300 	adc.w	r3, fp, #0
   1052a:	9301      	str	r3, [sp, #4]
   1052c:	e9dd 2300 	ldrd	r2, r3, [sp]
   10530:	1812      	adds	r2, r2, r0
   10532:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   10536:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1053a:	e7e4      	b.n	10506 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1053c:	ebb6 0008 	subs.w	r0, r6, r8
   10540:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   10544:	4563      	cmp	r3, ip
   10546:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1054a:	d0e1      	beq.n	10510 <z_add_timeout+0x70>
   1054c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1054e:	2b00      	cmp	r3, #0
   10550:	d0de      	beq.n	10510 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   10552:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   10556:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1055a:	4546      	cmp	r6, r8
   1055c:	eb77 0109 	sbcs.w	r1, r7, r9
   10560:	daec      	bge.n	1053c <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   10562:	ebb8 0006 	subs.w	r0, r8, r6
   10566:	eb69 0107 	sbc.w	r1, r9, r7
   1056a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1056e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10570:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   10574:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10576:	605c      	str	r4, [r3, #4]
	return list->head == list;
   10578:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1057a:	4293      	cmp	r3, r2
   1057c:	d00b      	beq.n	10596 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1057e:	429c      	cmp	r4, r3
   10580:	d109      	bne.n	10596 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   10582:	f7ff ff61 	bl	10448 <next_timeout>

			if (next_time == 0 ||
   10586:	b118      	cbz	r0, 10590 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   10588:	4b08      	ldr	r3, [pc, #32]	; (105ac <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1058a:	691b      	ldr	r3, [r3, #16]
   1058c:	4283      	cmp	r3, r0
   1058e:	d002      	beq.n	10596 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   10590:	2100      	movs	r1, #0
   10592:	f7fb f809 	bl	b5a8 <sys_clock_set_timeout>
	__asm__ volatile(
   10596:	f385 8811 	msr	BASEPRI, r5
   1059a:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1059e:	b003      	add	sp, #12
   105a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105a4:	200012b8 	.word	0x200012b8
   105a8:	200002b4 	.word	0x200002b4
   105ac:	20001628 	.word	0x20001628

000105b0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   105b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105b4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   105b6:	f7ff fcf7 	bl	ffa8 <z_time_slice>
	__asm__ volatile(
   105ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   105be:	f3ef 8411 	mrs	r4, BASEPRI
   105c2:	f383 8811 	msr	BASEPRI, r3
   105c6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   105ca:	4d2c      	ldr	r5, [pc, #176]	; (1067c <sys_clock_announce+0xcc>)
   105cc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 10680 <sys_clock_announce+0xd0>
	return list->head == list;
   105d0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 10684 <sys_clock_announce+0xd4>
   105d4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   105d6:	4651      	mov	r1, sl
   105d8:	f8d5 c000 	ldr.w	ip, [r5]
   105dc:	f8db 0000 	ldr.w	r0, [fp]
   105e0:	4662      	mov	r2, ip
   105e2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   105e4:	4558      	cmp	r0, fp
   105e6:	e9da 8900 	ldrd	r8, r9, [sl]
   105ea:	e9cd 2300 	strd	r2, r3, [sp]
   105ee:	d00d      	beq.n	1060c <sys_clock_announce+0x5c>
   105f0:	b160      	cbz	r0, 1060c <sys_clock_announce+0x5c>
   105f2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   105f6:	45b4      	cmp	ip, r6
   105f8:	41bb      	sbcs	r3, r7
   105fa:	da1e      	bge.n	1063a <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   105fc:	9b00      	ldr	r3, [sp, #0]
   105fe:	ebb6 0c03 	subs.w	ip, r6, r3
   10602:	9b01      	ldr	r3, [sp, #4]
   10604:	eb67 0603 	sbc.w	r6, r7, r3
   10608:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1060c:	9b00      	ldr	r3, [sp, #0]
   1060e:	eb13 0208 	adds.w	r2, r3, r8
   10612:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   10614:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   10618:	eb43 0309 	adc.w	r3, r3, r9
   1061c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   10620:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   10622:	f7ff ff11 	bl	10448 <next_timeout>
   10626:	4631      	mov	r1, r6
   10628:	f7fa ffbe 	bl	b5a8 <sys_clock_set_timeout>
	__asm__ volatile(
   1062c:	f384 8811 	msr	BASEPRI, r4
   10630:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10634:	b003      	add	sp, #12
   10636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1063a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1063e:	f04f 0200 	mov.w	r2, #0
   10642:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   10646:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1064a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1064e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   10652:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   10656:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   10658:	f7ff fedc 	bl	10414 <remove_timeout>
   1065c:	f384 8811 	msr	BASEPRI, r4
   10660:	f3bf 8f6f 	isb	sy
		t->fn(t);
   10664:	6883      	ldr	r3, [r0, #8]
   10666:	4798      	blx	r3
	__asm__ volatile(
   10668:	f04f 0340 	mov.w	r3, #64	; 0x40
   1066c:	f3ef 8411 	mrs	r4, BASEPRI
   10670:	f383 8811 	msr	BASEPRI, r3
   10674:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   10678:	4901      	ldr	r1, [pc, #4]	; (10680 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1067a:	e7ad      	b.n	105d8 <sys_clock_announce+0x28>
   1067c:	2000166c 	.word	0x2000166c
   10680:	200012b8 	.word	0x200012b8
   10684:	200002b4 	.word	0x200002b4

00010688 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10688:	b510      	push	{r4, lr}
   1068a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1068e:	f3ef 8411 	mrs	r4, BASEPRI
   10692:	f383 8811 	msr	BASEPRI, r3
   10696:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1069a:	f7fa ffb7 	bl	b60c <sys_clock_elapsed>
   1069e:	4b06      	ldr	r3, [pc, #24]	; (106b8 <sys_clock_tick_get+0x30>)
   106a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   106a4:	1812      	adds	r2, r2, r0
   106a6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   106aa:	f384 8811 	msr	BASEPRI, r4
   106ae:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   106b2:	4610      	mov	r0, r2
   106b4:	4619      	mov	r1, r3
   106b6:	bd10      	pop	{r4, pc}
   106b8:	200012b8 	.word	0x200012b8

000106bc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   106be:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   106c2:	1c56      	adds	r6, r2, #1
   106c4:	f143 0700 	adc.w	r7, r3, #0
   106c8:	2f00      	cmp	r7, #0
   106ca:	bf08      	it	eq
   106cc:	2e02      	cmpeq	r6, #2
{
   106ce:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   106d0:	d302      	bcc.n	106d8 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   106d2:	490d      	ldr	r1, [pc, #52]	; (10708 <z_timer_expiration_handler+0x4c>)
   106d4:	f7ff fee4 	bl	104a0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   106d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   106da:	3301      	adds	r3, #1
   106dc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   106de:	6a23      	ldr	r3, [r4, #32]
   106e0:	b10b      	cbz	r3, 106e6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   106e2:	4620      	mov	r0, r4
   106e4:	4798      	blx	r3
	return list->head == list;
   106e6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   106ea:	42a5      	cmp	r5, r4
   106ec:	d00a      	beq.n	10704 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   106ee:	b14d      	cbz	r5, 10704 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   106f0:	4628      	mov	r0, r5
   106f2:	f001 fe3c 	bl	1236e <z_unpend_thread_no_timeout>
   106f6:	2300      	movs	r3, #0
   106f8:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   106fa:	4628      	mov	r0, r5
}
   106fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   10700:	f001 bea6 	b.w	12450 <z_ready_thread>
}
   10704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10706:	bf00      	nop
   10708:	000106bd 	.word	0x000106bd

0001070c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1070c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   10710:	4619      	mov	r1, r3
   10712:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10714:	1c4c      	adds	r4, r1, #1
{
   10716:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10718:	bf08      	it	eq
   1071a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1071e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10722:	4680      	mov	r8, r0
   10724:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10726:	d04c      	beq.n	107c2 <z_impl_k_timer_start+0xb6>
   10728:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1072a:	1c6b      	adds	r3, r5, #1
   1072c:	bf08      	it	eq
   1072e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   10732:	4614      	mov	r4, r2
   10734:	d019      	beq.n	1076a <z_impl_k_timer_start+0x5e>
   10736:	ea54 0305 	orrs.w	r3, r4, r5
   1073a:	d016      	beq.n	1076a <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1073c:	f06f 0301 	mvn.w	r3, #1
   10740:	ebb3 0a02 	subs.w	sl, r3, r2
   10744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10748:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1074c:	f1ba 0f00 	cmp.w	sl, #0
   10750:	f17b 0300 	sbcs.w	r3, fp, #0
   10754:	da09      	bge.n	1076a <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   10756:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1075a:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1075e:	2c01      	cmp	r4, #1
   10760:	f175 0300 	sbcs.w	r3, r5, #0
   10764:	bfbc      	itt	lt
   10766:	2401      	movlt	r4, #1
   10768:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1076a:	f06f 0301 	mvn.w	r3, #1
   1076e:	1a1b      	subs	r3, r3, r0
   10770:	9300      	str	r3, [sp, #0]
   10772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10776:	eb63 0301 	sbc.w	r3, r3, r1
   1077a:	9301      	str	r3, [sp, #4]
   1077c:	e9dd 2300 	ldrd	r2, r3, [sp]
   10780:	2a00      	cmp	r2, #0
   10782:	f173 0300 	sbcs.w	r3, r3, #0
   10786:	da0c      	bge.n	107a2 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   10788:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1078c:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   10790:	f1b8 0f00 	cmp.w	r8, #0
   10794:	f179 0300 	sbcs.w	r3, r9, #0
   10798:	bfbc      	itt	lt
   1079a:	f04f 0800 	movlt.w	r8, #0
   1079e:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   107a2:	4630      	mov	r0, r6
   107a4:	f001 fee0 	bl	12568 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   107a8:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   107aa:	4907      	ldr	r1, [pc, #28]	; (107c8 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   107ac:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   107ae:	4642      	mov	r2, r8
   107b0:	464b      	mov	r3, r9
   107b2:	4630      	mov	r0, r6
	timer->period = period;
   107b4:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   107b8:	b002      	add	sp, #8
   107ba:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   107be:	f7ff be6f 	b.w	104a0 <z_add_timeout>
}
   107c2:	b002      	add	sp, #8
   107c4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   107c8:	000106bd 	.word	0x000106bd

000107cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   107cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   107d0:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   107d2:	4b29      	ldr	r3, [pc, #164]	; (10878 <z_impl_k_poll+0xac>)
   107d4:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   107d6:	2301      	movs	r3, #1
   107d8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   107dc:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   107e0:	ea52 0307 	orrs.w	r3, r2, r7
{
   107e4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   107e6:	bf0c      	ite	eq
   107e8:	2301      	moveq	r3, #1
   107ea:	2300      	movne	r3, #0
   107ec:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   107f0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   107f2:	f001 ffb5 	bl	12760 <register_events>
   107f6:	4681      	mov	r9, r0
	__asm__ volatile(
   107f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   107fc:	f3ef 8a11 	mrs	sl, BASEPRI
   10800:	f383 8811 	msr	BASEPRI, r3
   10804:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   10808:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1080c:	b964      	cbnz	r4, 10828 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1080e:	4601      	mov	r1, r0
   10810:	4652      	mov	r2, sl
   10812:	4640      	mov	r0, r8
   10814:	f001 ff42 	bl	1269c <clear_event_registrations>
	__asm__ volatile(
   10818:	f38a 8811 	msr	BASEPRI, sl
   1081c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   10820:	4620      	mov	r0, r4
   10822:	b002      	add	sp, #8
   10824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   10828:	2300      	movs	r3, #0
   1082a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1082e:	ea56 0307 	orrs.w	r3, r6, r7
   10832:	d106      	bne.n	10842 <z_impl_k_poll+0x76>
   10834:	f38a 8811 	msr	BASEPRI, sl
   10838:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1083c:	f06f 040a 	mvn.w	r4, #10
   10840:	e7ee      	b.n	10820 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   10842:	e9cd 6700 	strd	r6, r7, [sp]
   10846:	4a0d      	ldr	r2, [pc, #52]	; (1087c <z_impl_k_poll+0xb0>)
   10848:	480d      	ldr	r0, [pc, #52]	; (10880 <z_impl_k_poll+0xb4>)
   1084a:	4651      	mov	r1, sl
   1084c:	f7ff fb0c 	bl	fe68 <z_pend_curr>
   10850:	4604      	mov	r4, r0
	__asm__ volatile(
   10852:	f04f 0340 	mov.w	r3, #64	; 0x40
   10856:	f3ef 8511 	mrs	r5, BASEPRI
   1085a:	f383 8811 	msr	BASEPRI, r3
   1085e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   10862:	462a      	mov	r2, r5
   10864:	4649      	mov	r1, r9
   10866:	4640      	mov	r0, r8
   10868:	f001 ff18 	bl	1269c <clear_event_registrations>
	__asm__ volatile(
   1086c:	f385 8811 	msr	BASEPRI, r5
   10870:	f3bf 8f6f 	isb	sy
	return swap_rc;
   10874:	e7d4      	b.n	10820 <z_impl_k_poll+0x54>
   10876:	bf00      	nop
   10878:	20001628 	.word	0x20001628
   1087c:	200002bc 	.word	0x200002bc
   10880:	20001f15 	.word	0x20001f15

00010884 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   10884:	b538      	push	{r3, r4, r5, lr}
   10886:	4603      	mov	r3, r0
	__asm__ volatile(
   10888:	f04f 0240 	mov.w	r2, #64	; 0x40
   1088c:	f3ef 8511 	mrs	r5, BASEPRI
   10890:	f382 8811 	msr	BASEPRI, r2
   10894:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   10898:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1089a:	2101      	movs	r1, #1
   1089c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1089e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   108a0:	4283      	cmp	r3, r0
   108a2:	d106      	bne.n	108b2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   108a4:	f385 8811 	msr	BASEPRI, r5
   108a8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   108ac:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   108ae:	4620      	mov	r0, r4
   108b0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   108b2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   108b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   108b8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   108ba:	2300      	movs	r3, #0
	node->prev = NULL;
   108bc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   108c0:	f001 ffc5 	bl	1284e <signal_poll_event>
	z_reschedule(&lock, key);
   108c4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   108c6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   108c8:	4801      	ldr	r0, [pc, #4]	; (108d0 <z_impl_k_poll_signal_raise+0x4c>)
   108ca:	f7ff fa49 	bl	fd60 <z_reschedule>
	return rc;
   108ce:	e7ee      	b.n	108ae <z_impl_k_poll_signal_raise+0x2a>
   108d0:	20001f15 	.word	0x20001f15

000108d4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   108d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   108d6:	4606      	mov	r6, r0
   108d8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   108da:	f001 fc2f 	bl	1213c <k_is_in_isr>
   108de:	b980      	cbnz	r0, 10902 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   108e0:	4b0b      	ldr	r3, [pc, #44]	; (10910 <z_thread_aligned_alloc+0x3c>)
   108e2:	689b      	ldr	r3, [r3, #8]
   108e4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   108e6:	b184      	cbz	r4, 1090a <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   108e8:	2204      	movs	r2, #4
   108ea:	18aa      	adds	r2, r5, r2
   108ec:	d209      	bcs.n	10902 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   108ee:	2000      	movs	r0, #0
   108f0:	2100      	movs	r1, #0
   108f2:	e9cd 0100 	strd	r0, r1, [sp]
   108f6:	f046 0104 	orr.w	r1, r6, #4
   108fa:	4620      	mov	r0, r4
   108fc:	f001 fb76 	bl	11fec <k_heap_aligned_alloc>
	if (mem == NULL) {
   10900:	b908      	cbnz	r0, 10906 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   10902:	2400      	movs	r4, #0
	}

	return ret;
   10904:	e001      	b.n	1090a <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   10906:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   10908:	1d04      	adds	r4, r0, #4
}
   1090a:	4620      	mov	r0, r4
   1090c:	b002      	add	sp, #8
   1090e:	bd70      	pop	{r4, r5, r6, pc}
   10910:	20001628 	.word	0x20001628

00010914 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   10914:	4a02      	ldr	r2, [pc, #8]	; (10920 <boot_banner+0xc>)
   10916:	4903      	ldr	r1, [pc, #12]	; (10924 <boot_banner+0x10>)
   10918:	4803      	ldr	r0, [pc, #12]	; (10928 <boot_banner+0x14>)
   1091a:	f000 b864 	b.w	109e6 <printk>
   1091e:	bf00      	nop
   10920:	00013103 	.word	0x00013103
   10924:	00013ed8 	.word	0x00013ed8
   10928:	00013ee5 	.word	0x00013ee5

0001092c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1092c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1092e:	4b09      	ldr	r3, [pc, #36]	; (10954 <k_sys_work_q_init+0x28>)
   10930:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   10932:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   10934:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   10936:	9300      	str	r3, [sp, #0]
   10938:	4907      	ldr	r1, [pc, #28]	; (10958 <k_sys_work_q_init+0x2c>)
   1093a:	4808      	ldr	r0, [pc, #32]	; (1095c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1093c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   10940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10944:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10948:	f7ff f98a 	bl	fc60 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1094c:	4620      	mov	r0, r4
   1094e:	b004      	add	sp, #16
   10950:	bd10      	pop	{r4, pc}
   10952:	bf00      	nop
   10954:	00013f0c 	.word	0x00013f0c
   10958:	20004260 	.word	0x20004260
   1095c:	200012c0 	.word	0x200012c0

00010960 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   10960:	4770      	bx	lr

00010962 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   10962:	4603      	mov	r3, r0
   10964:	b140      	cbz	r0, 10978 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10966:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   10968:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1096c:	2a02      	cmp	r2, #2
   1096e:	d006      	beq.n	1097e <sys_notify_validate+0x1c>
   10970:	2a03      	cmp	r2, #3
   10972:	d004      	beq.n	1097e <sys_notify_validate+0x1c>
   10974:	2a01      	cmp	r2, #1
   10976:	d005      	beq.n	10984 <sys_notify_validate+0x22>
		return -EINVAL;
   10978:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1097c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1097e:	681a      	ldr	r2, [r3, #0]
   10980:	2a00      	cmp	r2, #0
   10982:	d0f9      	beq.n	10978 <sys_notify_validate+0x16>
		notify->result = 0;
   10984:	2000      	movs	r0, #0
   10986:	6098      	str	r0, [r3, #8]
   10988:	4770      	bx	lr

0001098a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1098a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1098c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   10990:	2a02      	cmp	r2, #2
{
   10992:	b510      	push	{r4, lr}
   10994:	4603      	mov	r3, r0
	notify->result = res;
   10996:	6081      	str	r1, [r0, #8]
	switch (method) {
   10998:	d00a      	beq.n	109b0 <sys_notify_finalize+0x26>
   1099a:	2a03      	cmp	r2, #3
   1099c:	d10b      	bne.n	109b6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1099e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   109a0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   109a2:	2200      	movs	r2, #0
   109a4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   109a6:	b108      	cbz	r0, 109ac <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   109a8:	f7ff ff6c 	bl	10884 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   109ac:	4620      	mov	r0, r4
   109ae:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   109b0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   109b2:	2400      	movs	r4, #0
		break;
   109b4:	e7f5      	b.n	109a2 <sys_notify_finalize+0x18>
	switch (method) {
   109b6:	2400      	movs	r4, #0
   109b8:	4620      	mov	r0, r4
   109ba:	e7f2      	b.n	109a2 <sys_notify_finalize+0x18>

000109bc <arch_printk_char_out>:
}
   109bc:	2000      	movs	r0, #0
   109be:	4770      	bx	lr

000109c0 <str_out>:
{
   109c0:	b530      	push	{r4, r5, lr}
   109c2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   109c4:	680c      	ldr	r4, [r1, #0]
   109c6:	1c55      	adds	r5, r2, #1
   109c8:	b114      	cbz	r4, 109d0 <str_out+0x10>
   109ca:	684b      	ldr	r3, [r1, #4]
   109cc:	4293      	cmp	r3, r2
   109ce:	dc01      	bgt.n	109d4 <str_out+0x14>
		ctx->count++;
   109d0:	608d      	str	r5, [r1, #8]
}
   109d2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   109d4:	3b01      	subs	r3, #1
   109d6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   109d8:	bf08      	it	eq
   109da:	2200      	moveq	r2, #0
   109dc:	608d      	str	r5, [r1, #8]
   109de:	bf0c      	ite	eq
   109e0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   109e2:	54a0      	strbne	r0, [r4, r2]
   109e4:	e7f5      	b.n	109d2 <str_out+0x12>

000109e6 <printk>:
{
   109e6:	b40f      	push	{r0, r1, r2, r3}
   109e8:	b507      	push	{r0, r1, r2, lr}
   109ea:	a904      	add	r1, sp, #16
   109ec:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   109f0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   109f2:	f7f9 f827 	bl	9a44 <vprintk>
}
   109f6:	b003      	add	sp, #12
   109f8:	f85d eb04 	ldr.w	lr, [sp], #4
   109fc:	b004      	add	sp, #16
   109fe:	4770      	bx	lr

00010a00 <snprintk>:
{
   10a00:	b40c      	push	{r2, r3}
   10a02:	b507      	push	{r0, r1, r2, lr}
   10a04:	ab04      	add	r3, sp, #16
   10a06:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   10a0a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   10a0c:	f7f9 f828 	bl	9a60 <vsnprintk>
}
   10a10:	b003      	add	sp, #12
   10a12:	f85d eb04 	ldr.w	lr, [sp], #4
   10a16:	b002      	add	sp, #8
   10a18:	4770      	bx	lr

00010a1a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10a1a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   10a1c:	f013 0307 	ands.w	r3, r3, #7
   10a20:	d105      	bne.n	10a2e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   10a22:	6803      	ldr	r3, [r0, #0]
   10a24:	2b00      	cmp	r3, #0
		evt = EVT_START;
   10a26:	bf0c      	ite	eq
   10a28:	2000      	moveq	r0, #0
   10a2a:	2003      	movne	r0, #3
   10a2c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   10a2e:	2b02      	cmp	r3, #2
   10a30:	d105      	bne.n	10a3e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   10a32:	8b43      	ldrh	r3, [r0, #26]
   10a34:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   10a36:	bf14      	ite	ne
   10a38:	2000      	movne	r0, #0
   10a3a:	2004      	moveq	r0, #4
   10a3c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   10a3e:	2b01      	cmp	r3, #1
   10a40:	d105      	bne.n	10a4e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   10a42:	6803      	ldr	r3, [r0, #0]
   10a44:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   10a46:	bf0c      	ite	eq
   10a48:	2000      	moveq	r0, #0
   10a4a:	2005      	movne	r0, #5
   10a4c:	4770      	bx	lr
	int evt = EVT_NOP;
   10a4e:	2000      	movs	r0, #0
}
   10a50:	4770      	bx	lr

00010a52 <notify_one>:
{
   10a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a56:	460d      	mov	r5, r1
   10a58:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10a5a:	4619      	mov	r1, r3
   10a5c:	1d28      	adds	r0, r5, #4
{
   10a5e:	4690      	mov	r8, r2
   10a60:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10a62:	f7ff ff92 	bl	1098a <sys_notify_finalize>
	if (cb) {
   10a66:	4604      	mov	r4, r0
   10a68:	b138      	cbz	r0, 10a7a <notify_one+0x28>
		cb(mgr, cli, state, res);
   10a6a:	4633      	mov	r3, r6
   10a6c:	4642      	mov	r2, r8
   10a6e:	4629      	mov	r1, r5
   10a70:	4638      	mov	r0, r7
   10a72:	46a4      	mov	ip, r4
}
   10a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   10a78:	4760      	bx	ip
}
   10a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010a7e <transition_complete>:
{
   10a7e:	b410      	push	{r4}
	__asm__ volatile(
   10a80:	f04f 0440 	mov.w	r4, #64	; 0x40
   10a84:	f3ef 8211 	mrs	r2, BASEPRI
   10a88:	f384 8811 	msr	BASEPRI, r4
   10a8c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   10a90:	6141      	str	r1, [r0, #20]
}
   10a92:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   10a94:	2101      	movs	r1, #1
   10a96:	f7f8 bff7 	b.w	9a88 <process_event>

00010a9a <validate_args>:
{
   10a9a:	b510      	push	{r4, lr}
   10a9c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   10a9e:	b140      	cbz	r0, 10ab2 <validate_args+0x18>
   10aa0:	b139      	cbz	r1, 10ab2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   10aa2:	1d08      	adds	r0, r1, #4
   10aa4:	f7ff ff5d 	bl	10962 <sys_notify_validate>
	if ((rv == 0)
   10aa8:	b928      	cbnz	r0, 10ab6 <validate_args+0x1c>
	    && ((cli->notify.flags
   10aaa:	68a3      	ldr	r3, [r4, #8]
   10aac:	f033 0303 	bics.w	r3, r3, #3
   10ab0:	d001      	beq.n	10ab6 <validate_args+0x1c>
		rv = -EINVAL;
   10ab2:	f06f 0015 	mvn.w	r0, #21
}
   10ab6:	bd10      	pop	{r4, pc}

00010ab8 <onoff_manager_init>:
{
   10ab8:	b538      	push	{r3, r4, r5, lr}
   10aba:	460c      	mov	r4, r1
	if ((mgr == NULL)
   10abc:	4605      	mov	r5, r0
   10abe:	b158      	cbz	r0, 10ad8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   10ac0:	b151      	cbz	r1, 10ad8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   10ac2:	680b      	ldr	r3, [r1, #0]
   10ac4:	b143      	cbz	r3, 10ad8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   10ac6:	684b      	ldr	r3, [r1, #4]
   10ac8:	b133      	cbz	r3, 10ad8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10aca:	221c      	movs	r2, #28
   10acc:	2100      	movs	r1, #0
   10ace:	f000 ffea 	bl	11aa6 <memset>
   10ad2:	612c      	str	r4, [r5, #16]
	return 0;
   10ad4:	2000      	movs	r0, #0
}
   10ad6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10ad8:	f06f 0015 	mvn.w	r0, #21
   10adc:	e7fb      	b.n	10ad6 <onoff_manager_init+0x1e>

00010ade <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10ade:	b570      	push	{r4, r5, r6, lr}
   10ae0:	4604      	mov	r4, r0
   10ae2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10ae4:	f7ff ffd9 	bl	10a9a <validate_args>

	if (rv < 0) {
   10ae8:	1e05      	subs	r5, r0, #0
   10aea:	db31      	blt.n	10b50 <onoff_request+0x72>
   10aec:	f04f 0340 	mov.w	r3, #64	; 0x40
   10af0:	f3ef 8111 	mrs	r1, BASEPRI
   10af4:	f383 8811 	msr	BASEPRI, r3
   10af8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10afc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10afe:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   10b00:	f64f 75ff 	movw	r5, #65535	; 0xffff
   10b04:	42ab      	cmp	r3, r5
   10b06:	f000 0207 	and.w	r2, r0, #7
   10b0a:	d02e      	beq.n	10b6a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10b0c:	2a02      	cmp	r2, #2
   10b0e:	d10e      	bne.n	10b2e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   10b10:	3301      	adds	r3, #1
   10b12:	8363      	strh	r3, [r4, #26]
	rv = state;
   10b14:	4615      	mov	r5, r2
		notify = true;
   10b16:	2301      	movs	r3, #1
	__asm__ volatile(
   10b18:	f381 8811 	msr	BASEPRI, r1
   10b1c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   10b20:	b1b3      	cbz	r3, 10b50 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   10b22:	2300      	movs	r3, #0
   10b24:	4631      	mov	r1, r6
   10b26:	4620      	mov	r0, r4
   10b28:	f7ff ff93 	bl	10a52 <notify_one>
   10b2c:	e010      	b.n	10b50 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   10b2e:	0783      	lsls	r3, r0, #30
   10b30:	d001      	beq.n	10b36 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   10b32:	2a06      	cmp	r2, #6
   10b34:	d10e      	bne.n	10b54 <onoff_request+0x76>
	parent->next = child;
   10b36:	2300      	movs	r3, #0
   10b38:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   10b3a:	6863      	ldr	r3, [r4, #4]
   10b3c:	b993      	cbnz	r3, 10b64 <onoff_request+0x86>
	list->head = node;
   10b3e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   10b42:	4615      	mov	r5, r2
   10b44:	b962      	cbnz	r2, 10b60 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   10b46:	460a      	mov	r2, r1
   10b48:	4620      	mov	r0, r4
   10b4a:	2102      	movs	r1, #2
   10b4c:	f7f8 ff9c 	bl	9a88 <process_event>
		}
	}

	return rv;
}
   10b50:	4628      	mov	r0, r5
   10b52:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   10b54:	2a05      	cmp	r2, #5
   10b56:	bf0c      	ite	eq
   10b58:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   10b5c:	f06f 0504 	mvnne.w	r5, #4
   10b60:	2300      	movs	r3, #0
   10b62:	e7d9      	b.n	10b18 <onoff_request+0x3a>
	parent->next = child;
   10b64:	601e      	str	r6, [r3, #0]
	list->tail = node;
   10b66:	6066      	str	r6, [r4, #4]
}
   10b68:	e7eb      	b.n	10b42 <onoff_request+0x64>
		rv = -EAGAIN;
   10b6a:	f06f 050a 	mvn.w	r5, #10
   10b6e:	e7f7      	b.n	10b60 <onoff_request+0x82>

00010b70 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   10b70:	4604      	mov	r4, r0
   10b72:	b508      	push	{r3, lr}
   10b74:	4608      	mov	r0, r1
   10b76:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   10b78:	461a      	mov	r2, r3
   10b7a:	47a0      	blx	r4
	return z_impl_k_current_get();
   10b7c:	f7ff fbac 	bl	102d8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   10b80:	f7fb f9ae 	bl	bee0 <z_impl_k_thread_abort>

00010b84 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   10b84:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   10b86:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   10b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   10b8e:	bf2c      	ite	cs
   10b90:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   10b94:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   10b98:	4770      	bx	lr

00010b9a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10b9a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   10b9e:	6880      	ldr	r0, [r0, #8]
   10ba0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   10ba4:	bf2c      	ite	cs
   10ba6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   10baa:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   10bae:	4770      	bx	lr

00010bb0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   10bb0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   10bb2:	2201      	movs	r2, #1
   10bb4:	f7ff ffe6 	bl	10b84 <chunk_field>
}
   10bb8:	0840      	lsrs	r0, r0, #1
   10bba:	bd08      	pop	{r3, pc}

00010bbc <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   10bbc:	6883      	ldr	r3, [r0, #8]
   10bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   10bc2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   10bc6:	d308      	bcc.n	10bda <set_chunk_used+0x1e>
		if (used) {
   10bc8:	684b      	ldr	r3, [r1, #4]
   10bca:	b11a      	cbz	r2, 10bd4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   10bcc:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10bd0:	604b      	str	r3, [r1, #4]
   10bd2:	4770      	bx	lr
   10bd4:	f023 0301 	bic.w	r3, r3, #1
   10bd8:	e7fa      	b.n	10bd0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   10bda:	884b      	ldrh	r3, [r1, #2]
   10bdc:	b11a      	cbz	r2, 10be6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10bde:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10be2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   10be4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10be6:	f023 0301 	bic.w	r3, r3, #1
   10bea:	e7fa      	b.n	10be2 <set_chunk_used+0x26>

00010bec <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10bec:	0053      	lsls	r3, r2, #1
   10bee:	2201      	movs	r2, #1
   10bf0:	f7ff bfd3 	b.w	10b9a <chunk_set>

00010bf4 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   10bf4:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   10bf6:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10bf8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   10bfc:	bf2c      	ite	cs
   10bfe:	2002      	movcs	r0, #2
   10c00:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   10c02:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   10c04:	fab0 f080 	clz	r0, r0
}
   10c08:	f1c0 001f 	rsb	r0, r0, #31
   10c0c:	4770      	bx	lr

00010c0e <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   10c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c12:	4616      	mov	r6, r2
   10c14:	4604      	mov	r4, r0
   10c16:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   10c18:	f7ff ffca 	bl	10bb0 <chunk_size>
   10c1c:	4631      	mov	r1, r6
   10c1e:	4605      	mov	r5, r0
   10c20:	4620      	mov	r0, r4
   10c22:	f7ff ffc5 	bl	10bb0 <chunk_size>
   10c26:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   10c28:	462a      	mov	r2, r5
   10c2a:	4639      	mov	r1, r7
   10c2c:	4620      	mov	r0, r4
   10c2e:	f7ff ffdd 	bl	10bec <set_chunk_size>
	return c + chunk_size(h, c);
   10c32:	4631      	mov	r1, r6
   10c34:	4620      	mov	r0, r4
   10c36:	f7ff ffbb 	bl	10bb0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   10c3a:	462b      	mov	r3, r5
   10c3c:	1831      	adds	r1, r6, r0
   10c3e:	2200      	movs	r2, #0
   10c40:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   10c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10c46:	f7ff bfa8 	b.w	10b9a <chunk_set>

00010c4a <split_chunks>:
{
   10c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c4e:	4614      	mov	r4, r2
   10c50:	4605      	mov	r5, r0
   10c52:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   10c54:	f7ff ffac 	bl	10bb0 <chunk_size>
	chunksz_t lsz = rc - lc;
   10c58:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   10c5c:	1b37      	subs	r7, r6, r4
   10c5e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   10c60:	4642      	mov	r2, r8
   10c62:	4631      	mov	r1, r6
   10c64:	4628      	mov	r0, r5
   10c66:	f7ff ffc1 	bl	10bec <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   10c6a:	463a      	mov	r2, r7
   10c6c:	4621      	mov	r1, r4
   10c6e:	4628      	mov	r0, r5
   10c70:	f7ff ffbc 	bl	10bec <set_chunk_size>
   10c74:	4643      	mov	r3, r8
   10c76:	2200      	movs	r2, #0
   10c78:	4621      	mov	r1, r4
   10c7a:	4628      	mov	r0, r5
   10c7c:	f7ff ff8d 	bl	10b9a <chunk_set>
	return c + chunk_size(h, c);
   10c80:	4621      	mov	r1, r4
   10c82:	4628      	mov	r0, r5
   10c84:	f7ff ff94 	bl	10bb0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   10c88:	463b      	mov	r3, r7
   10c8a:	1821      	adds	r1, r4, r0
   10c8c:	2200      	movs	r2, #0
   10c8e:	4628      	mov	r0, r5
}
   10c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10c94:	f7ff bf81 	b.w	10b9a <chunk_set>

00010c98 <free_list_remove_bidx>:
{
   10c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c9c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   10c9e:	2203      	movs	r2, #3
   10ca0:	460e      	mov	r6, r1
   10ca2:	4604      	mov	r4, r0
   10ca4:	f7ff ff6e 	bl	10b84 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   10ca8:	4286      	cmp	r6, r0
   10caa:	4605      	mov	r5, r0
   10cac:	f107 0804 	add.w	r8, r7, #4
   10cb0:	d10b      	bne.n	10cca <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   10cb2:	2301      	movs	r3, #1
   10cb4:	fa03 f707 	lsl.w	r7, r3, r7
   10cb8:	68e3      	ldr	r3, [r4, #12]
   10cba:	ea23 0307 	bic.w	r3, r3, r7
   10cbe:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   10cc0:	2300      	movs	r3, #0
   10cc2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   10cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   10cca:	4631      	mov	r1, r6
   10ccc:	2202      	movs	r2, #2
   10cce:	4620      	mov	r0, r4
   10cd0:	f7ff ff58 	bl	10b84 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   10cd4:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   10cd6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   10cd8:	4601      	mov	r1, r0
		b->next = second;
   10cda:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   10cde:	4620      	mov	r0, r4
   10ce0:	2203      	movs	r2, #3
   10ce2:	f7ff ff5a 	bl	10b9a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   10ce6:	4633      	mov	r3, r6
   10ce8:	4629      	mov	r1, r5
   10cea:	4620      	mov	r0, r4
   10cec:	2202      	movs	r2, #2
}
   10cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10cf2:	f7ff bf52 	b.w	10b9a <chunk_set>

00010cf6 <free_list_remove>:
{
   10cf6:	b538      	push	{r3, r4, r5, lr}
   10cf8:	4604      	mov	r4, r0
   10cfa:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   10cfc:	f7ff ff58 	bl	10bb0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   10d00:	68a3      	ldr	r3, [r4, #8]
   10d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10d06:	4601      	mov	r1, r0
   10d08:	d301      	bcc.n	10d0e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   10d0a:	2801      	cmp	r0, #1
   10d0c:	d009      	beq.n	10d22 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   10d0e:	4620      	mov	r0, r4
   10d10:	f7ff ff70 	bl	10bf4 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   10d14:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   10d16:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   10d18:	4620      	mov	r0, r4
}
   10d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   10d1e:	f7ff bfbb 	b.w	10c98 <free_list_remove_bidx>
}
   10d22:	bd38      	pop	{r3, r4, r5, pc}

00010d24 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   10d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d28:	4605      	mov	r5, r0
   10d2a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   10d2c:	f7ff ff62 	bl	10bf4 <bucket_idx>
   10d30:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   10d34:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   10d36:	f8da 9010 	ldr.w	r9, [sl, #16]
   10d3a:	f1b9 0f00 	cmp.w	r9, #0
   10d3e:	d01b      	beq.n	10d78 <alloc_chunk+0x54>
   10d40:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   10d42:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   10d46:	4628      	mov	r0, r5
   10d48:	4621      	mov	r1, r4
   10d4a:	f7ff ff31 	bl	10bb0 <chunk_size>
   10d4e:	4540      	cmp	r0, r8
   10d50:	d307      	bcc.n	10d62 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   10d52:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   10d54:	4621      	mov	r1, r4
   10d56:	4628      	mov	r0, r5
   10d58:	f7ff ff9e 	bl	10c98 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   10d5c:	4620      	mov	r0, r4
   10d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   10d62:	2203      	movs	r2, #3
   10d64:	4621      	mov	r1, r4
   10d66:	4628      	mov	r0, r5
   10d68:	f7ff ff0c 	bl	10b84 <chunk_field>
		} while (--i && b->next != first);
   10d6c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   10d6e:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   10d72:	d001      	beq.n	10d78 <alloc_chunk+0x54>
   10d74:	4581      	cmp	r9, r0
   10d76:	d1e4      	bne.n	10d42 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   10d78:	68e9      	ldr	r1, [r5, #12]
   10d7a:	3601      	adds	r6, #1
   10d7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10d80:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   10d82:	400c      	ands	r4, r1
   10d84:	d0ea      	beq.n	10d5c <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   10d86:	fa94 f2a4 	rbit	r2, r4
   10d8a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   10d8e:	1d13      	adds	r3, r2, #4
   10d90:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   10d94:	e7de      	b.n	10d54 <alloc_chunk+0x30>

00010d96 <free_list_add>:
{
   10d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d9a:	4604      	mov	r4, r0
   10d9c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   10d9e:	f7ff ff07 	bl	10bb0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   10da2:	68a3      	ldr	r3, [r4, #8]
   10da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10da8:	4601      	mov	r1, r0
   10daa:	d301      	bcc.n	10db0 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   10dac:	2801      	cmp	r0, #1
   10dae:	d035      	beq.n	10e1c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   10db0:	4620      	mov	r0, r4
   10db2:	f7ff ff1f 	bl	10bf4 <bucket_idx>
	if (b->next == 0U) {
   10db6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   10dba:	6916      	ldr	r6, [r2, #16]
   10dbc:	b99e      	cbnz	r6, 10de6 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   10dbe:	2301      	movs	r3, #1
   10dc0:	fa03 f000 	lsl.w	r0, r3, r0
   10dc4:	68e3      	ldr	r3, [r4, #12]
   10dc6:	4303      	orrs	r3, r0
   10dc8:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   10dca:	4629      	mov	r1, r5
		b->next = c;
   10dcc:	6115      	str	r5, [r2, #16]
   10dce:	462b      	mov	r3, r5
   10dd0:	2202      	movs	r2, #2
   10dd2:	4620      	mov	r0, r4
   10dd4:	f7ff fee1 	bl	10b9a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   10dd8:	2203      	movs	r2, #3
   10dda:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   10ddc:	4620      	mov	r0, r4
}
   10dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10de2:	f7ff beda 	b.w	10b9a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   10de6:	2202      	movs	r2, #2
   10de8:	4631      	mov	r1, r6
   10dea:	4620      	mov	r0, r4
   10dec:	f7ff feca 	bl	10b84 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   10df0:	2202      	movs	r2, #2
   10df2:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   10df4:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   10df6:	4629      	mov	r1, r5
   10df8:	4620      	mov	r0, r4
   10dfa:	f7ff fece 	bl	10b9a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   10dfe:	4633      	mov	r3, r6
   10e00:	2203      	movs	r2, #3
   10e02:	4629      	mov	r1, r5
   10e04:	4620      	mov	r0, r4
   10e06:	f7ff fec8 	bl	10b9a <chunk_set>
   10e0a:	2203      	movs	r2, #3
   10e0c:	4639      	mov	r1, r7
   10e0e:	462b      	mov	r3, r5
   10e10:	4620      	mov	r0, r4
   10e12:	f7ff fec2 	bl	10b9a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   10e16:	2202      	movs	r2, #2
   10e18:	4631      	mov	r1, r6
   10e1a:	e7df      	b.n	10ddc <free_list_add+0x46>
   10e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e20 <free_chunk>:
{
   10e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e22:	460c      	mov	r4, r1
   10e24:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   10e26:	f7ff fec3 	bl	10bb0 <chunk_size>
   10e2a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   10e2c:	2201      	movs	r2, #1
   10e2e:	4631      	mov	r1, r6
   10e30:	4628      	mov	r0, r5
   10e32:	f7ff fea7 	bl	10b84 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   10e36:	07c3      	lsls	r3, r0, #31
   10e38:	d40c      	bmi.n	10e54 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   10e3a:	4631      	mov	r1, r6
   10e3c:	4628      	mov	r0, r5
   10e3e:	f7ff ff5a 	bl	10cf6 <free_list_remove>
	return c + chunk_size(h, c);
   10e42:	4621      	mov	r1, r4
   10e44:	4628      	mov	r0, r5
   10e46:	f7ff feb3 	bl	10bb0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   10e4a:	4621      	mov	r1, r4
   10e4c:	1822      	adds	r2, r4, r0
   10e4e:	4628      	mov	r0, r5
   10e50:	f7ff fedd 	bl	10c0e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   10e54:	2200      	movs	r2, #0
   10e56:	4621      	mov	r1, r4
   10e58:	4628      	mov	r0, r5
   10e5a:	f7ff fe93 	bl	10b84 <chunk_field>
   10e5e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   10e60:	2201      	movs	r2, #1
   10e62:	4639      	mov	r1, r7
   10e64:	4628      	mov	r0, r5
   10e66:	f7ff fe8d 	bl	10b84 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   10e6a:	f010 0601 	ands.w	r6, r0, #1
   10e6e:	d113      	bne.n	10e98 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   10e70:	4639      	mov	r1, r7
   10e72:	4628      	mov	r0, r5
   10e74:	f7ff ff3f 	bl	10cf6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   10e78:	4621      	mov	r1, r4
   10e7a:	4632      	mov	r2, r6
   10e7c:	4628      	mov	r0, r5
   10e7e:	f7ff fe81 	bl	10b84 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   10e82:	4622      	mov	r2, r4
   10e84:	1a21      	subs	r1, r4, r0
   10e86:	4628      	mov	r0, r5
   10e88:	f7ff fec1 	bl	10c0e <merge_chunks>
   10e8c:	4621      	mov	r1, r4
   10e8e:	4632      	mov	r2, r6
   10e90:	4628      	mov	r0, r5
   10e92:	f7ff fe77 	bl	10b84 <chunk_field>
   10e96:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   10e98:	4621      	mov	r1, r4
   10e9a:	4628      	mov	r0, r5
}
   10e9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   10ea0:	f7ff bf79 	b.w	10d96 <free_list_add>

00010ea4 <sys_heap_free>:
{
   10ea4:	b510      	push	{r4, lr}
	if (mem == NULL) {
   10ea6:	b191      	cbz	r1, 10ece <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   10ea8:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   10eaa:	6883      	ldr	r3, [r0, #8]
   10eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10eb0:	bf2c      	ite	cs
   10eb2:	2408      	movcs	r4, #8
   10eb4:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10eb6:	1b0c      	subs	r4, r1, r4
   10eb8:	1a24      	subs	r4, r4, r0
   10eba:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   10ebc:	4621      	mov	r1, r4
   10ebe:	2200      	movs	r2, #0
   10ec0:	f7ff fe7c 	bl	10bbc <set_chunk_used>
	free_chunk(h, c);
   10ec4:	4621      	mov	r1, r4
}
   10ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   10eca:	f7ff bfa9 	b.w	10e20 <free_chunk>
}
   10ece:	bd10      	pop	{r4, pc}

00010ed0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   10ed0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   10ed2:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   10ed4:	b909      	cbnz	r1, 10eda <sys_heap_alloc+0xa>
		return NULL;
   10ed6:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   10ed8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   10eda:	68ab      	ldr	r3, [r5, #8]
   10edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   10ee0:	d9f9      	bls.n	10ed6 <sys_heap_alloc+0x6>
   10ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10ee6:	bf2c      	ite	cs
   10ee8:	2208      	movcs	r2, #8
   10eea:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10eec:	1dcc      	adds	r4, r1, #7
   10eee:	4414      	add	r4, r2
   10ef0:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   10ef2:	4621      	mov	r1, r4
   10ef4:	4628      	mov	r0, r5
   10ef6:	f7ff ff15 	bl	10d24 <alloc_chunk>
	if (c == 0U) {
   10efa:	4606      	mov	r6, r0
   10efc:	2800      	cmp	r0, #0
   10efe:	d0ea      	beq.n	10ed6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   10f00:	4601      	mov	r1, r0
   10f02:	4628      	mov	r0, r5
   10f04:	f7ff fe54 	bl	10bb0 <chunk_size>
   10f08:	42a0      	cmp	r0, r4
   10f0a:	d909      	bls.n	10f20 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   10f0c:	4434      	add	r4, r6
   10f0e:	4631      	mov	r1, r6
   10f10:	4628      	mov	r0, r5
   10f12:	4622      	mov	r2, r4
   10f14:	f7ff fe99 	bl	10c4a <split_chunks>
		free_list_add(h, c + chunk_sz);
   10f18:	4621      	mov	r1, r4
   10f1a:	4628      	mov	r0, r5
   10f1c:	f7ff ff3b 	bl	10d96 <free_list_add>
	set_chunk_used(h, c, true);
   10f20:	4628      	mov	r0, r5
   10f22:	2201      	movs	r2, #1
   10f24:	4631      	mov	r1, r6
   10f26:	f7ff fe49 	bl	10bbc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   10f2a:	68ab      	ldr	r3, [r5, #8]
   10f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10f30:	bf2c      	ite	cs
   10f32:	2008      	movcs	r0, #8
   10f34:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   10f36:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   10f3a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   10f3c:	e7cc      	b.n	10ed8 <sys_heap_alloc+0x8>

00010f3e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10f3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   10f42:	6806      	ldr	r6, [r0, #0]
{
   10f44:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   10f46:	424a      	negs	r2, r1
   10f48:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   10f4c:	ea31 0202 	bics.w	r2, r1, r2
   10f50:	68b5      	ldr	r5, [r6, #8]
{
   10f52:	460b      	mov	r3, r1
	if (align != rew) {
   10f54:	d00f      	beq.n	10f76 <sys_heap_aligned_alloc+0x38>
   10f56:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   10f5a:	bf34      	ite	cc
   10f5c:	2104      	movcc	r1, #4
   10f5e:	2108      	movcs	r1, #8
   10f60:	42b9      	cmp	r1, r7
   10f62:	460a      	mov	r2, r1
   10f64:	46b9      	mov	r9, r7
   10f66:	bf28      	it	cs
   10f68:	463a      	movcs	r2, r7
		align -= rew;
   10f6a:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   10f6c:	b994      	cbnz	r4, 10f94 <sys_heap_aligned_alloc+0x56>
		return NULL;
   10f6e:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   10f70:	4628      	mov	r0, r5
   10f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10f76:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   10f7a:	bf34      	ite	cc
   10f7c:	2204      	movcc	r2, #4
   10f7e:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   10f80:	4291      	cmp	r1, r2
   10f82:	d804      	bhi.n	10f8e <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   10f84:	4621      	mov	r1, r4
}
   10f86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   10f8a:	f7ff bfa1 	b.w	10ed0 <sys_heap_alloc>
		rew = 0;
   10f8e:	f04f 0900 	mov.w	r9, #0
   10f92:	e7eb      	b.n	10f6c <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   10f94:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   10f98:	d9e9      	bls.n	10f6e <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   10f9a:	1de1      	adds	r1, r4, #7
   10f9c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   10fa0:	4439      	add	r1, r7
   10fa2:	bf2c      	ite	cs
   10fa4:	2308      	movcs	r3, #8
   10fa6:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10fa8:	1a89      	subs	r1, r1, r2
   10faa:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   10fac:	08c9      	lsrs	r1, r1, #3
   10fae:	4630      	mov	r0, r6
   10fb0:	f7ff feb8 	bl	10d24 <alloc_chunk>
	if (c0 == 0) {
   10fb4:	4680      	mov	r8, r0
   10fb6:	2800      	cmp	r0, #0
   10fb8:	d0d9      	beq.n	10f6e <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   10fba:	68b3      	ldr	r3, [r6, #8]
   10fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10fc0:	bf2c      	ite	cs
   10fc2:	2308      	movcs	r3, #8
   10fc4:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   10fc6:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   10fca:	441d      	add	r5, r3
   10fcc:	1e7a      	subs	r2, r7, #1
   10fce:	4435      	add	r5, r6
   10fd0:	427f      	negs	r7, r7
   10fd2:	4415      	add	r5, r2
   10fd4:	403d      	ands	r5, r7
   10fd6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10fda:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10fdc:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10fde:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10fe0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10fe2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   10fe6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   10fe8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10fec:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   10ff0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   10ff4:	d208      	bcs.n	11008 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   10ff6:	4601      	mov	r1, r0
   10ff8:	463a      	mov	r2, r7
   10ffa:	4630      	mov	r0, r6
   10ffc:	f7ff fe25 	bl	10c4a <split_chunks>
		free_list_add(h, c0);
   11000:	4641      	mov	r1, r8
   11002:	4630      	mov	r0, r6
   11004:	f7ff fec7 	bl	10d96 <free_list_add>
	return c + chunk_size(h, c);
   11008:	4639      	mov	r1, r7
   1100a:	4630      	mov	r0, r6
   1100c:	f7ff fdd0 	bl	10bb0 <chunk_size>
   11010:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   11012:	4284      	cmp	r4, r0
   11014:	d208      	bcs.n	11028 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   11016:	4639      	mov	r1, r7
   11018:	4630      	mov	r0, r6
   1101a:	4622      	mov	r2, r4
   1101c:	f7ff fe15 	bl	10c4a <split_chunks>
		free_list_add(h, c_end);
   11020:	4621      	mov	r1, r4
   11022:	4630      	mov	r0, r6
   11024:	f7ff feb7 	bl	10d96 <free_list_add>
	set_chunk_used(h, c, true);
   11028:	2201      	movs	r2, #1
   1102a:	4639      	mov	r1, r7
   1102c:	4630      	mov	r0, r6
   1102e:	f7ff fdc5 	bl	10bbc <set_chunk_used>
	return mem;
   11032:	e79d      	b.n	10f70 <sys_heap_aligned_alloc+0x32>

00011034 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   11034:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1103a:	bf2c      	ite	cs
   1103c:	2508      	movcs	r5, #8
   1103e:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   11040:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11042:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11044:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11046:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1104a:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1104e:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   11050:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11052:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   11054:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11056:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   11058:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1105a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1105c:	4620      	mov	r0, r4
   1105e:	f7ff fdc9 	bl	10bf4 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11062:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11064:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11066:	1c41      	adds	r1, r0, #1
   11068:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1106a:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1106e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   11070:	428b      	cmp	r3, r1
   11072:	db2f      	blt.n	110d4 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   11074:	4632      	mov	r2, r6
   11076:	4620      	mov	r0, r4
   11078:	2100      	movs	r1, #0
   1107a:	f7ff fdb7 	bl	10bec <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1107e:	2300      	movs	r3, #0
   11080:	461a      	mov	r2, r3
   11082:	4619      	mov	r1, r3
   11084:	4620      	mov	r0, r4
   11086:	f7ff fd88 	bl	10b9a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1108a:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1108c:	4620      	mov	r0, r4
   1108e:	2201      	movs	r2, #1
   11090:	2100      	movs	r1, #0
   11092:	f7ff fd93 	bl	10bbc <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11096:	463a      	mov	r2, r7
   11098:	4631      	mov	r1, r6
   1109a:	f7ff fda7 	bl	10bec <set_chunk_size>
   1109e:	4633      	mov	r3, r6
   110a0:	4631      	mov	r1, r6
   110a2:	4620      	mov	r0, r4
   110a4:	2200      	movs	r2, #0
   110a6:	f7ff fd78 	bl	10b9a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   110aa:	4629      	mov	r1, r5
   110ac:	4620      	mov	r0, r4
   110ae:	2200      	movs	r2, #0
   110b0:	f7ff fd9c 	bl	10bec <set_chunk_size>
   110b4:	463b      	mov	r3, r7
   110b6:	4629      	mov	r1, r5
   110b8:	4620      	mov	r0, r4
   110ba:	2200      	movs	r2, #0
   110bc:	f7ff fd6d 	bl	10b9a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   110c0:	4629      	mov	r1, r5
   110c2:	4620      	mov	r0, r4
   110c4:	2201      	movs	r2, #1
   110c6:	f7ff fd79 	bl	10bbc <set_chunk_used>

	free_list_add(h, chunk0_size);
   110ca:	4631      	mov	r1, r6
}
   110cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   110d0:	f7ff be61 	b.w	10d96 <free_list_add>
		h->buckets[i].next = 0;
   110d4:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   110d8:	3301      	adds	r3, #1
   110da:	e7c9      	b.n	11070 <sys_heap_init+0x3c>

000110dc <encode_uint>:
{
   110dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110e0:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   110e2:	78d3      	ldrb	r3, [r2, #3]
{
   110e4:	4614      	mov	r4, r2
	switch (specifier) {
   110e6:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   110e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   110ec:	4606      	mov	r6, r0
   110ee:	460f      	mov	r7, r1
   110f0:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   110f2:	d02d      	beq.n	11150 <encode_uint+0x74>
   110f4:	d828      	bhi.n	11148 <encode_uint+0x6c>
		return 16;
   110f6:	2b58      	cmp	r3, #88	; 0x58
   110f8:	bf14      	ite	ne
   110fa:	250a      	movne	r5, #10
   110fc:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   110fe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   11102:	46aa      	mov	sl, r5
   11104:	f04f 0b00 	mov.w	fp, #0
   11108:	4652      	mov	r2, sl
   1110a:	465b      	mov	r3, fp
   1110c:	4630      	mov	r0, r6
   1110e:	4639      	mov	r1, r7
   11110:	f7ee ffe4 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11114:	2a09      	cmp	r2, #9
   11116:	b2d3      	uxtb	r3, r2
   11118:	d81f      	bhi.n	1115a <encode_uint+0x7e>
   1111a:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1111c:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1111e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   11120:	bf08      	it	eq
   11122:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11124:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   11128:	d301      	bcc.n	1112e <encode_uint+0x52>
   1112a:	45c8      	cmp	r8, r9
   1112c:	d812      	bhi.n	11154 <encode_uint+0x78>
	if (conv->flag_hash) {
   1112e:	7823      	ldrb	r3, [r4, #0]
   11130:	069b      	lsls	r3, r3, #26
   11132:	d505      	bpl.n	11140 <encode_uint+0x64>
		if (radix == 8) {
   11134:	2d08      	cmp	r5, #8
   11136:	d116      	bne.n	11166 <encode_uint+0x8a>
			conv->altform_0 = true;
   11138:	78a3      	ldrb	r3, [r4, #2]
   1113a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1113e:	70a3      	strb	r3, [r4, #2]
}
   11140:	4640      	mov	r0, r8
   11142:	b003      	add	sp, #12
   11144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   11148:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1114c:	2b70      	cmp	r3, #112	; 0x70
   1114e:	e7d3      	b.n	110f8 <encode_uint+0x1c>
	switch (specifier) {
   11150:	2508      	movs	r5, #8
   11152:	e7d4      	b.n	110fe <encode_uint+0x22>
		value /= radix;
   11154:	4606      	mov	r6, r0
   11156:	460f      	mov	r7, r1
   11158:	e7d6      	b.n	11108 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1115a:	9a01      	ldr	r2, [sp, #4]
   1115c:	2a19      	cmp	r2, #25
   1115e:	bf94      	ite	ls
   11160:	3337      	addls	r3, #55	; 0x37
   11162:	3357      	addhi	r3, #87	; 0x57
   11164:	e7da      	b.n	1111c <encode_uint+0x40>
		} else if (radix == 16) {
   11166:	2d10      	cmp	r5, #16
   11168:	d1ea      	bne.n	11140 <encode_uint+0x64>
			conv->altform_0c = true;
   1116a:	78a3      	ldrb	r3, [r4, #2]
   1116c:	f043 0310 	orr.w	r3, r3, #16
   11170:	e7e5      	b.n	1113e <encode_uint+0x62>

00011172 <outs>:
{
   11172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11176:	4607      	mov	r7, r0
   11178:	4688      	mov	r8, r1
   1117a:	4615      	mov	r5, r2
   1117c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1117e:	4614      	mov	r4, r2
   11180:	42b4      	cmp	r4, r6
   11182:	eba4 0005 	sub.w	r0, r4, r5
   11186:	d302      	bcc.n	1118e <outs+0x1c>
   11188:	b93e      	cbnz	r6, 1119a <outs+0x28>
   1118a:	7823      	ldrb	r3, [r4, #0]
   1118c:	b12b      	cbz	r3, 1119a <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1118e:	f814 0b01 	ldrb.w	r0, [r4], #1
   11192:	4641      	mov	r1, r8
   11194:	47b8      	blx	r7
		if (rc < 0) {
   11196:	2800      	cmp	r0, #0
   11198:	daf2      	bge.n	11180 <outs+0xe>
}
   1119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001119e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1119e:	4770      	bx	lr

000111a0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   111a0:	2300      	movs	r3, #0
	list->head = NULL;
   111a2:	e9c0 3300 	strd	r3, r3, [r0]
}
   111a6:	4770      	bx	lr

000111a8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   111a8:	6803      	ldr	r3, [r0, #0]
   111aa:	b923      	cbnz	r3, 111b6 <log_list_add_tail+0xe>
		list->head = msg;
   111ac:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   111ae:	2300      	movs	r3, #0
	list->tail = msg;
   111b0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   111b2:	600b      	str	r3, [r1, #0]
}
   111b4:	4770      	bx	lr
		list->tail->next = msg;
   111b6:	6843      	ldr	r3, [r0, #4]
   111b8:	6019      	str	r1, [r3, #0]
   111ba:	e7f8      	b.n	111ae <log_list_add_tail+0x6>

000111bc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   111bc:	6800      	ldr	r0, [r0, #0]
   111be:	4770      	bx	lr

000111c0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   111c0:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   111c2:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   111c4:	b108      	cbz	r0, 111ca <log_list_head_get+0xa>
		list->head = list->head->next;
   111c6:	6802      	ldr	r2, [r0, #0]
   111c8:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   111ca:	4770      	bx	lr

000111cc <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   111cc:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   111ce:	f7f9 fbd5 	bl	a97c <log_msg_chunk_alloc>

	if (msg != NULL) {
   111d2:	b118      	cbz	r0, 111dc <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   111d4:	2301      	movs	r3, #1
   111d6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   111d8:	2300      	movs	r3, #0
   111da:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   111dc:	bd08      	pop	{r3, pc}

000111de <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   111de:	f7fa ba23 	b.w	b628 <sys_clock_cycle_get_32>

000111e2 <dummy_timestamp>:
   111e2:	2000      	movs	r0, #0
   111e4:	4770      	bx	lr

000111e6 <z_log_get_s_mask>:
{
   111e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   111e8:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   111ea:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   111ec:	4603      	mov	r3, r0
	bool arm = false;
   111ee:	4602      	mov	r2, r0
				mask |= BIT(arg);
   111f0:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   111f2:	f815 4b01 	ldrb.w	r4, [r5], #1
   111f6:	b10c      	cbz	r4, 111fc <z_log_get_s_mask+0x16>
   111f8:	428b      	cmp	r3, r1
   111fa:	d300      	bcc.n	111fe <z_log_get_s_mask+0x18>
}
   111fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   111fe:	2c25      	cmp	r4, #37	; 0x25
   11200:	d102      	bne.n	11208 <z_log_get_s_mask+0x22>
			arm = !arm;
   11202:	f082 0201 	eor.w	r2, r2, #1
   11206:	e7f4      	b.n	111f2 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   11208:	2a00      	cmp	r2, #0
   1120a:	d0f2      	beq.n	111f2 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1120c:	f044 0620 	orr.w	r6, r4, #32
   11210:	3e61      	subs	r6, #97	; 0x61
   11212:	2e19      	cmp	r6, #25
   11214:	d8ed      	bhi.n	111f2 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   11216:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   11218:	bf04      	itt	eq
   1121a:	fa07 f203 	lsleq.w	r2, r7, r3
   1121e:	4310      	orreq	r0, r2
			arg++;
   11220:	3301      	adds	r3, #1
			arm = false;
   11222:	2200      	movs	r2, #0
   11224:	e7e5      	b.n	111f2 <z_log_get_s_mask+0xc>

00011226 <log_0>:
{
   11226:	b538      	push	{r3, r4, r5, lr}
   11228:	4605      	mov	r5, r0
   1122a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1122c:	f7ff ffce 	bl	111cc <z_log_msg_std_alloc>

	if (msg != NULL) {
   11230:	b128      	cbz	r0, 1123e <log_0+0x18>
		msg->str = str;
   11232:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   11234:	4621      	mov	r1, r4
}
   11236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1123a:	f7f9 bab9 	b.w	a7b0 <msg_finalize>
}
   1123e:	bd38      	pop	{r3, r4, r5, pc}

00011240 <log_1>:
{
   11240:	b570      	push	{r4, r5, r6, lr}
   11242:	4606      	mov	r6, r0
   11244:	460d      	mov	r5, r1
   11246:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   11248:	f7ff ffc0 	bl	111cc <z_log_msg_std_alloc>

	if (msg != NULL) {
   1124c:	b158      	cbz	r0, 11266 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1124e:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   11250:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   11252:	2101      	movs	r1, #1
   11254:	f361 1207 	bfi	r2, r1, #4, #4
   11258:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1125a:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1125c:	4621      	mov	r1, r4
}
   1125e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   11262:	f7f9 baa5 	b.w	a7b0 <msg_finalize>
}
   11266:	bd70      	pop	{r4, r5, r6, pc}

00011268 <log_2>:
{
   11268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1126c:	4680      	mov	r8, r0
   1126e:	460f      	mov	r7, r1
   11270:	4616      	mov	r6, r2
   11272:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   11274:	f7ff ffaa 	bl	111cc <z_log_msg_std_alloc>

	if (msg != NULL) {
   11278:	b168      	cbz	r0, 11296 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1127a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1127c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   11280:	2202      	movs	r2, #2
   11282:	f362 1307 	bfi	r3, r2, #4, #4
   11286:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   11288:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1128c:	4629      	mov	r1, r5
}
   1128e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   11292:	f7f9 ba8d 	b.w	a7b0 <msg_finalize>
}
   11296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001129a <log_3>:
{
   1129a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1129e:	4680      	mov	r8, r0
   112a0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   112a4:	460f      	mov	r7, r1
   112a6:	4616      	mov	r6, r2
   112a8:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   112aa:	f7ff ff8f 	bl	111cc <z_log_msg_std_alloc>

	if (msg != NULL) {
   112ae:	b170      	cbz	r0, 112ce <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   112b0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   112b2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   112b6:	2203      	movs	r2, #3
   112b8:	f362 1307 	bfi	r3, r2, #4, #4
   112bc:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   112be:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   112c2:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   112c4:	4649      	mov	r1, r9
}
   112c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   112ca:	f7f9 ba71 	b.w	a7b0 <msg_finalize>
}
   112ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000112d2 <log_n>:
{
   112d2:	b510      	push	{r4, lr}
   112d4:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   112d6:	f000 f8ac 	bl	11432 <log_msg_create_n>
		if (msg == NULL) {
   112da:	b120      	cbz	r0, 112e6 <log_n+0x14>
		msg_finalize(msg, src_level);
   112dc:	4621      	mov	r1, r4
}
   112de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   112e2:	f7f9 ba65 	b.w	a7b0 <msg_finalize>
}
   112e6:	bd10      	pop	{r4, pc}

000112e8 <log_hexdump>:
{
   112e8:	b510      	push	{r4, lr}
   112ea:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   112ec:	f000 f8f5 	bl	114da <log_msg_hexdump_create>
		if (msg == NULL) {
   112f0:	b120      	cbz	r0, 112fc <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   112f2:	4621      	mov	r1, r4
}
   112f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   112f8:	f7f9 ba5a 	b.w	a7b0 <msg_finalize>
}
   112fc:	bd10      	pop	{r4, pc}

000112fe <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   112fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11302:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   11304:	8903      	ldrh	r3, [r0, #8]
{
   11306:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1130a:	460e      	mov	r6, r1
   1130c:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1130e:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   11312:	42a2      	cmp	r2, r4
   11314:	d803      	bhi.n	1131e <log_msg_hexdump_data_op+0x20>
		*length = 0;
   11316:	2300      	movs	r3, #0
   11318:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1131a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1131e:	680b      	ldr	r3, [r1, #0]
   11320:	4423      	add	r3, r4
   11322:	4293      	cmp	r3, r2
		*length = available_len - offset;
   11324:	bf84      	itt	hi
   11326:	1b13      	subhi	r3, r2, r4
   11328:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1132a:	2a0c      	cmp	r2, #12
	req_len = *length;
   1132c:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   11330:	d92a      	bls.n	11388 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   11332:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   11334:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   11338:	d82d      	bhi.n	11396 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1133a:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1133c:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1133e:	454a      	cmp	r2, r9
   11340:	bf28      	it	cs
   11342:	464a      	movcs	r2, r9
   11344:	4615      	mov	r5, r2
		if (put_op) {
   11346:	4420      	add	r0, r4
   11348:	b317      	cbz	r7, 11390 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1134a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1134c:	f000 fba0 	bl	11a90 <memcpy>
		req_len -= cpy_len;
   11350:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   11354:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   11356:	f1b9 0f00 	cmp.w	r9, #0
   1135a:	d0de      	beq.n	1131a <log_msg_hexdump_data_op+0x1c>
   1135c:	f1b8 0f00 	cmp.w	r8, #0
   11360:	d0db      	beq.n	1131a <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   11362:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11366:	454d      	cmp	r5, r9
   11368:	bf28      	it	cs
   1136a:	464d      	movcs	r5, r9
		if (put_op) {
   1136c:	1d20      	adds	r0, r4, #4
   1136e:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   11370:	462a      	mov	r2, r5
		if (put_op) {
   11372:	b1bf      	cbz	r7, 113a4 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   11374:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   11376:	f000 fb8b 	bl	11a90 <memcpy>
		req_len -= cpy_len;
   1137a:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1137e:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   11382:	442e      	add	r6, r5
		offset = 0;
   11384:	2400      	movs	r4, #0
   11386:	e7e6      	b.n	11356 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   11388:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1138a:	f04f 0800 	mov.w	r8, #0
   1138e:	e7d6      	b.n	1133e <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   11390:	4601      	mov	r1, r0
   11392:	4630      	mov	r0, r6
   11394:	e7da      	b.n	1134c <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   11396:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   11398:	2c1b      	cmp	r4, #27
   1139a:	d9dc      	bls.n	11356 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1139c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   113a0:	3c1c      	subs	r4, #28
   113a2:	e7f9      	b.n	11398 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   113a4:	4601      	mov	r1, r0
   113a6:	4630      	mov	r0, r6
   113a8:	e7e5      	b.n	11376 <log_msg_hexdump_data_op+0x78>

000113aa <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   113aa:	3004      	adds	r0, #4
   113ac:	f3bf 8f5b 	dmb	ish
   113b0:	e850 3f00 	ldrex	r3, [r0]
   113b4:	3301      	adds	r3, #1
   113b6:	e840 3200 	strex	r2, r3, [r0]
   113ba:	2a00      	cmp	r2, #0
   113bc:	d1f8      	bne.n	113b0 <log_msg_get+0x6>
   113be:	f3bf 8f5b 	dmb	ish
}
   113c2:	4770      	bx	lr

000113c4 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   113c4:	7a40      	ldrb	r0, [r0, #9]
}
   113c6:	0900      	lsrs	r0, r0, #4
   113c8:	4770      	bx	lr

000113ca <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   113ca:	7a43      	ldrb	r3, [r0, #9]
   113cc:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   113d0:	ea4f 1213 	mov.w	r2, r3, lsr #4
   113d4:	d216      	bcs.n	11404 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   113d6:	2a03      	cmp	r2, #3
   113d8:	d803      	bhi.n	113e2 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   113da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   113de:	6948      	ldr	r0, [r1, #20]
   113e0:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   113e2:	2901      	cmp	r1, #1
   113e4:	d803      	bhi.n	113ee <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   113e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   113ea:	6988      	ldr	r0, [r1, #24]
   113ec:	4770      	bx	lr
	cont = msg->payload.ext.next;
   113ee:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   113f0:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   113f2:	2906      	cmp	r1, #6
   113f4:	d803      	bhi.n	113fe <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   113f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   113fa:	6848      	ldr	r0, [r1, #4]
   113fc:	4770      	bx	lr
		cont = cont->next;
   113fe:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   11400:	3907      	subs	r1, #7
		cont = cont->next;
   11402:	e7f6      	b.n	113f2 <log_msg_arg_get+0x28>
		return 0;
   11404:	2000      	movs	r0, #0
}
   11406:	4770      	bx	lr

00011408 <log_msg_put>:
{
   11408:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1140a:	1d02      	adds	r2, r0, #4
   1140c:	f3bf 8f5b 	dmb	ish
   11410:	e852 1f00 	ldrex	r1, [r2]
   11414:	3901      	subs	r1, #1
   11416:	e842 1c00 	strex	ip, r1, [r2]
   1141a:	f1bc 0f00 	cmp.w	ip, #0
   1141e:	d1f7      	bne.n	11410 <log_msg_put+0x8>
   11420:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   11424:	685b      	ldr	r3, [r3, #4]
   11426:	b90b      	cbnz	r3, 1142c <log_msg_put+0x24>
		msg_free(msg);
   11428:	f7f9 babc 	b.w	a9a4 <msg_free>
}
   1142c:	4770      	bx	lr

0001142e <log_msg_str_get>:
}
   1142e:	6900      	ldr	r0, [r0, #16]
   11430:	4770      	bx	lr

00011432 <log_msg_create_n>:
{
   11432:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11436:	4681      	mov	r9, r0
   11438:	4688      	mov	r8, r1
   1143a:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1143c:	f7f9 fa9e 	bl	a97c <log_msg_chunk_alloc>
	if (msg != NULL) {
   11440:	4604      	mov	r4, r0
   11442:	b330      	cbz	r0, 11492 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   11444:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   11446:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11448:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1144a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1144c:	8107      	strh	r7, [r0, #8]
   1144e:	d909      	bls.n	11464 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   11450:	2202      	movs	r2, #2
   11452:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   11454:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   11458:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1145c:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1145e:	f1ba 0f00 	cmp.w	sl, #0
   11462:	dc0e      	bgt.n	11482 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   11464:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   11466:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1146a:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1146e:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   11470:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   11472:	d818      	bhi.n	114a6 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   11474:	00aa      	lsls	r2, r5, #2
   11476:	4641      	mov	r1, r8
   11478:	f104 0014 	add.w	r0, r4, #20
   1147c:	f000 fb08 	bl	11a90 <memcpy>
	while (nargs != 0U) {
   11480:	e007      	b.n	11492 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   11482:	f7f9 fa7b 	bl	a97c <log_msg_chunk_alloc>
		if (cont == NULL) {
   11486:	4606      	mov	r6, r0
   11488:	b930      	cbnz	r0, 11498 <log_msg_create_n+0x66>
			msg_free(msg);
   1148a:	4620      	mov	r0, r4
   1148c:	f7f9 fa8a 	bl	a9a4 <msg_free>
			return NULL;
   11490:	4634      	mov	r4, r6
}
   11492:	4620      	mov	r0, r4
   11494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   11498:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1149c:	f1aa 0a07 	sub.w	sl, sl, #7
   114a0:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   114a2:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   114a4:	e7db      	b.n	1145e <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   114a6:	4641      	mov	r1, r8
   114a8:	2208      	movs	r2, #8
   114aa:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   114ae:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   114b0:	f000 faee 	bl	11a90 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   114b4:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   114b6:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   114ba:	2d07      	cmp	r5, #7
   114bc:	462e      	mov	r6, r5
   114be:	bf28      	it	cs
   114c0:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   114c2:	ea4f 0986 	mov.w	r9, r6, lsl #2
   114c6:	4641      	mov	r1, r8
   114c8:	1d38      	adds	r0, r7, #4
   114ca:	464a      	mov	r2, r9
   114cc:	f000 fae0 	bl	11a90 <memcpy>
	while (nargs != 0U) {
   114d0:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   114d2:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   114d4:	44c8      	add	r8, r9
	while (nargs != 0U) {
   114d6:	d1f0      	bne.n	114ba <log_msg_create_n+0x88>
   114d8:	e7db      	b.n	11492 <log_msg_create_n+0x60>

000114da <log_msg_hexdump_create>:
{
   114da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   114de:	f643 75ff 	movw	r5, #16383	; 0x3fff
   114e2:	4295      	cmp	r5, r2
{
   114e4:	4680      	mov	r8, r0
   114e6:	460e      	mov	r6, r1
   114e8:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   114ea:	bf28      	it	cs
   114ec:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   114ee:	f7f9 fa45 	bl	a97c <log_msg_chunk_alloc>
	if (msg == NULL) {
   114f2:	4604      	mov	r4, r0
   114f4:	b380      	cbz	r0, 11558 <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   114f6:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   114f8:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   114fc:	2301      	movs	r3, #1
   114fe:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   11500:	00ab      	lsls	r3, r5, #2
   11502:	f043 0301 	orr.w	r3, r3, #1
   11506:	f002 0202 	and.w	r2, r2, #2
   1150a:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1150c:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1150e:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   11510:	f100 0814 	add.w	r8, r0, #20
   11514:	d917      	bls.n	11546 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   11516:	2208      	movs	r2, #8
   11518:	4631      	mov	r1, r6
   1151a:	3018      	adds	r0, #24
   1151c:	f000 fab8 	bl	11a90 <memcpy>
		msg->hdr.params.generic.ext = 1;
   11520:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   11522:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   11524:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   11528:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1152a:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1152c:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1152e:	3d08      	subs	r5, #8
	while (length > 0) {
   11530:	4699      	mov	r9, r3
   11532:	b18d      	cbz	r5, 11558 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   11534:	f7f9 fa22 	bl	a97c <log_msg_chunk_alloc>
		if (cont == NULL) {
   11538:	4607      	mov	r7, r0
   1153a:	b980      	cbnz	r0, 1155e <log_msg_hexdump_create+0x84>
			msg_free(msg);
   1153c:	4620      	mov	r0, r4
   1153e:	f7f9 fa31 	bl	a9a4 <msg_free>
			return NULL;
   11542:	463c      	mov	r4, r7
   11544:	e008      	b.n	11558 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   11546:	462a      	mov	r2, r5
   11548:	4631      	mov	r1, r6
   1154a:	4640      	mov	r0, r8
   1154c:	f000 faa0 	bl	11a90 <memcpy>
		msg->hdr.params.generic.ext = 0;
   11550:	7a23      	ldrb	r3, [r4, #8]
   11552:	f36f 0341 	bfc	r3, #1, #1
   11556:	7223      	strb	r3, [r4, #8]
}
   11558:	4620      	mov	r0, r4
   1155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1155e:	2d1c      	cmp	r5, #28
   11560:	462f      	mov	r7, r5
   11562:	bf28      	it	cs
   11564:	271c      	movcs	r7, #28
		*prev_cont = cont;
   11566:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1156a:	4631      	mov	r1, r6
		cont->next = NULL;
   1156c:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   11570:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   11572:	463a      	mov	r2, r7
   11574:	3004      	adds	r0, #4
   11576:	f000 fa8b 	bl	11a90 <memcpy>
		data += chunk_length;
   1157a:	443e      	add	r6, r7
		length -= chunk_length;
   1157c:	1bed      	subs	r5, r5, r7
   1157e:	e7d8      	b.n	11532 <log_msg_hexdump_create+0x58>

00011580 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   11580:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   11582:	2400      	movs	r4, #0
   11584:	9400      	str	r4, [sp, #0]
   11586:	f7ff feba 	bl	112fe <log_msg_hexdump_data_op>
}
   1158a:	b002      	add	sp, #8
   1158c:	bd10      	pop	{r4, pc}

0001158e <buffer_write>:
{
   1158e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11590:	4606      	mov	r6, r0
   11592:	460d      	mov	r5, r1
   11594:	4614      	mov	r4, r2
   11596:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   11598:	4621      	mov	r1, r4
   1159a:	4628      	mov	r0, r5
   1159c:	463a      	mov	r2, r7
   1159e:	47b0      	blx	r6
	} while (len != 0);
   115a0:	1a24      	subs	r4, r4, r0
		buf += processed;
   115a2:	4405      	add	r5, r0
	} while (len != 0);
   115a4:	d1f8      	bne.n	11598 <buffer_write+0xa>
}
   115a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000115a8 <std_print>:
{
   115a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   115ac:	b08e      	sub	sp, #56	; 0x38
   115ae:	af0e      	add	r7, sp, #56	; 0x38
   115b0:	4680      	mov	r8, r0
   115b2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   115b4:	f7ff ff3b 	bl	1142e <log_msg_str_get>
   115b8:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   115ba:	4640      	mov	r0, r8
   115bc:	f7ff ff02 	bl	113c4 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   115c0:	0083      	lsls	r3, r0, #2
   115c2:	3307      	adds	r3, #7
   115c4:	f023 0307 	bic.w	r3, r3, #7
   115c8:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   115cc:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   115ce:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   115d0:	f04f 0900 	mov.w	r9, #0
   115d4:	45d1      	cmp	r9, sl
   115d6:	d116      	bne.n	11606 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   115d8:	4640      	mov	r0, r8
   115da:	f7ff fef3 	bl	113c4 <log_msg_nargs_get>
   115de:	280f      	cmp	r0, #15
   115e0:	d81e      	bhi.n	11620 <std_print+0x78>
   115e2:	e8df f010 	tbh	[pc, r0, lsl #1]
   115e6:	0019      	.short	0x0019
   115e8:	00260020 	.word	0x00260020
   115ec:	0036002d 	.word	0x0036002d
   115f0:	004e0041 	.word	0x004e0041
   115f4:	006e005d 	.word	0x006e005d
   115f8:	00960081 	.word	0x00960081
   115fc:	00c600ad 	.word	0x00c600ad
   11600:	00fe00e1 	.word	0x00fe00e1
   11604:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   11606:	4649      	mov	r1, r9
   11608:	4640      	mov	r0, r8
   1160a:	f7ff fede 	bl	113ca <log_msg_arg_get>
   1160e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   11612:	f109 0901 	add.w	r9, r9, #1
   11616:	e7dd      	b.n	115d4 <std_print+0x2c>
		print_formatted(output, str);
   11618:	4631      	mov	r1, r6
   1161a:	4628      	mov	r0, r5
   1161c:	f7f9 fa00 	bl	aa20 <print_formatted>
}
   11620:	46bd      	mov	sp, r7
   11622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   11626:	6822      	ldr	r2, [r4, #0]
   11628:	4631      	mov	r1, r6
   1162a:	4628      	mov	r0, r5
   1162c:	f7f9 f9f8 	bl	aa20 <print_formatted>
		break;
   11630:	e7f6      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   11632:	e9d4 2300 	ldrd	r2, r3, [r4]
   11636:	4631      	mov	r1, r6
   11638:	4628      	mov	r0, r5
   1163a:	f7f9 f9f1 	bl	aa20 <print_formatted>
		break;
   1163e:	e7ef      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   11640:	68a3      	ldr	r3, [r4, #8]
   11642:	9300      	str	r3, [sp, #0]
   11644:	e9d4 2300 	ldrd	r2, r3, [r4]
   11648:	4631      	mov	r1, r6
   1164a:	4628      	mov	r0, r5
   1164c:	f7f9 f9e8 	bl	aa20 <print_formatted>
		break;
   11650:	e7e6      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   11652:	68e3      	ldr	r3, [r4, #12]
   11654:	9301      	str	r3, [sp, #4]
   11656:	68a3      	ldr	r3, [r4, #8]
   11658:	9300      	str	r3, [sp, #0]
   1165a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1165e:	4631      	mov	r1, r6
   11660:	4628      	mov	r0, r5
   11662:	f7f9 f9dd 	bl	aa20 <print_formatted>
		break;
   11666:	e7db      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   11668:	6923      	ldr	r3, [r4, #16]
   1166a:	9302      	str	r3, [sp, #8]
   1166c:	68e3      	ldr	r3, [r4, #12]
   1166e:	9301      	str	r3, [sp, #4]
   11670:	68a3      	ldr	r3, [r4, #8]
   11672:	9300      	str	r3, [sp, #0]
   11674:	e9d4 2300 	ldrd	r2, r3, [r4]
   11678:	4631      	mov	r1, r6
   1167a:	4628      	mov	r0, r5
   1167c:	f7f9 f9d0 	bl	aa20 <print_formatted>
		break;
   11680:	e7ce      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   11682:	6963      	ldr	r3, [r4, #20]
   11684:	9303      	str	r3, [sp, #12]
   11686:	6923      	ldr	r3, [r4, #16]
   11688:	9302      	str	r3, [sp, #8]
   1168a:	68e3      	ldr	r3, [r4, #12]
   1168c:	9301      	str	r3, [sp, #4]
   1168e:	68a3      	ldr	r3, [r4, #8]
   11690:	9300      	str	r3, [sp, #0]
   11692:	e9d4 2300 	ldrd	r2, r3, [r4]
   11696:	4631      	mov	r1, r6
   11698:	4628      	mov	r0, r5
   1169a:	f7f9 f9c1 	bl	aa20 <print_formatted>
		break;
   1169e:	e7bf      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   116a0:	69a3      	ldr	r3, [r4, #24]
   116a2:	9304      	str	r3, [sp, #16]
   116a4:	6963      	ldr	r3, [r4, #20]
   116a6:	9303      	str	r3, [sp, #12]
   116a8:	6923      	ldr	r3, [r4, #16]
   116aa:	9302      	str	r3, [sp, #8]
   116ac:	68e3      	ldr	r3, [r4, #12]
   116ae:	9301      	str	r3, [sp, #4]
   116b0:	68a3      	ldr	r3, [r4, #8]
   116b2:	9300      	str	r3, [sp, #0]
   116b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   116b8:	4631      	mov	r1, r6
   116ba:	4628      	mov	r0, r5
   116bc:	f7f9 f9b0 	bl	aa20 <print_formatted>
		break;
   116c0:	e7ae      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   116c2:	69e3      	ldr	r3, [r4, #28]
   116c4:	9305      	str	r3, [sp, #20]
   116c6:	69a3      	ldr	r3, [r4, #24]
   116c8:	9304      	str	r3, [sp, #16]
   116ca:	6963      	ldr	r3, [r4, #20]
   116cc:	9303      	str	r3, [sp, #12]
   116ce:	6923      	ldr	r3, [r4, #16]
   116d0:	9302      	str	r3, [sp, #8]
   116d2:	68e3      	ldr	r3, [r4, #12]
   116d4:	9301      	str	r3, [sp, #4]
   116d6:	68a3      	ldr	r3, [r4, #8]
   116d8:	9300      	str	r3, [sp, #0]
   116da:	e9d4 2300 	ldrd	r2, r3, [r4]
   116de:	4631      	mov	r1, r6
   116e0:	4628      	mov	r0, r5
   116e2:	f7f9 f99d 	bl	aa20 <print_formatted>
		break;
   116e6:	e79b      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   116e8:	6a23      	ldr	r3, [r4, #32]
   116ea:	9306      	str	r3, [sp, #24]
   116ec:	69e3      	ldr	r3, [r4, #28]
   116ee:	9305      	str	r3, [sp, #20]
   116f0:	69a3      	ldr	r3, [r4, #24]
   116f2:	9304      	str	r3, [sp, #16]
   116f4:	6963      	ldr	r3, [r4, #20]
   116f6:	9303      	str	r3, [sp, #12]
   116f8:	6923      	ldr	r3, [r4, #16]
   116fa:	9302      	str	r3, [sp, #8]
   116fc:	68e3      	ldr	r3, [r4, #12]
   116fe:	9301      	str	r3, [sp, #4]
   11700:	68a3      	ldr	r3, [r4, #8]
   11702:	9300      	str	r3, [sp, #0]
   11704:	e9d4 2300 	ldrd	r2, r3, [r4]
   11708:	4631      	mov	r1, r6
   1170a:	4628      	mov	r0, r5
   1170c:	f7f9 f988 	bl	aa20 <print_formatted>
		break;
   11710:	e786      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   11712:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11714:	9307      	str	r3, [sp, #28]
   11716:	6a23      	ldr	r3, [r4, #32]
   11718:	9306      	str	r3, [sp, #24]
   1171a:	69e3      	ldr	r3, [r4, #28]
   1171c:	9305      	str	r3, [sp, #20]
   1171e:	69a3      	ldr	r3, [r4, #24]
   11720:	9304      	str	r3, [sp, #16]
   11722:	6963      	ldr	r3, [r4, #20]
   11724:	9303      	str	r3, [sp, #12]
   11726:	6923      	ldr	r3, [r4, #16]
   11728:	9302      	str	r3, [sp, #8]
   1172a:	68e3      	ldr	r3, [r4, #12]
   1172c:	9301      	str	r3, [sp, #4]
   1172e:	68a3      	ldr	r3, [r4, #8]
   11730:	9300      	str	r3, [sp, #0]
   11732:	e9d4 2300 	ldrd	r2, r3, [r4]
   11736:	4631      	mov	r1, r6
   11738:	4628      	mov	r0, r5
   1173a:	f7f9 f971 	bl	aa20 <print_formatted>
		break;
   1173e:	e76f      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   11740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11742:	9308      	str	r3, [sp, #32]
   11744:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11746:	9307      	str	r3, [sp, #28]
   11748:	6a23      	ldr	r3, [r4, #32]
   1174a:	9306      	str	r3, [sp, #24]
   1174c:	69e3      	ldr	r3, [r4, #28]
   1174e:	9305      	str	r3, [sp, #20]
   11750:	69a3      	ldr	r3, [r4, #24]
   11752:	9304      	str	r3, [sp, #16]
   11754:	6963      	ldr	r3, [r4, #20]
   11756:	9303      	str	r3, [sp, #12]
   11758:	6923      	ldr	r3, [r4, #16]
   1175a:	9302      	str	r3, [sp, #8]
   1175c:	68e3      	ldr	r3, [r4, #12]
   1175e:	9301      	str	r3, [sp, #4]
   11760:	68a3      	ldr	r3, [r4, #8]
   11762:	9300      	str	r3, [sp, #0]
   11764:	e9d4 2300 	ldrd	r2, r3, [r4]
   11768:	4631      	mov	r1, r6
   1176a:	4628      	mov	r0, r5
   1176c:	f7f9 f958 	bl	aa20 <print_formatted>
		break;
   11770:	e756      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   11772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11774:	9309      	str	r3, [sp, #36]	; 0x24
   11776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11778:	9308      	str	r3, [sp, #32]
   1177a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1177c:	9307      	str	r3, [sp, #28]
   1177e:	6a23      	ldr	r3, [r4, #32]
   11780:	9306      	str	r3, [sp, #24]
   11782:	69e3      	ldr	r3, [r4, #28]
   11784:	9305      	str	r3, [sp, #20]
   11786:	69a3      	ldr	r3, [r4, #24]
   11788:	9304      	str	r3, [sp, #16]
   1178a:	6963      	ldr	r3, [r4, #20]
   1178c:	9303      	str	r3, [sp, #12]
   1178e:	6923      	ldr	r3, [r4, #16]
   11790:	9302      	str	r3, [sp, #8]
   11792:	68e3      	ldr	r3, [r4, #12]
   11794:	9301      	str	r3, [sp, #4]
   11796:	68a3      	ldr	r3, [r4, #8]
   11798:	9300      	str	r3, [sp, #0]
   1179a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1179e:	4631      	mov	r1, r6
   117a0:	4628      	mov	r0, r5
   117a2:	f7f9 f93d 	bl	aa20 <print_formatted>
		break;
   117a6:	e73b      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   117a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   117aa:	930a      	str	r3, [sp, #40]	; 0x28
   117ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   117ae:	9309      	str	r3, [sp, #36]	; 0x24
   117b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   117b2:	9308      	str	r3, [sp, #32]
   117b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   117b6:	9307      	str	r3, [sp, #28]
   117b8:	6a23      	ldr	r3, [r4, #32]
   117ba:	9306      	str	r3, [sp, #24]
   117bc:	69e3      	ldr	r3, [r4, #28]
   117be:	9305      	str	r3, [sp, #20]
   117c0:	69a3      	ldr	r3, [r4, #24]
   117c2:	9304      	str	r3, [sp, #16]
   117c4:	6963      	ldr	r3, [r4, #20]
   117c6:	9303      	str	r3, [sp, #12]
   117c8:	6923      	ldr	r3, [r4, #16]
   117ca:	9302      	str	r3, [sp, #8]
   117cc:	68e3      	ldr	r3, [r4, #12]
   117ce:	9301      	str	r3, [sp, #4]
   117d0:	68a3      	ldr	r3, [r4, #8]
   117d2:	9300      	str	r3, [sp, #0]
   117d4:	e9d4 2300 	ldrd	r2, r3, [r4]
   117d8:	4631      	mov	r1, r6
   117da:	4628      	mov	r0, r5
   117dc:	f7f9 f920 	bl	aa20 <print_formatted>
		break;
   117e0:	e71e      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   117e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117e4:	930b      	str	r3, [sp, #44]	; 0x2c
   117e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   117e8:	930a      	str	r3, [sp, #40]	; 0x28
   117ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   117ec:	9309      	str	r3, [sp, #36]	; 0x24
   117ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   117f0:	9308      	str	r3, [sp, #32]
   117f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   117f4:	9307      	str	r3, [sp, #28]
   117f6:	6a23      	ldr	r3, [r4, #32]
   117f8:	9306      	str	r3, [sp, #24]
   117fa:	69e3      	ldr	r3, [r4, #28]
   117fc:	9305      	str	r3, [sp, #20]
   117fe:	69a3      	ldr	r3, [r4, #24]
   11800:	9304      	str	r3, [sp, #16]
   11802:	6963      	ldr	r3, [r4, #20]
   11804:	9303      	str	r3, [sp, #12]
   11806:	6923      	ldr	r3, [r4, #16]
   11808:	9302      	str	r3, [sp, #8]
   1180a:	68e3      	ldr	r3, [r4, #12]
   1180c:	9301      	str	r3, [sp, #4]
   1180e:	68a3      	ldr	r3, [r4, #8]
   11810:	9300      	str	r3, [sp, #0]
   11812:	e9d4 2300 	ldrd	r2, r3, [r4]
   11816:	4631      	mov	r1, r6
   11818:	4628      	mov	r0, r5
   1181a:	f7f9 f901 	bl	aa20 <print_formatted>
		break;
   1181e:	e6ff      	b.n	11620 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   11820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11822:	930c      	str	r3, [sp, #48]	; 0x30
   11824:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11826:	930b      	str	r3, [sp, #44]	; 0x2c
   11828:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1182a:	930a      	str	r3, [sp, #40]	; 0x28
   1182c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1182e:	9309      	str	r3, [sp, #36]	; 0x24
   11830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11832:	9308      	str	r3, [sp, #32]
   11834:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11836:	9307      	str	r3, [sp, #28]
   11838:	6a23      	ldr	r3, [r4, #32]
   1183a:	9306      	str	r3, [sp, #24]
   1183c:	69e3      	ldr	r3, [r4, #28]
   1183e:	9305      	str	r3, [sp, #20]
   11840:	69a3      	ldr	r3, [r4, #24]
   11842:	9304      	str	r3, [sp, #16]
   11844:	6963      	ldr	r3, [r4, #20]
   11846:	9303      	str	r3, [sp, #12]
   11848:	6923      	ldr	r3, [r4, #16]
   1184a:	9302      	str	r3, [sp, #8]
   1184c:	68e3      	ldr	r3, [r4, #12]
   1184e:	9301      	str	r3, [sp, #4]
   11850:	68a3      	ldr	r3, [r4, #8]
   11852:	9300      	str	r3, [sp, #0]
   11854:	e9d4 2300 	ldrd	r2, r3, [r4]
   11858:	4631      	mov	r1, r6
   1185a:	4628      	mov	r0, r5
   1185c:	f7f9 f8e0 	bl	aa20 <print_formatted>
}
   11860:	e6de      	b.n	11620 <std_print+0x78>

00011862 <log_output_flush>:
		     output->control_block->offset,
   11862:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   11864:	6881      	ldr	r1, [r0, #8]
{
   11866:	b510      	push	{r4, lr}
   11868:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1186a:	e9d2 2300 	ldrd	r2, r3, [r2]
   1186e:	6800      	ldr	r0, [r0, #0]
   11870:	f7ff fe8d 	bl	1158e <buffer_write>
	output->control_block->offset = 0;
   11874:	6863      	ldr	r3, [r4, #4]
   11876:	2200      	movs	r2, #0
   11878:	601a      	str	r2, [r3, #0]
}
   1187a:	bd10      	pop	{r4, pc}

0001187c <out_func>:
{
   1187c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1187e:	684b      	ldr	r3, [r1, #4]
   11880:	681a      	ldr	r2, [r3, #0]
   11882:	68cb      	ldr	r3, [r1, #12]
   11884:	429a      	cmp	r2, r3
{
   11886:	4605      	mov	r5, r0
   11888:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1188a:	d102      	bne.n	11892 <out_func+0x16>
		log_output_flush(out_ctx);
   1188c:	4608      	mov	r0, r1
   1188e:	f7ff ffe8 	bl	11862 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11892:	6863      	ldr	r3, [r4, #4]
   11894:	f3bf 8f5b 	dmb	ish
   11898:	e853 2f00 	ldrex	r2, [r3]
   1189c:	1c51      	adds	r1, r2, #1
   1189e:	e843 1000 	strex	r0, r1, [r3]
   118a2:	2800      	cmp	r0, #0
   118a4:	d1f8      	bne.n	11898 <out_func+0x1c>
   118a6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   118aa:	68a3      	ldr	r3, [r4, #8]
   118ac:	549d      	strb	r5, [r3, r2]
}
   118ae:	2000      	movs	r0, #0
   118b0:	bd38      	pop	{r3, r4, r5, pc}

000118b2 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   118b2:	2200      	movs	r2, #0
   118b4:	e9c0 2200 	strd	r2, r2, [r0]
   118b8:	6082      	str	r2, [r0, #8]
}
   118ba:	4770      	bx	lr

000118bc <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   118bc:	6902      	ldr	r2, [r0, #16]
   118be:	b2cb      	uxtb	r3, r1
   118c0:	210c      	movs	r1, #12
   118c2:	fb03 2101 	mla	r1, r3, r1, r2
   118c6:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   118c8:	f000 0007 	and.w	r0, r0, #7
   118cc:	4770      	bx	lr

000118ce <set_off_state>:
	__asm__ volatile(
   118ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   118d2:	f3ef 8211 	mrs	r2, BASEPRI
   118d6:	f383 8811 	msr	BASEPRI, r3
   118da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   118de:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   118e0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   118e4:	d001      	beq.n	118ea <set_off_state+0x1c>
   118e6:	428b      	cmp	r3, r1
   118e8:	d107      	bne.n	118fa <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   118ea:	2301      	movs	r3, #1
   118ec:	6003      	str	r3, [r0, #0]
	int err = 0;
   118ee:	2000      	movs	r0, #0
	__asm__ volatile(
   118f0:	f382 8811 	msr	BASEPRI, r2
   118f4:	f3bf 8f6f 	isb	sy
}
   118f8:	4770      	bx	lr
		err = -EPERM;
   118fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   118fe:	e7f7      	b.n	118f0 <set_off_state+0x22>

00011900 <set_starting_state>:
{
   11900:	b510      	push	{r4, lr}
	__asm__ volatile(
   11902:	f04f 0340 	mov.w	r3, #64	; 0x40
   11906:	f3ef 8211 	mrs	r2, BASEPRI
   1190a:	f383 8811 	msr	BASEPRI, r3
   1190e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11912:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11914:	f003 0407 	and.w	r4, r3, #7
   11918:	2c01      	cmp	r4, #1
   1191a:	d106      	bne.n	1192a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1191c:	6001      	str	r1, [r0, #0]
	int err = 0;
   1191e:	2000      	movs	r0, #0
	__asm__ volatile(
   11920:	f382 8811 	msr	BASEPRI, r2
   11924:	f3bf 8f6f 	isb	sy
}
   11928:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1192a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1192e:	428b      	cmp	r3, r1
		err = -EALREADY;
   11930:	bf14      	ite	ne
   11932:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   11936:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1193a:	e7f1      	b.n	11920 <set_starting_state+0x20>

0001193c <set_on_state>:
	__asm__ volatile(
   1193c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11940:	f3ef 8211 	mrs	r2, BASEPRI
   11944:	f383 8811 	msr	BASEPRI, r3
   11948:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1194c:	6803      	ldr	r3, [r0, #0]
   1194e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11952:	f043 0302 	orr.w	r3, r3, #2
   11956:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   11958:	f382 8811 	msr	BASEPRI, r2
   1195c:	f3bf 8f6f 	isb	sy
}
   11960:	4770      	bx	lr

00011962 <onoff_started_callback>:
	return &data->mgr[type];
   11962:	6900      	ldr	r0, [r0, #16]
{
   11964:	b410      	push	{r4}
	return &data->mgr[type];
   11966:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   11968:	241c      	movs	r4, #28
   1196a:	fb03 0004 	mla	r0, r3, r4, r0
   1196e:	2100      	movs	r1, #0
}
   11970:	bc10      	pop	{r4}
	notify(mgr, 0);
   11972:	4710      	bx	r2

00011974 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11974:	2000      	movs	r0, #0
   11976:	f000 bb14 	b.w	11fa2 <nrfx_clock_stop>

0001197a <blocking_start_callback>:
{
   1197a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1197c:	f7fe b82c 	b.w	f9d8 <z_impl_k_sem_give>

00011980 <api_stop>:
{
   11980:	b538      	push	{r3, r4, r5, lr}
   11982:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   11984:	240c      	movs	r4, #12
   11986:	434c      	muls	r4, r1
{
   11988:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1198a:	6900      	ldr	r0, [r0, #16]
   1198c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11990:	2180      	movs	r1, #128	; 0x80
   11992:	4418      	add	r0, r3
   11994:	f7ff ff9b 	bl	118ce <set_off_state>
	if (err < 0) {
   11998:	2800      	cmp	r0, #0
   1199a:	db04      	blt.n	119a6 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1199c:	6869      	ldr	r1, [r5, #4]
   1199e:	440c      	add	r4, r1
   119a0:	6863      	ldr	r3, [r4, #4]
   119a2:	4798      	blx	r3
	return 0;
   119a4:	2000      	movs	r0, #0
}
   119a6:	bd38      	pop	{r3, r4, r5, pc}

000119a8 <api_start>:
{
   119a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119ac:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   119ae:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   119b0:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   119b2:	434c      	muls	r4, r1
{
   119b4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   119b6:	f104 0040 	add.w	r0, r4, #64	; 0x40
   119ba:	2180      	movs	r1, #128	; 0x80
   119bc:	4428      	add	r0, r5
{
   119be:	4690      	mov	r8, r2
   119c0:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   119c2:	f7ff ff9d 	bl	11900 <set_starting_state>
	if (err < 0) {
   119c6:	2800      	cmp	r0, #0
   119c8:	db06      	blt.n	119d8 <api_start+0x30>
	subdata->cb = cb;
   119ca:	4425      	add	r5, r4
	subdata->user_data = user_data;
   119cc:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   119d0:	6873      	ldr	r3, [r6, #4]
   119d2:	591b      	ldr	r3, [r3, r4]
   119d4:	4798      	blx	r3
	return 0;
   119d6:	2000      	movs	r0, #0
}
   119d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000119dc <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   119dc:	4770      	bx	lr

000119de <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   119de:	4770      	bx	lr

000119e0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   119e0:	2100      	movs	r1, #0
   119e2:	2001      	movs	r0, #1
   119e4:	f7f9 bf52 	b.w	b88c <z_arm_fatal_error>

000119e8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   119e8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   119ea:	6800      	ldr	r0, [r0, #0]
   119ec:	f7f9 bf4e 	b.w	b88c <z_arm_fatal_error>

000119f0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   119f0:	b508      	push	{r3, lr}
	handler();
   119f2:	f7f9 ff83 	bl	b8fc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   119f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   119fa:	f7fa ba15 	b.w	be28 <z_arm_exc_exit>

000119fe <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   119fe:	3901      	subs	r1, #1
   11a00:	4603      	mov	r3, r0
   11a02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   11a06:	b90a      	cbnz	r2, 11a0c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   11a08:	701a      	strb	r2, [r3, #0]

	return dest;
}
   11a0a:	4770      	bx	lr
		*d = *s;
   11a0c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   11a10:	e7f7      	b.n	11a02 <strcpy+0x4>

00011a12 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   11a12:	b570      	push	{r4, r5, r6, lr}
   11a14:	3901      	subs	r1, #1
   11a16:	4605      	mov	r5, r0
   11a18:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   11a1a:	b142      	cbz	r2, 11a2e <strncpy+0x1c>
   11a1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   11a20:	1e56      	subs	r6, r2, #1
   11a22:	b92b      	cbnz	r3, 11a30 <strncpy+0x1e>
   11a24:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   11a26:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   11a2a:	42a2      	cmp	r2, r4
   11a2c:	d1fb      	bne.n	11a26 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   11a2e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   11a30:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   11a34:	4632      	mov	r2, r6
   11a36:	e7ef      	b.n	11a18 <strncpy+0x6>

00011a38 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   11a38:	4603      	mov	r3, r0
	size_t n = 0;
   11a3a:	2000      	movs	r0, #0

	while (*s != '\0') {
   11a3c:	5c1a      	ldrb	r2, [r3, r0]
   11a3e:	b902      	cbnz	r2, 11a42 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   11a40:	4770      	bx	lr
		n++;
   11a42:	3001      	adds	r0, #1
   11a44:	e7fa      	b.n	11a3c <strlen+0x4>

00011a46 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   11a46:	4603      	mov	r3, r0
	size_t n = 0;
   11a48:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   11a4a:	5c1a      	ldrb	r2, [r3, r0]
   11a4c:	b10a      	cbz	r2, 11a52 <strnlen+0xc>
   11a4e:	4288      	cmp	r0, r1
   11a50:	d100      	bne.n	11a54 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   11a52:	4770      	bx	lr
		n++;
   11a54:	3001      	adds	r0, #1
   11a56:	e7f8      	b.n	11a4a <strnlen+0x4>

00011a58 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   11a58:	1e43      	subs	r3, r0, #1
   11a5a:	3901      	subs	r1, #1
   11a5c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11a60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   11a64:	4282      	cmp	r2, r0
   11a66:	d101      	bne.n	11a6c <strcmp+0x14>
   11a68:	2a00      	cmp	r2, #0
   11a6a:	d1f7      	bne.n	11a5c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   11a6c:	1a10      	subs	r0, r2, r0
   11a6e:	4770      	bx	lr

00011a70 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   11a70:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   11a72:	b15a      	cbz	r2, 11a8c <memcmp+0x1c>
   11a74:	3901      	subs	r1, #1
   11a76:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   11a78:	f810 2b01 	ldrb.w	r2, [r0], #1
   11a7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   11a80:	42a0      	cmp	r0, r4
   11a82:	d001      	beq.n	11a88 <memcmp+0x18>
   11a84:	429a      	cmp	r2, r3
   11a86:	d0f7      	beq.n	11a78 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   11a88:	1ad0      	subs	r0, r2, r3
}
   11a8a:	bd10      	pop	{r4, pc}
		return 0;
   11a8c:	4610      	mov	r0, r2
   11a8e:	e7fc      	b.n	11a8a <memcmp+0x1a>

00011a90 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   11a90:	b510      	push	{r4, lr}
   11a92:	1e43      	subs	r3, r0, #1
   11a94:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   11a96:	4291      	cmp	r1, r2
   11a98:	d100      	bne.n	11a9c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   11a9a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   11a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
   11aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   11aa4:	e7f7      	b.n	11a96 <memcpy+0x6>

00011aa6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   11aa6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   11aa8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   11aaa:	4603      	mov	r3, r0
	while (n > 0) {
   11aac:	4293      	cmp	r3, r2
   11aae:	d100      	bne.n	11ab2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   11ab0:	4770      	bx	lr
		*(d_byte++) = c_byte;
   11ab2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   11ab6:	e7f9      	b.n	11aac <memset+0x6>

00011ab8 <_stdout_hook_default>:
}
   11ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11abc:	4770      	bx	lr

00011abe <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   11abe:	b084      	sub	sp, #16
   11ac0:	ab04      	add	r3, sp, #16
   11ac2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   11ac6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11aca:	2b06      	cmp	r3, #6
   11acc:	d108      	bne.n	11ae0 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   11ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11ad2:	2201      	movs	r2, #1
   11ad4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   11ad8:	f3bf 8f4f 	dsb	sy
        __WFE();
   11adc:	bf20      	wfe
    while (true)
   11ade:	e7fd      	b.n	11adc <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   11ae0:	b004      	add	sp, #16
   11ae2:	4770      	bx	lr

00011ae4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   11ae4:	b084      	sub	sp, #16
   11ae6:	ab04      	add	r3, sp, #16
   11ae8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   11aec:	2300      	movs	r3, #0
   11aee:	f383 8811 	msr	BASEPRI, r3
   11af2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   11af6:	b004      	add	sp, #16
   11af8:	4770      	bx	lr

00011afa <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   11afa:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   11afc:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   11afe:	2106      	movs	r1, #6
{
   11b00:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   11b02:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   11b06:	f7fd f89b 	bl	ec40 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   11b0a:	b918      	cbnz	r0, 11b14 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   11b0c:	79a3      	ldrb	r3, [r4, #6]
   11b0e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   11b12:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   11b14:	bd10      	pop	{r4, pc}

00011b16 <bt_id_set_adv_private_addr>:
{
   11b16:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   11b18:	2106      	movs	r1, #6
   11b1a:	4668      	mov	r0, sp
   11b1c:	f7fd f890 	bl	ec40 <bt_rand>
	if (err) {
   11b20:	b940      	cbnz	r0, 11b34 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   11b22:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   11b26:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   11b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11b2c:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   11b30:	f7fb fa90 	bl	d054 <set_random_address>
}
   11b34:	b003      	add	sp, #12
   11b36:	f85d fb04 	ldr.w	pc, [sp], #4

00011b3a <bt_id_adv_random_addr_check>:
}
   11b3a:	2001      	movs	r0, #1
   11b3c:	4770      	bx	lr

00011b3e <get_adv_channel_map>:
{
   11b3e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   11b40:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   11b44:	bf0c      	ite	eq
   11b46:	2007      	moveq	r0, #7
   11b48:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   11b4a:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   11b4c:	bf48      	it	mi
   11b4e:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   11b52:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   11b54:	bf48      	it	mi
   11b56:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   11b5a:	4770      	bx	lr

00011b5c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11b5c:	f3bf 8f5b 	dmb	ish
   11b60:	6800      	ldr	r0, [r0, #0]
   11b62:	f3bf 8f5b 	dmb	ish
}
   11b66:	4770      	bx	lr

00011b68 <atomic_and>:
{
   11b68:	4603      	mov	r3, r0
}
   11b6a:	f3bf 8f5b 	dmb	ish
   11b6e:	e853 0f00 	ldrex	r0, [r3]
   11b72:	ea00 0201 	and.w	r2, r0, r1
   11b76:	e843 2c00 	strex	ip, r2, [r3]
   11b7a:	f1bc 0f00 	cmp.w	ip, #0
   11b7e:	d1f6      	bne.n	11b6e <atomic_and+0x6>
   11b80:	f3bf 8f5b 	dmb	ish
   11b84:	4770      	bx	lr

00011b86 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   11b86:	2301      	movs	r3, #1
{
   11b88:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   11b8a:	fa03 f101 	lsl.w	r1, r3, r1
{
   11b8e:	4604      	mov	r4, r0
	if (val) {
   11b90:	b162      	cbz	r2, 11bac <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11b92:	f3bf 8f5b 	dmb	ish
   11b96:	e854 3f00 	ldrex	r3, [r4]
   11b9a:	430b      	orrs	r3, r1
   11b9c:	e844 3200 	strex	r2, r3, [r4]
   11ba0:	2a00      	cmp	r2, #0
   11ba2:	d1f8      	bne.n	11b96 <atomic_set_bit_to+0x10>
   11ba4:	f3bf 8f5b 	dmb	ish
	}
}
   11ba8:	bc10      	pop	{r4}
   11baa:	4770      	bx	lr
   11bac:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11bae:	43c9      	mvns	r1, r1
   11bb0:	f7ff bfda 	b.w	11b68 <atomic_and>

00011bb4 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   11bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb8:	b087      	sub	sp, #28
   11bba:	4605      	mov	r5, r0
   11bbc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   11bc0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   11bc4:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   11bc8:	460c      	mov	r4, r1
   11bca:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   11bcc:	2100      	movs	r1, #0
   11bce:	2210      	movs	r2, #16
   11bd0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   11bd2:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   11bd4:	f7ff ff67 	bl	11aa6 <memset>
	if (use_name) {
   11bd8:	b187      	cbz	r7, 11bfc <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   11bda:	f7fb fa1d 	bl	d018 <bt_get_name>
   11bde:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   11be0:	2c00      	cmp	r4, #0
   11be2:	d13e      	bne.n	11c62 <le_adv_update.constprop.0+0xae>
   11be4:	2e00      	cmp	r6, #0
   11be6:	d148      	bne.n	11c7a <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   11be8:	4648      	mov	r0, r9
   11bea:	f7ff ff25 	bl	11a38 <strlen>
   11bee:	2209      	movs	r2, #9
   11bf0:	f88d 2000 	strb.w	r2, [sp]
   11bf4:	f88d 0001 	strb.w	r0, [sp, #1]
   11bf8:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   11bfc:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   11c00:	2f00      	cmp	r7, #0
   11c02:	d03c      	beq.n	11c7e <le_adv_update.constprop.0+0xca>
   11c04:	f1ba 0f00 	cmp.w	sl, #0
   11c08:	d002      	beq.n	11c10 <le_adv_update.constprop.0+0x5c>
   11c0a:	f1b8 0f00 	cmp.w	r8, #0
   11c0e:	d036      	beq.n	11c7e <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   11c10:	2301      	movs	r3, #1
			d[1].data = &data;
   11c12:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   11c16:	9305      	str	r3, [sp, #20]
			d_len = 2;
   11c18:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   11c1a:	a902      	add	r1, sp, #8
   11c1c:	f242 0008 	movw	r0, #8200	; 0x2008
   11c20:	f7fb fc84 	bl	d52c <hci_set_ad>
		if (err) {
   11c24:	4604      	mov	r4, r0
   11c26:	b978      	cbnz	r0, 11c48 <le_adv_update.constprop.0+0x94>
	if (scannable) {
   11c28:	f1ba 0f00 	cmp.w	sl, #0
   11c2c:	d129      	bne.n	11c82 <le_adv_update.constprop.0+0xce>
   11c2e:	3510      	adds	r5, #16
   11c30:	f3bf 8f5b 	dmb	ish
   11c34:	e855 3f00 	ldrex	r3, [r5]
   11c38:	f043 0304 	orr.w	r3, r3, #4
   11c3c:	e845 3200 	strex	r2, r3, [r5]
   11c40:	2a00      	cmp	r2, #0
   11c42:	d1f7      	bne.n	11c34 <le_adv_update.constprop.0+0x80>
   11c44:	f3bf 8f5b 	dmb	ish
}
   11c48:	4620      	mov	r0, r4
   11c4a:	b007      	add	sp, #28
   11c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   11c50:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   11c54:	3908      	subs	r1, #8
   11c56:	2901      	cmp	r1, #1
   11c58:	d92a      	bls.n	11cb0 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   11c5a:	3201      	adds	r2, #1
   11c5c:	4593      	cmp	fp, r2
   11c5e:	d1f7      	bne.n	11c50 <le_adv_update.constprop.0+0x9c>
   11c60:	e7c0      	b.n	11be4 <le_adv_update.constprop.0+0x30>
   11c62:	2200      	movs	r2, #0
   11c64:	e7fa      	b.n	11c5c <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   11c66:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   11c6a:	3908      	subs	r1, #8
   11c6c:	2901      	cmp	r1, #1
   11c6e:	d91f      	bls.n	11cb0 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   11c70:	3201      	adds	r2, #1
   11c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11c74:	4293      	cmp	r3, r2
   11c76:	d1f6      	bne.n	11c66 <le_adv_update.constprop.0+0xb2>
   11c78:	e7b6      	b.n	11be8 <le_adv_update.constprop.0+0x34>
   11c7a:	2200      	movs	r2, #0
   11c7c:	e7f9      	b.n	11c72 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   11c7e:	2201      	movs	r2, #1
   11c80:	e7cb      	b.n	11c1a <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   11c82:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   11c84:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   11c86:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   11c88:	b187      	cbz	r7, 11cac <le_adv_update.constprop.0+0xf8>
   11c8a:	f1b8 0f00 	cmp.w	r8, #0
   11c8e:	d10d      	bne.n	11cac <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   11c90:	2301      	movs	r3, #1
			d[1].data = &data;
   11c92:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   11c96:	9305      	str	r3, [sp, #20]
			d_len = 2;
   11c98:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   11c9a:	a902      	add	r1, sp, #8
   11c9c:	f242 0009 	movw	r0, #8201	; 0x2009
   11ca0:	f7fb fc44 	bl	d52c <hci_set_ad>
		if (err) {
   11ca4:	2800      	cmp	r0, #0
   11ca6:	d0c2      	beq.n	11c2e <le_adv_update.constprop.0+0x7a>
   11ca8:	4604      	mov	r4, r0
   11caa:	e7cd      	b.n	11c48 <le_adv_update.constprop.0+0x94>
		d_len = 1;
   11cac:	2201      	movs	r2, #1
   11cae:	e7f4      	b.n	11c9a <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   11cb0:	f06f 0415 	mvn.w	r4, #21
   11cb4:	e7c8      	b.n	11c48 <le_adv_update.constprop.0+0x94>

00011cb6 <bt_le_adv_set_enable_legacy>:
{
   11cb6:	b570      	push	{r4, r5, r6, lr}
   11cb8:	4606      	mov	r6, r0
   11cba:	b086      	sub	sp, #24
   11cbc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   11cbe:	f242 000a 	movw	r0, #8202	; 0x200a
   11cc2:	2101      	movs	r1, #1
   11cc4:	f7fa fcce 	bl	c664 <bt_hci_cmd_create>
	if (!buf) {
   11cc8:	4604      	mov	r4, r0
   11cca:	b1b0      	cbz	r0, 11cfa <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   11ccc:	3008      	adds	r0, #8
   11cce:	b195      	cbz	r5, 11cf6 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   11cd0:	2101      	movs	r1, #1
   11cd2:	f000 f859 	bl	11d88 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   11cd6:	f106 0210 	add.w	r2, r6, #16
   11cda:	a903      	add	r1, sp, #12
   11cdc:	4620      	mov	r0, r4
   11cde:	9500      	str	r5, [sp, #0]
   11ce0:	2306      	movs	r3, #6
   11ce2:	f7fa fcad 	bl	c640 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   11ce6:	2200      	movs	r2, #0
   11ce8:	4621      	mov	r1, r4
   11cea:	f242 000a 	movw	r0, #8202	; 0x200a
   11cee:	f7fa fcf1 	bl	c6d4 <bt_hci_cmd_send_sync>
}
   11cf2:	b006      	add	sp, #24
   11cf4:	bd70      	pop	{r4, r5, r6, pc}
   11cf6:	4629      	mov	r1, r5
   11cf8:	e7eb      	b.n	11cd2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   11cfa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11cfe:	e7f8      	b.n	11cf2 <bt_le_adv_set_enable_legacy+0x3c>

00011d00 <fixed_data_unref>:
}
   11d00:	4770      	bx	lr

00011d02 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11d02:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   11d04:	6849      	ldr	r1, [r1, #4]
   11d06:	6809      	ldr	r1, [r1, #0]
   11d08:	f7fb bde0 	b.w	d8cc <net_buf_alloc_len>

00011d0c <net_buf_get>:
{
   11d0c:	b570      	push	{r4, r5, r6, lr}
   11d0e:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   11d10:	f7fd fe2e 	bl	f970 <z_impl_k_queue_get>
	if (!buf) {
   11d14:	4605      	mov	r5, r0
   11d16:	b128      	cbz	r0, 11d24 <net_buf_get+0x18>
   11d18:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   11d1a:	7963      	ldrb	r3, [r4, #5]
   11d1c:	f013 0301 	ands.w	r3, r3, #1
   11d20:	d102      	bne.n	11d28 <net_buf_get+0x1c>
	frag->frags = NULL;
   11d22:	6023      	str	r3, [r4, #0]
}
   11d24:	4628      	mov	r0, r5
   11d26:	bd70      	pop	{r4, r5, r6, pc}
   11d28:	2300      	movs	r3, #0
   11d2a:	2200      	movs	r2, #0
   11d2c:	4630      	mov	r0, r6
   11d2e:	f7fd fe1f 	bl	f970 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   11d32:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   11d34:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   11d36:	f023 0301 	bic.w	r3, r3, #1
   11d3a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   11d3c:	4604      	mov	r4, r0
   11d3e:	e7ec      	b.n	11d1a <net_buf_get+0xe>

00011d40 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   11d40:	6883      	ldr	r3, [r0, #8]
   11d42:	440b      	add	r3, r1
   11d44:	6003      	str	r3, [r0, #0]
}
   11d46:	4770      	bx	lr

00011d48 <net_buf_put>:
{
   11d48:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   11d4a:	460a      	mov	r2, r1
   11d4c:	6814      	ldr	r4, [r2, #0]
   11d4e:	b914      	cbnz	r4, 11d56 <net_buf_put+0xe>
}
   11d50:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   11d52:	f000 ba81 	b.w	12258 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   11d56:	7953      	ldrb	r3, [r2, #5]
   11d58:	f043 0301 	orr.w	r3, r3, #1
   11d5c:	7153      	strb	r3, [r2, #5]
   11d5e:	4622      	mov	r2, r4
   11d60:	e7f4      	b.n	11d4c <net_buf_put+0x4>

00011d62 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   11d62:	7902      	ldrb	r2, [r0, #4]
   11d64:	3201      	adds	r2, #1
   11d66:	7102      	strb	r2, [r0, #4]
	return buf;
}
   11d68:	4770      	bx	lr

00011d6a <net_buf_simple_add>:
	return buf->data + buf->len;
   11d6a:	8883      	ldrh	r3, [r0, #4]
   11d6c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   11d6e:	4419      	add	r1, r3
   11d70:	8081      	strh	r1, [r0, #4]
	return tail;
}
   11d72:	18d0      	adds	r0, r2, r3
   11d74:	4770      	bx	lr

00011d76 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   11d76:	b430      	push	{r4, r5}
   11d78:	8884      	ldrh	r4, [r0, #4]
   11d7a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   11d7c:	18a3      	adds	r3, r4, r2
   11d7e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   11d80:	1928      	adds	r0, r5, r4
}
   11d82:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   11d84:	f7ff be84 	b.w	11a90 <memcpy>

00011d88 <net_buf_simple_add_u8>:
   11d88:	8883      	ldrh	r3, [r0, #4]
   11d8a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   11d8c:	b510      	push	{r4, lr}
	buf->len += len;
   11d8e:	1c5c      	adds	r4, r3, #1
   11d90:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   11d92:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   11d94:	18d0      	adds	r0, r2, r3
   11d96:	bd10      	pop	{r4, pc}

00011d98 <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   11d98:	4603      	mov	r3, r0
	void *data = buf->data;
   11d9a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   11d9c:	889a      	ldrh	r2, [r3, #4]
   11d9e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   11da0:	4401      	add	r1, r0
	buf->len -= len;
   11da2:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   11da4:	6019      	str	r1, [r3, #0]

	return data;
}
   11da6:	4770      	bx	lr

00011da8 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   11da8:	6802      	ldr	r2, [r0, #0]
   11daa:	6880      	ldr	r0, [r0, #8]
}
   11dac:	1a10      	subs	r0, r2, r0
   11dae:	4770      	bx	lr

00011db0 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   11db0:	f000 001f 	and.w	r0, r0, #31
   11db4:	0080      	lsls	r0, r0, #2
   11db6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11dba:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   11dbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   11dc6:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   11dca:	4770      	bx	lr

00011dcc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11dcc:	6843      	ldr	r3, [r0, #4]
   11dce:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   11dd0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   11dd4:	600b      	str	r3, [r1, #0]
}
   11dd6:	2000      	movs	r0, #0
   11dd8:	4770      	bx	lr

00011dda <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11dda:	6843      	ldr	r3, [r0, #4]
   11ddc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   11dde:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   11de2:	4042      	eors	r2, r0
   11de4:	400a      	ands	r2, r1
   11de6:	4042      	eors	r2, r0
    p_reg->OUT = value;
   11de8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   11dec:	2000      	movs	r0, #0
   11dee:	4770      	bx	lr

00011df0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11df0:	6843      	ldr	r3, [r0, #4]
   11df2:	685b      	ldr	r3, [r3, #4]
}
   11df4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   11df6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   11dfa:	4770      	bx	lr

00011dfc <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11dfc:	6843      	ldr	r3, [r0, #4]
   11dfe:	685b      	ldr	r3, [r3, #4]
}
   11e00:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   11e02:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   11e06:	4770      	bx	lr

00011e08 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11e08:	6843      	ldr	r3, [r0, #4]
   11e0a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11e0c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   11e10:	404b      	eors	r3, r1
    p_reg->OUT = value;
   11e12:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   11e16:	2000      	movs	r0, #0
   11e18:	4770      	bx	lr

00011e1a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11e1a:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   11e1c:	6858      	ldr	r0, [r3, #4]
{
   11e1e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   11e20:	b158      	cbz	r0, 11e3a <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11e22:	2400      	movs	r4, #0
   11e24:	4281      	cmp	r1, r0
   11e26:	d113      	bne.n	11e50 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   11e28:	6808      	ldr	r0, [r1, #0]
   11e2a:	b95c      	cbnz	r4, 11e44 <gpio_nrfx_manage_callback+0x2a>
   11e2c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   11e2e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   11e30:	42a1      	cmp	r1, r4
   11e32:	d100      	bne.n	11e36 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   11e34:	6098      	str	r0, [r3, #8]
	parent->next = child;
   11e36:	2000      	movs	r0, #0
   11e38:	6008      	str	r0, [r1, #0]
	if (set) {
   11e3a:	b972      	cbnz	r2, 11e5a <gpio_nrfx_manage_callback+0x40>
	return 0;
   11e3c:	2000      	movs	r0, #0
}
   11e3e:	bd30      	pop	{r4, r5, pc}
   11e40:	4628      	mov	r0, r5
   11e42:	e7ef      	b.n	11e24 <gpio_nrfx_manage_callback+0xa>
   11e44:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11e46:	6898      	ldr	r0, [r3, #8]
   11e48:	4281      	cmp	r1, r0
	list->tail = node;
   11e4a:	bf08      	it	eq
   11e4c:	609c      	streq	r4, [r3, #8]
}
   11e4e:	e7f2      	b.n	11e36 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11e50:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11e52:	4604      	mov	r4, r0
   11e54:	2d00      	cmp	r5, #0
   11e56:	d1f3      	bne.n	11e40 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   11e58:	b13a      	cbz	r2, 11e6a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   11e5a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   11e5c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   11e5e:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   11e60:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   11e62:	2800      	cmp	r0, #0
   11e64:	d1ea      	bne.n	11e3c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   11e66:	6099      	str	r1, [r3, #8]
}
   11e68:	e7e9      	b.n	11e3e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   11e6a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11e6e:	e7e6      	b.n	11e3e <gpio_nrfx_manage_callback+0x24>

00011e70 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   11e70:	6843      	ldr	r3, [r0, #4]
   11e72:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   11e74:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   11e78:	05d1      	lsls	r1, r2, #23
   11e7a:	d518      	bpl.n	11eae <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11e7c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   11e80:	b1aa      	cbz	r2, 11eae <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   11e82:	f04f 0140 	mov.w	r1, #64	; 0x40
   11e86:	f3ef 8211 	mrs	r2, BASEPRI
   11e8a:	f381 8811 	msr	BASEPRI, r1
   11e8e:	f3bf 8f6f 	isb	sy
   11e92:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   11e96:	b131      	cbz	r1, 11ea6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11e98:	2100      	movs	r1, #0
   11e9a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   11e9e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11ea2:	2101      	movs	r1, #1
   11ea4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   11ea6:	f382 8811 	msr	BASEPRI, r2
   11eaa:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11eae:	6842      	ldr	r2, [r0, #4]
   11eb0:	6852      	ldr	r2, [r2, #4]
   11eb2:	06d2      	lsls	r2, r2, #27
   11eb4:	d515      	bpl.n	11ee2 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   11eb6:	f04f 0140 	mov.w	r1, #64	; 0x40
   11eba:	f3ef 8211 	mrs	r2, BASEPRI
   11ebe:	f381 8811 	msr	BASEPRI, r1
   11ec2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11ec6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   11eca:	b111      	cbz	r1, 11ed2 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   11ecc:	2100      	movs	r1, #0
   11ece:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   11ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   11ed6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   11eda:	f382 8811 	msr	BASEPRI, r2
   11ede:	f3bf 8f6f 	isb	sy
}
   11ee2:	4770      	bx	lr

00011ee4 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   11ee4:	6902      	ldr	r2, [r0, #16]
{
   11ee6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   11ee8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   11eec:	e883 0003 	stmia.w	r3, {r0, r1}
}
   11ef0:	2000      	movs	r0, #0
   11ef2:	4770      	bx	lr

00011ef4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   11ef4:	6843      	ldr	r3, [r0, #4]
   11ef6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   11ef8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   11efc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   11f00:	4770      	bx	lr

00011f02 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   11f02:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   11f04:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11f06:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   11f0a:	b940      	cbnz	r0, 11f1e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   11f0c:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   11f0e:	0712      	lsls	r2, r2, #28
   11f10:	d406      	bmi.n	11f20 <is_tx_ready+0x1e>
   11f12:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   11f16:	3800      	subs	r0, #0
   11f18:	bf18      	it	ne
   11f1a:	2001      	movne	r0, #1
   11f1c:	4770      	bx	lr
   11f1e:	2001      	movs	r0, #1
}
   11f20:	4770      	bx	lr

00011f22 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   11f22:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   11f24:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   11f26:	681b      	ldr	r3, [r3, #0]
   11f28:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   11f2c:	b148      	cbz	r0, 11f42 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   11f2e:	7c52      	ldrb	r2, [r2, #17]
   11f30:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f32:	2000      	movs	r0, #0
   11f34:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   11f38:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f3c:	2201      	movs	r2, #1
   11f3e:	601a      	str	r2, [r3, #0]
	return 0;
   11f40:	4770      	bx	lr
		return -1;
   11f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11f46:	4770      	bx	lr

00011f48 <rand_prio_high_vector_get>:
   11f48:	f7fc bab4 	b.w	e4b4 <rand_prio_low_vector_get>

00011f4c <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   11f4c:	4668      	mov	r0, sp
   11f4e:	f020 0107 	bic.w	r1, r0, #7
   11f52:	468d      	mov	sp, r1
   11f54:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   11f56:	f7f0 fbb7 	bl	26c8 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   11f5a:	f7f9 fc1f 	bl	b79c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   11f5e:	f7f9 ff63 	bl	be28 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   11f62:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11f66:	4685      	mov	sp, r0
   11f68:	4770      	bx	lr

00011f6a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   11f6a:	4668      	mov	r0, sp
   11f6c:	f020 0107 	bic.w	r1, r0, #7
   11f70:	468d      	mov	sp, r1
   11f72:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   11f74:	f7f0 fb2a 	bl	25cc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   11f78:	f7f9 fc10 	bl	b79c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   11f7c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11f80:	4685      	mov	sp, r0
   11f82:	4770      	bx	lr

00011f84 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   11f84:	4668      	mov	r0, sp
   11f86:	f020 0107 	bic.w	r1, r0, #7
   11f8a:	468d      	mov	sp, r1
   11f8c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   11f8e:	f7f5 f99c 	bl	72ca <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   11f92:	f7f9 fc03 	bl	b79c <_arch_isr_direct_pm>
   11f96:	f7f9 ff47 	bl	be28 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   11f9a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11f9e:	4685      	mov	sp, r0
   11fa0:	4770      	bx	lr

00011fa2 <nrfx_clock_stop>:
	switch (domain) {
   11fa2:	2801      	cmp	r0, #1
   11fa4:	d101      	bne.n	11faa <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   11fa6:	f7f1 b985 	b.w	32b4 <mpsl_clock_hfclk_release>
}
   11faa:	4770      	bx	lr

00011fac <nrfx_clock_enable>:
}
   11fac:	4770      	bx	lr

00011fae <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   11fae:	f7f0 bf9f 	b.w	2ef0 <MPSL_IRQ_CLOCK_Handler>

00011fb2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   11fb2:	4700      	bx	r0

00011fb4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   11fb4:	f000 bb1c 	b.w	125f0 <z_impl_k_busy_wait>

00011fb8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   11fb8:	f7fd b902 	b.w	f1c0 <_DoInit>

00011fbc <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   11fbc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   11fbe:	f7ff fffb 	bl	11fb8 <SEGGER_RTT_Init>

	return 0;
}
   11fc2:	2000      	movs	r0, #0
   11fc4:	bd08      	pop	{r3, pc}

00011fc6 <z_device_state_init>:
}
   11fc6:	4770      	bx	lr

00011fc8 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   11fc8:	b138      	cbz	r0, 11fda <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   11fca:	68c3      	ldr	r3, [r0, #12]
   11fcc:	8818      	ldrh	r0, [r3, #0]
   11fce:	f3c0 0008 	ubfx	r0, r0, #0, #9
   11fd2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   11fd6:	4258      	negs	r0, r3
   11fd8:	4158      	adcs	r0, r3
}
   11fda:	4770      	bx	lr

00011fdc <k_heap_init>:
{
   11fdc:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   11fde:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   11fe2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   11fe6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   11fe8:	f7ff b824 	b.w	11034 <sys_heap_init>

00011fec <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   11fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff0:	b087      	sub	sp, #28
   11ff2:	4604      	mov	r4, r0
   11ff4:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   11ff6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   11ffa:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   11ffc:	f000 fafc 	bl	125f8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   12000:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   12004:	4605      	mov	r5, r0
   12006:	4688      	mov	r8, r1
	__asm__ volatile(
   12008:	f04f 0340 	mov.w	r3, #64	; 0x40
   1200c:	f3ef 8b11 	mrs	fp, BASEPRI
   12010:	f383 8811 	msr	BASEPRI, r3
   12014:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   12018:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1201c:	463a      	mov	r2, r7
   1201e:	4631      	mov	r1, r6
   12020:	4620      	mov	r0, r4
   12022:	f7fe ff8c 	bl	10f3e <sys_heap_aligned_alloc>
   12026:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   12028:	f7fe fb2e 	bl	10688 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1202c:	9b05      	ldr	r3, [sp, #20]
   1202e:	b13b      	cbz	r3, 12040 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   12030:	f38b 8811 	msr	BASEPRI, fp
   12034:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   12038:	4618      	mov	r0, r3
   1203a:	b007      	add	sp, #28
   1203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   12040:	1a2a      	subs	r2, r5, r0
   12042:	9202      	str	r2, [sp, #8]
   12044:	eb68 0201 	sbc.w	r2, r8, r1
   12048:	9203      	str	r2, [sp, #12]
   1204a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1204e:	2901      	cmp	r1, #1
   12050:	f172 0200 	sbcs.w	r2, r2, #0
   12054:	dbec      	blt.n	12030 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   12056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1205a:	4659      	mov	r1, fp
   1205c:	e9cd 2300 	strd	r2, r3, [sp]
   12060:	4648      	mov	r0, r9
   12062:	4652      	mov	r2, sl
   12064:	f7fd ff00 	bl	fe68 <z_pend_curr>
	__asm__ volatile(
   12068:	f04f 0340 	mov.w	r3, #64	; 0x40
   1206c:	f3ef 8b11 	mrs	fp, BASEPRI
   12070:	f383 8811 	msr	BASEPRI, r3
   12074:	f3bf 8f6f 	isb	sy
   12078:	e7d0      	b.n	1201c <k_heap_aligned_alloc+0x30>

0001207a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1207a:	b538      	push	{r3, r4, r5, lr}
   1207c:	4604      	mov	r4, r0
   1207e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12082:	f3ef 8511 	mrs	r5, BASEPRI
   12086:	f383 8811 	msr	BASEPRI, r3
   1208a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1208e:	f7fe ff09 	bl	10ea4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   12092:	f104 000c 	add.w	r0, r4, #12
   12096:	f000 fa3a 	bl	1250e <z_unpend_all>
   1209a:	b130      	cbz	r0, 120aa <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1209c:	4629      	mov	r1, r5
   1209e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   120a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   120a6:	f7fd be5b 	b.w	fd60 <z_reschedule>
	__asm__ volatile(
   120aa:	f385 8811 	msr	BASEPRI, r5
   120ae:	f3bf 8f6f 	isb	sy
}
   120b2:	bd38      	pop	{r3, r4, r5, pc}

000120b4 <k_mem_slab_init>:
{
   120b4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   120b6:	2400      	movs	r4, #0
   120b8:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   120ba:	ea41 0402 	orr.w	r4, r1, r2
   120be:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   120c2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   120c6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   120c8:	d10c      	bne.n	120e4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   120ca:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   120cc:	42a3      	cmp	r3, r4
   120ce:	d103      	bne.n	120d8 <k_mem_slab_init+0x24>
   120d0:	e9c0 0000 	strd	r0, r0, [r0]
}
   120d4:	2000      	movs	r0, #0
}
   120d6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   120d8:	6945      	ldr	r5, [r0, #20]
   120da:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   120dc:	3401      	adds	r4, #1
		slab->free_list = p;
   120de:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   120e0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   120e2:	e7f3      	b.n	120cc <k_mem_slab_init+0x18>
		return -EINVAL;
   120e4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   120e8:	e7f5      	b.n	120d6 <k_mem_slab_init+0x22>

000120ea <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   120ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120ec:	4604      	mov	r4, r0
   120ee:	460d      	mov	r5, r1
	__asm__ volatile(
   120f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   120f4:	f3ef 8611 	mrs	r6, BASEPRI
   120f8:	f383 8811 	msr	BASEPRI, r3
   120fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   12100:	6947      	ldr	r7, [r0, #20]
   12102:	b977      	cbnz	r7, 12122 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   12104:	f000 f9eb 	bl	124de <z_unpend_first_thread>

		if (pending_thread != NULL) {
   12108:	b158      	cbz	r0, 12122 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1210a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1210c:	6142      	str	r2, [r0, #20]
   1210e:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   12110:	f000 f99e 	bl	12450 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   12114:	4631      	mov	r1, r6
   12116:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1211a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1211e:	f7fd be1f 	b.w	fd60 <z_reschedule>
	**(char ***) mem = slab->free_list;
   12122:	682b      	ldr	r3, [r5, #0]
   12124:	6962      	ldr	r2, [r4, #20]
   12126:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   12128:	682b      	ldr	r3, [r5, #0]
   1212a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1212c:	69a3      	ldr	r3, [r4, #24]
   1212e:	3b01      	subs	r3, #1
   12130:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   12132:	f386 8811 	msr	BASEPRI, r6
   12136:	f3bf 8f6f 	isb	sy
}
   1213a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001213c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1213c:	f3ef 8005 	mrs	r0, IPSR
}
   12140:	3800      	subs	r0, #0
   12142:	bf18      	it	ne
   12144:	2001      	movne	r0, #1
   12146:	4770      	bx	lr

00012148 <z_impl_k_thread_name_set>:
}
   12148:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1214c:	4770      	bx	lr

0001214e <k_thread_name_get>:
}
   1214e:	2000      	movs	r0, #0
   12150:	4770      	bx	lr

00012152 <z_impl_k_thread_start>:
	z_sched_start(thread);
   12152:	f7fd bfa3 	b.w	1009c <z_sched_start>

00012156 <z_pm_save_idle_exit>:
{
   12156:	b508      	push	{r3, lr}
	pm_system_resume();
   12158:	f7f8 ff3a 	bl	afd0 <pm_system_resume>
}
   1215c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   12160:	f7ff bc3d 	b.w	119de <sys_clock_idle_exit>

00012164 <queue_insert>:
{
   12164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12168:	4699      	mov	r9, r3
   1216a:	4604      	mov	r4, r0
   1216c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12170:	460d      	mov	r5, r1
   12172:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12174:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   12178:	f04f 0240 	mov.w	r2, #64	; 0x40
   1217c:	f3ef 8711 	mrs	r7, BASEPRI
   12180:	f382 8811 	msr	BASEPRI, r2
   12184:	f3bf 8f6f 	isb	sy
	if (is_append) {
   12188:	b103      	cbz	r3, 1218c <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1218a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1218c:	4630      	mov	r0, r6
   1218e:	f000 f9a6 	bl	124de <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   12192:	b158      	cbz	r0, 121ac <queue_insert+0x48>
   12194:	2400      	movs	r4, #0
   12196:	67c4      	str	r4, [r0, #124]	; 0x7c
   12198:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1219c:	f000 f958 	bl	12450 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   121a0:	4630      	mov	r0, r6
   121a2:	4639      	mov	r1, r7
   121a4:	f7fd fddc 	bl	fd60 <z_reschedule>
	return 0;
   121a8:	2000      	movs	r0, #0
   121aa:	e00c      	b.n	121c6 <queue_insert+0x62>
	if (alloc) {
   121ac:	f1b9 0f00 	cmp.w	r9, #0
   121b0:	d01b      	beq.n	121ea <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   121b2:	2108      	movs	r1, #8
   121b4:	f7fe fb8e 	bl	108d4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   121b8:	b938      	cbnz	r0, 121ca <queue_insert+0x66>
	__asm__ volatile(
   121ba:	f387 8811 	msr	BASEPRI, r7
   121be:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   121c2:	f06f 000b 	mvn.w	r0, #11
}
   121c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   121ca:	2301      	movs	r3, #1
		anode->data = data;
   121cc:	f8c0 8004 	str.w	r8, [r0, #4]
   121d0:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   121d2:	6803      	ldr	r3, [r0, #0]
   121d4:	f003 0203 	and.w	r2, r3, #3
   121d8:	b95d      	cbnz	r5, 121f2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   121da:	6823      	ldr	r3, [r4, #0]
   121dc:	4313      	orrs	r3, r2
   121de:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   121e0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   121e2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   121e4:	b973      	cbnz	r3, 12204 <queue_insert+0xa0>
	list->tail = node;
   121e6:	6060      	str	r0, [r4, #4]
}
   121e8:	e00c      	b.n	12204 <queue_insert+0xa0>
	node->next_and_flags = flags;
   121ea:	f8c8 9000 	str.w	r9, [r8]
}
   121ee:	4640      	mov	r0, r8
   121f0:	e7ef      	b.n	121d2 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   121f2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   121f4:	f033 0303 	bics.w	r3, r3, #3
   121f8:	d110      	bne.n	1221c <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   121fa:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   121fc:	6862      	ldr	r2, [r4, #4]
   121fe:	b93a      	cbnz	r2, 12210 <queue_insert+0xac>
	list->head = node;
   12200:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   12204:	2104      	movs	r1, #4
   12206:	f104 0010 	add.w	r0, r4, #16
   1220a:	f000 fb7c 	bl	12906 <z_handle_obj_poll_events>
   1220e:	e7c7      	b.n	121a0 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12210:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12212:	f003 0303 	and.w	r3, r3, #3
   12216:	4303      	orrs	r3, r0
   12218:	6013      	str	r3, [r2, #0]
   1221a:	e7e4      	b.n	121e6 <queue_insert+0x82>
   1221c:	4313      	orrs	r3, r2
   1221e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12220:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12222:	f003 0303 	and.w	r3, r3, #3
   12226:	4303      	orrs	r3, r0
   12228:	602b      	str	r3, [r5, #0]
}
   1222a:	e7eb      	b.n	12204 <queue_insert+0xa0>

0001222c <z_queue_node_peek>:
{
   1222c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1222e:	4604      	mov	r4, r0
   12230:	b130      	cbz	r0, 12240 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12232:	6802      	ldr	r2, [r0, #0]
   12234:	0793      	lsls	r3, r2, #30
   12236:	d003      	beq.n	12240 <z_queue_node_peek+0x14>
		ret = anode->data;
   12238:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1223a:	b109      	cbz	r1, 12240 <z_queue_node_peek+0x14>
			k_free(anode);
   1223c:	f000 fb71 	bl	12922 <k_free>
}
   12240:	4620      	mov	r0, r4
   12242:	bd10      	pop	{r4, pc}

00012244 <k_queue_prepend>:
{
   12244:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   12246:	2300      	movs	r3, #0
{
   12248:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1224a:	9300      	str	r3, [sp, #0]
   1224c:	4619      	mov	r1, r3
   1224e:	f7ff ff89 	bl	12164 <queue_insert>
}
   12252:	b003      	add	sp, #12
   12254:	f85d fb04 	ldr.w	pc, [sp], #4

00012258 <k_queue_append_list>:
{
   12258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1225c:	4605      	mov	r5, r0
   1225e:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   12260:	460c      	mov	r4, r1
   12262:	b391      	cbz	r1, 122ca <k_queue_append_list+0x72>
   12264:	b38a      	cbz	r2, 122ca <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12266:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1226a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1226e:	f3ef 8811 	mrs	r8, BASEPRI
   12272:	f383 8811 	msr	BASEPRI, r3
   12276:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1227a:	4638      	mov	r0, r7
   1227c:	f000 f92f 	bl	124de <z_unpend_first_thread>
   12280:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   12284:	b920      	cbnz	r0, 12290 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   12286:	686b      	ldr	r3, [r5, #4]
   12288:	b9cb      	cbnz	r3, 122be <k_queue_append_list+0x66>
	list->head = node;
   1228a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1228c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1228e:	e00a      	b.n	122a6 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   12290:	6144      	str	r4, [r0, #20]
   12292:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   12296:	f000 f8db 	bl	12450 <z_ready_thread>
		head = *(void **)head;
   1229a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1229c:	4638      	mov	r0, r7
   1229e:	f000 f91e 	bl	124de <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   122a2:	2c00      	cmp	r4, #0
   122a4:	d1ee      	bne.n	12284 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   122a6:	2104      	movs	r1, #4
   122a8:	f105 0010 	add.w	r0, r5, #16
   122ac:	f000 fb2b 	bl	12906 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   122b0:	4638      	mov	r0, r7
   122b2:	4641      	mov	r1, r8
   122b4:	f7fd fd54 	bl	fd60 <z_reschedule>
	return 0;
   122b8:	2000      	movs	r0, #0
}
   122ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   122be:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   122c0:	f001 0103 	and.w	r1, r1, #3
   122c4:	430c      	orrs	r4, r1
   122c6:	601c      	str	r4, [r3, #0]
}
   122c8:	e7e0      	b.n	1228c <k_queue_append_list+0x34>
		return -EINVAL;
   122ca:	f06f 0015 	mvn.w	r0, #21
   122ce:	e7f4      	b.n	122ba <k_queue_append_list+0x62>

000122d0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   122d0:	b15a      	cbz	r2, 122ea <z_impl_k_sem_init+0x1a>
   122d2:	428a      	cmp	r2, r1
   122d4:	d309      	bcc.n	122ea <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   122d6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   122da:	e9c0 1202 	strd	r1, r2, [r0, #8]
   122de:	e9c0 0000 	strd	r0, r0, [r0]
   122e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   122e6:	2000      	movs	r0, #0
   122e8:	4770      	bx	lr
		return -EINVAL;
   122ea:	f06f 0015 	mvn.w	r0, #21
}
   122ee:	4770      	bx	lr

000122f0 <notify_queue_locked>:
	if (queue != NULL) {
   122f0:	b120      	cbz	r0, 122fc <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   122f2:	2200      	movs	r2, #0
   122f4:	4611      	mov	r1, r2
   122f6:	3088      	adds	r0, #136	; 0x88
   122f8:	f000 b919 	b.w	1252e <z_sched_wake>
}
   122fc:	4770      	bx	lr

000122fe <k_work_submit_to_queue>:
{
   122fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12300:	9001      	str	r0, [sp, #4]
   12302:	4608      	mov	r0, r1
   12304:	f04f 0340 	mov.w	r3, #64	; 0x40
   12308:	f3ef 8511 	mrs	r5, BASEPRI
   1230c:	f383 8811 	msr	BASEPRI, r3
   12310:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   12314:	a901      	add	r1, sp, #4
   12316:	f7fd fc4d 	bl	fbb4 <submit_to_queue_locked>
   1231a:	4604      	mov	r4, r0
	__asm__ volatile(
   1231c:	f385 8811 	msr	BASEPRI, r5
   12320:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   12324:	2800      	cmp	r0, #0
   12326:	dd04      	ble.n	12332 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   12328:	f7fd ffdc 	bl	102e4 <z_impl_k_is_preempt_thread>
   1232c:	b108      	cbz	r0, 12332 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1232e:	f7fd ff2b 	bl	10188 <z_impl_k_yield>
}
   12332:	4620      	mov	r0, r4
   12334:	b003      	add	sp, #12
   12336:	bd30      	pop	{r4, r5, pc}

00012338 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   12338:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1233c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1233e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12340:	2300      	movs	r3, #0
	node->prev = NULL;
   12342:	e9c0 3300 	strd	r3, r3, [r0]
}
   12346:	4770      	bx	lr

00012348 <unpend_thread_no_timeout>:
{
   12348:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1234a:	f7ff fff5 	bl	12338 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1234e:	7b43      	ldrb	r3, [r0, #13]
   12350:	f023 0302 	bic.w	r3, r3, #2
   12354:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   12356:	2300      	movs	r3, #0
   12358:	6083      	str	r3, [r0, #8]
}
   1235a:	bd08      	pop	{r3, pc}

0001235c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1235c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   12360:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   12364:	4283      	cmp	r3, r0
		return b2 - b1;
   12366:	bf14      	ite	ne
   12368:	1ac0      	subne	r0, r0, r3
	return 0;
   1236a:	2000      	moveq	r0, #0
}
   1236c:	4770      	bx	lr

0001236e <z_unpend_thread_no_timeout>:
{
   1236e:	b508      	push	{r3, lr}
	__asm__ volatile(
   12370:	f04f 0340 	mov.w	r3, #64	; 0x40
   12374:	f3ef 8111 	mrs	r1, BASEPRI
   12378:	f383 8811 	msr	BASEPRI, r3
   1237c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   12380:	f7ff ffe2 	bl	12348 <unpend_thread_no_timeout>
	__asm__ volatile(
   12384:	f381 8811 	msr	BASEPRI, r1
   12388:	f3bf 8f6f 	isb	sy
}
   1238c:	bd08      	pop	{r3, pc}

0001238e <z_unpend_thread>:
{
   1238e:	b510      	push	{r4, lr}
	__asm__ volatile(
   12390:	f04f 0340 	mov.w	r3, #64	; 0x40
   12394:	f3ef 8411 	mrs	r4, BASEPRI
   12398:	f383 8811 	msr	BASEPRI, r3
   1239c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   123a0:	f7ff ffd2 	bl	12348 <unpend_thread_no_timeout>
	__asm__ volatile(
   123a4:	f384 8811 	msr	BASEPRI, r4
   123a8:	f3bf 8f6f 	isb	sy
}
   123ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123b0:	3018      	adds	r0, #24
   123b2:	f000 b8d9 	b.w	12568 <z_abort_timeout>

000123b6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   123b6:	4603      	mov	r3, r0
   123b8:	b920      	cbnz	r0, 123c4 <z_reschedule_irqlock+0xe>
   123ba:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   123be:	b90a      	cbnz	r2, 123c4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   123c0:	f7f9 b94c 	b.w	b65c <arch_swap>
   123c4:	f383 8811 	msr	BASEPRI, r3
   123c8:	f3bf 8f6f 	isb	sy
}
   123cc:	4770      	bx	lr

000123ce <z_reschedule_unlocked>:
	__asm__ volatile(
   123ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   123d2:	f3ef 8011 	mrs	r0, BASEPRI
   123d6:	f383 8811 	msr	BASEPRI, r3
   123da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   123de:	f7ff bfea 	b.w	123b6 <z_reschedule_irqlock>

000123e2 <z_priq_dumb_best>:
{
   123e2:	4603      	mov	r3, r0
	return list->head == list;
   123e4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   123e6:	4283      	cmp	r3, r0
   123e8:	d003      	beq.n	123f2 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   123ea:	2800      	cmp	r0, #0
   123ec:	bf38      	it	cc
   123ee:	2000      	movcc	r0, #0
   123f0:	4770      	bx	lr
	struct k_thread *thread = NULL;
   123f2:	2000      	movs	r0, #0
}
   123f4:	4770      	bx	lr

000123f6 <add_to_waitq_locked>:
{
   123f6:	b538      	push	{r3, r4, r5, lr}
   123f8:	4604      	mov	r4, r0
   123fa:	460d      	mov	r5, r1
	unready_thread(thread);
   123fc:	f7fd fcf6 	bl	fdec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   12400:	7b63      	ldrb	r3, [r4, #13]
   12402:	f043 0302 	orr.w	r3, r3, #2
   12406:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   12408:	b1b5      	cbz	r5, 12438 <add_to_waitq_locked+0x42>
	return list->head == list;
   1240a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1240c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1240e:	429d      	cmp	r5, r3
   12410:	bf08      	it	eq
   12412:	2300      	moveq	r3, #0
   12414:	2b00      	cmp	r3, #0
   12416:	bf38      	it	cc
   12418:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1241a:	b19b      	cbz	r3, 12444 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   1241c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   12420:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   12424:	4291      	cmp	r1, r2
   12426:	d008      	beq.n	1243a <add_to_waitq_locked+0x44>
		return b2 - b1;
   12428:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1242a:	2a00      	cmp	r2, #0
   1242c:	dd05      	ble.n	1243a <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   1242e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12430:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   12434:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   12436:	605c      	str	r4, [r3, #4]
}
   12438:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1243a:	686a      	ldr	r2, [r5, #4]
   1243c:	4293      	cmp	r3, r2
   1243e:	d001      	beq.n	12444 <add_to_waitq_locked+0x4e>
   12440:	681b      	ldr	r3, [r3, #0]
   12442:	e7ea      	b.n	1241a <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   12444:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   12446:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1244a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1244c:	606c      	str	r4, [r5, #4]
   1244e:	e7f3      	b.n	12438 <add_to_waitq_locked+0x42>

00012450 <z_ready_thread>:
{
   12450:	b510      	push	{r4, lr}
   12452:	f04f 0340 	mov.w	r3, #64	; 0x40
   12456:	f3ef 8411 	mrs	r4, BASEPRI
   1245a:	f383 8811 	msr	BASEPRI, r3
   1245e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   12462:	f7fd fde3 	bl	1002c <ready_thread>
	__asm__ volatile(
   12466:	f384 8811 	msr	BASEPRI, r4
   1246a:	f3bf 8f6f 	isb	sy
}
   1246e:	bd10      	pop	{r4, pc}

00012470 <z_thread_timeout>:
{
   12470:	b510      	push	{r4, lr}
   12472:	4601      	mov	r1, r0
	__asm__ volatile(
   12474:	f04f 0340 	mov.w	r3, #64	; 0x40
   12478:	f3ef 8411 	mrs	r4, BASEPRI
   1247c:	f383 8811 	msr	BASEPRI, r3
   12480:	f3bf 8f6f 	isb	sy
		if (!killed) {
   12484:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   12488:	f013 0f28 	tst.w	r3, #40	; 0x28
   1248c:	d10d      	bne.n	124aa <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1248e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   12492:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   12494:	b10b      	cbz	r3, 1249a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   12496:	f7ff ff57 	bl	12348 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1249a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1249e:	f023 0314 	bic.w	r3, r3, #20
   124a2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   124a6:	f7fd fdc1 	bl	1002c <ready_thread>
	__asm__ volatile(
   124aa:	f384 8811 	msr	BASEPRI, r4
   124ae:	f3bf 8f6f 	isb	sy
}
   124b2:	bd10      	pop	{r4, pc}

000124b4 <z_unpend1_no_timeout>:
{
   124b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   124b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   124ba:	f3ef 8411 	mrs	r4, BASEPRI
   124be:	f383 8811 	msr	BASEPRI, r3
   124c2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   124c6:	f7ff ff8c 	bl	123e2 <z_priq_dumb_best>
		if (thread != NULL) {
   124ca:	4601      	mov	r1, r0
   124cc:	b108      	cbz	r0, 124d2 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   124ce:	f7ff ff3b 	bl	12348 <unpend_thread_no_timeout>
	__asm__ volatile(
   124d2:	f384 8811 	msr	BASEPRI, r4
   124d6:	f3bf 8f6f 	isb	sy
}
   124da:	4608      	mov	r0, r1
   124dc:	bd10      	pop	{r4, pc}

000124de <z_unpend_first_thread>:
{
   124de:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   124e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   124e4:	f3ef 8511 	mrs	r5, BASEPRI
   124e8:	f383 8811 	msr	BASEPRI, r3
   124ec:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   124f0:	f7ff ff77 	bl	123e2 <z_priq_dumb_best>
		if (thread != NULL) {
   124f4:	4604      	mov	r4, r0
   124f6:	b120      	cbz	r0, 12502 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   124f8:	f7ff ff26 	bl	12348 <unpend_thread_no_timeout>
   124fc:	3018      	adds	r0, #24
   124fe:	f000 f833 	bl	12568 <z_abort_timeout>
	__asm__ volatile(
   12502:	f385 8811 	msr	BASEPRI, r5
   12506:	f3bf 8f6f 	isb	sy
}
   1250a:	4620      	mov	r0, r4
   1250c:	bd38      	pop	{r3, r4, r5, pc}

0001250e <z_unpend_all>:
{
   1250e:	b538      	push	{r3, r4, r5, lr}
   12510:	4605      	mov	r5, r0
	int need_sched = 0;
   12512:	2000      	movs	r0, #0
	return list->head == list;
   12514:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12516:	42a5      	cmp	r5, r4
   12518:	d000      	beq.n	1251c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1251a:	b904      	cbnz	r4, 1251e <z_unpend_all+0x10>
}
   1251c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1251e:	4620      	mov	r0, r4
   12520:	f7ff ff35 	bl	1238e <z_unpend_thread>
		z_ready_thread(thread);
   12524:	4620      	mov	r0, r4
   12526:	f7ff ff93 	bl	12450 <z_ready_thread>
		need_sched = 1;
   1252a:	2001      	movs	r0, #1
   1252c:	e7f2      	b.n	12514 <z_unpend_all+0x6>

0001252e <z_sched_wake>:
{
   1252e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12530:	f04f 0340 	mov.w	r3, #64	; 0x40
   12534:	f3ef 8511 	mrs	r5, BASEPRI
   12538:	f383 8811 	msr	BASEPRI, r3
   1253c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   12540:	f7ff ff4f 	bl	123e2 <z_priq_dumb_best>
		if (thread != NULL) {
   12544:	4604      	mov	r4, r0
   12546:	b150      	cbz	r0, 1255e <z_sched_wake+0x30>
   12548:	67c1      	str	r1, [r0, #124]	; 0x7c
   1254a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1254c:	f7ff fefc 	bl	12348 <unpend_thread_no_timeout>
   12550:	3018      	adds	r0, #24
   12552:	f000 f809 	bl	12568 <z_abort_timeout>
			ready_thread(thread);
   12556:	4620      	mov	r0, r4
   12558:	f7fd fd68 	bl	1002c <ready_thread>
			ret = true;
   1255c:	2001      	movs	r0, #1
	__asm__ volatile(
   1255e:	f385 8811 	msr	BASEPRI, r5
   12562:	f3bf 8f6f 	isb	sy
}
   12566:	bd38      	pop	{r3, r4, r5, pc}

00012568 <z_abort_timeout>:
{
   12568:	b510      	push	{r4, lr}
	__asm__ volatile(
   1256a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1256e:	f3ef 8411 	mrs	r4, BASEPRI
   12572:	f382 8811 	msr	BASEPRI, r2
   12576:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1257a:	6803      	ldr	r3, [r0, #0]
   1257c:	b13b      	cbz	r3, 1258e <z_abort_timeout+0x26>
			remove_timeout(to);
   1257e:	f7fd ff49 	bl	10414 <remove_timeout>
			ret = 0;
   12582:	2000      	movs	r0, #0
	__asm__ volatile(
   12584:	f384 8811 	msr	BASEPRI, r4
   12588:	f3bf 8f6f 	isb	sy
}
   1258c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1258e:	f06f 0015 	mvn.w	r0, #21
   12592:	e7f7      	b.n	12584 <z_abort_timeout+0x1c>

00012594 <z_get_next_timeout_expiry>:
{
   12594:	b510      	push	{r4, lr}
	__asm__ volatile(
   12596:	f04f 0340 	mov.w	r3, #64	; 0x40
   1259a:	f3ef 8411 	mrs	r4, BASEPRI
   1259e:	f383 8811 	msr	BASEPRI, r3
   125a2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   125a6:	f7fd ff4f 	bl	10448 <next_timeout>
	__asm__ volatile(
   125aa:	f384 8811 	msr	BASEPRI, r4
   125ae:	f3bf 8f6f 	isb	sy
}
   125b2:	bd10      	pop	{r4, pc}

000125b4 <z_set_timeout_expiry>:
{
   125b4:	b570      	push	{r4, r5, r6, lr}
   125b6:	4604      	mov	r4, r0
   125b8:	460d      	mov	r5, r1
	__asm__ volatile(
   125ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   125be:	f3ef 8611 	mrs	r6, BASEPRI
   125c2:	f383 8811 	msr	BASEPRI, r3
   125c6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   125ca:	f7fd ff3d 	bl	10448 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   125ce:	2801      	cmp	r0, #1
   125d0:	dd05      	ble.n	125de <z_set_timeout_expiry+0x2a>
   125d2:	42a0      	cmp	r0, r4
   125d4:	db03      	blt.n	125de <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   125d6:	4629      	mov	r1, r5
   125d8:	4620      	mov	r0, r4
   125da:	f7f8 ffe5 	bl	b5a8 <sys_clock_set_timeout>
	__asm__ volatile(
   125de:	f386 8811 	msr	BASEPRI, r6
   125e2:	f3bf 8f6f 	isb	sy
}
   125e6:	bd70      	pop	{r4, r5, r6, pc}

000125e8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   125e8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   125ea:	f7fe f84d 	bl	10688 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   125ee:	bd08      	pop	{r3, pc}

000125f0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   125f0:	b108      	cbz	r0, 125f6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   125f2:	f7f9 bd93 	b.w	c11c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   125f6:	4770      	bx	lr

000125f8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   125f8:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   125fa:	1c4b      	adds	r3, r1, #1
   125fc:	bf08      	it	eq
   125fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   12602:	4604      	mov	r4, r0
   12604:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   12606:	d013      	beq.n	12630 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12608:	ea54 0105 	orrs.w	r1, r4, r5
   1260c:	d103      	bne.n	12616 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1260e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   12612:	f7fe b839 	b.w	10688 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   12616:	f06f 0101 	mvn.w	r1, #1
   1261a:	1a0a      	subs	r2, r1, r0
   1261c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12620:	eb61 0305 	sbc.w	r3, r1, r5
   12624:	2a00      	cmp	r2, #0
   12626:	f173 0100 	sbcs.w	r1, r3, #0
   1262a:	db02      	blt.n	12632 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   1262c:	4610      	mov	r0, r2
   1262e:	4619      	mov	r1, r3
}
   12630:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   12632:	f7fe f829 	bl	10688 <sys_clock_tick_get>
   12636:	2c01      	cmp	r4, #1
   12638:	f175 0300 	sbcs.w	r3, r5, #0
   1263c:	bfbc      	itt	lt
   1263e:	2401      	movlt	r4, #1
   12640:	2500      	movlt	r5, #0
   12642:	1820      	adds	r0, r4, r0
   12644:	eb45 0101 	adc.w	r1, r5, r1
   12648:	e7f2      	b.n	12630 <sys_clock_timeout_end_calc+0x38>

0001264a <k_timer_init>:
	timer->status = 0U;
   1264a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1264c:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   12650:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   12654:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   12658:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1265c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1265e:	6343      	str	r3, [r0, #52]	; 0x34
}
   12660:	4770      	bx	lr

00012662 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   12662:	b510      	push	{r4, lr}
   12664:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   12666:	f7ff ff7f 	bl	12568 <z_abort_timeout>

	if (inactive) {
   1266a:	b9b0      	cbnz	r0, 1269a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1266c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1266e:	b10b      	cbz	r3, 12674 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   12670:	4620      	mov	r0, r4
   12672:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   12674:	f104 0018 	add.w	r0, r4, #24
   12678:	f7ff ff1c 	bl	124b4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1267c:	b168      	cbz	r0, 1269a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1267e:	f7ff fee7 	bl	12450 <z_ready_thread>
	__asm__ volatile(
   12682:	f04f 0340 	mov.w	r3, #64	; 0x40
   12686:	f3ef 8011 	mrs	r0, BASEPRI
   1268a:	f383 8811 	msr	BASEPRI, r3
   1268e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   12692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   12696:	f7ff be8e 	b.w	123b6 <z_reschedule_irqlock>
   1269a:	bd10      	pop	{r4, pc}

0001269c <clear_event_registrations>:
	while (num_events--) {
   1269c:	2314      	movs	r3, #20
{
   1269e:	b570      	push	{r4, r5, r6, lr}
   126a0:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   126a4:	2400      	movs	r4, #0
   126a6:	2601      	movs	r6, #1
	while (num_events--) {
   126a8:	4281      	cmp	r1, r0
   126aa:	d100      	bne.n	126ae <clear_event_registrations+0x12>
}
   126ac:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   126ae:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   126b2:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   126b6:	f003 031f 	and.w	r3, r3, #31
   126ba:	2b08      	cmp	r3, #8
   126bc:	d80d      	bhi.n	126da <clear_event_registrations+0x3e>
   126be:	fa06 f303 	lsl.w	r3, r6, r3
   126c2:	f413 7f8b 	tst.w	r3, #278	; 0x116
   126c6:	d008      	beq.n	126da <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   126c8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   126cc:	b12b      	cbz	r3, 126da <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   126ce:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   126d2:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   126d4:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   126d6:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   126da:	f382 8811 	msr	BASEPRI, r2
   126de:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   126e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   126e6:	f3ef 8211 	mrs	r2, BASEPRI
   126ea:	f383 8811 	msr	BASEPRI, r3
   126ee:	f3bf 8f6f 	isb	sy
   126f2:	3914      	subs	r1, #20
   126f4:	e7d8      	b.n	126a8 <clear_event_registrations+0xc>

000126f6 <add_event>:
{
   126f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126f8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   126fa:	e9d0 2300 	ldrd	r2, r3, [r0]
   126fe:	4290      	cmp	r0, r2
   12700:	4604      	mov	r4, r0
   12702:	460d      	mov	r5, r1
   12704:	d105      	bne.n	12712 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   12706:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   12708:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1270c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1270e:	6065      	str	r5, [r4, #4]
}
   12710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   12712:	2b00      	cmp	r3, #0
   12714:	d0f7      	beq.n	12706 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   12716:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   12718:	b100      	cbz	r0, 1271c <add_event+0x26>
   1271a:	3860      	subs	r0, #96	; 0x60
   1271c:	b107      	cbz	r7, 12720 <add_event+0x2a>
   1271e:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   12720:	4639      	mov	r1, r7
   12722:	f7ff fe1b 	bl	1235c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   12726:	2800      	cmp	r0, #0
   12728:	dced      	bgt.n	12706 <add_event+0x10>
	return list->head == list;
   1272a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1272c:	42b4      	cmp	r4, r6
   1272e:	d0ea      	beq.n	12706 <add_event+0x10>
   12730:	2e00      	cmp	r6, #0
   12732:	bf38      	it	cc
   12734:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   12736:	2e00      	cmp	r6, #0
   12738:	d0e5      	beq.n	12706 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1273a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1273c:	b101      	cbz	r1, 12740 <add_event+0x4a>
   1273e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   12740:	4638      	mov	r0, r7
   12742:	f7ff fe0b 	bl	1235c <z_sched_prio_cmp>
   12746:	2800      	cmp	r0, #0
   12748:	dd05      	ble.n	12756 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   1274a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1274c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   12750:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   12752:	6075      	str	r5, [r6, #4]
			return;
   12754:	e7dc      	b.n	12710 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   12756:	6863      	ldr	r3, [r4, #4]
   12758:	42b3      	cmp	r3, r6
   1275a:	d0d4      	beq.n	12706 <add_event+0x10>
   1275c:	6836      	ldr	r6, [r6, #0]
   1275e:	e7ea      	b.n	12736 <add_event+0x40>

00012760 <register_events>:
{
   12760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   12764:	2500      	movs	r5, #0
{
   12766:	468b      	mov	fp, r1
   12768:	4614      	mov	r4, r2
   1276a:	461f      	mov	r7, r3
   1276c:	4682      	mov	sl, r0
	int events_registered = 0;
   1276e:	462e      	mov	r6, r5
	event->poller = NULL;
   12770:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   12772:	455d      	cmp	r5, fp
   12774:	db02      	blt.n	1277c <register_events+0x1c>
}
   12776:	4630      	mov	r0, r6
   12778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1277c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12780:	f3ef 8911 	mrs	r9, BASEPRI
   12784:	f383 8811 	msr	BASEPRI, r3
   12788:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1278c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   12790:	f003 031f 	and.w	r3, r3, #31
   12794:	3b01      	subs	r3, #1
   12796:	2b07      	cmp	r3, #7
   12798:	d80f      	bhi.n	127ba <register_events+0x5a>
   1279a:	e8df f003 	tbb	[pc, r3]
   1279e:	041e      	.short	0x041e
   127a0:	0e0e0a0e 	.word	0x0e0e0a0e
   127a4:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   127a6:	f8da 3010 	ldr.w	r3, [sl, #16]
   127aa:	689b      	ldr	r3, [r3, #8]
   127ac:	b12b      	cbz	r3, 127ba <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   127ae:	2302      	movs	r3, #2
   127b0:	e020      	b.n	127f4 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   127b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   127b6:	681b      	ldr	r3, [r3, #0]
   127b8:	bb8b      	cbnz	r3, 1281e <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   127ba:	bb47      	cbnz	r7, 1280e <register_events+0xae>
   127bc:	7823      	ldrb	r3, [r4, #0]
   127be:	b333      	cbz	r3, 1280e <register_events+0xae>
	switch (event->type) {
   127c0:	f89a 300d 	ldrb.w	r3, [sl, #13]
   127c4:	f003 031f 	and.w	r3, r3, #31
   127c8:	3b01      	subs	r3, #1
   127ca:	2b07      	cmp	r3, #7
   127cc:	d830      	bhi.n	12830 <register_events+0xd0>
   127ce:	e8df f003 	tbb	[pc, r3]
   127d2:	2833      	.short	0x2833
   127d4:	2f2f282f 	.word	0x2f2f282f
   127d8:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   127da:	f8da 3010 	ldr.w	r3, [sl, #16]
   127de:	689b      	ldr	r3, [r3, #8]
   127e0:	2b00      	cmp	r3, #0
   127e2:	d0ea      	beq.n	127ba <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   127e4:	2301      	movs	r3, #1
   127e6:	e005      	b.n	127f4 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   127e8:	f8da 3010 	ldr.w	r3, [sl, #16]
   127ec:	6a1b      	ldr	r3, [r3, #32]
   127ee:	2b00      	cmp	r3, #0
   127f0:	d0e3      	beq.n	127ba <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   127f2:	2310      	movs	r3, #16
	event->state |= state;
   127f4:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   127f8:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   127fc:	f3c2 3145 	ubfx	r1, r2, #13, #6
   12800:	430b      	orrs	r3, r1
   12802:	f363 3252 	bfi	r2, r3, #13, #6
   12806:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1280a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1280e:	f389 8811 	msr	BASEPRI, r9
   12812:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   12816:	3501      	adds	r5, #1
   12818:	f10a 0a14 	add.w	sl, sl, #20
   1281c:	e7a9      	b.n	12772 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1281e:	2304      	movs	r3, #4
   12820:	e7e8      	b.n	127f4 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   12822:	f8da 0010 	ldr.w	r0, [sl, #16]
   12826:	4622      	mov	r2, r4
   12828:	4651      	mov	r1, sl
   1282a:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1282c:	f7ff ff63 	bl	126f6 <add_event>
	event->poller = poller;
   12830:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   12834:	3601      	adds	r6, #1
   12836:	e7ea      	b.n	1280e <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   12838:	f8da 0010 	ldr.w	r0, [sl, #16]
   1283c:	4622      	mov	r2, r4
   1283e:	4651      	mov	r1, sl
   12840:	e7f4      	b.n	1282c <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   12842:	f8da 0010 	ldr.w	r0, [sl, #16]
   12846:	4622      	mov	r2, r4
   12848:	4651      	mov	r1, sl
   1284a:	3024      	adds	r0, #36	; 0x24
   1284c:	e7ee      	b.n	1282c <register_events+0xcc>

0001284e <signal_poll_event>:
{
   1284e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   12852:	6884      	ldr	r4, [r0, #8]
{
   12854:	4605      	mov	r5, r0
   12856:	460e      	mov	r6, r1
	if (poller != NULL) {
   12858:	b144      	cbz	r4, 1286c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1285a:	7863      	ldrb	r3, [r4, #1]
   1285c:	2b01      	cmp	r3, #1
   1285e:	d138      	bne.n	128d2 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   12860:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   12864:	f013 0302 	ands.w	r3, r3, #2
   12868:	d10a      	bne.n	12880 <signal_poll_event+0x32>
		poller->is_polling = false;
   1286a:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1286c:	68eb      	ldr	r3, [r5, #12]
   1286e:	f3c3 3145 	ubfx	r1, r3, #13, #6
   12872:	430e      	orrs	r6, r1
	event->poller = NULL;
   12874:	2000      	movs	r0, #0
	event->state |= state;
   12876:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1287a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1287c:	60eb      	str	r3, [r5, #12]
	return retcode;
   1287e:	e00d      	b.n	1289c <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   12880:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   12884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12888:	f06f 0001 	mvn.w	r0, #1
   1288c:	428b      	cmp	r3, r1
   1288e:	bf08      	it	eq
   12890:	4282      	cmpeq	r2, r0
   12892:	d105      	bne.n	128a0 <signal_poll_event+0x52>
		poller->is_polling = false;
   12894:	2300      	movs	r3, #0
   12896:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   12898:	f06f 000a 	mvn.w	r0, #10
}
   1289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   128a0:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   128a4:	4640      	mov	r0, r8
   128a6:	f7ff fd72 	bl	1238e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   128aa:	2e08      	cmp	r6, #8
   128ac:	bf0c      	ite	eq
   128ae:	f06f 0303 	mvneq.w	r3, #3
   128b2:	2300      	movne	r3, #0
   128b4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   128b6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   128ba:	06db      	lsls	r3, r3, #27
   128bc:	d102      	bne.n	128c4 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   128be:	f854 7c48 	ldr.w	r7, [r4, #-72]
   128c2:	b10f      	cbz	r7, 128c8 <signal_poll_event+0x7a>
		poller->is_polling = false;
   128c4:	2300      	movs	r3, #0
   128c6:	e7d0      	b.n	1286a <signal_poll_event+0x1c>
	z_ready_thread(thread);
   128c8:	4640      	mov	r0, r8
   128ca:	f7ff fdc1 	bl	12450 <z_ready_thread>
		poller->is_polling = false;
   128ce:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   128d0:	e7cc      	b.n	1286c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   128d2:	2b02      	cmp	r3, #2
   128d4:	d1f6      	bne.n	128c4 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   128d6:	7823      	ldrb	r3, [r4, #0]
   128d8:	2b00      	cmp	r3, #0
   128da:	d0c7      	beq.n	1286c <signal_poll_event+0x1e>
   128dc:	f854 7c04 	ldr.w	r7, [r4, #-4]
   128e0:	2f00      	cmp	r7, #0
   128e2:	d0f4      	beq.n	128ce <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   128e4:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   128e8:	f1a4 0914 	sub.w	r9, r4, #20
   128ec:	f104 0014 	add.w	r0, r4, #20
   128f0:	f7ff fe3a 	bl	12568 <z_abort_timeout>
		twork->poll_result = 0;
   128f4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   128f8:	4649      	mov	r1, r9
   128fa:	4638      	mov	r0, r7
   128fc:	f7ff fcff 	bl	122fe <k_work_submit_to_queue>
		poller->is_polling = false;
   12900:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   12904:	e7b2      	b.n	1286c <signal_poll_event+0x1e>

00012906 <z_handle_obj_poll_events>:
{
   12906:	4603      	mov	r3, r0
	return list->head == list;
   12908:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1290a:	4283      	cmp	r3, r0
   1290c:	d008      	beq.n	12920 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1290e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   12912:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12914:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12916:	2300      	movs	r3, #0
	node->prev = NULL;
   12918:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1291c:	f7ff bf97 	b.w	1284e <signal_poll_event>
}
   12920:	4770      	bx	lr

00012922 <k_free>:
	if (ptr != NULL) {
   12922:	b120      	cbz	r0, 1292e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   12924:	1f01      	subs	r1, r0, #4
   12926:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1292a:	f7ff bba6 	b.w	1207a <k_heap_free>
}
   1292e:	4770      	bx	lr

00012930 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12930:	f7fc ba7a 	b.w	ee28 <SystemInit>
